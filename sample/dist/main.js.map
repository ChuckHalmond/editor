{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/Editor.ts","webpack://main/./src/commands/Command.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/panels/Panel.ts","webpack://main/./src/elements/containers/panels/PanelGroup.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/observers/ReactiveNodesObserver.ts","webpack://main/./src/views/View.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { bindShadowRoot };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        observedAttributes?: string[],\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    observedAttributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, observedAttributes, options } = args;\r\n\r\n        if (observedAttributes) {\r\n            Object.defineProperty(elementCtor.prototype.constructor, 'observedAttributes', {\r\n                get: () => {\r\n                    return observedAttributes;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const { name,  type } = attr;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    let fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[EventName]) => void | [(event: HTMLElementEventMap[EventName]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    },\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n}\r\n\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<K>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init) {\r\n            const { props, attrs, children, listeners, styles } = init;\r\n            if (props) {\r\n                const keys = Object.keys(props) as (keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[];\r\n                keys.forEach((key) => {\r\n                    const value = props[key];\r\n                    if (typeof props[key] !== \"undefined\") {\r\n                        Object.assign(\r\n                            element, {\r\n                                [key]: value\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            if (attrs) {\r\n                Object.keys(attrs).forEach((attrName) => {\r\n                    const value = attrs[attrName];\r\n                    if (typeof value === \"boolean\") {\r\n                        if (value) {\r\n                            element.setAttribute(camelToTrain(attrName), \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attrName), value.toString());\r\n                    }\r\n                });\r\n            }\r\n            if (children) {\r\n                if (typeof children === \"function\") {\r\n                    element.replaceChildren(...children(element));\r\n                }\r\n                else {\r\n                    element.replaceChildren(...children);\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach((entry) => {\r\n                    if (Array.isArray(entry[1])) {\r\n                        element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(entry[0], entry[1] as EventListener);\r\n                    }\r\n                });\r\n            }\r\n            if (styles) {\r\n                Object.keys(styles).forEach((property) => {\r\n                    if (Array.isArray(styles[property])) {\r\n                        element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n                    }\r\n                    else {\r\n                        element.style.setProperty(property, styles[property] as string);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\ntype ReactiveParentNode = Node & {\r\n    _reactiveParentNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    return typeof (node as ReactiveNode)._reactiveNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    return typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (list: ListModel<Data>, node: N, react: (node: N, addedItems: Data[], removedItems: Data[], index: number) => void): N\r\nfunction ReactiveNode<Model extends ObjectModel, N extends Node>\r\n    (object: Model, node: N, react: <K extends Exclude<keyof Model, keyof EventDispatcher>>(node: N, property: K, oldValue: Model[K], newValue: Model[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (objectOrList: ObjectModel | ListModel<Data>, node: N, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, addedItems: Data[], removedItems: Data[], index: number) => void)): N {\r\n        if (\"items\" in objectOrList) {\r\n            const listener = (event: ListModelChangeEvent) => {\r\n                react(node,  event.data.addedItems as any, event.data.removedItems as any, event.data.index as any);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"listmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"listmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            react(node, objectOrList.items as any, [], 0 as any);\r\n        }\r\n        else {\r\n            const listener = (event: ObjectModelChangeEvent) => {\r\n                react(node, event.data.property as any, event.data.oldValue, event.data.newValue);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"objectmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"objectmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            const keys = Object.keys(objectOrList) as (keyof Data)[];\r\n            keys.forEach((key) => {\r\n                react(node, key as any, void 0 as any, (objectOrList as any)[key] as any);\r\n            });\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string, placeholder?: Node): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        const listener = (event: ListModelChangeEvent) => {\r\n            if (event.data.addedItems.length === list.items.length) {\r\n                parent.textContent = \"\";\r\n            }\r\n            if (event.data.removedItems.length) {\r\n                for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                    if (parent.childNodes.length > event.data.index) {\r\n                        parent.childNodes.item(event.data.index).remove();\r\n                    }\r\n                }\r\n            }\r\n            if (event.data.addedItems.length) {\r\n                let addedElements = event.data.addedItems.map(item => map(item));\r\n                if (event.data.index >= list.items.length - event.data.addedItems.length) {\r\n                    parent.append(...addedElements);\r\n                }\r\n                else {\r\n                    parent.childNodes.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                }\r\n            }\r\n            if (list.items.length === 0 && placeholder) {\r\n                parent.append(placeholder);\r\n            }\r\n        };\r\n        Object.assign(\r\n            parent, {\r\n                _reactiveParentNodeAttributes: {\r\n                    addReactListener: () => {\r\n                        list.addEventListener(\"listmodelchange\", listener);\r\n                    },\r\n                    removeReactListener: () => {\r\n                        list.removeEventListener(\"listmodelchange\", listener);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        const children = placeholder && list.items.length === 0 ? [placeholder] : list.items.map(map);\r\n        return children;\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLEMenuItemElement) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"e_radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem && foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\",\r\n    observedAttributes: [\"expanded\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEMenuItemElement || elem instanceof HTMLEMenuItemGroupElement\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem instanceof HTMLEMenuItemElement) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (parentMenu instanceof HTMLEMenuElement) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (parentMenu instanceof HTMLEMenuElement) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem instanceof HTMLEMenuItemElement && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        let thisRect = this.getBoundingClientRect();\r\n                        let thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item instanceof HTMLEMenuItemElement && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (item instanceof HTMLEMenuItemGroupElement) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemElement };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent,\r\n        \"e_trigger\": Event,\r\n        \"e_radiochangerequest\": Event,\r\n        \"e_change\": Event,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\",\r\n    observedAttributes: [\"label\", \"checked\", \"type\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (menuElem instanceof HTMLEMenuElement) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;","export { EventBase };\r\nexport { Event };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface Event<D extends object = object> {\r\n    readonly type: string;\r\n    readonly data: D;\r\n}\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<D extends object>(type: string, data: D): Event<D>;\r\n}\r\n\r\nclass EventBase<D extends object = object> implements Event<D> {\r\n    readonly type: string;\r\n    readonly data: D;\r\n\r\n    constructor(type: string, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {}\r\n}\r\n\r\ninterface EventDispatcher {\r\n    addEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): (event: EventsMap[K]) => void;\r\n    addEventListener(event: string, handler: (event: Event) => void, once?: boolean): (event: Event) => void;\r\n    removeEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): number;\r\n    removeEventListener(event: string, handler: (event: Event) => void, once?: boolean): number;\r\n    dispatchEvent<K extends keyof EventsMap>(event: EventsMap[K]): void;\r\n    dispatchEvent(event: Event): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher;\r\n    new(): EventDispatcher;\r\n}\r\n\r\nclass EventDispatcherBase implements EventDispatcher {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): (event: EventsMap[K]) => void;\r\n    public addEventListener(event: string, handler: (event: Event) => void, once?: boolean): (event: Event) => void {\r\n        let listeners = this._listeners.get(event);\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event, [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): number;\r\n    public removeEventListener(event: string, handler: (event: Event) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends keyof EventsMap>(event: EventsMap[K]): void;\r\n    public dispatchEvent(event: Event): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { GenerateObjectModelAccessors };\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ObjectModelBase };\r\nexport { ListModelChangeEvent };\r\nexport { ListModel };\r\nexport { ListModelBase };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {\r\n        \"objectmodelchange\": ObjectModelChangeEvent;\r\n    }\r\n}\r\n\r\ninterface ObjectModelConstructor {\r\n    readonly prototype: ObjectModel;\r\n    new(): ObjectModel;\r\n}\r\n\r\ninterface ObjectModel extends EventDispatcher {}\r\n\r\nclass ObjectModelBase extends EventDispatcher implements ObjectModel {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\ninterface GenerateObjectModelAccessorsDecorator {\r\n    (props: string[]): <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => C\r\n}\r\n\r\nconst GenerateObjectModelAccessors: GenerateObjectModelAccessorsDecorator = function(props: string[]) {\r\n    return <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => {\r\n        const properties = props.reduce(\r\n            (obj, prop) => {\r\n                return {\r\n                    ...obj,\r\n                    [prop]: {\r\n                        enumerable: true,\r\n                        get: function(this: ObjectModelBase) {\r\n                            return (this as {[key: string]: any})[`_${prop}`];\r\n                        },\r\n                        set: function(this: ObjectModelBase, value: any) {\r\n                            const oldValue = (this as {[key: string]: any})[`_${prop}`];\r\n                            (this as {[key: string]: any})[`_${prop}`] = value;\r\n                            this.dispatchEvent(new Event(\"objectmodelchange\", {property: prop, oldValue: oldValue, newValue: value}));\r\n                        }\r\n                    }\r\n                }\r\n            }, {}\r\n        );\r\n        Object.defineProperties(ctor.prototype, properties);\r\n        return ctor;\r\n    }\r\n}\r\n\r\nvar ObjectModel: ObjectModelConstructor = ObjectModelBase;\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        addedItems: any[];\r\n        removedItems: any[];\r\n        index: number;\r\n    };\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {\r\n        \"listmodelchange\": ListModelChangeEvent;\r\n    }\r\n}\r\n\r\ninterface ListModelConstructor {\r\n    readonly prototype: ListModel;\r\n    new(): ListModel;\r\n    new<Item>(items?: Item[]): ListModel;\r\n}\r\n\r\ninterface ListModel<Item = {}> extends EventDispatcher {\r\n    readonly items: ReadonlyArray<Item>;\r\n    set(index: number, item: Item): void;\r\n    insert(index: number, ...items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    pop(): Item | undefined;\r\n    remove(item: Item): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ListModelBase<Item> extends EventDispatcher implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor(items: Item[] = []) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public set(index: number, item: Item): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            this._items[index] = item;\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [item], removedItems: [], index: index}));\r\n        }\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const newLength = this._items.push(...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: newLength - items.length}));\r\n        return newLength;\r\n    }\r\n\r\n    public pop(): Item | undefined {\r\n        const item = this._items.pop();\r\n        if (item) {\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: this._items.length}));\r\n        }\r\n        return item;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index > this._items.length) {\r\n            index = this._items.length;\r\n        }\r\n        else if (index < 0) {\r\n            if (index < -this._items.length) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = this._items.length + index;\r\n            }\r\n        }\r\n        this._items.splice(index, 0, ...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: index}));\r\n    }\r\n\r\n    public remove(item: Item): void {\r\n        const itemIndex = this._items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this._items.splice(itemIndex, 1);\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: itemIndex}));\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        const removedItems = this._items.slice();\r\n        this._items.splice(0, this._items.length);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: removedItems, index: 0}));\r\n    }\r\n}\r\n\r\nvar ListModel: ListModelConstructor = ListModelBase;","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { HTMLEMenuItemElement } from \"./elements/containers/menus/MenuItem\";\r\nimport { HotKey } from \"./Input\";\r\nimport { ObjectModel, ObjectModelBase } from \"./models/Model\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    addHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    registerCommand(name: string, command: Command): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    setup(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface EditorState {}\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    readonly state: ObjectModel;\r\n    private _commands: Map<string, Command>;\r\n    private _hotkeys: Map<HotKey, (() => void)[]>;\r\n\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._hotkeys = new Map();\r\n        this.state = new ObjectModelBase();\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    const execs = this._hotkeys.get(hotkey);\r\n                    if (execs) {\r\n                        execs.forEach((exec) => {\r\n                            exec();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        document.body.addEventListener(\"e_hotkeychange\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        document.body.addEventListener(\"e_trigger\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public registerCommand(name: string, command: Command) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command) {\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n            }\r\n            else {\r\n                command.exec(args);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n        };\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            const index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mod: KeyModifier): string {\r\n    switch (mod) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mod;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nfunction testKeyModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLEMenuItemElement) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\",\r\n    observedAttributes: [\"icon\", \"label\", \"checked\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (menuElem instanceof HTMLEMenuElement) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel',\r\n    observedAttributes: ['state']\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #label,\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #header {\r\n                    padding: 0;\r\n                }\r\n\r\n                :host([state='closed']) #arrow {\r\n                    display: inherit;\r\n                }\r\n                \r\n                :host([state='opened']) #label,\r\n                :host([state='opened']) #content {\r\n                    display: inherit;\r\n                }\r\n\r\n                :host([state='opened']) #arrow {\r\n                    display: none;\r\n                }\r\n\r\n                #content {\r\n                    padding: var(--content-padding, inherit);\r\n                }\r\n\r\n                #header {\r\n                    color: var(--header-color, inherit);\r\n                    text-align: center;\r\n                    padding-top: 0;\r\n\r\n                    user-select: none;\r\n                }\r\n\r\n                #header:hover {\r\n                    --color: var(--header-hover-color, var(--header-color));\r\n                    color: var(--header-hover-color, var(--header-color));\r\n                    font-weight: var(--header-hover-font-weight);\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"header\">\r\n                    <span id=\"arrow\"></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n \r\n        const header = this.shadowRoot!.getElementById('header')!;\r\n\r\n        header.addEventListener(\r\n            'click', () => {\r\n                this.state = (this.state === 'opened') ? 'closed' : 'opened';\r\n            }\r\n        );\r\n    }\r\n    \r\n    public async render() {\r\n        const label = this.shadowRoot!.getElementById('label')!;\r\n        const arrow = this.shadowRoot!.getElementById('arrow')!;\r\n        \r\n        let rect = this.getBoundingClientRect();\r\n        const arr = (rect.left < window.innerWidth / 2) ? '>' : '<';\r\n        arrow.innerHTML = arr;\r\n        label.innerHTML = this.label || '';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.label = this.label || 'label';\r\n        this.state = this.state || 'opened';\r\n\r\n        this.render();\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelGroupElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel-group'\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelGroupElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    public static readonly observedAttributes = ['state'];\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"stylesheet\" href=\"css/theme.css\"/>\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #less {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='opened']) #more {\r\n                    display: none;\r\n                }\r\n\r\n                #toggler {\r\n                    display: flex;\r\n                }\r\n\r\n                #toggler:hover {\r\n                    font-weight: 500;\r\n                    color: var(--label-on-hover-color);\r\n                }\r\n\r\n                #label {\r\n                    flex: 1;\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"toggler\">\r\n                    <span id=\"arrow\"><!--<icon #less><icon #more>--></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        \r\n        this.state = this.state || 'closed';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        const toggler = this.shadowRoot!.querySelector<HTMLElement>('#toggler')!;\r\n        const arrow = this.shadowRoot!.querySelector<HTMLElement>('#arrow')!;\r\n        const label = this.shadowRoot!.querySelector<HTMLElement>('#label')!;\r\n\r\n        toggler.addEventListener(\r\n            'click', () => {\r\n                if (this.state === 'opened') {\r\n                    this.state = 'closed';\r\n                }\r\n                else if (this.state === 'closed') {\r\n                    this.state = 'opened';\r\n                }\r\n            }\r\n        );\r\n\r\n        label.innerHTML = this.label!;\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\n\r\ninterface HTMLEStatusItemElementConstructor {\r\n    readonly prototype: HTMLEStatusItemElement;\r\n    new(): HTMLEStatusItemElement;\r\n}\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemElement: HTMLEStatusItemElementConstructor = HTMLEStatusItemElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => item instanceof HTMLEStatusItemElement) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\",\r\n    observedAttributes: [\"active\", \"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    position: relative;\r\n                    \r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n            this.panel = panel;\r\n        }\r\n        if (this.panel)  {\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"active\":\r\n                    if (this.active) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                    }\r\n                    const panel = document.getElementById(this.controls);\r\n                    if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                        this.panel = panel;\r\n                    }\r\n                    if (this.panel)  {\r\n                        this.panel.hidden = !this.active;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { RegisterCustomHTMLElement, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    icon: string;\r\n    selected: boolean;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\",\r\n    observedAttributes: [\"icon\", \"label\", \"expanded\", \"indent\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public icon!: string;\r\n    public selected!: boolean;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                [part~=\"content\"]:hover,\r\n                :host([active]:not([selected])) [part~=\"content\"] {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([selected]) [part~=\"content\"] {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        const content = this.shadowRoot!.querySelector(\"[part=content]\")!;\r\n        content.addEventListener(\"click\", () => {\r\n            this.toggle();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"icon\":\r\n                    if (oldValue !== newValue) {\r\n                        const iconPart = this.shadowRoot?.querySelector<HTMLElement>(\"[part~=icon]\");\r\n                        if (iconPart) {\r\n                            iconPart.dataset.value = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return this.parent instanceof HTMLETreeItemElement ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (this.parent instanceof HTMLETreeItemElement) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n        this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly selectedItem: HTMLETreeItemElement | null;\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n    reset(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n    private _selectedItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n        this._selectedItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public get selectedItem(): HTMLETreeItemElement | null {\r\n        return this._selectedItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.parent instanceof HTMLETreeItemElement) {\r\n                                this.focusItem(this.activeItem.parent);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.focusItem(this.activeItem.items[0]);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.previousVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.nextVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1].deepestVisibleChildItem());\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.selectItem(this.activeItem);\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    this.reset();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const target = event.target as Element;\r\n            if (target instanceof HTMLETreeItemElement) {\r\n                this.selectItem(target);\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            const target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            const closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                this.focusItem(closestItem);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as Element;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n                if (this.activeItem) {\r\n                    this.activeItem.active = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public focusItem(item: HTMLETreeItemElement) {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        this._activeItem = item;\r\n        this._activeItem.active = true;\r\n        item.focus();\r\n    }\r\n\r\n    public selectItem(item: HTMLETreeItemElement) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        this._selectedItem.selected = true;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../../Snippets\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    type: string;\r\n    dragovered: boolean;\r\n\r\n    getReference(): HTMLEDraggableElement;\r\n    readonly referee: HTMLEDraggableElement | null;\r\n    readonly references: HTMLEDraggableElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"data\", type: \"json\"}\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    public type!: string;\r\n\r\n    private _referee: HTMLEDraggableElementBase | null;\r\n    public readonly references: HTMLEDraggableElementBase[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n        this.references = [];\r\n        this._referee = null;\r\n    }\r\n\r\n    public get referee(): HTMLEDraggableElementBase | null {\r\n        return this._referee;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    public disconnectedCallback() {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n                const refereeId = this.referee.id;\r\n                if (refereeId) {\r\n                    this.referee.references.slice(thisRefIndex).forEach((reference, index) => {\r\n                        forAllSubtreeElements(reference, (element) => {\r\n                            if (element.id) {\r\n                                element.id = `${element.id}-${thisRefIndex + index + 1}`;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getReference(): HTMLEDraggableElementBase {\r\n        const reference = this.cloneNode(true) as HTMLEDraggableElementBase;\r\n        const referenceIdx = this.references.push(reference);\r\n        reference._referee = this;\r\n        if (this.id) {\r\n            forAllSubtreeElements(reference, (element) => {\r\n                if (element.id) {\r\n                    element.id = `${element.id}-${referenceIdx}`;\r\n                }\r\n            });\r\n        }\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { RegisterCustomHTMLElement, bindShadowRoot, GenerateAttributeAccessors } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public disabled!: boolean;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(*:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                let thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLElement {\r\n    selectedDraggables: HTMLEDraggableElement[]\r\n    draggables: HTMLEDraggableElement[];\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    type: string;\r\n    multiple: boolean;\r\n    disabled: boolean;\r\n    placeholder: string;\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\",\r\n    observedAttributes: [\"placeholder\", \"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n    {name: \"input\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLElement implements HTMLEDropzoneElement {\r\n    \r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public input!: string;\r\n    public multiple!: boolean;\r\n    public disabled!: boolean;\r\n    public name!: string;\r\n    public type!: string;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n    public value: any;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*html*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    border: 1px dashed gray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    opacity: 0.3;\r\n                }\r\n\r\n                :host(:empty) [part~=\"container\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(*:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n\r\n                :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n                :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part=\"appendarea\"] {\r\n                    display: block;\r\n                    margin: 2px;\r\n                    border-radius: 4px;\r\n                    border: 1px dotted black;\r\n                }\r\n\r\n                :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                    border-color: transparent;\r\n                }\r\n                \r\n                [part=\"placeholder\"] {\r\n                    display: inline-block;\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n            `\r\n        );\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = false;\r\n                });\r\n            });\r\n        }\r\n\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    let dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    let dragzone = document.getElementById(dragzoneId) as HTMLEDragzoneElement;\r\n                    if (dragzone) {\r\n                        let selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_open\": Event,\r\n        \"e_close\": Event,\r\n        \"e_cancel\": Event,\r\n        \"e_confirm\": Event,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dialog\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n    public type!: EDialogElementType;\r\n\r\n    private _closeButton: HTMLButtonElement;\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    padding: 6px;\r\n                    background-color: white;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                button {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                [part~=\"actions\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"header\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"button\"]:not(:first-child) {\r\n                    margin-left: 4px;\r\n                }\r\n\r\n                :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                    display: none !important;\r\n                }\r\n            </style>\r\n            <div part=\"header\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button close-button\">x</button>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"body\">\r\n                <slot></slot>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"actions\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button cancel-button\">Cancel</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button confirm-button\">Confirm</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button ok-button\">OK</button>\r\n            </div>\r\n        `);\r\n\r\n        this._closeButton = this.shadowRoot!.querySelector(\"[part~='close-button']\")!;\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~='cancel-button']\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~='confirm-button']\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~='ok-button']\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._closeButton || target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_open\", {bubbles: true}));\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_close\", {bubbles: true}));\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","export { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null;\r\n        _control?: string;\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (element instanceof HTMLInputElement) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                const floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n        }\r\n        else if (element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null,\r\n                _control: element.type\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        const namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            const stateValue = state[name].value;\r\n            if (element instanceof HTMLInputElement) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ntype EHeightSashDirection = \"top\" | \"bottom\";\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EHeightSashDirection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EHeightSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    height: 4px;\r\n                    margin-top: -2px;\r\n                    margin-bottom: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let newHeight = Math.trunc(height + ((this.growdir === \"top\") ? -1 : 1) * event.movementY);\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ntype EWidthSashDirection = \"left\" | \"right\";\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EWidthSashDirection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EWidthSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    width: 4px;\r\n                    margin-left: -2px;\r\n                    margin-right: -2px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let newWidth = Math.trunc(width + ((this.growdir === \"left\") ? -1 : 1) * event.movementX);\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", () => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin, isElement } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../elements/Snippets\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    private _observer: MutationObserver;\r\n    private _mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n        this._mixins = mixins.slice();\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = this._mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this._mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ReactiveNodesObserver };\r\n\r\ninterface ReactiveNodesObserverConstructor {\r\n    readonly prototype: ReactiveNodesObserver;\r\n    new(): ReactiveNodesObserver;\r\n}\r\n\r\ninterface ReactiveNodesObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass ReactiveNodesObserverBase implements ReactiveNodesObserver {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor() {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar ReactiveNodesObserver: ReactiveNodesObserverConstructor = ReactiveNodesObserverBase;","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ViewRoot };\r\nexport { isViewRoot };\r\nexport { View };\r\nexport { ViewBase };\r\nexport { ReactiveView };\r\nexport { ReactiveViewBase };\r\n\r\ntype ViewRoot = Element & {\r\n    _view: View;\r\n}\r\n\r\ninterface View<M extends object = object> {\r\n    root: ViewRoot;\r\n    readonly model: M;\r\n    render(): Element;\r\n}\r\n\r\nfunction isViewRoot(root: Node): root is ViewRoot {\r\n    return typeof (root as ViewRoot)._view !== \"undefined\";\r\n}\r\n\r\nabstract class ViewBase<M extends object = object> implements View {\r\n    public readonly root: ViewRoot;\r\n    public readonly model: M;\r\n\r\n    constructor(model: M) {\r\n        this.model = model;\r\n        this.root = Object.assign(\r\n            this.render(), {\r\n                _view: this\r\n            }\r\n        );\r\n    }\r\n    \r\n    public abstract render(): Element;\r\n}\r\n\r\ninterface ReactiveView<M extends object = object> extends View<M> {\r\n    disconnect(): void;\r\n}\r\n\r\nabstract class ReactiveViewBase<M extends object = object> extends ViewBase<M> implements ReactiveView<M> {\r\n    readonly observer: MutationObserver;\r\n    \r\n    constructor(model: M) {\r\n        super(model);\r\n        this.observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n            mutations.forEach((record: MutationRecord) => {\r\n                Array.from(record.removedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.removeReactiveListeners(node);\r\n                    }\r\n                });\r\n                Array.from(record.addedNodes).map((node) => {\r\n                    if (!isViewRoot(node)) {\r\n                        this.addReactiveListeners(node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        this.observer.observe(this.root, {\r\n            subtree: true,\r\n            childList: true\r\n        });\r\n        this.addReactiveListeners(this.root);\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.observer.disconnect();\r\n        this.removeReactiveListeners(this.root);\r\n    }\r\n\r\n    public addReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.addReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public removeReactiveListeners(node: Node): void {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                if (!isViewRoot(childNode)) {\r\n                    this.removeReactiveListeners(childNode);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","import * as editor from \"../index\";\r\nimport { Element, GenerateObjectModelAccessors, HTMLEDraggableElement, ListModel, ObjectModelBase, ReactiveChildNodes, ReactiveNode, ReactiveNodesObserver, RegisterCustomHTMLElement, TextNode } from \"../index\";\r\n\r\neditor;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"my-drag\"\r\n})\r\nclass MyDraggable extends HTMLEDraggableElement {\r\n    constructor(str: string) {\r\n        super();\r\n        console.log(str);\r\n    }\r\n}\r\n\r\nconst observer = new ReactiveNodesObserver();\r\nobserver.observe(document.body);\r\n\r\nexport async function main() {\r\n    console.log(new MyDraggable(\"salut!\"));\r\n    setTimeout(() => {\r\n        document.getElementById(\"dragzone\")!.append(document.createElement(\"my-drag\"));\r\n    }, 100);\r\n    console.log(\"Main loaded!\");\r\n\r\n    @GenerateObjectModelAccessors([\"lol\"])\r\n    class MyModel extends ObjectModelBase {\r\n        public lol: string = \"holoo\";\r\n    }\r\n\r\n    class MyListModel extends ListModel {\r\n        \r\n    }\r\n\r\n    const model = new MyModel();\r\n    const listModel = new MyListModel();\r\n\r\n    listModel.push(\"lol\");\r\n\r\n\r\n    (window as any)[\"model\"] = model;\r\n    \r\n    (window as any)[\"listModel\"] = listModel;\r\n    document.body.append(\r\n        ReactiveNode(\r\n            model,\r\n            TextNode(model.lol),\r\n            (node, prop, oldValue, newValue) => {\r\n                if (prop === \"lol\") {\r\n                    node.textContent = newValue;\r\n                }\r\n            }\r\n        )\r\n    )\r\n\r\n    const parent = Element(\"div\", {\r\n        children: [\r\n            Element(\"ul\", {\r\n                children: ReactiveChildNodes(\r\n                    listModel,\r\n                    item => Element(\"li\", {\r\n                        props: {\r\n                            textContent: item as string\r\n                        }\r\n                    })\r\n                )\r\n            }),\r\n            Element(\"button\", {\r\n                props: {\r\n                    textContent: \"Print date!\"\r\n                },\r\n                listeners: {\r\n                    click: () => {\r\n                        listModel.push(new Date().toLocaleString());\r\n                    }\r\n                }\r\n            })\r\n        ]\r\n    });\r\n    document.body.append(parent);\r\n\r\n    /*(window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }*/\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","forAllSubtreeElements","element","func","index","children","length","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","idx","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","titlize","str","charAt","toUpperCase","substr","toLowerCase","snakeToCamel","map","join","camelToSnake","replace","trainToCamel","camelToTrain","RegisterCustomHTMLElement","args","elementCtor","name","observedAttributes","options","constructor","customElements","define","GenerateAttributeAccessors","attributes","attr","type","this","getAttribute","set","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","bindShadowRoot","templateContent","root","attachShadow","mode","template","document","createElement","innerHTML","appendChild","content","cloneNode","Fragment","nodes","fragment","createDocumentFragment","append","TextNode","text","createTextNode","Element","tagName","init","attrs","listeners","styles","keys","assign","attrName","toString","replaceChildren","entries","entry","addEventListener","property","style","setProperty","isParentNode","node","isElement","nodeType","ELEMENT_NODE","isReactiveNode","_reactiveNodeAttributes","addReactListener","removeReactListener","isReactiveParentNode","_reactiveParentNodeAttributes","ReactiveNode","objectOrList","react","listener","event","data","addedItems","removedItems","removeEventListener","items","oldValue","newValue","ReactiveChildNodes","list","placeholder","textContent","i","remove","addedElements","before","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrValue","RegExp","test","AttributeMutationMixinBase","attributeName","attributeType","attributeValue","HTMLEMenuItemGroupElementBase","HTMLElement","super","_activeIndex","parentMenu","activeIndex","connectedCallback","tabIndex","slot","shadowRoot","querySelector","assignedElements","filter","HTMLEMenuItemElement","group","target","trigger","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","findIndex","contains","newTarget","relatedTarget","checked","checkedRadio","findItem","stopPropagation","activeItem","childMenu","attributeChangedCallback","label","predicate","subitems","foundItem","HTMLEMenuItemGroupElement","HTMLEMenuElementBase","parentItem","elem","expanded","parentGroup","HTMLEMenuElement","body","clientWidth","overflowing","HTMLEMenuItemElementBase","command","_hotkey","hotkey","dispatchEvent","CustomEvent","bubbles","detail","oldHotKey","newHotKey","hotkeyPart","menuSlot","menuElem","labelPart","inputPart","disabled","EventBase","Event","EventDispatcherBase","_listeners","Map","handler","once","newListener","find","push","count","pop","delete","EventDispatcher","ObjectModelBase","GenerateObjectModelAccessors","ctor","properties","reduce","defineProperties","ObjectModel","ListModelBase","_items","newLength","insert","splice","itemIndex","clear","slice","ListModel","EditorBase","_commands","_hotkeys","state","setup","from","execs","exec","removeHotkeyExec","bind","addHotkeyExec","executeCommand","commandArgs","registerCommand","opts","undo","hotkeys","Key","KeyModifier","MouseButton","Editor","displayKeyModifier","mod","Control","testKeyModifier","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","toggle","capture","alert","HTMLEMenuButtonElement","PanelElement","getElementById","arrow","arr","window","innerWidth","render","PanelGroupElement","toggler","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","HTMLEStatusItemElement","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","controls","hidden","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","HTMLETabListElement","HTMLETreeItemElementBase","indent","HTMLETreeItemElement","iconPart","dataset","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","subitem","HTMLETreeElementBase","_activeItem","_selectedItem","focusItem","closestItem","closest","selected","HTMLEDraggableElementBase","references","_referee","draggable","disconnectedCallback","referee","thisRefIndex","id","reference","getReference","referenceIdx","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","effectAllowed","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","HTMLEDropzoneElement","HTMLEDialogElementBase","_closeButton","_cancelButton","_confirmButton","_okButton","cancel","confirm","open","close","HTMLEDialogElement","getFormState","form","elements","HTMLInputElement","_control","floatValue","HTMLSelectElement","HTMLTextAreaElement","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","height","getPropertyValue","newHeight","trunc","growdir","movementY","getComputedStyle","setPointerCapture","pointerId","releasePointerCapture","HTMLEHeightSashElement","HTMLEImportElementBase","async","outerHTML","fetch","then","response","ok","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","HTMLEWidthSashElementBase","width","newWidth","movementX","AttributeMixinsObserver","mixins","_observer","MutationObserver","callback","_mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","targetElement","observe","childList","attributeFilter","disconnect","ReactiveNodesObserver","childNode","isViewRoot","_view","ViewBase","model","ReactiveViewBase","observer","mutations","record","removeReactiveListeners","addReactiveListeners","MyDraggable","log","main","setTimeout","MyModel","lol","listModel","click","Date","toLocaleString"],"sourceRoot":""}