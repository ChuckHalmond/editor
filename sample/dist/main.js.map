{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/misc/Separator.ts","webpack://main/./src/elements/misc/ToolTip.ts","webpack://main/./src/elements/misc/Handle.ts","webpack://main/./src/elements/misc/HeightSash.ts","webpack://main/./src/elements/misc/Import.ts","webpack://main/./src/elements/misc/Loader.ts","webpack://main/./src/elements/misc/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                children(element);\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): void;\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        const children = list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n        parent.replaceChildren(...children);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n\r\n            :host(:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"])) ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            }\r\n            \r\n            :host(:is([type=\"menu\"], [type=\"submenu\"]):not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) [part=\"icon\"] {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            :host([type=\"menu\"]) [part=\"icon\"],\r\n            :host(:not([type=\"submenu\"])) [part=\"arrow\"] {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:is([type=\"checkbox\"], [type=\"radio\"])[checked]) {\r\n                --icon-color: black;\r\n                --icon-image: url(\"/assets/done_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            :host([type=\"submenu\"]) {\r\n                --arrow-color: black;\r\n                --arrow-image: url(\"/assets/arrow_right_FILL0_wght400_GRAD0_opsz48.svg\");\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"],\r\n            [part=\"arrow\"] {\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"icon\"],\r\n            [part=\"label\"] {\r\n                padding: 2px;\r\n            }\r\n            \r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                overflow: hidden;\r\n                margin-right: 4px;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                flex: auto;\r\n                line-height: 18px;\r\n                margin-left: 8px;\r\n                margin-right: 8px;\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])[checked]) [part=\"icon\"] {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:is(:not([type]), [type=\"button\"], [type=\"radio\"], [type=\"checkbox\"])) [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::after {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                -webkit-mask-image: var(--arrow-image, none);\r\n                mask-image: var(--arrow-image, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n\r\n            :host(:hover):host-context(e-menubar:focus),\r\n            :host(:hover):host-context(e-menubar:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemRight - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom  - menuHeight - closestMenuTop :\r\n                        itemTop - closestMenuTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            e-gridrow[hidden] {\r\n                display: none;\r\n            }\r\n            \r\n            e-gridcell[type=\"gridcell\"] {\r\n                max-width: 0;\r\n            \r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"] {\r\n                width: 120px;\r\n            }\r\n            \r\n            .gridcell-label,\r\n            .gridheader-label {\r\n                padding-left: 4px;\r\n            }\r\n            \r\n            .gridcell-content {\r\n                overflow: clip;\r\n            }\r\n            \r\n            .gridheader-content {\r\n                display: flex;\r\n            }\r\n            \r\n            .gridheader-label {\r\n                flex: 1 1 0;\r\n                overflow: clip;\r\n                text-overflow: ellipsis;\r\n                white-space: nowrap;\r\n            }\r\n            \r\n            e-treeitem::part(arrow) {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n            \r\n            .gridheader-sort-indicator::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--sortorder-indicator-color, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"]:not([data-sortorder]) .gridheader-sort-indicator::before {\r\n                background-color: unset;\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-ascending, none);\r\n                mask-image: var(--sortorder-indicator-ascending, none);\r\n            }\r\n            \r\n            e-gridcell[type=\"columnheader\"][data-sortorder=\"-1\"] .gridheader-sort-indicator::before {\r\n                -webkit-mask-image: var(--sortorder-indicator-descending, none);\r\n                mask-image: var(--sortorder-indicator-descending, none);\r\n            }\r\n            \r\n            e-gridhead e-wsash:not(:hover) {\r\n                flex: 0 0 auto;\r\n                width: 2px;\r\n                margin-right: 1px;\r\n                margin-left: 1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            }),\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-sort-indicator\"\r\n                                }\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const {sortorder, filters} = column;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\",\r\n                                            checked: sortorder === 1\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\",\r\n                                            checked: sortorder === -1\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: filters.map(filter => {\r\n                                    const {name} = filter;\r\n                                    return element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter),\r\n                                            label: name\r\n                                        },\r\n                                        children: name\r\n                                    })\r\n                                }),\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            const {checked, label} = targetItem;\r\n                                            const filter = filters.find(filter => filter.name === label);\r\n                                            if (filter) {\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderContent = (<HTMLElement>target).matches(\"e-gridcell[type=columnheader] :scope:not(e-wsash)\");\r\n        if (targetIsHeaderContent) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            .offscreen {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                transform: translateY(-100%);\r\n                display: block;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            .dragimage {\r\n                white-space: nowrap;\r\n                margin: 1px;\r\n                display: inline-block;\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n                border-radius: 3px; \r\n                padding: 2px 4px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#dragImages = new WeakMap();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    #getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null  {\r\n        return this.model.getItemByUri(this.#getTreeItemElementUri(element));\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>this.treeItem(item_i)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                this.treeItem(activeItem) :\r\n                null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.#getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.#getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-cell;\r\n                text-align: left;\r\n            }\r\n            \r\n            :host([type=\"columnheader\"]:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([type=\"columnheader\"][active]) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n\r\n            :host(:focus-visible):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is(:not([selectby]), [selectby=\"cell\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n    cells(): HTMLEGridCellElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\"e-gridcell\"));\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row;\r\n            }\r\n            \r\n            :host(:hover):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]):host-context(e-grid:focus-within:is([selectby=\"row\"])) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]):host-context(e-grid:is([selectby=\"row\"])) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedCells.forEach((cell_i, i) => {\r\n            cell_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = previousRow.cells();\r\n                return previousRowCells[\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = closestRow.cells();\r\n            const cellIndex = closestRowCells.indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = nextRow.cells();\r\n                return nextRowCells[\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                ];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    cells(): HTMLEGridCellElement[];\r\n    rows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    cells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridCellElement>(\r\n            \"e-gridcell\"\r\n        ));\r\n    }\r\n\r\n    rows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEGridRowElement>(\r\n            \"e-gridrow\"\r\n        ));\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: table-row-group;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n            \r\n            [part=\"label\"] {\r\n                font-weight: bold;\r\n            }\r\n            \r\n            :host([label]) [part=\"label\"] {\r\n                padding-bottom: 6px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: column;\r\n            \r\n                padding: 3px;\r\n                background-color: white;\r\n                width: max-content;\r\n                box-sizing: border-box;\r\n            \r\n                -webkit-box-shadow: var(--menu-box-shadow);\r\n                box-shadow: var(--menu-box-shadow);\r\n            }\r\n            \r\n            :host([contextual]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n            \r\n                transition-property: opacity;\r\n                transition-duration: 0.2s;\r\n                opacity: 0;\r\n            }\r\n            \r\n            :host([contextual]:focus-within) {\r\n                opacity: 1;\r\n            }\r\n        `;\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n                width: max-content;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.blur();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                min-width: 18px;\r\n                min-height: 18px;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus-within:not(:focus)) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host(:hover:not(:focus-within)) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                color: lightgray;\r\n            }\r\n            \r\n            ::slotted([slot=\"menu\"]) {\r\n                z-index: 1;\r\n                position: absolute;\r\n                color: initial;\r\n            }\r\n            \r\n            :host(:not([expanded])) ::slotted([slot=\"menu\"]) {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"▾\";\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                cursor: pointer;\r\n                line-height: 22px;\r\n            }\r\n        \r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([pressed]) {\r\n                background-color: var(--activated-item-color);\r\n            }\r\n            \r\n            :host(:not([iconed])) [part=\"icon\"] {\r\n                display: none;\r\n            }\r\n\r\n            [part=\"icon\"] {\r\n                flex: none;\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                padding: 2px;\r\n                overflow: hidden;\r\n            }\r\n            \r\n            [part=\"icon\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n                filter: var(--icon-filter, none);\r\n            }\r\n            \r\n            :host(:focus-within):host-context(e-toolbar:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([type=\"menubutton\"]) ::slotted(e-menubutton):focus,\r\n            :host([type=\"select\"]) ::slotted(e-select):focus {\r\n                outline: none;\r\n                outline-offset: none;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                width: max-content;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                flex-direction: row;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel[id='${controls}']`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                padding: 4px;\r\n                border: 1px solid var(--section-border-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: white;\r\n                border-bottom-color: transparent;\r\n                border-bottom-width: 0;\r\n            }\r\n            \r\n            :host(:not([selected])) {\r\n                background-color: whitesmoke;\r\n            }\r\n\r\n            :host(:not(:first-child)) {\r\n                border-left: none;\r\n            }\r\n            \r\n            :host(:focus-visible):host-context(e-tablist:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                border-bottom: 1px solid var(--section-border-color);\r\n            }\r\n\r\n            ::slotted(e-tab) {\r\n                transform: translateY(1px);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                padding: 4px;\r\n                border: 1px solid var(--section-border-color);\r\n                border-top: none;\r\n            }\r\n            \r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                user-select: none;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host([active]:focus-visible) {\r\n                outline: none;\r\n            }\r\n            \r\n            :host([active]:is(:focus, :not(:focus-within))):host-context(e-tree:focus-within) [part=\"content\"] {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus) [part=\"content\"] {\r\n                background-color: var(--focus-background-color);\r\n            }\r\n            \r\n            [part=\"content\"]:hover {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([selected]) [part=\"content\"] {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                line-height: 22px;\r\n                padding-left: calc(var(--level) * var(--indent-width, 12px));\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) ::slotted([slot=\"group\"]),\r\n            :host(:not([expanded])) ::slotted([slot=\"group\"]) {\r\n                display: none;\r\n            }\r\n            \r\n            :host(:not([type=\"parent\"])) [part=\"arrow\"]::before {\r\n                visibility: hidden;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px 4px 1px 1px;\r\n            }\r\n            \r\n            [part=\"arrow\"]::before {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin: 1px;\r\n                content: \"\";\r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--arrow-color, none);\r\n                filter: var(--arrow-filter, none);\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-collapsed, none);\r\n                mask-image: var(--arrow-icon-collapsed, none);\r\n            }\r\n            \r\n            :host([expanded]) [part=\"arrow\"]::before {\r\n                -webkit-mask-image: var(--arrow-icon-expanded, none);\r\n                mask-image: var(--arrow-icon-expanded, none);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                line-height: 22px;\r\n            }\r\n            \r\n            :host([droptarget]) {\r\n                background-color: var(--droptarget-item-color);\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host([active]) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                background-color: var(--focus-background-color);\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly dropTargetItem: HTMLEListItemElement | null;\r\n    name: string;\r\n    droptarget: boolean;\r\n    items(): HTMLEListItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[droptarget]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n            \r\n            :host(:focus) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n        `;\r\n    }\r\n\r\n    items(): HTMLEListItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEListItemElement>(\r\n            \":is(:scope, :scope > e-listitemgroup) > e-listitem\"\r\n        ));\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabIndex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabIndex === null ? 0 : parseInt(tabIndex);\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = this.items();\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: flex;\r\n                user-select: none;\r\n                white-space: nowrap;\r\n                line-height: 22px;\r\n                padding: 0 12px;\r\n            }\r\n            \r\n            :host(:hover) {\r\n                background-color: var(--hovered-item-color);\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                outline: 1px solid var(--focused-item-outline-color);\r\n                outline-offset: -1px;\r\n            }\r\n            \r\n            :host([selected]) {\r\n                background-color: var(--selected-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(::before) {\r\n                display: flex;\r\n                content: \"\";\r\n                width: 18px;\r\n                height: 18px;\r\n                margin-right: 6px;\r\n            \r\n                mask-size: 18px 18px;\r\n                -webkit-mask-size: 18px 18px;\r\n                background-color: var(--icon-color, none);\r\n                -webkit-mask-image: var(--icon-image, none);\r\n                mask-image: var(--icon-image, none);\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                user-select: none;\r\n                line-height: 22px;\r\n                border: 1px solid var(--item-border-color);\r\n            }\r\n            \r\n            :host(:focus-within) {\r\n                background-color: var(--focused-item-color);\r\n            }\r\n            \r\n            :host([disabled]) {\r\n                opacity: 0.38;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            [part=\"content\"] {\r\n                display: flex;\r\n                overflow: hidden;\r\n                padding: 0 4px;\r\n            }\r\n            \r\n            [part=\"content\"]::after {\r\n                display: inline-block;\r\n                text-align: center;\r\n                width: 18px;\r\n                height: 18px;\r\n                margin-left: 6px;\r\n                content: \"▾\";\r\n            }\r\n            \r\n            [part=\"value\"] {\r\n                margin-right: auto;\r\n                text-align: right;\r\n            }\r\n            \r\n            [part=\"box\"] {\r\n                z-index: 1;\r\n                position: fixed;\r\n            \r\n                display: block;\r\n                padding: 6px 0;\r\n                width: max-content;\r\n            \r\n                background-color: white;\r\n            \r\n                -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n            }\r\n            \r\n            :host(:not([expanded])) [part=\"box\"] {\r\n                opacity: 0;\r\n                pointer-events: none;\r\n            }\r\n        `;\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                margin: 10px 0 10px 27px;\r\n                border: none;\r\n                border-top: 1px solid lightgrey;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(): void;\r\n    hide(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 200;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n                position: fixed;\r\n                padding: 4px;\r\n                border-radius: 4px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                pointer-events: none;\r\n            }\r\n            \r\n            :host(:not([visible])) {\r\n                display: none;\r\n            }\r\n            \r\n            [part=\"arrow\"] {\r\n                display: inline-block;\r\n                position: fixed;\r\n                z-index: 1;\r\n                width: 6px;\r\n                height: 6px;\r\n                box-sizing: border-box;\r\n                background-color: white;\r\n                border: 1px solid black;\r\n                border-width: 0 1px 1px 0;\r\n            }\r\n            \r\n            :host(:is(:not([position]), [position=\"top\"])) [part=\"arrow\"] {\r\n                transform: translate(-3px, -3px) rotate(45deg);\r\n            }\r\n            \r\n            :host(:is([position=\"bottom\"])) [part=\"arrow\"] {\r\n                transform: translate(-3px, -3px) rotate(225deg);\r\n            }\r\n            \r\n            :host(:is([position=\"left\"])) [part=\"arrow\"] {\r\n                transform: translate(-3px, -3px) rotate(315deg);\r\n            }\r\n            \r\n            :host(:is([position=\"right\"])) [part=\"arrow\"] {\r\n                transform: translate(-3px, -3px) rotate(135deg);\r\n            }        \r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        this.visible = true;\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 0 },\r\n            { opacity: 1 }\r\n        ], {\r\n            id: \"show\",\r\n            duration: SHOW_DELAY_MS\r\n        })\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.#toggleAnimation = null;\r\n            },\r\n            () => {\r\n                this.visible = false;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n        this.#position();\r\n    }\r\n\r\n    hide(): void {\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 1 },\r\n            { opacity: 0 }\r\n        ], {\r\n            id: \"hide\",\r\n            duration: HIDE_DELAY_MS\r\n        });\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.visible = false;\r\n            },\r\n            () => {\r\n                this.visible = true;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", this.#targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", this.#targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", this.#targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", this.#targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        document.addEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        document.removeEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                            \r\n                width: 24px;\r\n                height: 12px;\r\n                \r\n                background-color: var(--selected-item-color);\r\n\r\n                -webkit-mask-image: url(\"/assets/dots.png\");\r\n                mask-image: url(\"/assets/dots.png\");\r\n\r\n                -webkit-mask-repeat: repeat;\r\n                mask-repeat: repeat;\r\n                cursor: move;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                height: 4px;\r\n                cursor: ns-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element, trimMultilineIndent } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"spinner\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar spinnerShadowTemplate: HTMLTemplateElement;\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"spinner\";\r\n\r\n    static {\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        spinnerShadowTemplate = element(\"template\");\r\n        spinnerShadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"spinner\"\r\n                }\r\n            })\r\n        );\r\n        style = /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            :host(:is(:not([type]), [type=\"bar\"])) {\r\n                border: 1px solid gainsboro;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n                width: 86px;\r\n                border-radius: 4px;\r\n            }\r\n        \r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n        \r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: 1s;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n        \r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 32px;\r\n                background-color: rgb(0, 128, 255);\r\n                animation-name: cursor;\r\n            }\r\n        \r\n            :host([type=\"spinner\"]) {\r\n                display: inline-block;\r\n                width: 20px;\r\n                height: 20px;\r\n            }\r\n        \r\n            [part=\"spinner\"] {\r\n                display: inline-block;\r\n                width: 18px;\r\n                height: 18px;\r\n            }\r\n        \r\n            [part=\"spinner\"]::after {\r\n                content: \" \";\r\n                display: block;\r\n                width: 12px;\r\n                height: 12px;\r\n                border-radius: 50%;\r\n                border-width: 4px;\r\n                border-style: solid;\r\n                border-color: transparent rgb(0, 128, 255);\r\n                animation: spin 1.2s linear infinite;\r\n            }\r\n        \r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        \r\n            @keyframes spin {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        shadowRoot.replaceChildren(\r\n            barShadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"spinner\": {\r\n                shadowRoot.replaceChildren(\r\n                    spinnerShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar style: string;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        style = /*css*/`\r\n            :host {\r\n                display: block;\r\n                background-color: var(--selected-item-color);\r\n                transition-property: opacity;\r\n                transition-delay: 0.2s;\r\n                transition-duration: 0.2s;\r\n                transition-timing-function: ease-out;\r\n                \r\n                width: 4px;\r\n                cursor: ew-resize;\r\n            }\r\n        `;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const adoptedStylesheet = new CSSStyleSheet();\r\n        adoptedStylesheet.replace(style);\r\n        shadowRoot.adoptedStyleSheets = [adoptedStylesheet];\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slotted(slot);\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slotted(slot);\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { HTMLEMenuElement } from \"../src/elements/containers/menus/Menu\";\r\nimport { EMenuItem } from \"../src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarElement } from \"../src/elements/containers/toolbars/ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"../src/elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../src/elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../src/elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveElement } from \"../src/elements/Element\";\r\nimport { ModelEvent, ModelProperty } from \"../src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"../src/views/GridView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"../src/views/TreeView\";\r\n\r\nimport * as editor from \"../index\";\r\n\r\neditor;\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n    \r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function main() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n    gridView.render();\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ]\r\n    });\r\n    \r\n    @CustomElement({\r\n        name: \"e-mytreeview\"\r\n    })\r\n    class MyTreeView extends TreeView {\r\n\r\n        override render(): void {\r\n            super.render();\r\n            const {shadowRoot, treeElement} = this;\r\n            shadowRoot.prepend(\r\n                element(\"link\", {\r\n                    attributes: {\r\n                        rel: \"stylesheet\",\r\n                        href: \"/sample/css/mytreeview.css\"\r\n                    }\r\n                })\r\n            );\r\n            treeElement!.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n            treeElement!.addEventListener(\"dblclick\", this.#handleDoubleClickEvent.bind(this));\r\n        }\r\n\r\n        override itemContentDelegate(item: MyTreeItemModel) {\r\n            return fragment(\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"label\"\r\n                        }\r\n                    }),\r\n                    [\"name\"],\r\n                    (label, property, oldValue, newValue) => {\r\n                        label.textContent = newValue;\r\n                    }\r\n                ),\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"badge\"\r\n                        }\r\n                    }),\r\n                    [\"childCount\", \"type\"],\r\n                    (badge, property, oldValue, newValue) => {\r\n                        switch (property) {\r\n                            case \"type\": {\r\n                                if (newValue === \"leaf\") {\r\n                                    badge.textContent = null;\r\n                                }\r\n                                else {\r\n                                    badge.textContent = `(${item.childCount})`;\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"childCount\": {\r\n                                badge.textContent = `(${newValue})`;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            );\r\n        }\r\n\r\n        override itemToolbarDelegate(this: TreeView, item: MyTreeItemModel): HTMLEToolBarElement {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"e-toolbar\", {\r\n                    children: [\r\n                        element(\"e-toolbaritem\", {\r\n                            attributes: {\r\n                                name: \"visibility\",\r\n                                type: \"checkbox\",\r\n                                label: \"Visibility\",\r\n                                iconed: true\r\n                            },\r\n                            listeners: {\r\n                                click: (event) => {\r\n                                    item.visibility ?\r\n                                        item.hide() :\r\n                                        item.show();\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                [\"visibility\"],\r\n                (toolbar, property, oldValue, newValue) => {\r\n                    switch (property) {\r\n                        case \"visibility\": {\r\n                            const visibilityItem = toolbar\r\n                                .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.label = label;\r\n                                visibilityItem.title = label;\r\n                                visibilityItem.pressed = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        override itemMenuDelegate(this: TreeView): HTMLEMenuElement {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement!;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        activeItem.visibility ?\r\n                                            selectedItemsList.hide() :\r\n                                            selectedItemsList.show();\r\n                                        activeItemElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-separator\"),\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                children: \"Delete\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        const {count} = selectedItemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItemsList.remove();\r\n                                        }\r\n                                        treeElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n        }\r\n\r\n        #handleKeyDownEvent(event: KeyboardEvent) {\r\n            const {currentTarget, key} = event;\r\n            const targetTree = <HTMLETreeElement>currentTarget;\r\n            const {activeItem} = targetTree;\r\n            if (activeItem) {\r\n                const activeItemModel = <MyTreeItemModel>this.treeItem(activeItem!)!;\r\n                switch (key) {\r\n                    case \"Delete\": {\r\n                        const selectedItems = this.selectedItems();\r\n                        const selectedItemsList = selectedItems.includes(activeItemModel) ?\r\n                            new TreeItemModelList(selectedItems) : new TreeItemModelList([activeItemModel]);\r\n                        const {count} = selectedItemsList;\r\n                        const doRemove = confirm(`Remove ${count} items?`);\r\n                        if (doRemove) {\r\n                            selectedItemsList.remove();\r\n                        }\r\n                        targetTree.focus();\r\n                        event.preventDefault();\r\n                        break;\r\n                    }\r\n                    case \"Enter\": {\r\n                        this.showEditItemDialog(activeItemModel);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        showEditItemDialog(item: MyTreeItemModel): void {\r\n            const {shadowRoot} = this;\r\n            const {visibility, name, type} = item;\r\n            const dialog = element(\"dialog\", {\r\n                children: [\r\n                    element(\"form\", {\r\n                        attributes: {\r\n                            method: \"dialog\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-tablist\", {\r\n                                children: [\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"properties\"\r\n                                        },\r\n                                        children: \"Properties\"\r\n                                    }),\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"other\"\r\n                                        },\r\n                                        children: \"Other\"\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"properties\"\r\n                                },\r\n                                children: [\r\n                                    element(\"fieldset\", {\r\n                                        children: [\r\n                                            element(\"legend\", {\r\n                                                children: \"Item information\"\r\n                                            }),\r\n                                            element(\"div\", {\r\n                                                attributes: {\r\n                                                    class: \"form-content\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"visibility\"\r\n                                                        },\r\n                                                        children: \"Visibility\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"visibility\",\r\n                                                            type: \"checkbox\",\r\n                                                            name: \"visibility\",\r\n                                                            checked: visibility\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"name\"\r\n                                                        },\r\n                                                        children: \"Name\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"name\",\r\n                                                            type: \"text\",\r\n                                                            name: \"name\",\r\n                                                            value: name\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"type\"\r\n                                                        },\r\n                                                        children: \"Type\"\r\n                                                    }),\r\n                                                    element(\"e-select\", {\r\n                                                        attributes: {\r\n                                                            id: \"type\",\r\n                                                            name: \"type\"\r\n                                                        },\r\n                                                        children: [\"parent\", \"leaf\"].map(\r\n                                                            type_i => element(\"e-option\", {\r\n                                                                attributes: {\r\n                                                                    label: type_i,\r\n                                                                    value: type_i,\r\n                                                                    selected: type === type_i\r\n                                                                }\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"other\"\r\n                                }\r\n                            }),\r\n                            element(\"footer\", {\r\n                                attributes: {\r\n                                    class: \"dialog-footer\"\r\n                                },\r\n                                children: [\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            type: \"submit\",\r\n                                            value: \"confirm\"\r\n                                        },\r\n                                        children: \"Confirm\"\r\n                                    }),\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            value: \"cancel\"\r\n                                        },\r\n                                        children: \"Cancel\"\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: (event) => {\r\n                        const {currentTarget} = event;\r\n                        const targetDialog = <HTMLDialogElement>currentTarget;\r\n                        if (targetDialog.returnValue === \"confirm\") {\r\n                            const form = targetDialog.querySelector(\"form\")!;\r\n                            const formData = new FormData(form);\r\n                            item.visibility = Boolean(formData.get(\"visibility\"));\r\n                            item.type = <\"leaf\" | \"parent\">String(formData.get(\"type\"));\r\n                            item.name = String(formData.get(\"name\"));\r\n                        }\r\n                        targetDialog.remove();\r\n                    }\r\n                }\r\n            });\r\n            shadowRoot.append(dialog);\r\n            dialog.showModal();\r\n        }\r\n\r\n        #handleDoubleClickEvent(event: MouseEvent): void {\r\n            const {target} = event;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const targetItemModel = <MyTreeItemModel>this.treeItem(targetItem);\r\n            if (targetItemModel) {\r\n                this.showEditItemDialog(targetItemModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    const treeView = new MyTreeView();\r\n    treeView.draggable = true;\r\n    treeView.setModel(treeModel);\r\n    treeView.render();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\",\r\n                        disabled: true\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\"\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Menuitem 1\"\r\n                                }),\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"submenu\"\r\n                                    },\r\n                                    children: [\r\n                                        \"Submenu 1\",\r\n                                        element(\"e-menu\", {\r\n                                            attributes: {\r\n                                                slot: \"menu\"\r\n                                            },\r\n                                            children: [\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 1\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(0)\r\n                                                }),\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(1)\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Checkbox\"\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        element(\"e-toolbar\", {\r\n            children: [\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"one\"\r\n                    },\r\n                    children: \"Item 1\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"three\",\r\n                    },\r\n                    children: \"Item 3\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"four\"\r\n                    },\r\n                    children: \"Item 4\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"two\"\r\n                    },\r\n                    children: \"Item 2\"\r\n                })\r\n            ]\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"one\",\r\n                position: \"bottom\"\r\n            },\r\n            children: \"First tooltip\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"two\",\r\n                position: \"top\"\r\n            },\r\n            children: \"Second tooltip!\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"three\",\r\n                position: \"right\",\r\n            },\r\n            children: \"Third tooltip ?\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"four\",\r\n                position: \"left\"\r\n            },\r\n            children: \"Fourth.\"\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        element(\"e-select\", {\r\n            children: [\"Hello\", \"World\", \"Innocents\"].map(\r\n                option => element(\"e-option\", {\r\n                    attributes: {\r\n                        value: option,\r\n                        label: option\r\n                    }\r\n                })\r\n            )\r\n        })\r\n    );\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","snakeToCamel","str","split","charAt","toUpperCase","substring","toLowerCase","join","camelToSnake","replace","trainToCamel","AttributeProperty","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","Stylesheet","text","stylesheet","CSSStyleSheet","replaceSync","trimMultilineIndent","newlineIndex","indentMatch","match","indent","replaceAll","trimEnd","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","QueryAllProperty","from","querySelectorAll","fragment","nodes","document","createDocumentFragment","textNode","createTextNode","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","replaceChildren","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","AttributeMutationMixinBase","attributeType","attach","detach","shadowTemplate","style","HTMLEMenuItemElementBase","HTMLElement","internals","attachInternals","role","attachShadow","mode","adoptedStylesheet","adoptedStyleSheets","content","cloneNode","connectedCallback","tabIndex","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","Event","bubbles","collapse","menu","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","click","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","render","shadow","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","selectby","multisectable","contextmenu","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","checked","targetItem","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","treeElement","draggable","treeItemElement","treeItem","dragstart","drop","focusin","focusout","itemContentDelegate","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","closestItem","parentElement","toolbar","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","beginSelection","selected","endSelection","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","Key","KeyModifier","MouseButton","TreeView","HotKey","mod1","mod2","mod","Control","altKey","ctrlKey","shiftKey","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridBodyElementBase","cells","assignedElements","HTMLEGridBodyElement","HTMLEGridRowElementBase","HTMLEGridRowElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEGridElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeCell","activeRow","head","selectedCells","selectedRows","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","currentNode","cellsWalker","lastChild","previousNode","nextNode","rowsWalker","root","closestRow","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","composedPath","targetCell","target_i","lastSelectedCell","targetRow","lastSelectedRow","stopPropagation","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridElement","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","parseInt","x","y","firstItem","walker","radio_i","nearestItem","error","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","intersectsWithMouse","containsRelatedTarget","EMenu","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","EMenuButton","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","HTMLEToolBarElement","HTMLETabElementBase","panel","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","tab","targetTab","tab_i","HTMLETabListElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETreeItemElementBase","labelPart","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","HTMLETreeElement","HTMLEListItemElementBase","badge","slotName","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","targetIndex","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","open","close","HTMLEDialogElement","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESelectElement","HTMLESeparatorElementBase","HTMLESeparatorElement","HTMLEToolTipElementBase","tooltip","htmlFor","show","visible","opacity","hide","oldTarget","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","HTMLEToolTipElement","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHandleElement","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","rootNode","requestAnimationFrame","HTMLEHeightSashElement","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","spinnerShadowTemplate","HTMLEImportElement","HTMLELoaderElementBase","HTMLELoaderElement","HTMLEWidthSashElementBase","setWidth","newWidth","HTMLEWidthSashElement","addedNodes","removedNodes","targetElement","mixin","attr","childIndex","child","AttributeMixinsObserver","mixins","takeRecords","attributeFilter","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeOldValue","widgets","Widget","separatorWidget","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuBarWidget","menubar","menuWidget","setContextual","setPosition","getContextual","menuitem_i","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","targetMenu","menuItemGroupWidget","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","treeWidget","tree","setMultiSelectable","getMultiSelectable","treeItemGroupWidget","listItemWidget","listWidget","listItemGroupWidget","toolbarItemWidget","setPressed","getPressed","toolbarWidget","setOrientation","getOrientation","targetToolbar","toolbarItemGroupWidget","widthSashWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","heightSashWidget","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","closestRowCells","targetGrid","multiselectable","gridBodyWidget","gridHeadWidget","gridHeaderWidget","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","optionGroupWidget","MyTreeItemModelList","display","result","console","log","MyTreeItemModel","childCount","visibility","main","gridView","Date","getFullYear","treeModel","MyTreeView","iconed","visibilityItem","activeItemElement","selectedItemsList","showEditItemDialog","dialog","method","for","targetDialog","returnValue","form","formData","FormData","showModal","activeItemModel","treeView"],"sourceRoot":""}