{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemCOllection.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemCollection.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Collection };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        return registerCustomElement(elementCtor, init);\r\n    }\r\n}\r\n\r\nconst registerCustomElement = function<C extends CustomElementConstructor>(\r\n    elementCtor: C,\r\n    init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): C {\r\n    const {name, options} = init;\r\n\r\n    if (!customElements.get(name)) {\r\n        customElements.define(\r\n            name,\r\n            elementCtor,\r\n            options\r\n        );\r\n    }\r\n\r\n    return elementCtor;\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>\r\n}[keyof T];\r\n\r\ntype ReadonlyKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\ninterface HTMLInitMap {\r\n    \"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLInitMap>(\r\n    tagName: K, init?: HTMLInitMap[K]): E;\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<E>): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLInit<HTMLElement>): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (options) {\r\n            const {is: isBuiltinElement} = options;\r\n            if (isBuiltinElement) {\r\n                element.setAttribute(\"is\", isBuiltinElement)\r\n            }\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = element;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            element.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.replaceChildren(...children(element));\r\n            }\r\n            else {\r\n                element.replaceChildren(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (tagName) {\r\n            case \"template\":\r\n                const {content} = init as HTMLTemplateInit;\r\n                if (content) {\r\n                    (<HTMLTemplateElement>element).content.append(\r\n                        ...Array.from(content)\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ntype ReactiveElement = Element & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach((reactiveElement_i) => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (element: E, property: K, oldValue: any, newValue: any) => void\r\n): E ;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values())\r\n                            .map(item_i => mapping(item_i));\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface Collection<E extends Element = Element> {\r\n    item(index: number): E | null;\r\n    namedItem(name: string): E | null;\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"div\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"arrow\"]\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.level = (() => {\r\n            let level = 0;\r\n            let {parentElement} = this;\r\n            while (parentElement instanceof HTMLETreeItemGroupElement) {\r\n                level++;\r\n                ({parentElement} = parentElement);\r\n                if (!(parentElement instanceof HTMLETreeItemElement)) {\r\n                    return level;\r\n                }\r\n                ({parentElement} = parentElement);\r\n            }\r\n            if (parentElement instanceof HTMLETreeElement) {\r\n                level++;\r\n            }\r\n            return level;\r\n        })();\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemCollection };\r\n\r\ninterface HTMLETreeItemCollectionConstructor {\r\n    readonly prototype: HTMLETreeItemCollection;\r\n    new(root: HTMLETreeElement): HTMLETreeItemCollection;\r\n}\r\n\r\ninterface HTMLETreeItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLETreeItemElement | null;\r\n    namedItem(name: string): HTMLETreeItemElement | null;\r\n    values(): IterableIterator<HTMLETreeItemElement>;\r\n}\r\n\r\nclass HTMLETreeItemCollectionBase implements HTMLETreeItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLETreeElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLETreeItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLETreeItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLETreeItemElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLETreeItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLETreeItemElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLETreeItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLETreeItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLETreeItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemCollection: HTMLETreeItemCollectionConstructor =  HTMLETreeItemCollectionBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemCollection } from \"./TreeItemCOllection\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLETreeItemCollection;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLETreeItemCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#dropTargetIndex) ?? null;\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #activeIndex: number;\r\n    #dropTargetIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = new HTMLETreeItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        item.active = true;\r\n        item.tabIndex = 0;\r\n        this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            expanded ?\r\n            walker.nextNode() :\r\n            walker.nextSibling() ??\r\n            (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        [part=\"offscreen\"] {\r\n                            position: absolute;\r\n                            left: 100%;\r\n                        }\r\n\r\n                        [part=\"dragimage\"] {\r\n                            white-space: nowrap;\r\n                            margin: 1px;\r\n                            display: inline-block;\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                            border-radius: 2px; \r\n                            padding: 2px 4px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                properties: {\r\n                    ariaHidden: \"true\"\r\n                },\r\n                part: [\"offscreen\"],\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            eventListeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return treeElement;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: true\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"c-label\"\r\n                            }\r\n                        })\r\n                    ].concat(\r\n                        element(\"e-toolbar\", {\r\n                            properties: {\r\n                                tabIndex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabIndex: -1\r\n                                    },\r\n                                    eventListeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ).concat(\r\n                        (item.type == \"parent\") ? [\r\n                            element(\"e-treeitemgroup\", {\r\n                                properties: {\r\n                                    slot: \"group\"\r\n                                },\r\n                                children: reactiveChildElements(item.childItems,\r\n                                    item => this.#renderTreeItem(item)\r\n                                )\r\n                            }),\r\n                            element(\"span\", {\r\n                                properties: {\r\n                                    className: \"c-badge\"\r\n                                }\r\n                            })\r\n                        ] : []\r\n                    )\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .c-label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .c-badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                part: [\"dragimage\"]\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    label: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    label: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    label: string;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplateIconPart: HTMLElement;\r\nvar shadowTemplateArrowPart: HTMLElement;\r\nvar shadowTemplateHotkeyPart: HTMLElement;\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplateIconPart = element(\"span\", {part: [\"icon\"]});\r\n        shadowTemplateArrowPart = element(\"span\", {part: [\"arrow\"]});\r\n        shadowTemplateHotkeyPart = element(\"span\", {part: [\"hotkey\"]});\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        shadowTemplateIconPart,\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        shadowTemplateArrowPart\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    @QueryProperty({selector: \"[part=arrow]\", withinShadowRoot: true})\r\n    readonly arrowPart!: Element | null;\r\n\r\n    @QueryProperty({selector: \"[part=content]\", withinShadowRoot: true})\r\n    readonly contentPart!: Element;\r\n\r\n    @QueryProperty({selector: \"[part=icon]\", withinShadowRoot: true})\r\n    readonly iconPart!: Element | null;\r\n\r\n    @QueryProperty({selector: \"[part=label]\", withinShadowRoot: true})\r\n    readonly labelPart!: Element;\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {labelPart} = this;\r\n                labelPart.textContent = newValue;   \r\n                break;\r\n            }\r\n            /*case \"type\": {\r\n                switch (newValue) {\r\n                    case \"submenu\": {\r\n                        const {contentPart, iconPart, arrowPart} = this;\r\n                        if (arrowPart == null) {\r\n                            contentPart.append(\r\n                                shadowTemplateArrowPart.cloneNode(true)\r\n                            );\r\n                        }\r\n                        if (iconPart !== null) {\r\n                            iconPart.remove();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"menu\": {\r\n                        const {iconPart} = this;\r\n                        if (iconPart !== null) {\r\n                            iconPart.remove();\r\n                        }\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        const {iconPart, arrowPart} = this;\r\n                        if (iconPart == null) {\r\n                            const {contentPart} = this;\r\n                            contentPart.prepend(\r\n                                shadowTemplateIconPart.cloneNode(true)\r\n                            );\r\n                        }\r\n                        if (arrowPart !== null) {\r\n                            arrowPart.remove();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }*/\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                label: label,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [menu] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            properties: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                properties: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemRadioList };\r\nexport { HTMLEMenuItemCollection };\r\n\r\ninterface HTMLEMenuItemCollectionConstructor {\r\n    readonly prototype: HTMLEMenuItemCollection;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement): HTMLEMenuItemCollection;\r\n}\r\n\r\ninterface HTMLEMenuItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEMenuItemElement | null;\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioListConstructor {\r\n    readonly prototype: HTMLEMenuItemRadioList;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string): HTMLEMenuItemRadioList;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\nclass HTMLEMenuItemCollectionBase implements HTMLEMenuItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEMenuElement | HTMLEMenuBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEMenuItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode?.type == \"radio\") {\r\n            return new HTMLEMenuItemRadioList(<HTMLEMenuElement | HTMLEMenuBarElement>root, name);\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEMenuItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEMenuItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEMenuItemRadioListBase? = class HTMLEMenuItemRadioListBase implements HTMLEMenuItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEMenuItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEMenuItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEMenuItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemCollection: HTMLEMenuItemCollectionConstructor =  HTMLEMenuItemCollectionBase;\r\nvar HTMLEMenuItemRadioList: HTMLEMenuItemRadioListConstructor = HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase!;\r\ndelete HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase;","\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection, HTMLEMenuItemRadioList } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    contextual: boolean;\r\n    contextX: number;\r\n    contextY: number;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex);\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextX!: number;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextY!: number;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.items = new HTMLEMenuItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {contextual} = this;\r\n        if (contextual) {\r\n            this.#position();\r\n        }\r\n    }\r\n\r\n    #position(): void {\r\n        const {contextX, contextY} = this;\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = contextX + scrollX;\r\n        const top = contextY + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.items.values())\r\n            .forEach((item_i) => {\r\n                if (item_i.expanded) {\r\n                    item_i.collapse();\r\n                }\r\n            });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null && activeItem !== item) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        if (item == null) {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            targetClosestItem.trigger();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const composedPath = event.composedPath();\r\n                    const isClosestTargetMenu = composedPath.find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const composedPath = event.composedPath();\r\n                    const isClosestTargetMenu = composedPath.find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex, items} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const itemsArray = Array.from(items.values());\r\n                    const firstMatchIndex = itemsArray.findIndex(\r\n                        item_i => item_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = itemsArray.findIndex(\r\n                        (item_i, i) => item_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const item = items.item(matchIndex);\r\n                    if (item !== null) {\r\n                        item.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            !targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = this.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    const activeIndex = this.#activeIndex;\r\n                    this.focus({preventScroll: true});\r\n                    this.#activeIndex = activeIndex;\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                this.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.type == \"submenu\" &&\r\n                activeItem.expanded && \r\n                !activeItem.contains(<Node>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItem !== null) {\r\n                targetClosestItem.focus({preventScroll: true});\r\n                if (targetClosestItem.type == \"submenu\") {\r\n                    if (!targetClosestItem.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItem);\r\n                        this.#setItemTimeout(targetClosestItem, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        targetClosestItem.menu?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const composedPath = event.composedPath();\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestTargetMenu = composedPath.find(\r\n                target_i => target_i instanceof HTMLEMenuElement\r\n            ) == this;\r\n            if (isClosestTargetMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    Array.from(new HTMLEMenuItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            properties: {\r\n                name: name,\r\n                tabIndex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        CustomElement({\r\n            name: \"e-grid\"\r\n        })(this);\r\n    }\r\n    \r\n    static readonly #shadowTemplate = element(\"template\", {\r\n        content: [\r\n            element(\"slot\")\r\n        ]\r\n    });\r\n    static readonly #shadowStylesheet = Stylesheet(\r\n        trimMultilineIndent(/*css*/`\r\n            :host {\r\n                display: table;\r\n            }\r\n\r\n            :host([droptarget]) {\r\n                background-color: gainsboro;\r\n            }\r\n        `)\r\n    )\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        \r\n        (shadowRoot as any)[\"adoptedStyleSheets\"] = [\r\n            HTMLEGridElementBase.#shadowStylesheet\r\n        ];\r\n        shadowRoot.append(\r\n            HTMLEGridElementBase.#shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        cell.active = true;\r\n        cell.tabIndex = 0;\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            this.#setActiveRow(closestRow);\r\n        }\r\n        this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        row.active = true;\r\n        row.tabIndex = 0;\r\n        this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEMenuItemCollection(this);\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEMenuItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            return menu.items.item(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, active, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (active) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(targetClosestItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget && target !== activeItem && active) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget) {\r\n                const isActive = !active;\r\n                this.active = isActive;\r\n                if (isActive) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {active} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.active = !active;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (active) {\r\n                    this.active = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.active = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"icon\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"label\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"output\", {\r\n                        part: [\"value\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"options\"],\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        part: [\"separator\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"description\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            /*let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }*/\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            console.log(selectedOption);\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"icon\"]\r\n                        }),\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"select\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"menubutton\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            user-select: none;\r\n                        }\r\n                        \r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        [part=\"content\"]:hover {\r\n                            background-color: whitesmoke;\r\n                        }\r\n\r\n                        :host([active]) [part=\"content\"] {\r\n                            background-color: whitesmoke;\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) [part=\"content\"] {\r\n                            background-color: gainsboro;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            display: flex;\r\n                            line-height: 22px;\r\n                        }\r\n                        \r\n                        [part=\"label\"] {\r\n                            order: 0;\r\n                            margin-right: auto;\r\n                            overflow: hidden;\r\n                            text-overflow: ellipsis;\r\n                            white-space: nowrap;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"toolbar\"]) {\r\n                            order: 1;\r\n                        }\r\n\r\n                        ::slotted([slot=\"badge\"]) {\r\n                            order: 2;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"menu\"]) {\r\n                            position: absolute;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"toolbar\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"badge\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        item.active = true;\r\n        item.tabIndex = 0;\r\n        this.#activeIndex = Array.from(items).indexOf(item);\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            properties: {\r\n                innerText: /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            }\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    element(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            element(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            properties: {\r\n                tabIndex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            eventListeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                label: item.label,\r\n                name: item.label,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"e-toolbar\", {\r\n                    properties: {\r\n                        slot: \"toolbar\",\r\n                        tabIndex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.label = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabIndex: -1\r\n                                        },\r\n                                        eventListeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY,\r\n                    slot: \"menu\"\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    label: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    label: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    name: string;\r\n    filter: (row: GridRowModel) => boolean;\r\n};\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: GridRowFilter[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: GridRowFilter[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {label: string, age: number}) {\r\n        super();\r\n        const {label, age} = init;\r\n        this.label = label;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #appliedFilters: ({\r\n        name: string;\r\n        filter: (row: GridRowModel) => boolean;\r\n    })[];\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#appliedFilters = [];\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.extract(row)\r\n                }\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const gridElement = element(\"e-grid\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n                selectby: \"row\"\r\n            },\r\n            children: [\r\n                element(\"e-gridhead\", {\r\n                    children: [\r\n                        element(\"e-gridrow\", {\r\n                            children: reactiveChildElements(\r\n                                model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                            )\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-gridbody\", {\r\n                    children: reactiveChildElements(\r\n                        model.rows, row => this.#renderGridBodyRow(row)\r\n                    )\r\n                })\r\n            ]\r\n        });\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            gridElement\r\n        );\r\n    }\r\n\r\n    applyFilter(filter: GridRowFilter): void {\r\n        const appliedFilters = this.#appliedFilters;\r\n        if (!appliedFilters.includes(filter)) {\r\n            this.#appliedFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#appliedFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeFilter(filter: GridRowFilter): void {\r\n        const appliedFilters = this.#appliedFilters;\r\n        const filterIndex = appliedFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            appliedFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#appliedFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        this.gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                properties: {\r\n                                    className: \"gridcell-label\",\r\n                                    textContent: column.label\r\n                                },\r\n                                eventListeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            type: \"menubutton\",\r\n                                            tabIndex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                properties: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabIndex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        properties: {\r\n                                                            slot: \"menu\",\r\n                                                            tabIndex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"button\",\r\n                                                                    label: \"Resize column\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                eventListeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    label: \"Sort\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            properties: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabIndex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        label: \"Ascending\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        label: \"Descending\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            eventListeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            const sortItems = menu.items.namedItem(\"sort\");\r\n                                                                            if (sortItems instanceof HTMLEMenuItemRadioList) {\r\n                                                                                Array.from(sortItems.values()).forEach(\r\n                                                                                    (radio_i) => {\r\n                                                                                        radio_i.checked = parseInt(radio_i.value) === newValue;\r\n                                                                                    }\r\n                                                                                );\r\n                                                                            }\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    label: \"Filter\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        properties: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabIndex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                properties: {\r\n                                                                                    tabIndex: -1,\r\n                                                                                    label: filter_i.name,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#appliedFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                eventListeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.applyFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    eventListeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            properties: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment } from \"./src/elements/Element\";\r\nimport { MenuModel, MenuWidget } from \"./src/views/widgets/MenuWidget\";\r\nimport { MenuItemModel } from \"./src/views/widgets/MenuItemWidget\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        properties: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.label\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    label: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    label: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    label: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n\r\n\r\n\r\n    /*const menuModel = new MenuModel({\r\n        items: [\r\n            new MenuItemModel({label: \"MenuItem 1\"}),\r\n            new MenuItemModel({label: \"MenuItem 2\"})\r\n        ]\r\n    })\r\n    const menuWidget = new MenuWidget(menuModel);\r\n    document.body.append(menuWidget.menuElement);*/\r\n\r\n    \r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\nimport { Widget } from \"./views/widgets/Widget\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","registerCustomElement","name","customElements","define","subtreeNodes","childNodes","childNodesCount","childIndex","child","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","Fragment","nodes","fragment","document","createDocumentFragment","tagName","part","exportParts","attributes","dataset","children","eventListeners","style","element","createElement","is","isBuiltinElement","keys","key_i","assign","elementPart","add","join","attributeValue","elementStyle","property_i","elementDataset","datasetEntry_i","replaceChildren","from","entries","name_i","listener_i","content","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","HTMLElement","attachShadow","mode","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","textContent","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","connectedCallback","level","parentElement","HTMLETreeElement","attributeChangedCallback","Event","bubbles","labelPart","toggle","force","expanded","shiftKey","ctrlKey","slotName","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","HTMLETreeElementBase","createTreeWalker","SHOW_ELEMENT","root","walker","currentNode","nextNode","namedItem","selectedItems","selected","beginSelection","endSelection","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextSibling","lastItem","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","innerText","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","ariaHidden","treeElement","dragstart","drop","contextmenu","keydown","treeItemElement","draggable","className","trigger","slot","treeitem","badge","toolbar","visibilityItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","contextX","contextY","close","body","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowTemplateIconPart","shadowTemplateArrowPart","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","HTMLEMenuItemElement","EMenuItem","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuItemCollectionBase","HTMLEMenuItemRadioList","HTMLEMenuItemRadioListBase","itemName","itemType","HTMLEMenuItemCollection","toggleTimeouts","HTMLEMenuElementBase","previousNode","targetClosestItem","find","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","activeIndex","keyLength","keyCode","charCodeAt","itemsArray","firstMatchIndex","nextMatchIndex","matchIndex","intersectsWithMouse","containsRelatedTarget","catch","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","querySelectorAll","selectedRows","hidden","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","text","stylesheet","CSSStyleSheet","replaceSync","Stylesheet","newlineIndex","indentMatch","substring","match","indent","replaceAll","trimEnd","trimMultilineIndent","HTMLEMenuBarElementBase","isActive","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","optionsArray","option_i","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","getElementsByTagName","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","gridElement","rel","href","applyFilter","rowElement","filter_i","removeFilter","appliedFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortItems","resize","gridRowElement","headers","Element","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","_widgets","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","MutationObserver","_actionsObserverCallback","mutationsList","mutation","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","registerWidget","widget","unregisterWidget","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}