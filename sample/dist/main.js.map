{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Separator.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetMenuItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetMenuItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                console.log(rowElement);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLEMenuItemElement>currentTarget;\r\n                                                const {checked} = targetItem;\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                                gridElement.focus();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.flattenItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) === \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly name: string;\r\n    \r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.name}`;\r\n        }\r\n        return this.name;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    flattenItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.flattenItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(this: TreeView, item: Item) => string | Node;\r\n    itemContextMenuDelegate: (this: TreeView) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(this: TreeView, item: Item) => string | Node;\r\n    itemContextMenuDelegate: (this: TreeView) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(this: TreeView, item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(this: TreeView) {\r\n            const {treeElement} = this;\r\n            const selectedItems = this.selectedItems();\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemModelList = new TreeItemModelList(selectedItems);\r\n                                    const {count} = itemModelList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemModelList.remove();\r\n                                    }\r\n                                    treeElement.focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                Array.from(this.treeElement.items).forEach(\r\n                    item_i => item_i.draggable = newValue !== null\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {model, treeElement} = this;\r\n        const selectedElements = treeElement.selectedItems();\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {model, treeElement} = this;\r\n        const {activeItem} = treeElement;\r\n        return activeItem ?\r\n            model.getItemByUri(activeItem?.dataset.uri!) : null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {type, index, level, uri} = item;\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    type: type,\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    uri: uri\r\n                },\r\n                children: [\r\n                    this.itemContentDelegate(item),\r\n                    ].concat(\r\n                        (type === \"parent\") ? [\r\n                            element(\"e-treeitemgroup\", {\r\n                                attributes: {\r\n                                    slot: \"group\"\r\n                                },\r\n                                children: reactiveChildElements(item.childItems,\r\n                                    item => this.#renderTreeItem(item)\r\n                                )\r\n                            })\r\n                        ] : []\r\n                    )\r\n            }),\r\n            [\"index\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                treeitem.posinset = newValue;\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => element_i.dataset.uri!)\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: this.itemContextMenuDelegate(),\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const toolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (toolbar) {\r\n                        event.preventDefault();\r\n                        toolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const toolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = toolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const toolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = toolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, target, key} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const selectedItems = this.selectedItems();\r\n        const {model} = this;\r\n        const targetItemModel = model.getItemByUri(targetItem.dataset.uri!)!;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const selectedItemsList = selectedItems.includes(targetItemModel) ?\r\n                    new TreeItemModelList(selectedItems) : new TreeItemModelList([targetItemModel]);\r\n                const {count} = selectedItemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    selectedItemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ],\r\n        /*sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {name: aLabel} = item_a;\r\n            const {name: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }*/\r\n    });\r\n    (<any>window)[\"model\"] = treeModel;\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        function(this: TreeView, item: MyTreeItemModel) {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"name\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = `${item.name}`;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"e-toolbar\", {\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbar\r\n                                        .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        visibilityItem.label = label;\r\n                                        visibilityItem.title = label;\r\n                                        visibilityItem.pressed = newValue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = (\r\n        function(this: TreeView) {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Display\"\r\n                            },\r\n                            children: \"Display\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                        new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        selectedItemsList.display();\r\n                                    activeItemElement!.focus();\r\n                                }\r\n                            }\r\n                        }),\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            children: \"Delete\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                        new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                    const {count} = selectedItemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        selectedItemsList.remove();\r\n                                    }\r\n                                    treeElement.focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-separator\"),\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                        new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                    activeItem.visibility ?\r\n                                        selectedItemsList.hide() :\r\n                                        selectedItemsList.show();\r\n                                    activeItemElement!.focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-separator\"),\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                type: \"button\",\r\n                                label: \"Click me!\"\r\n                            },\r\n                            children: \"Click me!\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    activeItem.display();\r\n                                    activeItemElement!.focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEMenuItemElement>(<Element>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            /*const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {*/\r\n                const isClosestMenu = this.#isClosestMenu(targetItem);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = targetItem;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            //}\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    #wasExpandedOnMouseDown?: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.pressed = !this.pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = menubutton.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = select.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    /*#handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*#handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                // TODO: event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n            this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        this.#value().textContent = option.label;\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        this.toggle();\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            const {selectedOption} = this;\r\n            (selectedOption ?? this.options[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand();\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetOption = <HTMLEOptionElement>target;\r\n        if (targetOption.selected) {\r\n            const {options} = this;\r\n            options.forEach((option_i) => {\r\n                if (option_i !== targetOption && option_i.selected) {\r\n                    option_i.selected = false;\r\n                }\r\n            });\r\n            this.#setSelectedOption(targetOption);\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemModelList } from \"./src/views/TreeView\";\r\n\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabIndex","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","checked","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","querySelectorAll","rel","href","input","selectby","multisectable","contextmenu","click","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","console","log","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","targetItem","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","itemContentDelegate","textContent","itemContextMenuDelegate","treeElement","selectedItems","itemModelList","confirm","draggable","treeItemElement","dragstart","drop","keydown","focusin","focusout","activeItem","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","copyWithin","newElements","beginSelection","selected","endSelection","close","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","toolbar","selectedItemsList","TreeView","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","Error","widgets","slotted","NodeList","Widget","MyTreeItemModelList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","disabled","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","x","y","firstItem","walker","currentNode","root","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","radio_i","nearestItem","error","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","catch","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","activeCell","activeRow","head","selectedCells","selectedRows","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","labelPart","select","selectValue","pressed","menubutton","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","focusTabAt","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeItemElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","badge","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","activeOption","selectedOption","option","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","option_i","HTMLESeparatorElementBase","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","tree","setMultiSelectable","getMultiSelectable","closestItem","listItemWidget","toolbarItemWidget","setPressed","getPressed","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","treeView","visibilityItem","activeItemElement","menuView","TreeMain"],"sourceRoot":""}