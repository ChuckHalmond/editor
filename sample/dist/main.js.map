{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/commands/Command.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/Input.ts","webpack://main/./src/templates/menus/MenuItemGroupTemplate.ts","webpack://main/./src/templates/menus/MenuTemplate.ts","webpack://main/./src/templates/menus/MenuItemTemplate.ts","webpack://main/./src/templates/menus/MenubarTemplate.ts","webpack://main/./src/Editor.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/panels/Panel.ts","webpack://main/./src/elements/containers/panels/PanelGroup.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/breadcrumbs/BreadcrumbItem.ts","webpack://main/./src/elements/controls/breadcrumbs/BreadcrumbTrail.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/Palette.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/objects/StructuredFormData.ts","webpack://main/./src/templates/table/TableTemplate.ts","webpack://main/./src/views/View.ts","webpack://main/./sample/main.ts","webpack://main/./sample/formdata.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { EventBase };\r\nexport { Event };\r\nexport { EEvent };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<T extends string, D extends any>(type: T, data: D): Event<T, D>;\r\n}\r\n\r\ninterface Event<T extends string = string, D extends any = any> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n}\r\n\r\ntype EEvent<T extends string = string, D extends any = any> = Event<T, D>;\r\n\r\nclass EventBase<T extends string, D extends any> implements Event<T, D> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ninterface EventDispatcher<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> {\r\n    addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    removeEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    dispatchEvent<K extends string>(event: Event<K>): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher<{}>;\r\n    new<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}>(): EventDispatcher<Events>;\r\n}\r\n\r\nclass EventDispatcherBase<Events extends {[K in Extract<keyof Events, string>]: Event<K>} = {}> implements EventDispatcher<Events> {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends string>(event: K, handler: (event: Event<K>) => void, once?: boolean): (event: Event<K>) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void;\r\n    public addEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): (event: Events[K]) => void {\r\n        let listeners = this._listeners.get(event.toString());\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event.toString(), [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends string>(event: string, handler: (event: Event<K>) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number;\r\n    public removeEventListener<K extends Extract<keyof Events, string>>(event: K, handler: (event: Events[K]) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends string>(event: Event<K>): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void;\r\n    public dispatchEvent<K extends Extract<keyof Events, string>>(event: Events[K]): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== 'undefined') {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        //else {\r\n        obj = obj[prop];\r\n        //}\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain, forAllSubtreeElements } from \"./Snippets\";\r\n\r\nexport { isTagElement };\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { bindShadowRoot };\r\nexport { setElementProperties };\r\nexport { setElementAttributes };\r\nexport { setElementChildren };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { createMutationObserverCallback };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { setHTMLElementEventListeners };\r\nexport { parseStringTemplate };\r\n\r\nfunction isTagElement<K extends keyof HTMLElementTagNameMap>(tagName: K, obj: any): obj is HTMLElementTagNameMap[K] {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() == tagName;\r\n}\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        observedAttributes?: string[],\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nfunction parseStringTemplate(template: string, items: {[key: string]: Node | string}): DocumentFragment {\r\n    const regexp = /\\[(.*?)\\]/gm;\r\n    const itemsKeys = Object.keys(items);\r\n    let result: RegExpExecArray  | null;\r\n    let resultNodes: (Node | string)[] = [];\r\n    let lastResultIndex = 0;\r\n    while ((result = regexp.exec(template)) !== null) {\r\n        if (result.index >= lastResultIndex) {\r\n            resultNodes.push(document.createTextNode(template.substring(lastResultIndex, result.index)));\r\n        }\r\n        if (itemsKeys.indexOf(result[1]) > -1) {\r\n            resultNodes.push(items[result[1]]);\r\n        }\r\n        lastResultIndex = result.index + result[0].length;\r\n    }\r\n    let fragment = new DocumentFragment();\r\n    fragment.append(...resultNodes, template.substring(lastResultIndex, template.length));\r\n    return fragment;\r\n}\r\n\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    observedAttributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, observedAttributes, options } = args;\r\n\r\n        if (observedAttributes) {\r\n            Object.defineProperty(elementCtor.prototype.constructor, 'observedAttributes', {\r\n                get: () => {\r\n                    return observedAttributes;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const { name,  type } = attr;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    let fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<K extends keyof HTMLElementTagNameMap> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>,\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[EventName]) => void | [(event: HTMLElementEventMap[EventName]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    },\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n}\r\n\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<K>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init) {\r\n            if (init.props) {\r\n                setElementProperties(element, init.props);\r\n            }\r\n            if (init.attrs) {\r\n                setElementAttributes(element, init.attrs);\r\n            }\r\n            if (init.children) {\r\n                if (typeof init.children === \"function\") {\r\n                    setElementChildren(element, init.children(element));\r\n                }\r\n                else {\r\n                    setElementChildren(element, init.children);\r\n                }\r\n            }\r\n            if (init.listeners) {\r\n                setHTMLElementEventListeners(element, init.listeners);\r\n            }\r\n            if (init.styles) {\r\n                setHTMLElementStyles(element, init.styles);\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & ({\r\n    _reactAttributes: {\r\n        _reactModel: ObjectModel<object>,\r\n        _reactEvent: \"objectmodelchange\",\r\n        _reactListener: (event: ObjectModelChangeEvent) => void;\r\n    }\r\n } | {\r\n    _reactAttributes: {\r\n        _reactModel: ListModel<object>,\r\n        _reactEvent: \"listmodelchange\",\r\n        _reactListener: (event: ListModelChangeEvent) => void;\r\n    }\r\n})\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    let testNode = node as ReactiveNode;\r\n    return (typeof testNode._reactAttributes === \"object\") && testNode._reactAttributes._reactEvent === \"objectmodelchange\";\r\n}\r\n\r\ntype ReactiveParentNode = (Node & ParentNode) & {\r\n    _reactAttributes: {\r\n        _reactModel: ListModel<object>,\r\n        _reactEvent: \"listmodelchange\",\r\n        _reactListener: (event: ListModelChangeEvent) => void;\r\n    }\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    let testNode = node as ReactiveParentNode;\r\n    return typeof testNode._reactAttributes === \"object\" && testNode._reactAttributes._reactEvent === \"listmodelchange\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (node: N, list: ListModel<Data>, react: (node: N, removedItems: [index: number, items: Data[]][], addedItems: [index: number, items: Data[]][]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (node: N, object: ObjectModel<Data>, react: <K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (node: N, objectOrList: ObjectModel<Data> | ListModel<Data>, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, oldItems: Data[], newItems: Data[]) => void)): N {\r\n        if (\"items\" in objectOrList) {\r\n            Object.assign(\r\n                node, {\r\n                    _reactAttributes: {\r\n                        _reactModel: objectOrList,\r\n                        _reactEvent: \"listmodelchange\",\r\n                        _reactListener: (event: ListModelChangeEvent) => {\r\n                            react(node, event.data.removedItems as any, event.data.addedItems as any, void 0);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            react(node, 0 as any, objectOrList.items as any, []);\r\n        }\r\n        else {\r\n            Object.assign(\r\n                node, {\r\n                    _reactAttributes: {\r\n                        _reactModel: objectOrList,\r\n                        _reactEvent: \"objectmodelchange\",\r\n                        _reactListener: (event: ObjectModelChangeEvent) => {\r\n                            react(node, event.data.property as any, event.data.oldValue, event.data.newValue);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            const keys = Object.keys(objectOrList.data) as (keyof Data)[];\r\n            keys.forEach((key) => {\r\n                react(node, key as any, void 0 as any, objectOrList.data[key] as any);\r\n            });\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        Object.assign(\r\n            parent, {\r\n                _reactAttributes: {\r\n                    _reactModel: list,\r\n                    _reactEvent: \"listmodelchange\",\r\n                    _reactListener: (event: ListModelChangeEvent) => {\r\n                        event.data.removedItems.forEach((removedItemsSlice) => {\r\n                            removedItemsSlice[1].forEach((_) => {\r\n                                const child = parent.children.item(removedItemsSlice[0]);\r\n                                if (child) {\r\n                                    child.remove();\r\n                                }\r\n                            });\r\n                        });\r\n                        event.data.addedItems.forEach((addedItemsSlice) => {\r\n                            addedItemsSlice[1].forEach((addedItems) => {\r\n                                if (addedItemsSlice[0] === 0) {\r\n                                    parent.append(...addedItems.map(map))\r\n                                }\r\n                                else {\r\n                                    const child = parent.children.item(addedItemsSlice[0]);\r\n                                    if (child) {\r\n                                        child.before(...addedItems.map(map))\r\n                                    }\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        return list.items.map(map);\r\n    }\r\n}\r\n/*\r\nfunction ReactiveChildNodes<Item extends object>(list: ListModel<Item>, map: (item: Item) => Node | string): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        Object.assign(\r\n            parent, {\r\n                _reactAttributes: {\r\n                    _reactModel: list,\r\n                    _reactEvent: \"listmodelchange\",\r\n                    _reactListener: (event: ListModelChangeEvent) => {\r\n                        //TODO: Create a direct map between model items and child nodes to get rid of index\r\n                        if (event.data.removedItems.length) {\r\n                            for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                                parent!.children.item(event.data.index)!.remove();\r\n                            }\r\n                        }\r\n                        if (event.data.addedItems.length) {\r\n                            let addedElements = event.data.addedItems.map(item => map(item));\r\n                            if (event.data.index >= list.items.length - event.data.addedItems.length) {\r\n                                parent!.append(...addedElements);\r\n                            }\r\n                            else {\r\n                                parent!.children.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        return list.items.map(map);\r\n    }\r\n}*/\r\n\r\nfunction setHTMLElementEventListeners<K extends keyof HTMLElementTagNameMap>(\r\n    element: HTMLElementTagNameMap[K],\r\n    listeners: {\r\n        [K in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[K]) => void | [(event: HTMLElementEventMap[K]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    }\r\n): HTMLElementTagNameMap[K] {\r\n    Object.entries(listeners).forEach((entry) => {\r\n        if (Array.isArray(entry[1])) {\r\n            element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n        }\r\n        else {\r\n            element.addEventListener(entry[0], entry[1] as EventListener);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setHTMLElementStyles<E extends HTMLElement>(\r\n    element: E,\r\n    styles: {\r\n        [property: string]: string | [string, string]\r\n    }\r\n): E {\r\n    Object.keys(styles).forEach((property) => {\r\n        if (Array.isArray(styles[property])) {\r\n            element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n        }\r\n        else {\r\n            element.style.setProperty(property, styles[property] as string);\r\n        }\r\n    });\r\n    return element;\r\n};\r\n\r\nfunction setElementChildren<E extends Element>(\r\n    element: E,\r\n    children: (Node | string)[] | NodeList\r\n): E {\r\n    element.textContent = \"\";\r\n    element.append(...children);\r\n    return element;\r\n};\r\n\r\nfunction setElementProperties<E extends Element>(\r\n        element: E,\r\n        properties?: Partial<Pick<E, WritableKeys<E>>>\r\n    ): E {\r\n    for (const property in properties) {\r\n        let value = properties[property];\r\n        if (typeof value !== \"undefined\") {\r\n            element[property] = value!;\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\nfunction setElementAttributes<E extends Element>(\r\n        element: E,\r\n        attributes?: {[attrName: string]: number | string | boolean}\r\n    ): E {\r\n    for (const key in attributes) {\r\n        const value = attributes[key];\r\n        if (typeof value === \"boolean\") {\r\n            if (value) {\r\n                element.setAttribute(camelToTrain(key), \"\");\r\n            }\r\n        }\r\n        else {\r\n            element.setAttribute(camelToTrain(key), value.toString());\r\n        }\r\n    }\r\n    return element;\r\n};\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n  \r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}\r\n\r\nfunction createMutationObserverCallback(\r\n    mixins: AttributeMutationMixin[]\r\n    ) {\r\n    return (mutationsList: MutationRecord[]) =>  {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mode: KeyModifier): string {\r\n    switch (mode) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mode;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nconst testKeyModifier = (mod: KeyModifier, event: KeyboardEvent) => {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return () => true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { HTMLEMenuItemGroupElement } from \"../../elements/containers/menus/MenuItemGroup\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuItemGroupTemplateDescription };\r\nexport { HTMLEMenuItemGroupTemplate };\r\n\r\ntype HTMLEMenuItemGroupTemplateDescription = Partial<Pick<HTMLEMenuItemGroupElement, 'id' | 'className' | 'name' | 'label'>> & {\r\n    isGroup: true,\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenuItemGroupTemplate {\r\n    (desc: HTMLEMenuItemGroupTemplateDescription): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nconst HTMLEMenuItemGroupTemplate: HTMLEMenuItemGroupTemplate = (desc: HTMLEMenuItemGroupTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((descArgs) => HTMLEMenuItemTemplate(descArgs));\r\n\r\n    return Element(\r\n        \"e-menuitemgroup\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuElement } from \"../../elements/containers/menus/Menu\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemGroupTemplate, HTMLEMenuItemGroupTemplateDescription } from \"./MenuItemGroupTemplate\";\r\nimport { HTMLEMenuItemTemplate, HTMLEMenuItemTemplateDescription } from \"./MenuItemTemplate\";\r\n\r\nexport { HTMLEMenuTemplateDescription };\r\nexport { HTMLEMenuTemplate };\r\n\r\ntype HTMLEMenuTemplateDescription = Partial<Pick<HTMLEMenuElement, 'id' | 'className' | 'name'>> & {\r\n    items: (HTMLEMenuItemTemplateDescription | HTMLEMenuItemGroupTemplateDescription)[],\r\n}\r\n\r\ninterface HTMLEMenuTemplate {\r\n    (desc: HTMLEMenuTemplateDescription): HTMLEMenuElement;\r\n}\r\n\r\nconst HTMLEMenuTemplate: HTMLEMenuTemplate = (desc: HTMLEMenuTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        if (\"isGroup\" in itemDesc) {\r\n            return HTMLEMenuItemGroupTemplate(itemDesc);\r\n        }\r\n        else {\r\n            return HTMLEMenuItemTemplate(itemDesc);\r\n        }\r\n    });\r\n\r\n    return Element(\r\n        \"e-menu\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { HTMLEMenuItemElement } from \"../../elements/containers/menus/MenuItem\";\r\nimport { Element, TextNode } from \"../../elements/HTMLElement\";\r\nimport { Key, KeyModifier, HotKey } from \"../../Input\";\r\nimport { HTMLEMenuTemplate, HTMLEMenuTemplateDescription } from \"./MenuTemplate\";\r\n\r\nexport { HTMLEMenuItemTemplateDescription };\r\nexport { HTMLEMenuItemTemplate };\r\n\r\ntype HTMLEMenuItemTemplateDescription = Pick<HTMLEMenuItemElement, 'name'> & Partial<Pick<HTMLEMenuItemElement, 'id' | 'className' | 'title' | 'type' | 'disabled'>> & {\r\n    label?: string;\r\n    command?: string;\r\n    commandArgs?: any;\r\n    hotkey?: {\r\n        key: Key;\r\n        mod1?: KeyModifier;\r\n        mod2?: KeyModifier;\r\n    },\r\n    value?: string,\r\n    checked?: boolean,\r\n    statekey?: string,\r\n    menu?: HTMLEMenuTemplateDescription;\r\n    disabled?: boolean;\r\n}\r\n\r\ninterface HTMLEMenuItemTemplate {\r\n    (args: HTMLEMenuItemTemplateDescription): HTMLEMenuItemElement;\r\n}\r\n\r\nconst HTMLEMenuItemTemplate: HTMLEMenuItemTemplate = (desc: HTMLEMenuItemTemplateDescription) => {\r\n    let slotted: (Node | string)[] = [];\r\n\r\n    if (desc.menu) {\r\n        let menu = HTMLEMenuTemplate(desc.menu);\r\n        menu.slot = \"menu\";\r\n        slotted.push(menu);\r\n    }\r\n\r\n    const menuItem = Element(\r\n        \"e-menuitem\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                name: desc.name,\r\n                title: desc.title,\r\n                type: desc.type,\r\n                label: desc.label,\r\n                disabled: desc.disabled,\r\n                value: desc.value,\r\n                checked: desc.checked,\r\n                command: desc.command,\r\n                commandArgs: desc.commandArgs,\r\n                hotkey: desc.hotkey ? new HotKey(desc.hotkey.key, desc.hotkey.mod1, desc.hotkey.mod2) : void 0\r\n            },\r\n            children: slotted.map((slotted) => (typeof slotted === \"string\") ? TextNode(slotted) : slotted)\r\n        }\r\n    );\r\n\r\n    return menuItem;\r\n}","\r\nimport { HTMLEMenuBarElement } from \"../../elements/containers/menus/MenuBar\";\r\nimport { Element } from \"../../elements/HTMLElement\";\r\nimport { HTMLEMenuItemTemplateDescription, HTMLEMenuItemTemplate } from \"./MenuItemTemplate\";\r\n\r\n\r\nexport { HTMLEMenubarTemplateDescription };\r\nexport { HTMLEMenubarTemplate };\r\n\r\ntype HTMLEMenubarTemplateDescription = Partial<Pick<HTMLEMenuBarElement, 'id' | 'className' | 'tabIndex'>> & {\r\n    items: HTMLEMenuItemTemplateDescription[],\r\n}\r\n\r\ninterface HTMLEMenubarTemplate {\r\n    (desc: HTMLEMenubarTemplateDescription): HTMLEMenuBarElement;\r\n}\r\n\r\nconst HTMLEMenubarTemplate: HTMLEMenubarTemplate = (desc: HTMLEMenubarTemplateDescription) => {\r\n    \r\n    const items = desc.items.map((itemDesc) => {\r\n        return HTMLEMenuItemTemplate(itemDesc);\r\n    });\r\n\r\n    return Element(\r\n        \"e-menubar\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n                tabIndex: desc.tabIndex\r\n            },\r\n            children: items\r\n        }\r\n    );\r\n}","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { Event, EventDispatcher } from \"./events/EventDispatcher\";\r\nimport { isTagElement } from \"./elements/HTMLElement\";\r\nimport { HTMLEMenuBarElement } from \"./elements/containers/menus/MenuBar\";\r\nimport { HotKeyChangeEvent } from \"./elements/containers/menus/MenuItem\";\r\nimport { HTMLEStatusBarElement } from \"./elements/containers/status/StatusBar\";\r\nimport { getPropertyFromPath, setPropertyFromPath } from \"./elements/Snippets\";\r\nimport { HotKey } from \"./Input\";\r\nimport { HTMLEMenubarTemplate } from \"./templates/menus/MenubarTemplate\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\nexport { EditorCommand };\r\nexport { EditorHotKey };\r\n\r\ntype EditorEventsMap = {\r\n    \"e_contextchange\": Event<\"e_contextchange\">;\r\n}\r\n\r\ninterface Editor extends EventDispatcher<EditorEventsMap> {\r\n    //readonly resources: Resources;\r\n\r\n    getState(key: string): any;\r\n    setState(key: string, value: any): void;\r\n    \r\n    addStateListener(statekey: string, listener: (newValue: any) => void): number;\r\n    removeStateListener(statekey: string, listener: (newValue: any) => void): void;\r\n\r\n    addHotkeyExec(hotkey: EditorHotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: EditorHotKey, exec: () => void): void;\r\n\r\n    readonly statusbar: HTMLEStatusBarElement | null;\r\n    readonly menubar: HTMLEMenuBarElement | null;\r\n\r\n    registerCommand(name: string, command: EditorCommand): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    \r\n    undoLastCommand(): void;\r\n    redoLastCommand(): void;\r\n\r\n    setContext(context: string): void;\r\n\r\n    setup(): Promise<void>;\r\n}\r\n\r\ninterface EditorCommand extends Command {\r\n    context: string;\r\n}\r\n\r\ninterface EditorCommandCall extends EditorCommand {\r\n    args: any;\r\n}\r\n\r\ninterface EditorHotKey extends HotKey {}\r\n\r\n/*\r\n\r\n\r\ncreateStatement(statementData)\r\ndeleteStatement(statement)\r\nfocusStatement(statement)\r\n\r\nexecuteRemoteStatement(statement);\r\n\r\ninvalidateStatement(statement, reason)\r\nvalidateStatement(statement, result)\r\n\r\nfetchStatements()\r\nfetchExpressions()\r\n\r\nstatments\r\nexpressions\r\n\r\n*/\r\n\r\n\r\nclass EditorBase<State extends object> extends EventDispatcher<EditorEventsMap> implements Editor {\r\n\r\n    private _commands: Map<string, EditorCommand>;\r\n    private _hotkeys: Map<EditorHotKey, (() => void)[]>;\r\n\r\n    private _undoCommandsCallStack: Array<EditorCommandCall>;\r\n    private _redoCommandsCallStack: Array<EditorCommandCall>;\r\n\r\n    private _context: string;\r\n\r\n    private _state: State;\r\n    private _stateListeners: Map<string, Array<(newValue: any) => void>>;\r\n\r\n    //readonly resources: Resources;\r\n\r\n    public menubar: HTMLEMenuBarElement | null;\r\n    public statusbar: HTMLEStatusBarElement | null;\r\n\r\n\r\n    /*readonly toolbar: HTMLElement;\r\n    readonly statusbar: HTMLElement;*/\r\n\r\n    /*public readonly state: HTMLFormElement;\r\n    */\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._commands = new Map();\r\n        this._context = 'default';\r\n        this._hotkeys = new Map();\r\n        \r\n        this._undoCommandsCallStack = [];\r\n        this._redoCommandsCallStack = [];\r\n\r\n        this.menubar = null;\r\n        this.statusbar = null;\r\n\r\n        this._state = {} as State;\r\n        this._stateListeners = new Map();\r\n    }\r\n    \r\n    public get context(): string {\r\n        return this._context;\r\n    }\r\n\r\n    public setup(): Promise<any> {\r\n        const menubarContainer = document.getElementById(\"menubar-container\");\r\n        this.statusbar = document.body.querySelector(\"e-statusbar\");\r\n\r\n        document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    let execs = this._hotkeys.get(hotkey);\r\n                    execs!.forEach((exec) => {\r\n                        exec();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        document.body.addEventListener(\"e_hotkeychange\", (event: HotKeyChangeEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        /*document.body.addEventListener(\"trigger\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });*/\r\n\r\n        return Promise.all([\r\n            new Promise<void>(\r\n                (resolve, reject) => {\r\n                    if (menubarContainer) {\r\n                        fetch(\"assets/editor/editor.json\").then((response) => {\r\n                            if (response.ok) {\r\n                                response.json().then((json) => {\r\n                                    const menubar = HTMLEMenubarTemplate(json);\r\n                                    this.menubar = menubar;\r\n                                    menubarContainer.append(menubar);\r\n                                    resolve();\r\n                                });\r\n                            }\r\n                            reject();\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject();\r\n                    }\r\n                }\r\n            )\r\n        ]);\r\n    }\r\n\r\n    public setContext(context: string): void {\r\n        if (context !== this._context) {\r\n            //this.dispatchEvent(new CustomEvent(\"e-contextchange\"));\r\n            this._context = context;\r\n            /*if (this.menubar) {\r\n                this.menubar.findItems((item) => {\r\n                    return !!item.command && (item.command.context === this._context)\r\n                }).forEach((item) => {\r\n                    item.disabled = true;\r\n                });\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public getState(key: string): any {\r\n        return getPropertyFromPath(this._state, key);\r\n    }\r\n\r\n    //TODO: Create a listeners object with the same structure as the state object\r\n    public setState(key: string, value: any): void {\r\n        setPropertyFromPath(this._state, key, value);\r\n        const listenedStates = Array.from(this._stateListeners.keys());\r\n        listenedStates.filter(\r\n            (state) => {\r\n                return (state.startsWith(key) && (state.charAt(key.length) === \".\" || state.charAt(key.length) === \"\")) ||\r\n                    (key.startsWith(state) && (key.charAt(state.length) === \".\" || key.charAt(state.length) === \"\"));\r\n            }\r\n        ).forEach((state) => {\r\n            let stateListeners = this._stateListeners.get(state);\r\n            if (stateListeners) {\r\n                let newStateValue = (state.length === key.length) ? value :\r\n                    (state.length >= key.length) ? getPropertyFromPath(value, state.substring(key.length + 1)) :\r\n                    getPropertyFromPath(this._state, state);\r\n                stateListeners.forEach((stateListener) => {\r\n                    stateListener(newStateValue);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public addStateListener(statekey: string, listener: (newValue: any) => void): number {\r\n        let stateListeners = this._stateListeners.get(statekey);\r\n        if (typeof stateListeners === \"undefined\") {\r\n            this._stateListeners.set(statekey, [listener]);\r\n            return 0;\r\n        }\r\n        else {\r\n            return stateListeners.push(listener) - 1;\r\n        }\r\n    }\r\n\r\n    public removeStateListener(statekey: string, listener: (newValue: any) => void): void {\r\n        let stateListeners = this._stateListeners.get(statekey);\r\n        if (typeof stateListeners !== \"undefined\") {\r\n            let index = stateListeners.indexOf(listener);\r\n            if (index >= 0) {\r\n                stateListeners.splice(index, 1);\r\n            }\r\n            if (stateListeners.length === 0) {\r\n                this._stateListeners.delete(statekey);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerCommand(name: string, command: EditorCommand) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command && command.context === this._context) {\r\n\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n                this._redoCommandsCallStack.push({...command, args: args});\r\n            }\r\n            else {\r\n                command.exec(args);\r\n                if (isUndoCommand(command)) {\r\n                    this._undoCommandsCallStack.push({...command, args: args});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public undoLastCommand(): void {\r\n        const lastCommand = this._undoCommandsCallStack.pop();\r\n        if (lastCommand) {\r\n            if (isUndoCommand(lastCommand) && lastCommand.context === this._context) {\r\n                lastCommand.undo();\r\n                this._redoCommandsCallStack.push(lastCommand);\r\n            }\r\n        }\r\n    }\r\n\r\n    public redoLastCommand(): void {\r\n        const lastCommand = this._redoCommandsCallStack.pop();\r\n        if (lastCommand) {\r\n            if (lastCommand.context === this._context) {\r\n                lastCommand.exec();\r\n                if (isUndoCommand(lastCommand)) {\r\n                    this._undoCommandsCallStack.push(lastCommand);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: EditorHotKey, exec: () => void): number {\r\n        let hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n            return 0;\r\n        }\r\n        else {\r\n            return hotkeys.push(exec) - 1;\r\n        }\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: EditorHotKey, exec: () => void): void {\r\n        let hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            let index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { HTMLEMenuElementBase };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\",\r\n    observedAttributes: [\"expanded\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-menuitem\", elem) || isTagElement(\"e-menuitemgroup\", elem)\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (isTagElement(\"e-menuitem\", target)) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (isTagElement(\"e-menuitemgroup\", this.activeItem)) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (isTagElement(\"e-menuitem\", this.activeItem)) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (isTagElement(\"e-menu\", parentMenu)) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (isTagElement(\"e-menuitem\", this.activeItem) && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        let thisRect = this.getBoundingClientRect();\r\n                        let thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (isTagElement(\"e-menuitem\", item) && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (isTagElement(\"e-menuitem\", item)) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (isTagElement(\"e-menuitemgroup\", item)) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\nexport { HTMLEMenuBarElementBase };\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { HTMLEMenuButtonElementBase };\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\",\r\n    observedAttributes: [\"icon\", \"label\", \"checked\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { EMenuItemElementType };\r\nexport { HTMLEMenuItemElement };\r\nexport { HTMLEMenuItemElementBase };\r\nexport { HotKeyChangeEvent };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\",\r\n    observedAttributes: [\"label\", \"checked\", \"type\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host([type=\"menu\"]),\r\n                :host([type=\"submenu\"]) {\r\n                    position: relative;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (isTagElement(\"e-menu\", menuElem)) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_radiochangerequest\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_change\": Event,\r\n    }\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, isTagElement, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { HTMLEMenuItemGroupElementBase };\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-menuitem\", item)) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"e_radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-menuitem\", target)) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let idx = 0; idx < this.items.length; idx++) {\r\n            let item = this.items[idx];\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel',\r\n    observedAttributes: ['state']\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #label,\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #header {\r\n                    padding: 0;\r\n                }\r\n\r\n                :host([state='closed']) #arrow {\r\n                    display: inherit;\r\n                }\r\n                \r\n                :host([state='opened']) #label,\r\n                :host([state='opened']) #content {\r\n                    display: inherit;\r\n                }\r\n\r\n                :host([state='opened']) #arrow {\r\n                    display: none;\r\n                }\r\n\r\n                #content {\r\n                    padding: var(--content-padding, inherit);\r\n                }\r\n\r\n                #header {\r\n                    color: var(--header-color, inherit);\r\n                    text-align: center;\r\n                    padding-top: 0;\r\n\r\n                    user-select: none;\r\n                }\r\n\r\n                #header:hover {\r\n                    --color: var(--header-hover-color, var(--header-color));\r\n                    color: var(--header-hover-color, var(--header-color));\r\n                    font-weight: var(--header-hover-font-weight);\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"header\">\r\n                    <span id=\"arrow\"></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n \r\n        const header = this.shadowRoot!.getElementById('header')!;\r\n\r\n        header.addEventListener(\r\n            'click', () => {\r\n                this.state = (this.state === 'opened') ? 'closed' : 'opened';\r\n            }\r\n        );\r\n    }\r\n    \r\n    public async render() {\r\n        const label = this.shadowRoot!.getElementById('label')!;\r\n        const arrow = this.shadowRoot!.getElementById('arrow')!;\r\n        \r\n        let rect = this.getBoundingClientRect();\r\n        const arr = (rect.left < window.innerWidth / 2) ? '>' : '<';\r\n        arrow.innerHTML = arr;\r\n        label.innerHTML = this.label || '';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.label = this.label || 'label';\r\n        this.state = this.state || 'opened';\r\n\r\n        this.render();\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { PanelGroupElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-panel-group'\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: 'label', type: 'string'},\r\n    {name: 'state', type: 'string'},\r\n])\r\nclass PanelGroupElement extends HTMLElement {\r\n\r\n    public label!: string;\r\n    public state!: 'opened' | 'closed';\r\n\r\n    public static readonly observedAttributes = ['state'];\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <link rel=\"stylesheet\" href=\"css/theme.css\"/>\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([state='closed']) #content {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='closed']) #less {\r\n                    display: none;\r\n                }\r\n\r\n                :host([state='opened']) #more {\r\n                    display: none;\r\n                }\r\n\r\n                #toggler {\r\n                    display: flex;\r\n                }\r\n\r\n                #toggler:hover {\r\n                    font-weight: 500;\r\n                    color: var(--label-on-hover-color);\r\n                }\r\n\r\n                #label {\r\n                    flex: 1;\r\n                }\r\n            </style>\r\n            <div>\r\n                <div id=\"toggler\">\r\n                    <span id=\"arrow\"><!--<icon #less><icon #more>--></span>\r\n                    <span id=\"label\"></span>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `);\r\n\r\n        \r\n        this.state = this.state || 'closed';\r\n    }\r\n\r\n    public connectedCallback() {\r\n        const toggler = this.shadowRoot!.querySelector<HTMLElement>('#toggler')!;\r\n        const arrow = this.shadowRoot!.querySelector<HTMLElement>('#arrow')!;\r\n        const label = this.shadowRoot!.querySelector<HTMLElement>('#label')!;\r\n\r\n        toggler.addEventListener(\r\n            'click', () => {\r\n                if (this.state === 'opened') {\r\n                    this.state = 'closed';\r\n                }\r\n                else if (this.state === 'closed') {\r\n                    this.state = 'opened';\r\n                }\r\n            }\r\n        );\r\n\r\n        label.innerHTML = this.label!;\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\nexport { HTMLEStatusBarElementBase };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => isTagElement(\"e-statusitem\", item)) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\nexport { HTMLEStatusItemElementBase };\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { isHTMLETabPanelElement };\r\nexport { HTMLETabPanelElement };\r\nexport { BaseHTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\nfunction isHTMLETabPanelElement(obj: any): obj is BaseHTMLETabPanelElement {\r\n    return obj instanceof Node && obj.nodeType === obj.ELEMENT_NODE && (obj as Element).tagName.toLowerCase() === \"e-tabpanel\";\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass BaseHTMLETabPanelElement extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement, isHTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\nexport { BaseHTMLETabElement };\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\",\r\n    observedAttributes: [\"active\", \"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass BaseHTMLETabElement extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let panel = document.getElementById(this.controls);\r\n        if (isTagElement(\"e-tabpanel\", panel)) {\r\n            this.panel = panel;\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        switch (name) {\r\n            case \"controls\":\r\n                if (oldValue !== newValue) {\r\n                    let panel = document.getElementById(this.controls);\r\n                    if (isHTMLETabPanelElement(panel)) {\r\n                        this.panel = panel;\r\n                    }\r\n                }\r\n                break;\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                if (this.panel) {\r\n                    this.panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { TabChangeEvent };\r\nexport { HTMLETabListElement };\r\nexport { BaseHTMLETabListElement };\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ntype TabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass BaseHTMLETabListElement extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => isTagElement(\"e-tab\", tab)) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-tab\", target)) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"tabchange\", (event) => {\r\n            let targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        let tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"tabchange\": TabChangeEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\nexport { HTMLETreeItemElementBase };\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    icon: string;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\",\r\n    observedAttributes: [\"icon\", \"label\", \"expanded\", \"indent\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public icon!: string;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n    private _toggleArrow: Element;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                :host([active]) [part~=\"content\"],\r\n                [part~=\"content\"]:hover {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]:hover {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n\r\n        this._toggleArrow = this.shadowRoot!.querySelector(\"[part~=toggle_arrow]\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._toggleArrow) {\r\n                this.toggle();\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"icon\":\r\n                    if (oldValue !== newValue) {\r\n                        const iconPart = this.shadowRoot?.querySelector<HTMLElement>(\"[part~=icon]\");\r\n                        if (iconPart) {\r\n                            iconPart.dataset.value = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return isTagElement(\"e-treeitem\", this.parent) ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (isTagElement(\"e-treeitem\", this.parent)) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n        this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\nexport { HTMLETreeElementBase };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => isTagElement(\"e-treeitem\", item)) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (isTagElement(\"e-treeitem\", this.activeItem.parent)) {\r\n                                this.activeItem.parent.focus();\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.activeItem.items[0].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.previousVisibleItem().focus();\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.items[0].focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.nextVisibleItem().focus();\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.items[this.items.length - 1].focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.items[0].focus({preventScroll: true});\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.items[this.items.length - 1].deepestVisibleChildItem().focus();\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.active = false;\r\n                    }\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-treeitem\", target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            let closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                if (this._activeItem) {\r\n                    this._activeItem.active = false;\r\n                }\r\n                this._activeItem = closestItem;\r\n                this._activeItem.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEBreadcrumbItemElement };\r\nexport { HTMLEBreadcrumbItemElementBase };\r\n\r\ninterface HTMLEBreadcrumbItemElement extends HTMLElement {\r\n    label: string;\r\n    active: boolean;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-breadcrumbitem\",\r\n    observedAttributes: [\"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"}\r\n])\r\nclass HTMLEBreadcrumbItemElementBase extends HTMLElement implements HTMLEBreadcrumbItemElement {\r\n    \r\n    public label!: string;\r\n    public active!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host([active]) {\r\n                    font-weight: bold;\r\n                }\r\n\r\n                :host([active]) [part~=\"container\"]::after {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"container\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <span part=\"label\"></span>\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-breadcrumbitem\": HTMLEBreadcrumbItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEBreadcrumbItemElement } from \"./BreadcrumbItem\";\r\n\r\nexport { HTMLEBreadcrumbTrailElement };\r\nexport { HTMLEBreadcrumbTrailElementBase };\r\n\r\ninterface HTMLEBreadcrumbTrailElement extends HTMLElement {\r\n    items: HTMLEBreadcrumbItemElement[];\r\n    activateItem(item: HTMLEBreadcrumbItemElement): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-breadcrumbtrail\"\r\n})\r\nclass HTMLEBreadcrumbTrailElementBase extends HTMLElement implements HTMLEBreadcrumbTrailElement {\r\n\r\n    public items: HTMLEBreadcrumbItemElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n                \r\n                [part~=\"ul\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n    }\r\n\r\n    public activateItem(item: HTMLEBreadcrumbItemElement): void {\r\n        let itemIndex = this.items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this.items.forEach((item, index) => {\r\n                item.active = (index == itemIndex);\r\n                item.hidden = (index > itemIndex);\r\n            });\r\n            let activeItem = this.items[itemIndex];\r\n            activeItem.dispatchEvent(new CustomEvent(\"activate\"));\r\n        }\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(item => isTagElement(\"e-breadcrumbitem\", item)) as HTMLEBreadcrumbItemElement[];\r\n                this.items = items;\r\n                items.forEach((item, index) => {\r\n                    item.active = (index === items.length - 1);\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (isTagElement(\"e-breadcrumbitem\", target)) {\r\n                this.activateItem(target);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-breadcrumbtrail\": HTMLEBreadcrumbTrailElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDraggableElement };\r\nexport { HTMLEDraggableElementBase };\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    type: string;\r\n    dragovered: boolean;\r\n    data: object | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"data\", type: \"json\"}\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    public type!: string;\r\n    public data!: object | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\nexport { HTMLEDragzoneElementBase };\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    label: string;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public label!: string;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <span part=\"label\"/></span>\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.effectAllowed = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                let thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== toIndex; index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { DataChangeEvent };\r\nexport { HTMLEDropzoneElement };\r\nexport { HTMLEDropzoneElementBase };\r\nexport { DropzoneDataBase };\r\nexport { DropzoneData };\r\n\r\ninterface HTMLEDropzoneElement extends HTMLElement {\r\n    selectedDraggables: HTMLEDraggableElement[]\r\n    draggables: HTMLEDraggableElement[];\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    type: string;\r\n    multiple: boolean;\r\n    disabled: boolean;\r\n    placeholder: string;\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype DataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\",\r\n    observedAttributes: [\"placeholder\", \"label\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n    {name: \"input\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLElement implements HTMLEDropzoneElement {\r\n    \r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public input!: string;\r\n    public multiple!: boolean;\r\n    public disabled!: boolean;\r\n    public name!: string;\r\n    public type!: string;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n    public value: any;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*html*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    border: 1px dashed gray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    border-color: gainsboro;\r\n                }\r\n\r\n                :host(:empty) [part~=\"container\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding: 2px;\r\n                }\r\n\r\n                ::slotted(e-draggable:not(:only-child)) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n\r\n                :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n                :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part=\"appendarea\"] {\r\n                    display: block;\r\n                    margin: 2px;\r\n                    border-radius: 4px;\r\n                    border: 1px dotted black;\r\n                }\r\n\r\n                :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                    border-color: transparent;\r\n                }\r\n                \r\n                [part=\"placeholder\"] {\r\n                    display: inline-block;\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                    user-select: none;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n            `\r\n        );\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => isTagElement(\"e-draggable\", elem)\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = false;\r\n                });\r\n            });\r\n        }\r\n\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== toIndex; index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            let target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            let relatedTarget = event.relatedTarget as any;\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            let target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                let dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    let dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    let dragzone = document.getElementById(dragzoneId) as HTMLEDragzoneElement;\r\n                    if (dragzone) {\r\n                        let selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.cloneNode(true) as HTMLEDraggableElement;\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].cloneNode(true) as HTMLEDraggableElement;\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"datachange\": DataChangeEvent,\r\n    }\r\n}\r\n\r\ninterface DropzoneData {\r\n    getData(): object | null;\r\n}\r\n\r\ninterface DropzoneDataConstructor {\r\n    readonly prototype: DropzoneData;\r\n    new(dropzone: HTMLEDropzoneElement): DropzoneData;\r\n}\r\n\r\nclass DropzoneDataBase {\r\n    private _dropzone: HTMLEDropzoneElement;\r\n\r\n    constructor(dropzone: HTMLEDropzoneElement) {\r\n        this._dropzone = dropzone;\r\n    }\r\n\r\n    public getData(): object | null {\r\n        let dropzoneData =\r\n            this._dropzone.multiple ? this._dropzone.draggables.map(draggable => draggable.data) :\r\n            this._dropzone.draggables.length > 0 ? this._dropzone.draggables[0].data : null;\r\n\r\n        const childDropzones = Array.from(this._dropzone.querySelectorAll(\"e-dropzone\")).filter(\r\n            dropzone => dropzone.parentElement!.closest(\"e-dropzone\") === this._dropzone\r\n        );\r\n\r\n        childDropzones.forEach((childDropzone) => {\r\n            Object.assign(dropzoneData, {\r\n                ...new DropzoneDataBase(childDropzone).getData()\r\n            });\r\n        });\r\n\r\n        return dropzoneData;\r\n    }\r\n}\r\n\r\nvar DropzoneData: DropzoneDataConstructor = DropzoneDataBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot, isTagElement } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDialogElement };\r\nexport { HTMLEDialogElementBase };\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    confirm(): void;\r\n    cancel(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dialog\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n    public type!: EDialogElementType;\r\n\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    padding: 6px;\r\n                    background-color: white;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                button {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                [part~=\"actions\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"button\"]:not(:first-child) {\r\n                    margin-left: 4px;\r\n                }\r\n\r\n                :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                    display: none !important;\r\n                }\r\n            </style>\r\n            <div part=\"body\">\r\n                <slot></slot>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"actions\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button cancel-button\">Cancel</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button confirm-button\">Confirm</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button ok-button\">OK</button>\r\n            </div>\r\n        `);\r\n\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~='cancel-button']\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~='confirm-button']\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~='ok-button']\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\"));\r\n        this.remove();\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\"));\r\n        this.remove();\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_confirm\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_cancel\": Event,\r\n    }\r\n}","import { isTagElement } from \"../HTMLElement\";\r\n\r\nexport { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null;\r\n        _control?: string;\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (isTagElement(\"input\", element)) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                let floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"file\") {\r\n                let files = element.files;\r\n                if (files !== null) {\r\n                    state[element.name] = {\r\n                        value: files[0].name,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n        }\r\n        else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null,\r\n                _control: element.type\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        let namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            let stateValue = state[name].value;\r\n            if (isTagElement(\"input\", element)) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\nexport { HTMLEHeightSashElementBase };\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n\r\n                    height: 4px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let directionToTarget = Math.sign(\r\n                    ((this.getBoundingClientRect().top + this.getBoundingClientRect().bottom) / 2) -\r\n                    ((this._target.getBoundingClientRect().top + this._target.getBoundingClientRect().bottom) / 2)\r\n                );\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let minHeight = parseFloat(this._targetStyle.getPropertyValue(\"min-height\"));\r\n                let maxHeight = parseFloat(this._targetStyle.getPropertyValue(\"max-height\"));\r\n                let newHeight = Math.trunc(height + directionToTarget * event.movementY);\r\n                if (!isNaN(minHeight)) {\r\n                    newHeight = Math.max(newHeight, minHeight);\r\n                }\r\n                if (!isNaN(maxHeight)) {\r\n                    newHeight = Math.min(newHeight, maxHeight);\r\n                }\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event: PointerEvent) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            }, {once: true});\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { PaletteElement };\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: 'e-palette'\r\n})\r\n@GenerateAttributeAccessors([{name: 'colors', type: 'json'}])\r\nclass PaletteElement extends HTMLElement {\r\n\r\n    public colors!: Array<string>;\r\n\r\n    constructor() {\r\n        super();\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    content: contains;\r\n                }\r\n\r\n               :host #container {\r\n                    display: grid;\r\n                    grid-template-cols: repeat(5, 1fr);\r\n                    grid-auto-rows: 16px;\r\n                }\r\n            </style>\r\n            <div id=\"container\">\r\n            </div>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback() {\r\n                \r\n        const colors = this.colors;\r\n        if (colors.length > 0) {\r\n            this.shadowRoot!.querySelector('#container')!.append(\r\n                ...colors.map((color: string) => {\r\n                    const div = document.createElement('div');\r\n                    div.setAttribute('style', `background-color: ${color}`);                    \r\n                    return div;\r\n                })\r\n            );\r\n        }\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\nexport { HTMLEWidthSashElementBase };\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\",\r\n    observedAttributes: [\"controls\"]\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n\r\n                    width: 4px;\r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let directionToTarget = Math.sign(\r\n                    ((this.getBoundingClientRect().left + this.getBoundingClientRect().right) / 2) -\r\n                    ((this._target.getBoundingClientRect().right + this._target.getBoundingClientRect().right) / 2)\r\n                );\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let minWidth = parseFloat(this._targetStyle.getPropertyValue(\"min-width\"));\r\n                let maxWidth = parseFloat(this._targetStyle.getPropertyValue(\"max-width\"));\r\n                let newWidth = Math.trunc(width + directionToTarget * event.movementX);\r\n                if (!isNaN(minWidth)) {\r\n                    newWidth = Math.max(newWidth, minWidth);\r\n                }\r\n                if (!isNaN(maxWidth)) {\r\n                    newWidth = Math.min(newWidth, maxWidth);\r\n                }\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event: PointerEvent) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            }, {once: true});\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": CustomEvent,\r\n    }\r\n}","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ObjectModelBase };\r\nexport { ListModelChangeEvent };\r\nexport { ListModelChangeType };\r\nexport { ListModel };\r\nexport { ListModelBase };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ninterface ObjectModelChangeEvents {\r\n    \"objectmodelchange\": ObjectModelChangeEvent;\r\n}\r\n\r\ninterface ObjectModel<Data extends object> extends EventDispatcher<ObjectModelChangeEvents> {\r\n    readonly data: Readonly<Data>;\r\n    set<K extends keyof Data>(key: K, value: Data[K]): void;\r\n}\r\n\r\nclass ObjectModelBase<Data extends object> extends EventDispatcher<ObjectModelChangeEvents> implements ObjectModel<Data> {\r\n    private _data: Data;\r\n\r\n    constructor(data: Data) {\r\n        super();\r\n        this._data = data;\r\n    }\r\n\r\n    public get data(): Readonly<Data> {\r\n        return this._data;\r\n    }\r\n\r\n    public set<K extends keyof Data>(key: K, value: Data[K]): void {\r\n        const oldValue = this._data[key];\r\n        this._data[key] = value;\r\n        this.dispatchEvent(new Event(\"objectmodelchange\", {property: key, oldValue: oldValue, newValue: value}));\r\n    }\r\n}\r\n\r\ntype ListModelChangeType = \"insert\" | \"remove\" | \"clear\";\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        removedItems: [index: number, items: any[]][];\r\n        addedItems: [index: number, items: any[]][];\r\n    };\r\n}\r\n\r\ninterface ListModelEvents {\r\n    \"listmodelchange\": ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModel<Item> extends EventDispatcher<ListModelEvents> {\r\n    readonly items: ReadonlyArray<Item>;\r\n    set(items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    insert(index: number, ...items: Item[]): void;\r\n    splice(start: number, deleteCount: number, ...items: Item[]): Item[];\r\n    filter(predicate: (value: Item, index: number, array: Item[]) => boolean): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ListModelBase<Item> extends EventDispatcher<ListModelEvents> implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor(items: Item[]) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public set(items: Item[]): void {\r\n        const oldItems = this._items.slice();\r\n        this._items = items.slice();\r\n        const removedItems = [[0, oldItems]];\r\n        const addedItems = [[0, items.slice()]];\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: removedItems, addedItems: addedItems}));\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const oldItemsLength = this._items.length;\r\n        const newLength = this._items.push(...items);\r\n        const addedItems = [[oldItemsLength, items.slice()]];\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: [[]], addedItems: addedItems}));\r\n        return newLength;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index >= 0 && index <= this._items.length) {\r\n            this._items.splice(index, 0, ...items);\r\n            const addedItems = [[index, items.slice()]];\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: [[]], addedItems: addedItems}));\r\n        }\r\n    }\r\n\r\n    public splice(start: number, deleteCount: number, ...items: Item[]): Item[] {\r\n        const length = this._items.length;\r\n        start = (start < 0) ? (start > -length) ? length - start : 0 : start;\r\n        start = Math.min(start, length);\r\n        \r\n        const spliceResult = this._items.splice(start, deleteCount, ...items);\r\n        const removedItems = [[start, spliceResult]];\r\n        const addedItems = [[start, items.slice()]];\r\n        \r\n        this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: removedItems, addedItems: addedItems}));\r\n        return spliceResult;\r\n    }\r\n\r\n    public filter(predicate: (value: Item, index: number, array: Item[]) => boolean): void {\r\n        const oldItems = this._items.slice();\r\n        this._items = this._items.filter(predicate);\r\n        const removedItems = oldItems\r\n            .map((item, index, array) => !predicate(item, index, array) ? [index, item] : null)\r\n            .filter(item => item !== null);\r\n        \r\n        this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: removedItems, addedItems: [[]]}));\r\n    }\r\n\r\n    public clear(): void {\r\n        const oldItems = this._items.slice();\r\n        this._items = [];\r\n        const removedItems = [[0, oldItems]];\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {removedItems: removedItems, addedItems: [[]]}));\r\n    }\r\n}","import { isTagElement } from \"../elements/HTMLElement\";\r\nimport { setPropertyFromPath } from \"../elements/Snippets\";\r\n\r\nexport { StructuredFormData };\r\n\r\nclass StructuredFormData {\r\n    form: HTMLFormElement;\r\n\r\n    constructor (form: HTMLFormElement) {\r\n        this.form = form;\r\n    }\r\n\r\n    private resolveElementScope(element: HTMLElement & {name: string}): string {\r\n        let fullname = element.name;\r\n        let parent: HTMLElement | null = element.parentElement\r\n        while (parent && parent !== this.form) {\r\n            let scope = parent.dataset.scope;\r\n            if (typeof scope !== \"undefined\") {\r\n                fullname = `${scope}.${fullname}`;\r\n            }\r\n            parent = parent?.parentElement;\r\n        }\r\n        return fullname;\r\n    }\r\n\r\n    public getScopedData(): object {\r\n        let elements = Array.from(this.form.elements);\r\n        let data = {};\r\n        elements.forEach((element) => {\r\n            if (isTagElement(\"input\", element) || isTagElement(\"select\", element) || isTagElement(\"textarea\", element)) {\r\n                if (element.name) {\r\n                    let value: any = null;\r\n                    if (isTagElement(\"input\", element)) {\r\n                        if (element.value) {\r\n                            switch (element.type) {\r\n                                case \"text\":\r\n                                    value = element.value;\r\n                                    break;\r\n                                case \"date\":\r\n                                case \"datetime-local\":\r\n                                    value = element.value;\r\n                                    break;\r\n                                case \"checkbox\":\r\n                                case \"radio\":\r\n                                    value = (element.value == \"on\");\r\n                                    break;\r\n                                default:\r\n                                    value = element.value;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (value !== null) {\r\n                        let fullname = this.resolveElementScope(element);\r\n                        setPropertyFromPath(data, fullname, value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n}","import { Element, TextNode } from \"../../elements/HTMLElement\";\r\n\r\nexport { HTMLTableTemplateDescription };\r\nexport { HTMLTableTemplate };\r\n\r\ntype HTMLTableTemplateDescription = Partial<Pick<HTMLTableElement, \"id\" | \"className\">> & {\r\n    headerCells: (string | Node)[];\r\n\r\n    bodyCells: ((string | Node) | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[][];\r\n\r\n    footerCells: (string | Node | {\r\n        type: \"header\" | \"data\" | undefined\r\n        content: Node | string\r\n    })[];\r\n}\r\n\r\ninterface HTMLTableTemplate {\r\n    (desc: HTMLTableTemplateDescription): HTMLTableElement;\r\n}\r\n\r\nconst HTMLTableTemplate: HTMLTableTemplate = (desc: HTMLTableTemplateDescription) => {\r\n    \r\n    const thead = Element(\r\n        \"thead\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.headerCells.map((cell) => {\r\n                        return Element(\r\n                            \"th\", {\r\n                                props: {\r\n                                    scope: \"col\" \r\n                                },\r\n                                children: [\r\n                                    (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                ]\r\n                            }\r\n                        );\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const tbody = Element(\r\n        \"tbody\", {\r\n            children: desc.bodyCells.map((row) => {\r\n                return Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: row.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    );\r\n\r\n    const tfoot = Element(\r\n        \"tfoot\", {\r\n            children: [\r\n                Element(\r\n                \"tr\", {\r\n                    props: {\r\n                        id: desc.id,\r\n                        className: desc.className,\r\n                    },\r\n                    children: desc.footerCells.map((cell) => {\r\n                        if ((typeof cell === \"object\") && !(cell instanceof Node) && (\"type\" in cell)) {\r\n                            switch (cell.type) {\r\n                                case \"data\":\r\n                                default:\r\n                                    return Element(\r\n                                        \"td\", {\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                                case \"header\":\r\n                                    return Element(\r\n                                        \"th\", {\r\n                                            props: {\r\n                                                scope: \"row\" \r\n                                            },\r\n                                            children: [\r\n                                                (typeof cell.content === \"string\") ? TextNode(cell.content) : cell.content\r\n                                            ]\r\n                                        }\r\n                                    );\r\n                            }\r\n                        }\r\n                        else {\r\n                            return Element(\r\n                                \"td\", {\r\n                                    children: [\r\n                                        (typeof cell === \"string\") ? TextNode(cell) : cell\r\n                                    ]\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                })\r\n            ]\r\n        }\r\n    );\r\n\r\n    const table = Element(\r\n        \"table\", {\r\n            props: {\r\n                id: desc.id,\r\n                className: desc.className,\r\n            },\r\n            children: [\r\n                thead,\r\n                tbody,\r\n                tfoot\r\n            ]\r\n        }\r\n    );\r\n\r\n    return table;\r\n}","import { isParentNode, isReactiveParentNode, isReactiveNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { View };\r\nexport { ViewBase };\r\nexport { ReactiveViewBase };\r\n\r\ninterface View<M extends object = object, E extends Element = Element> {\r\n    readonly root: E;\r\n    readonly model: M;\r\n    render(): E;\r\n}\r\n\r\nabstract class ViewBase<M extends object = object, E extends Element = Element> implements View<M, E> {\r\n    private _root: E;\r\n    private _model: M;\r\n\r\n    constructor(model: M) {\r\n        this._model = model;\r\n        this._root = this.render();\r\n    }\r\n\r\n    public get root(): E {\r\n        return this._root;\r\n    }\r\n\r\n    public get model(): M {\r\n        return this._model;\r\n    }\r\n\r\n    public abstract render(): E;\r\n}\r\n\r\nabstract class ReactiveViewBase<M extends object = object, E extends Element = Element> extends ViewBase<M, E> implements View<M, E> {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor(model: M) {\r\n        super(model);\r\n        this._observer = new MutationObserver((mutations: MutationRecord[]) => {\r\n            mutations.forEach((record: MutationRecord) => {\r\n                Array.from(record.removedNodes).map((node) => {\r\n                    this.removeReactiveListeners(node);\r\n                });\r\n                Array.from(record.addedNodes).map((node) => {\r\n                    this.addReactiveListeners(node);\r\n                });\r\n            });\r\n        });\r\n        this._observer.observe(this.root, {\r\n            subtree: true,\r\n            childList: true\r\n        });\r\n        this.addReactiveListeners(this.root);\r\n    }\r\n\r\n    private addReactiveListeners(node: Node): void {\r\n        if (isReactiveParentNode(node) || isReactiveNode(node)) {\r\n            const { _reactModel, _reactEvent, _reactListener } = node._reactAttributes; \r\n            _reactModel.addEventListener(_reactEvent as any, _reactListener as any);\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                this.addReactiveListeners(childNode);\r\n            });\r\n        }\r\n    }\r\n\r\n    private removeReactiveListeners(node: Node): void {\r\n        if (isReactiveParentNode(node) || isReactiveNode(node)) {\r\n            const { _reactModel, _reactEvent, _reactListener } = node._reactAttributes; \r\n            _reactModel.removeEventListener(_reactEvent as any, _reactListener as any);\r\n        }\r\n        if (isParentNode(node)) {\r\n            forAllSubtreeNodes(node, (childNode) => {\r\n                this.removeReactiveListeners(childNode);\r\n            });\r\n        }\r\n    }\r\n}","import * as editor from \"../index\";\r\nimport { formdata } from \"./formdata\";\r\n\r\nexport async function main() {\r\n    console.log(\"Main loaded!\");\r\n    (window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }\r\n}","import { getFormState, setFormState } from \"../src/elements/forms/Snippets\";\r\n\r\nexport function formdata() {\r\n    const exportButton = document.getElementById(\"export-button\");\r\n    const loadButton = document.getElementById(\"load-button\");\r\n\r\n    exportButton?.addEventListener(\"click\", () => {\r\n        const form = exportButton!.closest(\"form\");\r\n        if (form) {\r\n            let formState = getFormState(form);\r\n            let dataBlob = new Blob([JSON.stringify(formState, null, 4)], {type: \"application/json\"});\r\n            let donwloadAnchor = document.createElement(\"a\");\r\n            donwloadAnchor.href = URL.createObjectURL(dataBlob);\r\n            donwloadAnchor.download = \"config.json\";\r\n            donwloadAnchor.click();\r\n        }\r\n    });\r\n\r\n    loadButton?.addEventListener(\"click\", () => {\r\n        const form = exportButton!.closest(\"form\");\r\n        if (form) {\r\n            let input = document.createElement(\"input\");\r\n            input.type = \"file\";\r\n            input.addEventListener(\"change\", () => {\r\n                let file = input.files ? input.files.length > 0 ? input.files.item(0) : null : null;\r\n                if (file) {\r\n                    file.text().then((resp) => {\r\n                        let formState = JSON.parse(resp);\r\n                        const form = exportButton!.closest(\"form\");\r\n                        if (form) {\r\n                            setFormState(form, formState);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            input.click();\r\n        }\r\n    });\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isUndoCommand","exec","undo","EventBase","constructor","type","data","this","Event","EventDispatcherBase","_listeners","Map","addEventListener","event","handler","once","listeners","toString","newListener","set","find","listener","push","removeEventListener","count","length","idx","findIndex","pop","delete","dispatchEvent","filter","EventDispatcher","forAllSubtreeElements","element","func","index","children","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","titlize","str","charAt","toUpperCase","substr","toLowerCase","snakeToCamel","map","join","camelToSnake","replace","trainToCamel","camelToTrain","isTagElement","tagName","Node","nodeType","ELEMENT_NODE","parseStringTemplate","template","items","regexp","itemsKeys","keys","result","resultNodes","lastResultIndex","document","createTextNode","fragment","DocumentFragment","append","RegisterCustomHTMLElement","args","elementCtor","name","observedAttributes","options","customElements","define","GenerateAttributeAccessors","attributes","attr","getAttribute","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","bindShadowRoot","templateContent","root","attachShadow","mode","createElement","innerHTML","appendChild","content","cloneNode","Fragment","nodes","createDocumentFragment","TextNode","text","Element","init","setElementProperties","attrs","setElementAttributes","setElementChildren","setHTMLElementEventListeners","styles","property","style","setProperty","setHTMLElementStyles","isParentNode","node","isElement","isReactiveNode","testNode","_reactAttributes","_reactEvent","isReactiveParentNode","ReactiveNode","objectOrList","react","assign","_reactModel","_reactListener","removedItems","addedItems","oldValue","newValue","ReactiveChildNodes","list","removedItemsSlice","_","remove","addedItemsSlice","before","entries","entry","textContent","properties","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrName","attrValue","RegExp","test","AttributeMutationMixinBase","attributeName","attributeType","attributeValue","createMutationObserverCallback","mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","target","targetElement","Key","KeyModifier","MouseButton","displayKeyModifier","Control","testKeyModifier","mod","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","HTMLEMenuItemGroupTemplate","desc","descArgs","HTMLEMenuItemTemplate","id","className","HTMLEMenuTemplate","itemDesc","slotted","menu","slot","title","label","disabled","checked","command","commandArgs","hotkey","HTMLEMenubarTemplate","tabIndex","EditorBase","super","_commands","_context","_hotkeys","_undoCommandsCallStack","_redoCommandsCallStack","menubar","statusbar","_state","_stateListeners","setup","menubarContainer","getElementById","body","querySelector","from","detail","oldHotKey","removeHotkeyExec","trigger","bind","newHotKey","addHotkeyExec","Promise","all","resolve","reject","fetch","then","response","ok","json","setContext","context","getState","setState","state","startsWith","stateListeners","newStateValue","stateListener","addStateListener","statekey","removeStateListener","splice","registerCommand","executeCommand","opts","undoLastCommand","lastCommand","redoLastCommand","hotkeys","HTMLEMenuElementBase","HTMLElement","parentItem","_activeIndex","activeIndex","connectedCallback","shadowRoot","assignedElements","elem","parentMenu","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","contains","expanded","newTarget","relatedTarget","activeItem","stopPropagation","parentGroup","group","childMenu","attributeChangedCallback","clientWidth","overflowing","findItem","predicate","subitems","foundItem","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuButtonElementBase","menuSlot","menuElem","toggle","capture","alert","CustomEvent","bubbles","labelPart","HTMLEMenuItemElementBase","_hotkey","hotkeyPart","inputPart","HTMLEMenuItemGroupElementBase","checkedRadio","PanelElement","arrow","arr","window","innerWidth","render","PanelGroupElement","toggler","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","isHTMLETabPanelElement","BaseHTMLETabPanelElement","BaseHTMLETabElement","panel","controls","hidden","tab","BaseHTMLETabListElement","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","HTMLETreeItemElementBase","indent","_toggleArrow","iconPart","dataset","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","HTMLETreeElementBase","_activeItem","preventScroll","closestItem","closest","HTMLEBreadcrumbItemElementBase","HTMLEBreadcrumbTrailElementBase","activateItem","itemIndex","HTMLEDraggableElementBase","draggable","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","selected","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","effectAllowed","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","DropzoneDataBase","dropzone","_dropzone","dropzoneData","querySelectorAll","parentElement","childDropzone","DropzoneData","HTMLEDialogElementBase","_cancelButton","_confirmButton","_okButton","cancel","confirm","getFormState","form","elements","_control","floatValue","files","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","directionToTarget","height","getPropertyValue","minHeight","maxHeight","newHeight","trunc","movementY","setPointerCapture","pointerId","releasePointerCapture","getComputedStyle","HTMLEImportElementBase","async","outerHTML","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","PaletteElement","colors","color","div","HTMLEWidthSashElementBase","width","minWidth","maxWidth","newWidth","movementX","ObjectModelBase","_data","ListModelBase","_items","oldItems","slice","oldItemsLength","newLength","insert","start","deleteCount","spliceResult","array","clear","StructuredFormData","resolveElementScope","fullname","scope","getScopedData","HTMLTableTemplate","thead","headerCells","cell","tbody","bodyCells","row","tfoot","footerCells","ViewBase","model","_model","_root","ReactiveViewBase","_observer","MutationObserver","mutations","record","removeReactiveListeners","addReactiveListeners","observe","childList","childNode","main","log","formDataImport","exportButton","loadButton","formState","dataBlob","Blob","donwloadAnchor","href","URL","createObjectURL","download","click","input","file","resp","formdata"],"sourceRoot":""}