{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/misc/Separator.ts","webpack://main/./src/elements/misc/ToolTip.ts","webpack://main/./src/elements/misc/Handle.ts","webpack://main/./src/elements/misc/HeightSash.ts","webpack://main/./src/elements/misc/Import.ts","webpack://main/./src/elements/misc/Loader.ts","webpack://main/./src/elements/misc/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemRight - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom  - menuHeight - closestMenuTop :\r\n                        itemTop - closestMenuTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            }),\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-sort-indicator\"\r\n                                }\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const {sortorder, filters} = column;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\",\r\n                                            checked: sortorder === 1\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\",\r\n                                            checked: sortorder === -1\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: filters.map(filter => {\r\n                                    const {name} = filter;\r\n                                    return element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter),\r\n                                            label: name\r\n                                        },\r\n                                        children: name\r\n                                    })\r\n                                }),\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            const {checked, label} = targetItem;\r\n                                            const filter = filters.find(filter => filter.name === label);\r\n                                            if (filter) {\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderContent = (<HTMLElement>target).matches(\"e-gridcell[type=columnheader] :scope:not(e-wsash)\");\r\n        if (targetIsHeaderContent) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    #getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    treeItem(element: HTMLETreeItemElement): TreeItemModel | null  {\r\n        return this.model.getItemByUri(this.#getTreeItemElementUri(element));\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"/css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>this.treeItem(item_i)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {treeElement} = this;\r\n        if (treeElement) {\r\n            const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                this.treeItem(activeItem) :\r\n                null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.#getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.#getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n    \r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.blur();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                click: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel[id='${controls}']`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly dropTargetItem: HTMLEListItemElement | null;\r\n    name: string;\r\n    droptarget: boolean;\r\n    items(): HTMLEListItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.querySelector<HTMLEListItemElement>(\r\n            \"e-listitem[droptarget]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    items(): HTMLEListItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEListItemElement>(\r\n            \":is(:scope, :scope > e-listitemgroup) > e-listitem\"\r\n        ));\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabIndex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabIndex === null ? 0 : parseInt(tabIndex);\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = this.items();\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(): void;\r\n    hide(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 200;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        this.visible = true;\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 0 },\r\n            { opacity: 1 }\r\n        ], {\r\n            id: \"show\",\r\n            duration: SHOW_DELAY_MS\r\n        })\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.#toggleAnimation = null;\r\n            },\r\n            () => {\r\n                this.visible = false;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n        this.#position();\r\n    }\r\n\r\n    hide(): void {\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 1 },\r\n            { opacity: 0 }\r\n        ], {\r\n            id: \"hide\",\r\n            duration: HIDE_DELAY_MS\r\n        });\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.visible = false;\r\n            },\r\n            () => {\r\n                this.visible = true;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", this.#targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", this.#targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", this.#targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", this.#targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        document.addEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        document.removeEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"/assets/dots.png\");\r\n                            mask-image: url(\"/assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { HTMLEMenuElement } from \"../src/elements/containers/menus/Menu\";\r\nimport { EMenuItem } from \"../src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarElement } from \"../src/elements/containers/toolbars/ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"../src/elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../src/elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../src/elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveElement } from \"../src/elements/Element\";\r\nimport { ModelEvent, ModelProperty } from \"../src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"../src/views/GridView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"../src/views/TreeView\";\r\n\r\nimport * as editor from \"../index\";\r\n\r\neditor;\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n    \r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function main() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n    gridView.render();\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ]\r\n    });\r\n    \r\n    @CustomElement({\r\n        name: \"e-mytreeview\"\r\n    })\r\n    class MyTreeView extends TreeView {\r\n\r\n        override render(): void {\r\n            super.render();\r\n            const {shadowRoot, treeElement} = this;\r\n            shadowRoot.prepend(\r\n                element(\"link\", {\r\n                    attributes: {\r\n                        rel: \"stylesheet\",\r\n                        href: \"/sample/css/mytreeview.css\"\r\n                    }\r\n                })\r\n            );\r\n            treeElement!.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n            treeElement!.addEventListener(\"dblclick\", this.#handleDoubleClickEvent.bind(this));\r\n        }\r\n\r\n        override itemContentDelegate(item: MyTreeItemModel) {\r\n            return fragment(\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"label\"\r\n                        }\r\n                    }),\r\n                    [\"name\"],\r\n                    (label, property, oldValue, newValue) => {\r\n                        label.textContent = newValue;\r\n                    }\r\n                ),\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"badge\"\r\n                        }\r\n                    }),\r\n                    [\"childCount\", \"type\"],\r\n                    (badge, property, oldValue, newValue) => {\r\n                        switch (property) {\r\n                            case \"type\": {\r\n                                if (newValue === \"leaf\") {\r\n                                    badge.textContent = null;\r\n                                }\r\n                                else {\r\n                                    badge.textContent = `(${item.childCount})`;\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"childCount\": {\r\n                                badge.textContent = `(${newValue})`;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            );\r\n        }\r\n\r\n        override itemToolbarDelegate(this: TreeView, item: MyTreeItemModel): HTMLEToolBarElement {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"e-toolbar\", {\r\n                    children: [\r\n                        element(\"e-toolbaritem\", {\r\n                            attributes: {\r\n                                name: \"visibility\",\r\n                                type: \"checkbox\",\r\n                                label: \"Visibility\",\r\n                                iconed: true\r\n                            },\r\n                            listeners: {\r\n                                click: (event) => {\r\n                                    item.visibility ?\r\n                                        item.hide() :\r\n                                        item.show();\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                [\"visibility\"],\r\n                (toolbar, property, oldValue, newValue) => {\r\n                    switch (property) {\r\n                        case \"visibility\": {\r\n                            const visibilityItem = toolbar\r\n                                .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.label = label;\r\n                                visibilityItem.title = label;\r\n                                visibilityItem.pressed = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        override itemMenuDelegate(this: TreeView): HTMLEMenuElement {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement!;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        activeItem.visibility ?\r\n                                            selectedItemsList.hide() :\r\n                                            selectedItemsList.show();\r\n                                        activeItemElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-separator\"),\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                children: \"Delete\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        const {count} = selectedItemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItemsList.remove();\r\n                                        }\r\n                                        treeElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n        }\r\n\r\n        #handleKeyDownEvent(event: KeyboardEvent) {\r\n            const {currentTarget, key} = event;\r\n            const targetTree = <HTMLETreeElement>currentTarget;\r\n            const {activeItem} = targetTree;\r\n            if (activeItem) {\r\n                const activeItemModel = <MyTreeItemModel>this.treeItem(activeItem!)!;\r\n                switch (key) {\r\n                    case \"Delete\": {\r\n                        const selectedItems = this.selectedItems();\r\n                        const selectedItemsList = selectedItems.includes(activeItemModel) ?\r\n                            new TreeItemModelList(selectedItems) : new TreeItemModelList([activeItemModel]);\r\n                        const {count} = selectedItemsList;\r\n                        const doRemove = confirm(`Remove ${count} items?`);\r\n                        if (doRemove) {\r\n                            selectedItemsList.remove();\r\n                        }\r\n                        targetTree.focus();\r\n                        event.preventDefault();\r\n                        break;\r\n                    }\r\n                    case \"Enter\": {\r\n                        this.showEditItemDialog(activeItemModel);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        showEditItemDialog(item: MyTreeItemModel): void {\r\n            const {shadowRoot} = this;\r\n            const {visibility, name, type} = item;\r\n            const dialog = element(\"dialog\", {\r\n                children: [\r\n                    element(\"form\", {\r\n                        attributes: {\r\n                            method: \"dialog\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-tablist\", {\r\n                                children: [\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"properties\"\r\n                                        },\r\n                                        children: \"Properties\"\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"properties\"\r\n                                },\r\n                                children: [\r\n                                    element(\"fieldset\", {\r\n                                        children: [\r\n                                            element(\"legend\", {\r\n                                                children: \"Item information\"\r\n                                            }),\r\n                                            element(\"div\", {\r\n                                                attributes: {\r\n                                                    class: \"form-content\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"visibility\"\r\n                                                        },\r\n                                                        children: \"Visibility\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"visibility\",\r\n                                                            type: \"checkbox\",\r\n                                                            name: \"visibility\",\r\n                                                            checked: visibility\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"name\"\r\n                                                        },\r\n                                                        children: \"Name\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"name\",\r\n                                                            type: \"text\",\r\n                                                            name: \"name\",\r\n                                                            value: name\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"type\"\r\n                                                        },\r\n                                                        children: \"Type\"\r\n                                                    }),\r\n                                                    element(\"e-select\", {\r\n                                                        attributes: {\r\n                                                            id: \"type\",\r\n                                                            name: \"type\"\r\n                                                        },\r\n                                                        children: [\"parent\", \"leaf\"].map(\r\n                                                            type_i => element(\"e-option\", {\r\n                                                                attributes: {\r\n                                                                    label: type_i,\r\n                                                                    value: type_i,\r\n                                                                    selected: type === type_i\r\n                                                                }\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"footer\", {\r\n                                attributes: {\r\n                                    class: \"dialog-footer\"\r\n                                },\r\n                                children: [\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            type: \"submit\",\r\n                                            value: \"confirm\"\r\n                                        },\r\n                                        children: \"Confirm\"\r\n                                    }),\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            value: \"cancel\"\r\n                                        },\r\n                                        children: \"Cancel\"\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: (event) => {\r\n                        const {currentTarget} = event;\r\n                        const targetDialog = <HTMLDialogElement>currentTarget;\r\n                        if (targetDialog.returnValue === \"confirm\") {\r\n                            const form = targetDialog.querySelector(\"form\")!;\r\n                            const formData = new FormData(form);\r\n                            item.visibility = Boolean(formData.get(\"visibility\"));\r\n                            item.type = <\"leaf\" | \"parent\">String(formData.get(\"type\"));\r\n                            item.name = String(formData.get(\"name\"));\r\n                        }\r\n                        targetDialog.remove();\r\n                    }\r\n                }\r\n            });\r\n            shadowRoot.append(dialog);\r\n            dialog.showModal();\r\n        }\r\n\r\n        #handleDoubleClickEvent(event: MouseEvent): void {\r\n            const {target} = event;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const targetItemModel = <MyTreeItemModel>this.treeItem(targetItem);\r\n            if (targetItemModel) {\r\n                this.showEditItemDialog(targetItemModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    const treeView = new MyTreeView();\r\n    treeView.draggable = true;\r\n    treeView.setModel(treeModel);\r\n    treeView.render();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: [\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\",\r\n                        disabled: true\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\"\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Menuitem 1\"\r\n                                }),\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"submenu\"\r\n                                    },\r\n                                    children: [\r\n                                        \"Submenu 1\",\r\n                                        element(\"e-menu\", {\r\n                                            attributes: {\r\n                                                slot: \"menu\"\r\n                                            },\r\n                                            children: [\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 1\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(0)\r\n                                                }),\r\n                                                EMenuItem.radio({\r\n                                                    label: \"SubmenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: String(1)\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Checkbox\"\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        element(\"e-toolbar\", {\r\n            children: [\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"one\"\r\n                    },\r\n                    children: \"Item 1\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"three\",\r\n                    },\r\n                    children: \"Item 3\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"four\"\r\n                    },\r\n                    children: \"Item 4\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    children: \"Item 5\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"two\"\r\n                    },\r\n                    children: \"Item 2\"\r\n                })\r\n            ]\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"one\",\r\n                position: \"bottom\"\r\n            },\r\n            children: \"First tooltip\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"two\",\r\n                position: \"top\"\r\n            },\r\n            children: \"Second tooltip!\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"three\",\r\n                position: \"right\",\r\n            },\r\n            children: \"Third tooltip ?\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"four\",\r\n                position: \"left\"\r\n            },\r\n            children: \"Fourth.\"\r\n        })\r\n    );\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","snakeToCamel","str","split","charAt","toUpperCase","substring","toLowerCase","join","camelToSnake","replace","trainToCamel","AttributeProperty","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","Stylesheet","text","stylesheet","CSSStyleSheet","replaceSync","trimMultilineIndent","newlineIndex","indentMatch","match","indent","replaceAll","trimEnd","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","QueryAllProperty","from","querySelectorAll","fragment","nodes","document","createDocumentFragment","textNode","createTextNode","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","AttributeMutationMixinBase","attributeType","attach","detach","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabIndex","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","click","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","render","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","selectby","multisectable","contextmenu","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","checked","targetItem","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","treeElement","draggable","treeItemElement","treeItem","dragstart","drop","focusin","focusout","itemContentDelegate","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","closestItem","parentElement","toolbar","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","beginSelection","selected","endSelection","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","Key","KeyModifier","MouseButton","TreeView","HotKey","mod1","mod2","mod","Control","altKey","ctrlKey","shiftKey","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","parseInt","x","y","firstItem","walker","currentNode","root","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","radio_i","nearestItem","error","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","intersectsWithMouse","containsRelatedTarget","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","activeCell","activeRow","head","selectedCells","selectedRows","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridElement","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEMenuBarElementBase","disabled","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","EMenuButton","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","HTMLEToolBarElement","HTMLETabElementBase","panel","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","tab","targetTab","tab_i","HTMLETabListElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETreeItemElementBase","labelPart","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","HTMLETreeElement","HTMLEListItemElementBase","badge","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","targetIndex","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","open","close","HTMLEDialogElement","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESelectElement","HTMLESeparatorElementBase","HTMLESeparatorElement","HTMLEToolTipElementBase","tooltip","htmlFor","show","visible","opacity","hide","oldTarget","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","HTMLEToolTipElement","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHandleElement","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","rootNode","requestAnimationFrame","HTMLEHeightSashElement","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLEImportElement","HTMLELoaderElementBase","promise","commonStyle","barStyle","circleStyle","HTMLELoaderElement","HTMLEWidthSashElementBase","setWidth","newWidth","HTMLEWidthSashElement","addedNodes","removedNodes","targetElement","mixin","attr","childIndex","child","AttributeMixinsObserver","mixins","takeRecords","attributeFilter","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeOldValue","widgets","Widget","separatorWidget","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menuBarWidget","menubar","menuWidget","setContextual","setPosition","getContextual","menuitem_i","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","targetMenu","menuItemGroupWidget","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","treeWidget","tree","setMultiSelectable","getMultiSelectable","treeItemGroupWidget","listItemWidget","listWidget","listItemGroupWidget","toolbarItemWidget","setPressed","getPressed","toolbarWidget","setOrientation","getOrientation","targetToolbar","toolbarItemGroupWidget","widthSashWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","heightSashWidget","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","gridBodyWidget","gridHeadWidget","gridHeaderWidget","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","optionGroupWidget","MyTreeItemModelList","display","result","console","log","MyTreeItemModel","childCount","visibility","main","gridView","Date","getFullYear","treeModel","MyTreeView","iconed","visibilityItem","activeItemElement","selectedItemsList","showEditItemDialog","dialog","method","for","targetDialog","returnValue","form","formData","FormData","showModal","activeItemModel","treeView"],"sourceRoot":""}