{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/MenuView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Separator.ts","webpack://main/./src/elements/utils/ToolTip.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n/*\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };*/\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n            name?: string;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n        name?: string;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const {defaultValue = null, observed = false, name = camelToTrain(propertyName)} = init;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(name);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [name],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(name);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(name, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(name);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(name, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(name);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : properties.filter(\r\n                (property_i, i, properties) => properties.indexOf(property_i) === i\r\n            )\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    overflown!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemRight - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom  - menuHeight - closestMenuTop :\r\n                        itemTop - closestMenuTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    render(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\ninterface GridInit {\r\n    rows: GridRowModel[];\r\n    columns: GridColumnModel[];\r\n}\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: GridInit)\r\n    constructor(init?: GridInit) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\ninterface GridColumnInit {\r\n    name: string,\r\n    type: NumberConstructor | StringConstructor | DateConstructor,\r\n    label: string,\r\n    extract: (row: GridRowModel) => string,\r\n    filters?: (GridRowFilter & {name: string})[]\r\n}\r\n\r\nclass GridColumnModel extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => string;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: GridColumnInit) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.render();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                console.log(rowElement);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {gridElement} = this;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                                gridElement.focus();\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                        gridElement.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLEMenuItemElement>currentTarget;\r\n                                                const {checked} = targetItem;\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                                gridElement.focus();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { CustomElement, element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\ninterface MenuInit {\r\n    name?: string;\r\n    items: MenuItemModel[];\r\n}\r\n\r\nclass MenuModel extends ModelObject {\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor(init: MenuInit) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? []);\r\n    }\r\n}\r\n\r\ninterface MenuItemInit {\r\n    label: string;\r\n    name?: string;\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n    menu?: MenuModel;\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name?: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type?: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: MenuItemInit) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel({\r\n            items: []\r\n        }));\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel) {\r\n        return element(\"e-menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        });\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): HTMLEMenuItemElement {\r\n        const {label, type, menu} = item;\r\n        return reactiveElement(\r\n            item,\r\n            element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: type\r\n                },\r\n                children: [\r\n                    <string | Node>label\r\n                ].concat(\r\n                    (menu !== undefined) ? [\r\n                        this.#renderMenu(menu)\r\n                    ] : []\r\n                )\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (menuitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        menuitem.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;","import { HTMLEMenuElement } from \"../elements/containers/menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../elements/containers/toolbars/ToolBar\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { AttributeProperty, CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemModelList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\ninterface TreeModelInit {\r\n    items: TreeItemModel[];\r\n    sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n}\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: TreeModelInit)\r\n    constructor(init?: TreeModelInit) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.subtreeItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, subtreeItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...subtreeItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...subtreeItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n                return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemModelList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n    \r\n    @ModelProperty()\r\n    type: \"leaf\" | \"parent\";\r\n\r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode, name} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}${name}/`;\r\n        }\r\n        return `${name}/`;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    subtreeItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.subtreeItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    setModel(model: TreeModel): void;\r\n    renderShadow(): Node;\r\n    draggable: boolean;\r\n    selectedItems(): TreeItemModel[];\r\n    activeItem(): TreeItemModel | null;\r\n    get treeElement(): HTMLETreeElement | null ;\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null;\r\n    getTreeItemElementUri(item: HTMLETreeItemElement): string;\r\n    itemContentDelegate(this: TreeView, item: TreeItemModel): string | Node;\r\n    itemToolbarDelegate(this: TreeView, item: TreeItemModel): HTMLEToolBarElement | null;\r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    draggable!: boolean;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"draggable\": {\r\n                const {treeElement} = this;\r\n                if (treeElement) {\r\n                    Array.from(treeElement.items).forEach(\r\n                        item_i => item_i.draggable = newValue !== null\r\n                    );\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get treeElement(): HTMLETreeElement | null {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement | null  {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    getTreeItemElementUri(item: HTMLETreeItemElement): string {\r\n        let uri = \"\";\r\n        let closestItem = <HTMLETreeItemElement | null>item;\r\n        while (closestItem !== null) {\r\n            const {dataset, parentElement} = closestItem;\r\n            const {name} = dataset;\r\n            uri = `${name}/` + uri;\r\n            closestItem = parentElement?.closest(\"e-treeitem\") ?? null;\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    override renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"slot\"),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    itemContentDelegate(item: TreeItemModel): string | Node {\r\n        return reactiveElement(\r\n            item,\r\n            element(\"span\"),\r\n            [\"name\"],\r\n            (label, property, oldValue, newValue) => {\r\n                label.textContent = newValue;\r\n            }\r\n        );\r\n    }\r\n\r\n    itemToolbarDelegate(item: TreeItemModel): HTMLEToolBarElement | null {\r\n        return null;\r\n    }\r\n    \r\n    itemMenuDelegate(this: TreeView): HTMLEMenuElement | null {\r\n        return null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const {model, treeElement} = this;\r\n        if (treeElement) {\r\n            const selectedElements = treeElement.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(this.getTreeItemElementUri(item_i))\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    activeItem(): TreeItemModel | null {\r\n        const {model, treeElement} = this;\r\n        if (treeElement) {\r\n        const {activeItem} = treeElement;\r\n            return activeItem ?\r\n                model.getItemByUri(this.getTreeItemElementUri(activeItem)) : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): HTMLETreeItemElement {\r\n        const {draggable} = this;\r\n        const {index, level, name} = item;\r\n        const toolbar = this.itemToolbarDelegate(item);\r\n        const content = this.itemContentDelegate(item);\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    draggable: String(draggable),\r\n                    posinset: index,\r\n                    level: level\r\n                },\r\n                dataset: {\r\n                    name: name\r\n                },\r\n                children: [\r\n                    ...(content ? [content] : []),\r\n                    ...(toolbar ? [toolbar] : [])\r\n                ]\r\n            }),\r\n            [\"index\", \"name\", \"type\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                switch (propertyName) {\r\n                    case \"index\": {\r\n                        treeitem.posinset = newValue;\r\n                        break;\r\n                    }\r\n                    case \"name\": {\r\n                        const {dataset} = treeitem;\r\n                        dataset.name = newValue;\r\n                        break;\r\n                    }\r\n                    case \"type\": {\r\n                        treeitem.type = newValue;\r\n                        switch (newValue) {\r\n                            case \"parent\": {\r\n                                treeitem.append(\r\n                                    element(\"e-treeitemgroup\", {\r\n                                        attributes: {\r\n                                            slot: \"group\"\r\n                                        },\r\n                                        children: reactiveChildElements(item.childItems,\r\n                                            item => this.#renderTreeItem(item)\r\n                                        )\r\n                                    })\r\n                                );\r\n                                break;\r\n                            }\r\n                            case \"leaf\": {\r\n                                const {group} = treeitem;\r\n                                if (group) {\r\n                                    group.remove();\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"name\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => this.getTreeItemElementUri(element_i))\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = this.getTreeItemElementUri(targetItem);\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i === targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>(\r\n                        transferedUris.map(\r\n                            uri_i => model.getItemByUri(uri_i)\r\n                        ).filter(\r\n                            item_i => item_i !== null\r\n                        )\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType === \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name === item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const transferedItemsModelList = new TreeItemModelList(transferedItems);\r\n                    transferedItemsModelList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const contextMenu = this.itemMenuDelegate();\r\n            if (contextMenu !== null) {\r\n                contextMenu.contextual = true;\r\n                contextMenu.addEventListener(\"close\", () => {\r\n                    targetItem.focus({preventScroll: true});\r\n                });\r\n                targetTree.append(contextMenu);\r\n                contextMenu.positionContextual(clientX, clientY);\r\n                contextMenu.focus({preventScroll: true});\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (relatedTarget !== null  && !this.contains(<Node | null>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(this);\r\n            if (!(relatedPosition & Node.DOCUMENT_POSITION_DISCONNECTED) && (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING)) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const itemToolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (itemToolbar) {\r\n                        event.preventDefault();\r\n                        itemToolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const itemToolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (itemToolbar) {\r\n                itemToolbar.tabIndex = itemToolbar.contains(<Node | null>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { HTMLEMenuElement } from \"./src/elements/containers/menus/Menu\";\r\nimport { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarElement } from \"./src/elements/containers/toolbars/ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"./src/elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"./src/elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { MenuItemModel, MenuModel, MenuView } from \"./src/views/MenuView\";\r\nimport { TreeItemModelList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemModelList extends TreeItemModelList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.map(item_i => item_i.name).join(\" \");\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => String(row.age),\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => String(new Date().getFullYear() - row.age)\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ],\r\n        /*sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {name: aLabel} = item_a;\r\n            const {name: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }*/\r\n    });\r\n    document.body.append(\r\n        new MenuView(\r\n            new MenuModel({\r\n                items: [\r\n                    new MenuItemModel({\r\n                        label: \"Menuitem 1\",\r\n                        type: \"checkbox\"\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n    );\r\n\r\n\r\n    /*\r\n            template(\"treeview-dialog\", {\r\n                slotted: [\r\n\r\n                ]\r\n            })\r\n    */\r\n    @CustomElement({\r\n        name: \"e-mytreeview\"\r\n    })\r\n    class MyTreeView extends TreeView {\r\n\r\n        override render(): void {\r\n            super.render();\r\n            const {shadowRoot, treeElement} = this;\r\n            shadowRoot.prepend(\r\n                element(\"link\", {\r\n                    attributes: {\r\n                        rel: \"stylesheet\",\r\n                        href: \"css/views/mytreeview.css\"\r\n                    }\r\n                })\r\n            );\r\n            treeElement!.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n            treeElement!.addEventListener(\"dblclick\", this.#handleDoubleClickEvent.bind(this));\r\n        }\r\n\r\n        override itemContentDelegate(item: MyTreeItemModel) {\r\n            return fragment(\r\n                reactiveElement(\r\n                    item,\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"label\"\r\n                        }\r\n                    }),\r\n                    [\"name\"],\r\n                    (label, property, oldValue, newValue) => {\r\n                        label.textContent = `${item.name}`;\r\n                    }\r\n                ),\r\n                ...(\r\n                    item.type == \"parent\" ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                )\r\n            );\r\n        }\r\n\r\n        override itemToolbarDelegate(this: TreeView, item: MyTreeItemModel): HTMLEToolBarElement {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"e-toolbar\", {\r\n                    children: [\r\n                        element(\"e-toolbaritem\", {\r\n                            attributes: {\r\n                                name: \"visibility\",\r\n                                type: \"checkbox\",\r\n                                label: \"Visibility\",\r\n                                iconed: true\r\n                            },\r\n                            listeners: {\r\n                                click: (event) => {\r\n                                    item.visibility ?\r\n                                        item.hide() :\r\n                                        item.show();\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                [\"visibility\"],\r\n                (toolbar, property, oldValue, newValue) => {\r\n                    switch (property) {\r\n                        case \"visibility\": {\r\n                            const visibilityItem = toolbar\r\n                                .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.label = label;\r\n                                visibilityItem.title = label;\r\n                                visibilityItem.pressed = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        override itemMenuDelegate(this: TreeView): HTMLEMenuElement {\r\n            const {treeElement} = this;\r\n            const {activeItem: activeItemElement} = treeElement!;\r\n            const selectedItems = <MyTreeItemModel[]>this.selectedItems();\r\n            const activeItem = <MyTreeItemModel>this.activeItem();\r\n            return element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        activeItem.visibility ?\r\n                                            selectedItemsList.hide() :\r\n                                            selectedItemsList.show();\r\n                                        activeItemElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-separator\"),\r\n                    element(\"e-menuitemgroup\", {\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                children: \"Delete\",\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItemsList = selectedItems.includes(activeItem) ?\r\n                                            new MyTreeItemModelList(selectedItems) : new MyTreeItemModelList([activeItem]);\r\n                                        const {count} = selectedItemsList;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItemsList.remove();\r\n                                        }\r\n                                        treeElement!.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n        }\r\n\r\n        #handleKeyDownEvent(event: KeyboardEvent) {\r\n            const {currentTarget, target, key} = event;\r\n            const targetTree = <HTMLETreeElement>currentTarget;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const selectedItems = this.selectedItems();\r\n            const {model} = this;\r\n            const targetItemModel = <MyTreeItemModel>model.getItemByUri(targetItem.dataset.uri!)!;\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    const selectedItemsList = selectedItems.includes(targetItemModel) ?\r\n                        new TreeItemModelList(selectedItems) : new TreeItemModelList([targetItemModel]);\r\n                    const {count} = selectedItemsList;\r\n                    const doRemove = confirm(`Remove ${count} items?`);\r\n                    if (doRemove) {\r\n                        selectedItemsList.remove();\r\n                    }\r\n                    targetTree.focus();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n                case \"Enter\": {\r\n                    this.showEditItemDialog(targetItemModel);\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        }\r\n\r\n        showEditItemDialog(item: MyTreeItemModel): void {\r\n            const {shadowRoot} = this;\r\n            const dialog = element(\"dialog\", {\r\n                children: [\r\n                    element(\"form\", {\r\n                        attributes: {\r\n                            method: \"dialog\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-tablist\", {\r\n                                children: [\r\n                                    element(\"e-tab\", {\r\n                                        attributes: {\r\n                                            controls: \"properties\"\r\n                                        },\r\n                                        children: \"Properties\"\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"e-tabpanel\", {\r\n                                attributes: {\r\n                                    id: \"properties\"\r\n                                },\r\n                                children: [\r\n                                    element(\"fieldset\", {\r\n                                        children: [\r\n                                            element(\"legend\", {\r\n                                                children: \"Item information\"\r\n                                            }),\r\n                                            element(\"div\", {\r\n                                                attributes: {\r\n                                                    class: \"form-content\"\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"visibility\"\r\n                                                        },\r\n                                                        children: \"Visibility\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"visibility\",\r\n                                                            type: \"checkbox\",\r\n                                                            name: \"visibility\",\r\n                                                            checked: item.visibility\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"name\"\r\n                                                        },\r\n                                                        children: \"Name\"\r\n                                                    }),\r\n                                                    element(\"input\", {\r\n                                                        attributes: {\r\n                                                            id: \"name\",\r\n                                                            type: \"text\",\r\n                                                            name: \"name\",\r\n                                                            value: item.name\r\n                                                        }\r\n                                                    }),\r\n                                                    element(\"label\", {\r\n                                                        attributes: {\r\n                                                            for: \"type\"\r\n                                                        },\r\n                                                        children: \"Type\"\r\n                                                    }),\r\n                                                    element(\"e-select\", {\r\n                                                        attributes: {\r\n                                                            id: \"type\",\r\n                                                            name: \"type\"\r\n                                                        },\r\n                                                        children: [\"parent\", \"leaf\"].map(\r\n                                                            type_i => element(\"e-option\", {\r\n                                                                attributes: {\r\n                                                                    label: type_i,\r\n                                                                    value: type_i,\r\n                                                                    selected: item.type === type_i\r\n                                                                }\r\n                                                            })\r\n                                                        )\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            element(\"footer\", {\r\n                                attributes: {\r\n                                    class: \"dialog-footer\"\r\n                                },\r\n                                children: [\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            type: \"submit\",\r\n                                            value: \"confirm\"\r\n                                        },\r\n                                        children: \"Confirm\"\r\n                                    }),\r\n                                    element(\"button\", {\r\n                                        attributes: {\r\n                                            value: \"cancel\"\r\n                                        },\r\n                                        children: \"Cancel\"\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: (event) => {\r\n                        const {currentTarget} = event;\r\n                        const targetDialog = <HTMLDialogElement>currentTarget;\r\n                        if (targetDialog.returnValue === \"confirm\") {\r\n                            const form = targetDialog.querySelector(\"form\")!;\r\n                            const formData = new FormData(form);\r\n                            item.visibility = Boolean(formData.get(\"visibility\"));\r\n                            item.type = <\"leaf\" | \"parent\">String(formData.get(\"type\"));\r\n                            item.name = String(formData.get(\"name\"));\r\n                        }\r\n                        targetDialog.remove();\r\n                    }\r\n                }\r\n            });\r\n            shadowRoot.append(dialog);\r\n            dialog.showModal();\r\n        }\r\n\r\n        #handleDoubleClickEvent(event: MouseEvent): void {\r\n            const {target} = event;\r\n            const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n            const {model} = this;\r\n            const targetItemModel = <MyTreeItemModel>model.getItemByUri(this.getTreeItemElementUri(targetItem));\r\n            if (targetItemModel) {\r\n                this.showEditItemDialog(targetItemModel);\r\n            }\r\n        }\r\n    };\r\n\r\n    const treeView = new MyTreeView();\r\n    treeView.draggable = true;\r\n    treeView.setModel(treeModel);\r\n    treeView.render();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: [\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\",\r\n                        disabled: true\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\"\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Hey\"\r\n                                }),\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"submenu\"\r\n                                    },\r\n                                    children: [\r\n                                        \"Submenu 1\",\r\n                                        element(\"e-menu\", {\r\n                                            attributes: {\r\n                                                slot: \"menu\"\r\n                                            },\r\n                                            children: [\r\n                                                /*element(\"e-menuitem\", {\r\n                                                    attributes: {\r\n                                                        type: \"checkbox\"\r\n                                                    },\r\n                                                    children: \"Yo\"\r\n                                                })*/\r\n                                                new EMenuItem({\r\n                                                    label: \"Yo\"\r\n                                                }),\r\n                                                new EMenuItem({\r\n                                                    label: \"Plop\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitem\", {\r\n                    attributes: {\r\n                        type: \"menu\",\r\n                        label: \"Menu 1\"\r\n                    },\r\n                    children: [\r\n                        \"Menu 1\",\r\n                        element(\"e-menu\", {\r\n                            attributes: {\r\n                                slot: \"menu\"\r\n                            },\r\n                            children: [\r\n                                element(\"e-menuitem\", {\r\n                                    attributes: {\r\n                                        type: \"checkbox\"\r\n                                    },\r\n                                    children: \"Hey\"\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n        \r\n    /*const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );*/\r\n\r\n    /*document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );*/\r\n\r\n    document.body.append(\r\n        element(\"e-toolbar\", {\r\n            children: [\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"one\"\r\n                    },\r\n                    children: \"Item 1\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"three\",\r\n                    },\r\n                    children: \"Item 3\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"four\"\r\n                    },\r\n                    children: \"Item 4\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    children: \"Item 5\"\r\n                }),\r\n                element(\"e-toolbaritem\", {\r\n                    attributes: {\r\n                        id: \"two\"\r\n                    },\r\n                    children: \"Item 2\"\r\n                })\r\n            ]\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"one\",\r\n                position: \"bottom\"\r\n            },\r\n            children: \"One One One One One One One One\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"two\",\r\n                position: \"top\"\r\n            },\r\n            children: \"Two Two Two Two Two Two Two Two\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"three\",\r\n                position: \"right\",\r\n            },\r\n            children: \"Three\"\r\n        }),\r\n        element(\"e-tooltip\", {\r\n            attributes: {\r\n                for: \"four\",\r\n                position: \"left\"\r\n            },\r\n            children: \"Four\"\r\n        })\r\n    );\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        const internals = this.attachInternals();\r\n        internals.role = \"group\";\r\n        this.internals = internals;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        const {internals} = this;\r\n        switch (name) {\r\n            case \"label\":\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    connectedCallback(): void;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleAnimations: WeakMap<HTMLEMenuItemElement, Animation>;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 400;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleAnimations = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n    \r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    /*async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }*/\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetItem) {\r\n            const {type, checked} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.checked = !checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    const {name, value} = targetItem;\r\n                    targetItem.checked = true;\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    targetItem.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                    else {\r\n                        const {contextual} = this;\r\n                        if (contextual) {\r\n                            this.blur();\r\n                            this.dispatchEvent(new Event(\"close\", {bubbles: true}));\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: HIDE_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type === \"submenu\" && nearestItem.expanded) {\r\n                    toggleAnimations.get(nearestItem)?.cancel();\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type === \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        let toggleAnimation = toggleAnimations.get(activeItem);\r\n                        if (toggleAnimation) {\r\n                            toggleAnimation.cancel();\r\n                        }\r\n                        toggleAnimation = activeItem.animate(null, {\r\n                            duration: SHOW_DELAY_MS\r\n                        });\r\n                        toggleAnimations.set(activeItem, toggleAnimation);\r\n                        const {finished} = toggleAnimation;\r\n                        finished\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined)\r\n                            .finally(() => {\r\n                                toggleAnimations.delete(activeItem);\r\n                            });\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type === \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            let toggleAnimation = toggleAnimations.get(nearestItem);\r\n                            if (toggleAnimation) {\r\n                                toggleAnimation.cancel();\r\n                            }\r\n                            toggleAnimation = nearestItem.animate(null, {\r\n                                duration: HIDE_DELAY_MS\r\n                            });\r\n                            toggleAnimations.set(nearestItem, toggleAnimation);\r\n                            const {finished} = toggleAnimation;\r\n                            finished\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        toggleAnimations.get(activeItem)?.cancel();\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined)\r\n                                .finally(() => {\r\n                                    toggleAnimations.delete(nearestItem);\r\n                                });\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement || node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement && !(node.disabled || node.hidden)) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    document.body.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    connectedCallback(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : -1;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    iconed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar iconPart: HTMLElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    iconed!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n        iconPart = element(\"span\", {\r\n            attributes: {\r\n                part: \"icon\"\r\n            }\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                //...\r\n                break;\r\n            }\r\n            case \"iconed\": {\r\n                const {shadowRoot} = this;\r\n                if (newValue !== null) {\r\n                    shadowRoot.prepend(iconPart.cloneNode(true));\r\n                }\r\n                else {\r\n                    const iconPart = shadowRoot.querySelector<HTMLElement>(\"[part=icon]\");\r\n                    if (iconPart) {\r\n                        iconPart.remove();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    name: string;\r\n    orientation: ToolBarOrientation;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar wasExpandedOnMouseDown: WeakMap<HTMLEToolBarItemElement, boolean>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        wasExpandedOnMouseDown = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type, pressed} = targetItem;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    targetItem.pressed = !pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    targetItem.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !wasExpandedOnMouseDown.get(targetItem) ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = targetItem;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, menubutton.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = targetItem;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        wasExpandedOnMouseDown.set(targetItem, select.expanded);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    get panel(): HTMLETabPanelElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    selected: boolean;\r\n    select(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n    \r\n    get panel(): HTMLETabPanelElement | null {\r\n        const {controls} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabPanelElement>(`e-tabpanel#${controls}`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    select(): void {\r\n        this.selected = true;\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    get activeTab(): HTMLETabElement | null;\r\n    get selectedTab(): HTMLETabElement | null;\r\n    get tabs(): HTMLETabElement[];\r\n    firstItem(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    #walker: TreeWalker;\r\n    \r\n    get tabs(): HTMLETabElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\"e-tab\")\r\n        );\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[active]\"\r\n        );\r\n    }\r\n\r\n    get selectedTab(): HTMLETabElement | null {\r\n        return this.querySelector(\r\n            \"e-tab[selected]\"\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex, selectedTab} = this;\r\n        this.tabIndex = tabIndex;\r\n        customElements.upgrade(this);\r\n        const tabToSelect = selectedTab ?? this.firstItem();\r\n        if (tabToSelect) {\r\n            this.#selectTab(tabToSelect);\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETabElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLETabElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETabElement): HTMLETabElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLETabElement | null>walker.nextNode();\r\n    }\r\n\r\n    #setActiveTab(item: HTMLETabElement | null): void {\r\n        const {activeTab} = this;\r\n        if (activeTab !== null && activeTab !== item) {\r\n            activeTab.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #selectTab(tab: HTMLETabElement) {\r\n        const {selectedTab} = this;\r\n        if (tab !== selectedTab) {\r\n            tab.selected = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetTab = (<Element>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            targetTab.select();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectedTab} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (selectedTab ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement | null>(<HTMLElement>target).closest(\"e-tab\");\r\n        if (targetTab) {\r\n            this.#setActiveTab(targetTab);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeTab} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousTab = activeTab ?\r\n                    this.#previousItem(activeTab) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextTab = activeTab ?\r\n                    this.#nextItem(activeTab) ?? this.firstItem() :\r\n                    this.#lastItem();\r\n                nextTab?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                activeTab?.click();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetTab = <HTMLETabElement>target;\r\n        if (targetTab.selected) {\r\n            const {tabs} = this;\r\n            tabs.forEach((tab_i) => {\r\n                if (tab_i !== targetTab) {\r\n                    //const {selected} = tab_i;\r\n                    //if (selected) {\r\n                        tab_i.selected = false;\r\n                    //}\r\n                    const {panel} = tab_i;\r\n                    if (panel) {\r\n                        panel.hidden = true;\r\n                    }\r\n                }\r\n            });\r\n            const {panel} = targetTab;\r\n            if (panel) {\r\n                panel.hidden = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    get tab(): HTMLETabElement | null;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    get tab(): HTMLETabElement | null {\r\n        const {id} = this;\r\n        return (<Document | ShadowRoot>this.getRootNode()).querySelector<HTMLETabElement>(`e-tab[controls=${id}]`);\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n        const {tab} = this;\r\n        if (tab) {\r\n            customElements.upgrade(tab);\r\n            const {selected} = tab;\r\n            this.hidden = !selected;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n","import { CustomElement, element, AttributeProperty, QueryProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    @QueryProperty({selector: \":scope > e-treeitemgroup[slot=group]\"})\r\n    group!: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        this.expanded = force ?? !expanded;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"dblclick\", this.#handleDblClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(targetItem);\r\n                const {type} = targetItem;\r\n                if (type == \"parent\") {\r\n                    targetItem.toggle();\r\n                }\r\n            }\r\n        }\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDblClickEvent(event: MouseEvent): void {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const {type} = targetItem;\r\n            if (type == \"parent\") {\r\n                targetItem.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node | null>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node | null>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey && !selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"option\";\r\n        this.internals = internals;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                const {internals, selected} = this;\r\n                internals.ariaSelected = String(selected);\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar mutationObserver: MutationObserver;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    static get formAssociated(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #wasExpandedOnMouseDown: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n        mutationObserver = new MutationObserver(\r\n            (mutationsList: MutationRecord[]) => {\r\n                mutationsList.forEach((mutation: MutationRecord) => {\r\n                    const {target} = mutation;\r\n                    const select = <HTMLESelectElementBase>target;\r\n                    const {selectedOption, value, options} = select;\r\n                    if (!selectedOption) {\r\n                        const optionToSelect = value ? options.find(\r\n                            option_i => option_i.value === value\r\n                        ) : select.#firstOption();\r\n                        if (optionToSelect) {\r\n                            optionToSelect.selected = true;\r\n                        }\r\n                        else {\r\n                            select.#setSelectedOption(null);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const internals = this.attachInternals();\r\n        internals.role = \"combobox\";\r\n        this.internals = internals;\r\n        this.#wasExpandedOnMouseDown = false;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        mutationObserver.observe(\r\n            this, {\r\n                childList: true,\r\n                subtree: true\r\n            }\r\n        );\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {options, selectedOption, value} = this;\r\n        const tabindex = this.getAttribute(\"tabindex\");\r\n        this.tabIndex = tabindex !== null ? parseInt(tabindex) : 0;\r\n        customElements.upgrade(this);\r\n        const optionToSelect = selectedOption ?? (\r\n            value ? options.find(\r\n                option_i => option_i.value === value\r\n            ) : null\r\n        ) ?? this.#firstOption();\r\n        if (optionToSelect) {\r\n            if (optionToSelect === selectedOption) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n            else {\r\n                this.#selectOption(optionToSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n    \r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement | null) {\r\n        const {label, value} = option ?? {\r\n            label: \"\",\r\n            value: \"\"\r\n        };\r\n        const {internals} = this;\r\n        this.#value().textContent = label;\r\n        internals.setFormValue(value);\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;\r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const wasExpandedOnMouseDown = this.#wasExpandedOnMouseDown;\r\n        if (!wasExpandedOnMouseDown) {\r\n            const {selectedOption} = this;\r\n            this.expand();\r\n            (selectedOption ?? this.#firstOption() ?? this).focus({preventScroll: true});\r\n        }\r\n        else {\r\n            this.collapse();\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin || this === relatedTarget) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(): void {\r\n        const {expanded} = this;\r\n        this.#wasExpandedOnMouseDown = expanded;\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                this.toggle();\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    const {selectedOption} = this;\r\n                    (selectedOption ?? this.#firstOption())?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            const {selected} = targetOption;\r\n            if (selected) {\r\n                const {options} = this;\r\n                options.forEach((option_i) => {\r\n                    if (option_i !== targetOption && option_i.selected) {\r\n                        option_i.selected = false;\r\n                    }\r\n                });\r\n                this.#setSelectedOption(targetOption);\r\n            }\r\n            else {\r\n                const {selectedOption} = this;\r\n                if (selectedOption === null) {\r\n                    const firstOption = this.#firstOption();\r\n                    if (firstOption !== null) {\r\n                        this.#setSelectedOption(firstOption);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEToolTipElement };\r\n\r\ninterface HTMLEToolTipElementConstructor {\r\n    prototype: HTMLEToolTipElement;\r\n    new(): HTMLEToolTipElement;\r\n}\r\n\r\ninterface HTMLEToolTipElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    htmlFor: string;\r\n    position: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n    visible: boolean;\r\n    show(): void;\r\n    hide(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tooltip\": HTMLEToolTipElement;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar HIDE_DELAY_MS = 200;\r\nvar SHOW_DELAY_MS = 200;\r\n\r\n@CustomElement({\r\n    name: \"e-tooltip\"\r\n})\r\nclass HTMLEToolTipElementBase extends HTMLElement implements HTMLEToolTipElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true, name: \"for\"})\r\n    htmlFor!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    position!: \"top\" | \"bottom\" | \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    visible!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #targetListenerObject: EventListenerObject;\r\n    #documentListenerObject: EventListenerObject;\r\n    #toggleAnimation: Animation | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#toggleAnimation = null;\r\n        this.#targetListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"mouseenter\": {\r\n                            tooltip.#handleTargetMouseEnterEvent();\r\n                            break;\r\n                        }\r\n                        case \"mouseleave\": {\r\n                            tooltip.#handleTargetMouseLeaveEvent();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n        this.#documentListenerObject = (function(tooltip) {\r\n            return {\r\n                handleEvent(event: Event) {\r\n                    const {type} = event;\r\n                    switch (type) {\r\n                        case \"keydown\": {\r\n                            tooltip.#handleDocumentKeyDownEvent(<KeyboardEvent>event);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        })(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {htmlFor} = this;\r\n        this.#setTarget(htmlFor);\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"for\": {\r\n                this.#setTarget(newValue);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        this.visible = true;\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"hide\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 0 },\r\n            { opacity: 1 }\r\n        ], {\r\n            id: \"show\",\r\n            duration: SHOW_DELAY_MS\r\n        })\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.#toggleAnimation = null;\r\n            },\r\n            () => {\r\n                this.visible = false;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n        this.#position();\r\n    }\r\n\r\n    hide(): void {\r\n        let toggleAnimation = this.#toggleAnimation;\r\n        if (toggleAnimation !== null) {\r\n            const {id} = toggleAnimation;\r\n            if (id === \"show\") {\r\n                toggleAnimation.cancel();\r\n            }\r\n        }\r\n        toggleAnimation = this.animate([\r\n            { opacity: 1 },\r\n            { opacity: 0 }\r\n        ], {\r\n            id: \"hide\",\r\n            duration: HIDE_DELAY_MS\r\n        });\r\n        const {finished} = toggleAnimation;\r\n        finished.then(\r\n            () => {\r\n                this.visible = false;\r\n            },\r\n            () => {\r\n                this.visible = true;\r\n            }\r\n        );\r\n        this.#toggleAnimation = toggleAnimation;\r\n    }\r\n\r\n    #arrow(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=arrow]\")!;\r\n    }\r\n\r\n    #setTarget(id: string | null): void {\r\n        const target = id ? document.getElementById(id) : null;\r\n        if (target !== null) {\r\n            const oldTarget = this.#target;\r\n            if (oldTarget) {\r\n                oldTarget.removeEventListener(\"mouseenter\", this.#targetListenerObject);\r\n                oldTarget.removeEventListener(\"mouseleave\", this.#targetListenerObject);\r\n            }\r\n            target.addEventListener(\"mouseenter\", this.#targetListenerObject);\r\n            target.addEventListener(\"mouseleave\", this.#targetListenerObject);\r\n        }\r\n        this.#target = target;\r\n    }\r\n\r\n    #position(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {top: targetTop, bottom: targetBottom, left: targetLeft, right: targetRight} = target.getBoundingClientRect();\r\n            const {width: tooltipWidth, height: tooltipHeight} = this.getBoundingClientRect();\r\n            const tooltipHalfWidth = tooltipWidth / 2;\r\n            const tooltipHalfHeight = tooltipHeight / 2;\r\n            const targetCenter = (targetRight + targetLeft) / 2;\r\n            const targetMiddle = (targetBottom + targetTop) / 2;\r\n            const {position, style: tooltipStyle} = this;\r\n            const arrow = this.#arrow();\r\n            const {style: arrowStyle} = arrow;\r\n            const {width: arrowWidth, height: arrowHeight} = arrow.getBoundingClientRect();\r\n            const arrowHalfWidth = arrowWidth / 2;\r\n            const arrowHalfHeight = arrowHeight / 2;\r\n            const {clientWidth} = document.body;\r\n            switch (position) {\r\n                case \"top\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetTop - tooltipHeight - arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetTop - arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"bottom\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${\r\n                        Math.max(0, Math.min(targetCenter - tooltipHalfWidth, clientWidth - tooltipWidth))\r\n                    }px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetBottom + arrowHalfHeight}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetCenter}px`);\r\n                    break;\r\n                }\r\n                case \"left\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetLeft - tooltipWidth - arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetLeft - arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n                case \"right\": {\r\n                    tooltipStyle.setProperty(\"top\", `${targetMiddle - tooltipHalfHeight}px`);\r\n                    tooltipStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    arrowStyle.setProperty(\"top\", `${targetMiddle}px`);\r\n                    arrowStyle.setProperty(\"left\", `${targetRight + arrowHalfWidth}px`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTargetMouseEnterEvent(): void {\r\n        this.show();\r\n        document.addEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleTargetMouseLeaveEvent(): void {\r\n        this.hide();\r\n        document.removeEventListener(\"keydown\", this.#documentListenerObject);\r\n    }\r\n\r\n    #handleDocumentKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Escape\": {\r\n                this.hide();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolTipElement: HTMLEToolTipElementConstructor = HTMLEToolTipElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {style} = target;\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            const {style} = target;\r\n            style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\n\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n    interface ShadowRoot {\r\n        adoptedStyleSheets: StyleSheet[];\r\n    }\r\n    interface CSSStyleSheet {\r\n        replace(css: string): void;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","currentTarget","ModelEventTargetAccessor","setCurrentTarget","event","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","parentNode","setParent","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","str","replace","toLowerCase","AttributeProperty","String","defaultValue","observed","name","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeName","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabindex","tabIndex","parseInt","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","render","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","gridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","querySelectorAll","rel","href","input","selectby","multisectable","contextmenu","click","setSearchFilter","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","console","log","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","focus","removeProperty","targetItem","checked","positionContextual","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","MenuModel","MenuItemModel","MenuViewBase","menuitem","MenuView","TreeModel","sortFunction","childItems","subtreeItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemModelList","count","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","parentItem","TreeViewBase","treeElement","draggable","treeItemElement","getTreeItemElementUri","closestItem","parentElement","dragstart","drop","focusin","focusout","itemContentDelegate","textContent","itemToolbarDelegate","itemMenuDelegate","selectedItems","activeItem","toolbar","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","beginSelection","selected","endSelection","relatedTarget","contains","relatedPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_DISCONNECTED","DOCUMENT_POSITION_PRECEDING","itemToolbar","TreeView","MyTreeItemModelList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","disabled","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleAnimations","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","x","y","firstItem","walker","currentNode","root","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","radio_i","nearestItem","error","stopPropagation","composedPath","target_i","HTMLEMenuElement","blur","cancel","toggleAnimation","animate","duration","finished","then","catch","finally","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","activeCell","activeRow","head","selectedCells","selectedRows","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","active","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","iconPart","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","HTMLEToolBarItemElement","EToolBarItem","menubutton","select","HTMLEToolBarItemGroupElementBase","wasExpandedOnMouseDown","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","pressed","previousItem","nextItem","HTMLEToolBarElement","HTMLETabElementBase","panel","getRootNode","HTMLETabElement","HTMLETabListElementBase","tabs","activeTab","selectedTab","upgrade","tabToSelect","tab","targetTab","tab_i","HTMLETabPanelElementBase","HTMLETreeItemElementBase","labelPart","HTMLETreeItemElement","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeElementBase","getElementsByTagName","dropTargetItem","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","badge","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","referee","disconnectedCallback","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","targetIndex","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","getElementById","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","CustomEvent","detail","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","open","close","HTMLEOptionElementBase","ariaSelected","HTMLEOptionElement","HTMLEOptionGroupElementBase","mutationObserver","HTMLEOptionGroupElement","HTMLESelectElementBase","formAssociated","activeOption","selectedOption","optionToSelect","option_i","option","setFormValue","box","optionsStyle","targetOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","MutationObserver","mutationsList","mutation","HTMLESeparatorElementBase","HTMLEToolTipElementBase","tooltip","htmlFor","visible","opacity","oldTarget","targetTop","targetBottom","targetLeft","targetRight","tooltipWidth","tooltipHeight","tooltipHalfWidth","tooltipHalfHeight","targetCenter","targetMiddle","tooltipStyle","arrow","arrowStyle","arrowWidth","arrowHeight","arrowHalfWidth","arrowHalfHeight","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","getComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","growdir","newHeight","computedNewHeight","rootNode","requestAnimationFrame","HTMLEImportElementBase","src","async","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","Widget","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menuComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","menubar","setContextual","setPosition","getContextual","menuitem_i","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","targetMenu","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","tree","setMultiSelectable","getMultiSelectable","listItemWidget","toolbarItemWidget","setPressed","getPressed","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","MyTreeView","iconed","visibilityItem","activeItemElement","selectedItemsList","showEditItemDialog","dialog","method","for","targetDialog","returnValue","form","formData","FormData","showModal","treeView","TreeMain"],"sourceRoot":""}