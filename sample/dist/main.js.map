{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuItemCollection.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/MenuItemWidget.ts","webpack://main/./src/views/widgets/MenuWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/MenuView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { Widget };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"unknown\": Widget;\r\n    }\r\n\r\n    interface CustomWidgetConstructor {\r\n        new(...args: any): Widget;\r\n    }\r\n}\r\n\r\ninterface WidgetConstructor {\r\n    readonly prototype: Widget;\r\n    new(): Widget;\r\n}\r\n\r\ninterface Widget {\r\n    readonly rootElement: HTMLElement;\r\n    click(): void;\r\n    focus(options?: FocusOptions | undefined): void;\r\n    blur(): void;\r\n    contains(node: Node): boolean;\r\n    render(): HTMLElement;\r\n}\r\n\r\ninterface WidgetRegistry {\r\n    define(name: string, widget: WidgetConstructor): void;\r\n    create<K extends keyof WidgetNameMap>(name: K): WidgetNameMap[K];\r\n}\r\n\r\nclass WidgetRegistryBase implements WidgetRegistry {\r\n    #map: Map<string, WidgetConstructor>;\r\n\r\n    constructor() {\r\n        this.#map = new Map();\r\n    }\r\n\r\n    define(name: string, widget: WidgetConstructor): void {\r\n        this.#map.set(name, widget);\r\n    }\r\n\r\n    create<K extends keyof WidgetNameMap>(name: K): WidgetNameMap[K] {\r\n        const ctor = <(new() => WidgetNameMap[K]) | undefined>this.#map.get(name);\r\n        if (typeof ctor !== \"undefined\") {\r\n            return new ctor();\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nvar widgets: WidgetRegistry = new WidgetRegistryBase();\r\n\r\nclass WidgetBase implements Widget {\r\n    readonly rootElement: HTMLElement;\r\n\r\n    constructor() {\r\n        this.rootElement = this.render();\r\n    }\r\n    \r\n    click(): void {\r\n        this.rootElement.click();\r\n    }\r\n\r\n    focus(options?: FocusOptions | undefined): void {\r\n        this.rootElement.focus(options);\r\n    }\r\n\r\n    blur(): void {\r\n        this.rootElement.blur();\r\n    }\r\n\r\n    contains(node: Node): boolean {\r\n        return this.rootElement.contains(node);\r\n    }\r\n\r\n    render(): HTMLElement {\r\n        throw new Error();\r\n    }\r\n}\r\n\r\nvar Widget: WidgetConstructor = WidgetBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { Widget, widgets } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { CustomWidget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string\r\n    }): <W extends CustomWidgetConstructor>(widgetCtor: W) => W;\r\n}\r\n\r\nconst CustomWidget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends CustomWidgetConstructor>(\r\n        widgetCtor: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.define(\r\n            name,\r\n            widgetCtor\r\n        );\r\n        return widgetCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>\r\n}[keyof T];\r\n\r\ntype ReadonlyKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\n\r\ninterface HTMLElementInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\ninterface HTMLElementInitMap {\r\n    \"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLElementInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementInitMap>(\r\n    tagName: K, init?: HTMLElementInitMap[K]): E;\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<E>): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit<HTMLElement>): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (options) {\r\n            const {is: isBuiltinElement} = options;\r\n            if (isBuiltinElement) {\r\n                element.setAttribute(\"is\", isBuiltinElement)\r\n            }\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = element;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            element.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (tagName) {\r\n            case \"template\":\r\n                const {content} = init as HTMLTemplateInit;\r\n                if (content) {\r\n                    (<HTMLTemplateElement>element).content.append(\r\n                        ...Array.from(content)\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<W extends Widget> {\r\n    properties?: Partial<Pick<W, WritableKeys<W>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Widget | Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\ninterface WidgetInitMap {\r\n    //\"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLElementInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n/*\r\nfunction widget<W extends WidgetNameMap[K], K extends keyof WidgetInitMap>(\r\n    name: K, init?: WidgetInitMap[K]): W;*/\r\nfunction widget<W extends WidgetNameMap[K], K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<W>): W;\r\nfunction widget(\r\n    name: string, init?: WidgetInit<Widget>): Widget\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<WidgetNameMap[K]>): WidgetNameMap[K] {\r\n    const widget = widgets.create(name);\r\n    if (init) {\r\n        const {rootElement} = widget;\r\n        const {properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<WidgetNameMap[K], WritableKeys<WidgetNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        widget, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = rootElement;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            rootElement.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        rootElement.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    rootElement.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = rootElement;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = rootElement;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                rootElement.append(...children(rootElement));\r\n            }\r\n            else {\r\n                rootElement.append(\r\n                    ...Array.from(children).map(\r\n                        child_i => child_i instanceof Widget ? child_i.rootElement : child_i\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    rootElement.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    rootElement.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (name) {\r\n        }\r\n    }\r\n    return widget;\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach((reactiveElement_i) => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (element: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, W extends Widget, K extends string>(\r\n    model: M,\r\n    widget: W,\r\n    properties: K[],\r\n    react: (widget: W, property: K, oldValue: any, newValue: any) => void\r\n): W;\r\nfunction reactiveElement<M extends ModelNode, E extends Element | Widget>(\r\n    model: M,\r\n    elementOrWidget: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const element = <Element>(elementOrWidget instanceof Widget ? elementOrWidget.rootElement : elementOrWidget);\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(elementOrWidget, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return elementOrWidget;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element | Widget,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element | Widget,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values())\r\n                            .map(item_i => {\r\n                                const elementOrWidget = mapping(item_i);\r\n                                return elementOrWidget instanceof Element ? elementOrWidget : elementOrWidget.rootElement;\r\n                            });\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element | Widget,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(item_i => {\r\n                const elementOrWidget = mapping(item_i);\r\n                return elementOrWidget instanceof Element ? elementOrWidget : elementOrWidget.rootElement;\r\n            });\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"div\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"arrow\"]\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.level = (() => {\r\n            let level = 0;\r\n            let {parentElement} = this;\r\n            while (parentElement instanceof HTMLETreeItemGroupElement) {\r\n                level++;\r\n                ({parentElement} = parentElement);\r\n                if (!(parentElement instanceof HTMLETreeItemElement)) {\r\n                    return level;\r\n                }\r\n                ({parentElement} = parentElement);\r\n            }\r\n            if (parentElement instanceof HTMLETreeElement) {\r\n                level++;\r\n            }\r\n            return level;\r\n        })();\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#dropTargetIndex) ?? null;\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #activeIndex: number;\r\n    #dropTargetIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\nimport { Widget } from \"./widgets/Widget\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | Widget | undefined;\r\n    renderLight(): Node | Widget | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | Widget | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | Widget | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(\r\n                    shadow instanceof Widget ? shadow.rootElement : shadow\r\n                );\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(\r\n                light instanceof Widget ? light.rootElement : light\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            eventListeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                properties: {\r\n                    className: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: true\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            properties: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            properties: {\r\n                                tabIndex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabIndex: -1\r\n                                    },\r\n                                    eventListeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                properties: {\r\n                    className: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {part: [\"icon\"]}),\r\n                        element(\"span\", {\r\n                            part: [\"label\"],\r\n                            children: [\r\n                                element(\"slot\")\r\n                            ]\r\n                        }),\r\n                        element(\"span\", {part: [\"arrow\"]})\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type,\r\n                textContent: label\r\n            },\r\n            children: menu ? [menu] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            properties: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                properties: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    contextual: boolean;\r\n    contextX: number;\r\n    contextY: number;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex);\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextX!: number;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextY!: number;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {contextual} = this;\r\n        if (contextual) {\r\n            this.#position();\r\n        }\r\n    }\r\n\r\n    #position(): void {\r\n        const {contextX, contextY} = this;\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = contextX + scrollX;\r\n        const top = contextY + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.items)\r\n            .forEach((item_i) => {\r\n                if (item_i.expanded) {\r\n                    item_i.collapse();\r\n                }\r\n            });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        if (item == null) {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            targetClosestItem.trigger();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            !targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = this.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    const activeIndex = this.#activeIndex;\r\n                    this.focus({preventScroll: true});\r\n                    this.#setActiveItem(null);\r\n                    this.#activeIndex = activeIndex;\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                this.focus({preventScroll: true});\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.type == \"submenu\" &&\r\n                activeItem.expanded && \r\n                !activeItem.contains(<Node>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItem !== null) {\r\n                this.#setActiveItem(targetClosestItem);\r\n                targetClosestItem.focus({preventScroll: true});\r\n                if (targetClosestItem.type == \"submenu\") {\r\n                    if (!targetClosestItem.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItem);\r\n                        this.#setItemTimeout(targetClosestItem, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        targetClosestItem.menu?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const composedPath = event.composedPath();\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestTargetMenu = composedPath.find(\r\n                target_i => target_i instanceof HTMLEMenuElement\r\n            ) == this;\r\n            if (isClosestTargetMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    Array.from(this.items).filter(item_i => item_i.type == \"radio\" && item_i.name === name).\r\n                        forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            properties: {\r\n                name: name,\r\n                tabIndex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        CustomElement({\r\n            name: \"e-grid\"\r\n        })(this);\r\n    }\r\n    \r\n    static readonly #shadowTemplate = element(\"template\", {\r\n        content: [\r\n            element(\"slot\")\r\n        ]\r\n    });\r\n    static readonly #shadowStylesheet = Stylesheet(\r\n        trimMultilineIndent(/*css*/`\r\n            :host {\r\n                display: table;\r\n            }\r\n\r\n            :host([droptarget]) {\r\n                background-color: gainsboro;\r\n            }\r\n        `)\r\n    )\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        \r\n        (shadowRoot as any)[\"adoptedStyleSheets\"] = [\r\n            HTMLEGridElementBase.#shadowStylesheet\r\n        ];\r\n        shadowRoot.append(\r\n            HTMLEGridElementBase.#shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        cell.active = true;\r\n        cell.tabIndex = 0;\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            this.#setActiveRow(closestRow);\r\n        }\r\n        this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        row.active = true;\r\n        row.tabIndex = 0;\r\n        this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemRadioList };\r\nexport { HTMLEMenuItemCollection };\r\n\r\ninterface HTMLEMenuItemCollectionConstructor {\r\n    readonly prototype: HTMLEMenuItemCollection;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement): HTMLEMenuItemCollection;\r\n}\r\n\r\ninterface HTMLEMenuItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEMenuItemElement | null;\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioListConstructor {\r\n    readonly prototype: HTMLEMenuItemRadioList;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string): HTMLEMenuItemRadioList;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\nclass HTMLEMenuItemCollectionBase implements HTMLEMenuItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEMenuElement | HTMLEMenuBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEMenuItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode?.type == \"radio\") {\r\n            return new HTMLEMenuItemRadioList(<HTMLEMenuElement | HTMLEMenuBarElement>root, name);\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEMenuItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEMenuItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEMenuItemRadioListBase? = class HTMLEMenuItemRadioListBase implements HTMLEMenuItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEMenuItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEMenuItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEMenuItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemCollection: HTMLEMenuItemCollectionConstructor =  HTMLEMenuItemCollectionBase;\r\nvar HTMLEMenuItemRadioList: HTMLEMenuItemRadioListConstructor = HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase!;\r\ndelete HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEMenuItemCollection(this);\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEMenuItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            return menu.items.item(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, active, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (active) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(targetClosestItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget && target !== activeItem && active) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget) {\r\n                const isActive = !active;\r\n                this.active = isActive;\r\n                if (isActive) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {active} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.active = !active;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (active) {\r\n                    this.active = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.active = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"icon\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"label\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"output\", {\r\n                        part: [\"value\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"options\"],\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        part: [\"separator\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"description\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            /*let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }*/\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            console.log(selectedOption);\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"icon\"]\r\n                        }),\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"select\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"menubutton\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            user-select: none;\r\n                        }\r\n                        \r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        [part=\"content\"]:hover {\r\n                            background-color: whitesmoke;\r\n                        }\r\n\r\n                        :host([active]) [part=\"content\"] {\r\n                            background-color: whitesmoke;\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) [part=\"content\"] {\r\n                            background-color: gainsboro;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            display: flex;\r\n                            line-height: 22px;\r\n                        }\r\n                        \r\n                        [part=\"label\"] {\r\n                            order: 0;\r\n                            margin-right: auto;\r\n                            overflow: hidden;\r\n                            text-overflow: ellipsis;\r\n                            white-space: nowrap;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"toolbar\"]) {\r\n                            order: 1;\r\n                        }\r\n\r\n                        ::slotted([slot=\"badge\"]) {\r\n                            order: 2;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"menu\"]) {\r\n                            position: absolute;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"toolbar\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"badge\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        item.active = true;\r\n        item.tabIndex = 0;\r\n        this.#activeIndex = Array.from(items).indexOf(item);\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            properties: {\r\n                innerText: /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            }\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    element(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            element(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { MenuWidget } from \"./MenuWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\nexport { MenuItemWidget };\r\n\r\ninterface MenuItemWidgetConstructor {\r\n    readonly prototype: MenuItemWidget;\r\n    new(init: {\r\n        type: MenuItemType;\r\n        label: string;\r\n        menu?: MenuWidget;\r\n    }): MenuItemWidget;\r\n    fromRoot(rootElement: Element): MenuItemWidget | null;\r\n}\r\n\r\ninterface MenuItemWidget extends Widget {\r\n    type: MenuItemType;\r\n    label: string;\r\n    active: boolean;\r\n    hasPopup: boolean;\r\n    expanded: boolean;\r\n    menu: MenuWidget | null;\r\n    checked: boolean;\r\n    trigger(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidget;\r\n    }\r\n}\r\n\r\nvar menuItemWidgets: WeakMap<Element, MenuItemWidgetBase>;\r\n\r\n@CustomWidget({\r\n    name: \"menuitem\"\r\n})\r\nclass MenuItemWidgetBase extends Widget implements MenuItemWidget {\r\n\r\n    #menu: MenuWidget | null = null;\r\n\r\n    static {\r\n        menuItemWidgets = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        menuItemWidgets.set(this.rootElement, this);\r\n    }\r\n\r\n    static fromRoot(rootElement: Element): MenuItemWidget | null {\r\n        return menuItemWidgets.get(rootElement) ?? null;\r\n    }\r\n\r\n    render() {\r\n        return element(\"button\", {\r\n            properties: {\r\n                className: \"menuitem\"\r\n            },\r\n            attributes: {\r\n                role: \"menuitem\"\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    properties: {\r\n                        className: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"icon\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        }),\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    get #labelElement() {\r\n        return this.rootElement.querySelector(\":scope > .content > .label\")!;\r\n    }\r\n\r\n    get checked(): boolean {\r\n        return this.rootElement.hasAttribute(\"aria-checked\");\r\n    }\r\n\r\n    set checked(value: boolean) {\r\n        this.rootElement.toggleAttribute(\"aria-checked\", value);\r\n    }\r\n\r\n    get label(): string {\r\n        return this.#labelElement.textContent ?? \"\";\r\n    }\r\n\r\n    set label(value: string) {\r\n        this.#labelElement.textContent = value;\r\n    }\r\n\r\n    get type(): MenuItemType {\r\n        return <MenuItemType>this.rootElement.dataset.type ?? \"button\";\r\n    }\r\n\r\n    set type(value: MenuItemType) {\r\n        this.rootElement.dataset.type = value;\r\n    }\r\n\r\n    get menu(): MenuWidget | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    set menu(value: MenuWidget | null) {\r\n        const menu = this.#menu;\r\n        if (menu !== null && value !== null) {\r\n            menu.rootElement.replaceWith(value.rootElement);\r\n            this.hasPopup = true;\r\n        }\r\n        else {\r\n            if (menu !== null) {\r\n                menu.rootElement.remove();\r\n                this.hasPopup = false;\r\n            }\r\n            if (value !== null) {\r\n                this.rootElement.append(value.rootElement);\r\n                this.hasPopup = true;\r\n            }\r\n        }\r\n        this.#menu = value;\r\n    }\r\n\r\n    get active(): boolean {\r\n        return this.rootElement.hasAttribute(\"aria-active\");\r\n    }\r\n\r\n    set active(value: boolean) {\r\n        this.rootElement.toggleAttribute(\"aria-active\", value);\r\n    }\r\n\r\n    get hasPopup(): boolean {\r\n        return this.rootElement.hasAttribute(\"aria-haspopup\");\r\n    }\r\n\r\n    set hasPopup(value: boolean) {\r\n        this.rootElement.setAttribute(\"aria-haspopup\", value.toString());\r\n    }\r\n\r\n    get expanded(): boolean {\r\n        return this.rootElement.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    set expanded(value: boolean) {\r\n        this.rootElement.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    trigger(): void {\r\n        const {type, rootElement} = this;\r\n        switch (type) {\r\n            case \"checkbox\": {\r\n                this.checked = !this.checked;\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                this.checked = true;\r\n                break;\r\n            }\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                this.toggle();\r\n                break;\r\n            }\r\n        }\r\n        rootElement.dispatchEvent(new Event(\"trigger\", {\r\n            bubbles: true\r\n        }));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {rootElement, type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !this.expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                rootElement.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {rootElement, menu} = this;\r\n        if (menu !== null) {\r\n            const {rootElement: menuElement} = menu;\r\n            const {style: menuStyle} = menuElement;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = rootElement.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menuElement.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = rootElement.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menuElement);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar MenuItemWidget: MenuItemWidgetConstructor = MenuItemWidgetBase;","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { MenuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\nexport { MenuWidget };\r\n\r\ninterface MenuWidgetConstructor {\r\n    readonly prototype: MenuWidget;\r\n    new(items: MenuItemWidget[]): MenuWidget;\r\n}\r\n\r\ninterface MenuWidget extends Widget {\r\n    readonly activeItem: MenuItemWidget | null;\r\n    insertItem(index: number, ...items: MenuItemWidget[]): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidget;\r\n    }\r\n}\r\n\r\n@CustomWidget({\r\n    name: \"menu\"\r\n})\r\nclass MenuWidgetBase extends Widget implements MenuWidget {\r\n\r\n    readonly #items: HTMLCollectionOf<Element>;\r\n\r\n    get activeItem(): MenuItemWidget | null {\r\n        return this.#activeItem;\r\n    }\r\n\r\n    #activeItem: MenuItemWidget | null;\r\n    #toggleTimeouts: WeakMap<MenuItemWidget, {clear(): void;}>;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        const {rootElement} = this;\r\n        this.#items = rootElement.getElementsByClassName(\"menuitem\");\r\n        this.#activeItem = null;\r\n        this.#toggleTimeouts = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            rootElement, NodeFilter.SHOW_ELEMENT, <NodeFilter>this.#walkerNodeFilter.bind(this)\r\n        );\r\n        rootElement.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        rootElement.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        rootElement.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        rootElement.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        rootElement.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        rootElement.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        rootElement.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    render() {\r\n        return element(\"menu\", {\r\n            properties: {\r\n                className: \"menu\",\r\n                tabIndex: -1\r\n            },\r\n            attributes: {\r\n                role: \"menu\"\r\n            }\r\n        });\r\n    }\r\n\r\n    insertItem(index: number, ...items: MenuItemWidget[]): void {\r\n        const {rootElement} = this;\r\n        //this.items.splice(index, 0, ...items);\r\n        if (rootElement.children.length === 0) {\r\n            rootElement.append(...items.map(item => item.rootElement));\r\n        }\r\n        else {\r\n            rootElement.children.item(Math.max(rootElement.children.length, index))!\r\n                .before(...items.map(item => item.rootElement)\r\n            );\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(element: Element): number {\r\n        const {classList} = element;\r\n        if (classList.contains(\"menuitem\")) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (classList.contains(\"menuitemgroup\")) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        else {\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.#items)\r\n            .forEach((item_i) => {\r\n                MenuItemWidget.fromRoot(item_i)?.collapse()\r\n            });\r\n    }\r\n\r\n    #firstItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.rootElement;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.rootElement;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: MenuItemWidget): HTMLElement | null {\r\n        const {menu} = item;\r\n        if (menu == null) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu.rootElement;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #setActiveItem(item: MenuItemWidget | null): void {\r\n        const {activeItem} = this;\r\n        console.log(activeItem);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null && activeItem !== item) {\r\n            item.active = true;\r\n        }\r\n        this.#activeItem = item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLButtonElement) {\r\n            const item = MenuItemWidget.fromRoot(target);\r\n            if (item) {\r\n                item.trigger();\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        /*const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<HTMLElement>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }*/\r\n        const {target} = event;\r\n        if (target instanceof HTMLButtonElement) {\r\n            const item = MenuItemWidget.fromRoot(target);\r\n            if (item) {\r\n                this.#setActiveItem(item);\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<HTMLElement>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            /*const {contextual} = this;\r\n            if (contextual) {\r\n                this.remove();\r\n            }\r\n            else {*/\r\n                const {activeItem} = this;\r\n                activeItem?.collapse();\r\n                this.#setActiveItem(null);\r\n            //}\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: MenuItemWidget, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: MenuItemWidget): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {rootElement, activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        if (activeItem.expanded) {\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    else {\r\n                        activeItem.click();\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == rootElement;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == rootElement;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #closestItem(target: Element): MenuItemWidget | null {\r\n        const {rootElement} = this;\r\n        const targetElement = target.closest(\".menuitem\");\r\n        if (targetElement !== null && rootElement.contains(targetElement)) {\r\n            const item = MenuItemWidget.fromRoot(targetElement);\r\n            if (item !== void 0) {\r\n                return item;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {rootElement} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null;\r\n        if (targetClosestItemWidget?.hasPopup && !targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == rootElement;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = rootElement.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = rootElement.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLMenuElement && relatedTarget !== rootElement) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    rootElement.focus({preventScroll: true});\r\n                    /*const {activeItem} = this;\r\n                    if (activeItem !== null) {\r\n                        activeItem.active = false;\r\n                    }*/\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                rootElement.focus({preventScroll: true});\r\n                /*const {activeItem} = this;\r\n                if (activeItem !== null) {\r\n                    activeItem.active = false;\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {rootElement} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null; \r\n        if (targetClosestItemWidget?.hasPopup && targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == rootElement;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.hasPopup && activeItem.expanded && \r\n                !activeItem.contains(<HTMLElement>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItemWidget !== null) {\r\n                this.#setActiveItem(targetClosestItemWidget);\r\n                targetClosestItemWidget.focus({preventScroll: true});\r\n                if (targetClosestItemWidget.hasPopup) {\r\n                    if (!targetClosestItemWidget.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItemWidget);\r\n                        this.#setItemTimeout(targetClosestItemWidget, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        if (activeItem) {\r\n                            activeItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        /*if (target instanceof HTMLButtonElement) {\r\n            const item = MenuItemWidget.fromRoot(target);\r\n            if (item !== void 0) {\r\n                item\r\n            }\r\n        }*/\r\n    }\r\n}\r\n\r\nvar MenuWidget: MenuWidgetConstructor = MenuWidgetBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            properties: {\r\n                tabIndex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            eventListeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                label: item.label,\r\n                name: item.label,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"e-toolbar\", {\r\n                    properties: {\r\n                        slot: \"toolbar\",\r\n                        tabIndex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabIndex: -1\r\n                                        },\r\n                                        eventListeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY,\r\n                    slot: \"menu\"\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.extract(row)\r\n                }\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        properties: {\r\n                            type: \"search\"\r\n                        },\r\n                        eventListeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                properties: {\r\n                                    className: \"gridcell-label\",\r\n                                    textContent: column.label\r\n                                },\r\n                                eventListeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            type: \"menubutton\",\r\n                                            tabIndex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                properties: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabIndex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        properties: {\r\n                                                            slot: \"menu\",\r\n                                                            tabIndex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"button\",\r\n                                                                    textContent: \"Resize column\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                eventListeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Sort\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            properties: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabIndex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Ascending\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Descending\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            eventListeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            Array.from(menu.items).filter(item_i => item_i.name.startsWith(\"sort\"))\r\n                                                                                .forEach((sortRadioItem_i => {\r\n                                                                                    sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                                })\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Filter\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        properties: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabIndex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                properties: {\r\n                                                                                    tabIndex: -1,\r\n                                                                                    textContent: filter_i.name,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                eventListeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    eventListeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            properties: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { CustomElement, reactiveChildElements, reactiveElement, widget } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { MenuItemWidget } from \"./widgets/MenuItemWidget\";\r\nimport { MenuWidget } from \"./widgets/MenuWidget\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\nclass MenuModel extends ModelObject {\r\n    @ModelProperty()\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor()\r\n    constructor(init: {name?: string, items?: MenuItemModel[]})\r\n    constructor(init?: {name?: string, items?: MenuItemModel[]}) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? [])\r\n    }\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: {name: string, label: string, type: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\"; menu?: MenuModel;}) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    readonly prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel());\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel): MenuWidget {\r\n        return widget(\"menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        });\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): MenuItemWidget {\r\n        return reactiveElement(\r\n            item,\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    type: item.type,\r\n                    menu: item.menu ? this.#renderMenu(item.menu) : null\r\n                }\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (item, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        item.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment, widget } from \"./src/elements/Element\";\r\nimport { MenuItemModel, MenuModel, MenuView } from \"./src/views/MenuView\";\r\nimport { MenuItemWidget } from \"./src/views/widgets/MenuItemWidget\";\r\nimport { MenuWidget } from \"./src/views/widgets/MenuWidget\";\r\n\r\nconsole.log(MenuWidget);\r\nconsole.log(MenuItemWidget);\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        properties: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(gridView);\r\n    /*const menuWidget = new MenuWidget([\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A1\",\r\n            type: \"checkbox\"\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A2\",\r\n            type: \"submenu\",\r\n            menu: new MenuWidget([\r\n                new MenuItemWidget({label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                new MenuItemWidget({label: \"MenuItem B2\", type: \"checkbox\"})\r\n            ])\r\n        })\r\n    ]);\r\n    document.body.append(menuWidget.element);*/\r\n\r\n    const menuView = new MenuView(\r\n        new MenuModel({\r\n            items: [\r\n                new MenuItemModel({\r\n                    name: \"MenuItem A1\",\r\n                    label: \"MenuItem A1\",\r\n                    type: \"submenu\",\r\n                    menu: new MenuModel({\r\n                        name: \"MenuItem A2\",\r\n                        items: [\r\n                            new MenuItemModel({name: \"MenuItem B1\", label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                            new MenuItemModel({name: \"MenuItem B2\", label: \"MenuItem B2\", type: \"checkbox\"})\r\n                        ]\r\n                    })\r\n                }),\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(menuView);\r\n\r\n\r\n    document.body.append(\r\n        widget(\"menu\", {\r\n            children: [\r\n                widget(\"menuitem\", {\r\n                    properties: {\r\n                        type: \"checkbox\",\r\n                        label: \"Hello, World!\"\r\n                    }\r\n                })\r\n            ]\r\n        }).rootElement\r\n    );\r\n    \r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\nimport { Widget } from \"./views/widgets/Widget\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    public registerWidget(widget: Widget): void {\r\n        widget.rootElement.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.rootElement.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","widgets","constructor","this","Map","define","name","widget","set","create","ctor","Error","Widget","rootElement","render","click","focus","options","blur","contains","node","ModelChangeRecordBase","init","target","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","customElements","CustomWidget","widgetCtor","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","part","exportParts","attributes","dataset","children","eventListeners","style","element","createElement","is","isBuiltinElement","keys","key_i","assign","elementPart","add","join","attributeValue","elementStyle","property_i","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","content","child_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementPropertyObserver","reactiveElement_i","elementRef","react","deref","elementOrWidget","WeakRef","register","observerOptions","concat","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","Element","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","HTMLElement","shadowRoot","attachShadow","mode","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","textContent","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","connectedCallback","level","parentElement","HTMLETreeElement","attributeChangedCallback","Event","bubbles","labelPart","querySelector","toggle","force","expanded","shiftKey","ctrlKey","slotName","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","root","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","preventScroll","previousItem","nextItem","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","dragstart","drop","contextmenu","keydown","rel","href","className","hidden","treeItemElement","draggable","slot","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","contextX","contextY","close","body","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","previousNode","targetClosestItem","find","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","intersectsWithMouse","containsRelatedTarget","activeIndex","catch","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","querySelectorAll","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","text","stylesheet","CSSStyleSheet","replaceSync","Stylesheet","newlineIndex","indentMatch","substring","match","indent","replaceAll","trimEnd","trimMultilineIndent","HTMLEMenuItemCollectionBase","HTMLEMenuItemRadioList","HTMLEMenuItemRadioListBase","itemName","itemType","HTMLEMenuItemCollection","HTMLEMenuBarElementBase","isActive","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","innerText","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menuItemWidgets","MenuItemWidgetBase","role","toggleAttribute","replaceWith","hasPopup","menuElement","MenuItemWidget","MenuWidgetBase","getElementsByClassName","insertItem","classList","fromRoot","HTMLButtonElement","HTMLMenuElement","targetElement","targetClosestItemWidget","MenuWidget","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","MenuModel","MenuItemModel","MenuViewBase","MenuView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","_widgets","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","MutationObserver","_actionsObserverCallback","mutationsList","mutation","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","registerWidget","unregisterWidget","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}