{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { toolbarItemWidget } from \"./widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./widgets/toolbar/ToolBarWidget\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { treeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewFactory {\r\n    create(model: TreeModel): HTMLElement;\r\n    getModel(tree: HTMLElement): TreeModel | null;\r\n    selectedItems(tree: HTMLElement): TreeItemModel[];\r\n}\r\n\r\nvar treeView = new class TreeViewFactoryBase implements TreeViewFactory {\r\n    #models: WeakMap<HTMLElement, TreeModel>;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    \r\n    constructor() {\r\n        this.#models = new WeakMap();\r\n        this.#dragImages = new WeakMap();\r\n    }\r\n\r\n    create(model: TreeModel): HTMLElement {\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        const rootElement = element(\"div\", {\r\n            attributes: {\r\n                class: \"tree-view\",\r\n            },\r\n            children: [\r\n                treeElement,\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"offscreen\",\r\n                        hidden: true\r\n                    },\r\n                    children: reactiveChildElements(model.items,\r\n                        item => this.#renderTreeItemDragImage(item)\r\n                    )\r\n                })\r\n            ]\r\n        });\r\n        this.#models.set(treeElement, model);\r\n        return rootElement;\r\n    }\r\n    \r\n    getModel(tree: HTMLElement): TreeModel | null {\r\n        return this.#models.get(tree) ?? null;\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const model = this.getModel(tree)!;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    type: item.type,\r\n                    draggable: true,\r\n                    label: item.label\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                slotted: {\r\n                    content: <Node[]>\r\n                        ([\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"label\"\r\n                                }\r\n                            })\r\n                        ]).concat((item.type == \"parent\") ? [\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            })\r\n                        ] : []).concat([\r\n                            widget(\"toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            label: \"Visibility\"\r\n                                        },\r\n                                        listeners: {\r\n                                            click: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]),\r\n                    group:\r\n                        <Node[]>((item.type == \"parent\") ? [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : [])\r\n                }\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        const label = treeitem.querySelector<HTMLElement>(\":scope > .content > .label\");\r\n                        if (label) {\r\n                            label.textContent = `${newValue}`;\r\n                        }\r\n                        treeItemWidget.setLabel(treeitem, newValue);\r\n                        break;\r\n                    }\r\n                    case \"childCount\": {\r\n                        const badge = treeitem.querySelector<HTMLElement>(\":scope > .content > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLElement>(\":scope > .content > .toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                            if (visibilityItem) {\r\n                                const label = newValue ? \"Hide\" : \"Show\";\r\n                                toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = targetModel.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        const {sortFunction} = targetModel;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = targetModel.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => targetModel.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        targetModel;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetModel = this.getModel(targetTree)!;\r\n        if (targetItem) {\r\n            const activeItem = targetModel.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Display\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(this.selectedItems(targetTree));\r\n                                        selectedItems.display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Delete\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(this.selectedItems(targetTree));\r\n                                        const {count} = selectedItems;\r\n                                        const doRemove = confirm(`Remove ${count} items?`);\r\n                                        if (doRemove) {\r\n                                            selectedItems.remove();\r\n                                        }\r\n                                        targetTree.focus();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitemgroup\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    type: \"checkbox\",\r\n                                    label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                listeners: {\r\n                                    click: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems(targetTree)\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = TreeItemList.from(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridbody > .gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridhead > .gridheader[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > .grid > .gridbody > .gridrow > .gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            widget(\"grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                slotted: [\r\n                    widget(\"gridhead\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    widget(\"gridbody\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            widget(\"gridheader\", {\r\n                properties: {\r\n                    id: column.name\r\n                },\r\n                slotted: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                widget(\"widthsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}`\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = widget(\"gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = widget(\"gridcell\", {\r\n            properties: {\r\n                headers: column.name\r\n            },\r\n            slotted: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = widget(\"menu\",  {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: [\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        }\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            model.sortByColumn(column, Number(menuItemWidget.getValue(targetItem)));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: column.filters.map((filter_i, i) =>\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { treeView, TreeItemModel, TreeModel } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { comboBoxWidget, menuWidget, optionWidget } from \"./index\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    \r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeElement = treeView.create(treeModel);\r\n    document.body.append(treeElement);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    /*gridView.setColumnDelegate((column) => {\r\n        return fragment(\r\n            element(\"label\", {\r\n                children: column.label\r\n            }),\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    });*/\r\n    const year = new Date().getFullYear();\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => year - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n\r\n    /*const tree = widget(\"tree\", {\r\n        slotted: [\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true\r\n                    //disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                },\r\n                listeners: {\r\n                    contextmenu: <EventListener>((event: MouseEvent) => {\r\n                        const {target, clientX, clientY} = event;\r\n                        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n                        const menu = widget(\"menu\", {\r\n                            properties: {\r\n                                contextual: true\r\n                            },\r\n                            slotted: [\r\n                                widget(\"menuitemgroup\", {\r\n                                    slotted: [\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Display\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    console.log(treeItemWidget.getLabel(targetItem));\r\n                                                }\r\n                                            }\r\n                                        }),\r\n                                        widget(\"menuitem\", {\r\n                                            properties: {\r\n                                                label: \"Delete\"\r\n                                            },\r\n                                            listeners: {\r\n                                                click: () => {\r\n                                                    targetItem.remove();\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                            ]\r\n                        });\r\n                        targetItem.append(menu);\r\n                        menuWidget.positionContextual(menu, clientX, clientY);\r\n                        menu.focus({preventScroll: true});\r\n                        event.preventDefault();\r\n                    })\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 0\",\r\n                    type: \"parent\",\r\n                    draggable: true,\r\n                    disabled: true\r\n                },\r\n                slotted: {\r\n                    group: [\r\n                        widget(\"treeitemgroup\", {\r\n                            slotted: [\r\n                                widget(\"treeitem\", {\r\n                                    properties: {\r\n                                        label: \"treeitem 1\",\r\n                                        type: \"leaf\",\r\n                                        draggable: true\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            }),\r\n            widget(\"treeitem\", {\r\n                properties: {\r\n                    label: \"treeitem 1\",\r\n                    type: \"leaf\",\r\n                    draggable: true\r\n                },\r\n                slotted: {\r\n                    content: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(tree);*/\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"First item\",\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        name: \"MenuItem 1\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"MenuItem 2\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Second item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        type: \"checkbox\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\",\r\n                        type: \"checkbox\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"list\", {\r\n            slotted: [\r\n                widget(\"listitemgroup\",  {\r\n                    slotted: [   \r\n                        widget(\"listitem\",  {\r\n                            properties: {\r\n                                label: \"First item\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Second item\"\r\n                    },\r\n                    slotted: [\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"First item\",\r\n                                        type: \"button\"\r\n                                    }\r\n                                }),\r\n                                widget(\"toolbaritem\",  {\r\n                                    properties: {\r\n                                        label: \"Second item\",\r\n                                        type: \"checkbox\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Third item\",\r\n                        disabled: true,\r\n                    }\r\n                }),\r\n                widget(\"listitem\",  {\r\n                    properties: {\r\n                        label: \"Fourth item\"\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"grid\", {\r\n            properties: {\r\n                selectby: \"row\",\r\n                multisectable: true\r\n            },\r\n            slotted: {\r\n                headers: [\r\n                    widget(\"gridheader\",  {\r\n                        slotted: \"First header\"\r\n                    }),\r\n                    widget(\"gridheader\",  {\r\n                        slotted: \"Second header\"\r\n                    })\r\n                ],\r\n                rows: [\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"First cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Second cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Third cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Fourth cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Fifth cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Sixth cell\"\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"gridrow\",  {\r\n                        slotted: [   \r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Heighth cell\"\r\n                            }),\r\n                            widget(\"gridcell\",  {\r\n                                slotted: \"Nineth cell\"\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ],\r\n            listeners: {\r\n                change: (event) => {\r\n                    const {currentTarget} = event;\r\n                    const comboBoxTarget = <HTMLElement>currentTarget;\r\n                    console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n                }\r\n            }\r\n        })\r\n    );\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== undefined && value !== undefined) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","subtreeNodes","childNodes","childNodesCount","childIndex","child","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","HTMLElement","slotReferences","slotRef_i","widget","slot","slottedCallback","widgetsMap","attributesObserver","attributeChangedCallback","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","Error","widgets","slotted","NodeList","Node","Widget","toolbarItemWidget","class","role","tabindex","cloneNode","id","keyshortcut","pressed","label","disabled","setKeyShortcut","setPressed","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","some","childNode_i","classList","contains","menu","querySelector","setExpanded","getExpanded","getLabel","textContent","getKeyShortcut","toggle","force","expand","collapse","getType","types","type_i","oldType","add","getValue","getTitle","setTitle","getName","getPressed","getDisabled","setActive","getActive","relatedTarget","targetItem","closest","focus","preventScroll","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","toolbarWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","toolbar","tabIndex","querySelectorAll","setOrientation","getOrientation","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","lastChild","previousSibling","nextSibling","tree","activeItem","radio_i","stopPropagation","targetToolbar","preventDefault","previousItem","firstItem","nextItem","lastItem","treeItemWidget","group","title","draggable","setDraggable","setSelected","setPosInSet","getPosInSet","posInSet","e","setDropTarget","getDropTarget","getDraggable","Event","bubbles","getSelected","setLevel","getLevel","parseInt","getPropertyValue","content","shiftKey","ctrlKey","treeWidget","multisectable","setMultiSelectable","child_i","selectedItems","beginSelection","endSelection","getMultiSelectable","dropTargetItem","to","position","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","selected","expanded","nextNode","button","targetTree","blur","parentItem","click","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","hide","display","result","reduce","console","log","removedItemsGroups","TreeItemModel","list_i","children_i","childCount","visibility","treeView","treeElement","dragstart","drop","contextmenu","keydown","focusin","focusout","rootElement","hidden","getModel","treeitem","badge","visibilityItem","dragImageElement","span","targetModel","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","sameLabelIndex","item_j","confirm","copyWithin","newElements","clientX","clientY","contextMenu","contextual","x","y","count","close","targetElement","matches","itemsList","HTMLEActionElementBase","trigger","checked","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowRoot","assignedElements","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","activeIndex","positionContextual","find","root","previousNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","error","nearestItem","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","labelPart","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","droptarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menuItemWidget","hasIcon","hasArrow","setChecked","getMenu","keyshortcutsPart","after","typesFeatures","iconPartTemplate","arrowPartTemplate","iconPart","arrowPart","getChecked","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","listItemWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","comboBoxWidget","combobox","targetCombobox","addedNodes","box","targetOption","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","ListView","GridModel","initRows","columns","initColumns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","setSearchFilter","gridElement","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","toString","targetHead","targetHeader","columnHeaderElement","maxWidth","removeProperty","HTMLInputElement","targetColumn","GridView","main","treeModel","aLabel","bLabel","gridView","sortable","year","Date","getFullYear","menuView","change","comboBoxTarget","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","registerActionElement","removedNodes","unregisterActionElement","setup","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex"],"sourceRoot":""}