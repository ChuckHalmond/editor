{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuItemCollection.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/MenuItemWidget.ts","webpack://main/./src/views/widgets/MenuWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/MenuView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { Widget };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n\r\n    interface CustomWidgetConstructor {\r\n        new(...args: any): Widget;\r\n    }\r\n\r\n    interface WidgetWritablePropertiesMap {}\r\n}\r\n\r\ninterface WidgetConstructor {\r\n    readonly prototype: Widget;\r\n    new(element: HTMLElement): Widget;\r\n}\r\n\r\ninterface Widget {\r\n    readonly element: HTMLElement;\r\n    click(): void;\r\n    focus(options?: FocusOptions | undefined): void;\r\n    blur(): void;\r\n    contains(node: Node): boolean;\r\n}\r\n\r\ninterface WidgetRegistry {\r\n    define(name: string, widget: WidgetConstructor): void;\r\n    create<K extends keyof WidgetNameMap>(name: K): WidgetNameMap[K];\r\n}\r\n\r\nclass WidgetRegistryBase implements WidgetRegistry {\r\n    #map: Map<string, WidgetConstructor>;\r\n\r\n    constructor() {\r\n        this.#map = new Map();\r\n    }\r\n\r\n    define(name: string, widget: WidgetConstructor): void {\r\n        this.#map.set(name, widget);\r\n    }\r\n\r\n    create<K extends keyof WidgetNameMap>(name: K): WidgetNameMap[K] {\r\n        const ctor = <(new() => WidgetNameMap[K]) | undefined>this.#map.get(name);\r\n        if (typeof ctor !== \"undefined\") {\r\n            return new ctor();\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nvar widgets: WidgetRegistry = new WidgetRegistryBase();\r\n\r\nclass WidgetBase implements Widget {\r\n    readonly element: HTMLElement;\r\n\r\n    constructor(element: HTMLElement) {\r\n        this.element = element;\r\n    }\r\n    \r\n    click(): void {\r\n        this.element.click();\r\n    }\r\n\r\n    focus(options?: FocusOptions | undefined): void {\r\n        this.element.focus(options);\r\n    }\r\n\r\n    blur(): void {\r\n        this.element.blur();\r\n    }\r\n\r\n    contains(node: Node): boolean {\r\n        return this.element.contains(node);\r\n    }\r\n}\r\n\r\nvar Widget: WidgetConstructor = WidgetBase;","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { Widget, widgets } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { CustomWidget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveObject };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string\r\n    }): <W extends CustomWidgetConstructor>(widgetCtor: W) => W;\r\n}\r\n\r\nconst CustomWidget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends CustomWidgetConstructor>(\r\n        widgetCtor: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.define(\r\n            name,\r\n            widgetCtor\r\n        );\r\n        return widgetCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>\r\n}[keyof T];\r\n\r\ntype ReadonlyKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\n\r\ninterface HTMLElementInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\ninterface HTMLElementInitMap {\r\n    \"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLElementInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementInitMap>(\r\n    tagName: K, init?: HTMLElementInitMap[K]): E;\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<E>): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit<HTMLElement>): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (options) {\r\n            const {is: isBuiltinElement} = options;\r\n            if (isBuiltinElement) {\r\n                element.setAttribute(\"is\", isBuiltinElement)\r\n            }\r\n        }\r\n        if (properties) {\r\n            const keys = <(keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = element;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            element.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (tagName) {\r\n            case \"template\":\r\n                const {content} = init as HTMLTemplateInit;\r\n                if (content) {\r\n                    (<HTMLTemplateElement>element).content.append(\r\n                        ...Array.from(content)\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetWritablePropertiesMap> {\r\n    properties?: Partial<WidgetWritablePropertiesMap[K]>,\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\ninterface WidgetInitMap {\r\n    //\"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLElementInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n/*\r\nfunction widget<W extends WidgetNameMap[K], K extends keyof WidgetInitMap>(\r\n    name: K, init?: WidgetInitMap[K]): W;*/\r\nfunction widget<W extends WidgetNameMap[K], K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): W;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: string, init?: WidgetInit<K>): Widget\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): WidgetNameMap[K] {\r\n    const widget = widgets.create(name);\r\n    if (init) {\r\n        const {element} = widget;\r\n        const {properties, attributes, dataset, children, eventListeners, style} = init;\r\n        if (properties) {\r\n            const keys = <(keyof Partial<WidgetWritablePropertiesMap[K]>)[]>Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = properties[key_i];\r\n                if (typeof properties[key_i] !== \"undefined\") {\r\n                    Object.assign(\r\n                        widget, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (name) {\r\n        }\r\n    }\r\n    return widget;\r\n}\r\n\r\nconst reactiveObjectsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveObjectsArray: {\r\n        objectRef: WeakRef<object>,\r\n        properties: string[],\r\n        react: (object: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveObjectsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveObject: {\r\n        objectRef: WeakRef<object>,\r\n        properties: string[],\r\n        react: (object: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveObject} = heldValue;\r\n    const reactiveObjectsMapEntry = reactiveObjectsMap.get(model);\r\n    if (reactiveObjectsMapEntry !== void 0) {\r\n        const {reactiveObjectsArray} = reactiveObjectsMapEntry;\r\n        reactiveObjectsArray.splice(reactiveObjectsArray.indexOf(reactiveObject), 1);\r\n    }\r\n});\r\n\r\nconst reactiveObjectsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveObjectsArray} = reactiveObjectsMap.get(target)!;\r\n        reactiveObjectsArray.forEach(reactiveObject_i => {\r\n            const {objectRef, react, properties} = reactiveObject_i;\r\n            const object = objectRef.deref();\r\n            if (object) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(object, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveObject<M extends ModelNode, O extends object, K extends string>(\r\n    model: M,\r\n    object: O,\r\n    properties: K[],\r\n    react: (object: O, property: K, oldValue: any, newValue: any) => void\r\n): O;\r\nfunction reactiveObject<M extends ModelNode, O extends object>(\r\n    model: M,\r\n    object: O,\r\n    properties: string[],\r\n    react: (object: O, property: string, oldValue: any, newValue: any) => void\r\n): O {\r\n    const objectRef = new WeakRef(object);\r\n    const reactiveObject = {objectRef, react, properties};\r\n    const reactiveObjectsMapEntry = reactiveObjectsMap.get(model);\r\n    reactiveObjectsFinalizationRegistry.register(element, {model, reactiveObject});\r\n    if (!reactiveObjectsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveObjectsArray = [reactiveObject];\r\n        reactiveObjectsMap.set(model, {observerOptions, reactiveObjectsArray});\r\n        reactiveObjectsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveObjectsArray, observerOptions} = reactiveObjectsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveObjectsArray.push(reactiveObject);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(object, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return object;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"div\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"arrow\"]\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.level = (() => {\r\n            let level = 0;\r\n            let {parentElement} = this;\r\n            while (parentElement instanceof HTMLETreeItemGroupElement) {\r\n                level++;\r\n                ({parentElement} = parentElement);\r\n                if (!(parentElement instanceof HTMLETreeItemElement)) {\r\n                    return level;\r\n                }\r\n                ({parentElement} = parentElement);\r\n            }\r\n            if (parentElement instanceof HTMLETreeElement) {\r\n                level++;\r\n            }\r\n            return level;\r\n        })();\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.items.item(this.#dropTargetIndex) ?? null;\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #activeIndex: number;\r\n    #dropTargetIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveObject, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            eventListeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                properties: {\r\n                    className: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveObject(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: true\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            properties: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            properties: {\r\n                                tabIndex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabIndex: -1\r\n                                    },\r\n                                    eventListeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveObject(\r\n            item,\r\n            element(\"span\", {\r\n                properties: {\r\n                    className: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {part: [\"icon\"]}),\r\n                        element(\"span\", {\r\n                            part: [\"label\"],\r\n                            children: [\r\n                                element(\"slot\")\r\n                            ]\r\n                        }),\r\n                        element(\"span\", {part: [\"arrow\"]})\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type,\r\n                textContent: label\r\n            },\r\n            children: menu ? [menu] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            properties: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                properties: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    contextual: boolean;\r\n    contextX: number;\r\n    contextY: number;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex);\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextX!: number;\r\n\r\n    @AttributeProperty({type: Number, defaultValue: 0})\r\n    contextY!: number;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {contextual} = this;\r\n        if (contextual) {\r\n            this.#position();\r\n        }\r\n    }\r\n\r\n    #position(): void {\r\n        const {contextX, contextY} = this;\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = contextX + scrollX;\r\n        const top = contextY + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        Array.from(this.items)\r\n            .forEach((item_i) => {\r\n                if (item_i.expanded) {\r\n                    item_i.collapse();\r\n                }\r\n            });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        if (item == null) {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            targetClosestItem.trigger();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            !targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = this.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    const activeIndex = this.#activeIndex;\r\n                    this.focus({preventScroll: true});\r\n                    this.#setActiveItem(null);\r\n                    this.#activeIndex = activeIndex;\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                this.focus({preventScroll: true});\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        if (targetClosestItem?.type == \"submenu\" &&\r\n            targetClosestItem.expanded) {\r\n            this.#clearItemTimeout(targetClosestItem);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLEMenuElement\r\n        ) == this;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.type == \"submenu\" &&\r\n                activeItem.expanded && \r\n                !activeItem.contains(<Node>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItem !== null) {\r\n                this.#setActiveItem(targetClosestItem);\r\n                targetClosestItem.focus({preventScroll: true});\r\n                if (targetClosestItem.type == \"submenu\") {\r\n                    if (!targetClosestItem.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItem);\r\n                        this.#setItemTimeout(targetClosestItem, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        targetClosestItem.menu?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const composedPath = event.composedPath();\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestTargetMenu = composedPath.find(\r\n                target_i => target_i instanceof HTMLEMenuElement\r\n            ) == this;\r\n            if (isClosestTargetMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    Array.from(this.items).filter(item_i => item_i.type == \"radio\" && item_i.name === name).\r\n                        forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            properties: {\r\n                name: name,\r\n                tabIndex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        CustomElement({\r\n            name: \"e-grid\"\r\n        })(this);\r\n    }\r\n    \r\n    static readonly #shadowTemplate = element(\"template\", {\r\n        content: [\r\n            element(\"slot\")\r\n        ]\r\n    });\r\n    static readonly #shadowStylesheet = Stylesheet(\r\n        trimMultilineIndent(/*css*/`\r\n            :host {\r\n                display: table;\r\n            }\r\n\r\n            :host([droptarget]) {\r\n                background-color: gainsboro;\r\n            }\r\n        `)\r\n    )\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        \r\n        (shadowRoot as any)[\"adoptedStyleSheets\"] = [\r\n            HTMLEGridElementBase.#shadowStylesheet\r\n        ];\r\n        shadowRoot.append(\r\n            HTMLEGridElementBase.#shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        cell.active = true;\r\n        cell.tabIndex = 0;\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            this.#setActiveRow(closestRow);\r\n        }\r\n        this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        row.active = true;\r\n        row.tabIndex = 0;\r\n        this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemRadioList };\r\nexport { HTMLEMenuItemCollection };\r\n\r\ninterface HTMLEMenuItemCollectionConstructor {\r\n    readonly prototype: HTMLEMenuItemCollection;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement): HTMLEMenuItemCollection;\r\n}\r\n\r\ninterface HTMLEMenuItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEMenuItemElement | null;\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioListConstructor {\r\n    readonly prototype: HTMLEMenuItemRadioList;\r\n    new(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string): HTMLEMenuItemRadioList;\r\n}\r\n\r\ninterface HTMLEMenuItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEMenuItemElement>;\r\n}\r\n\r\nclass HTMLEMenuItemCollectionBase implements HTMLEMenuItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEMenuElement | HTMLEMenuBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEMenuItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEMenuItemElement | HTMLEMenuItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode?.type == \"radio\") {\r\n            return new HTMLEMenuItemRadioList(<HTMLEMenuElement | HTMLEMenuBarElement>root, name);\r\n        }\r\n        return <HTMLEMenuItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEMenuItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEMenuItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEMenuItemRadioListBase? = class HTMLEMenuItemRadioListBase implements HTMLEMenuItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEMenuElement | HTMLEMenuBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEMenuItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEMenuItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEMenuItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEMenuItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemCollection: HTMLEMenuItemCollectionConstructor =  HTMLEMenuItemCollectionBase;\r\nvar HTMLEMenuItemRadioList: HTMLEMenuItemRadioListConstructor = HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase!;\r\ndelete HTMLEMenuItemCollectionBase.HTMLEMenuItemRadioListBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    active: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEMenuItemCollection;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEMenuItemCollection(this);\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEMenuItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            return menu.items.item(0);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, active, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (active) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(targetClosestItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget && target !== activeItem && active) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {active, activeItem, items} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const includesTarget = Array.from(items.values()).includes(target);\r\n            if (includesTarget) {\r\n                const isActive = !active;\r\n                this.active = isActive;\r\n                if (isActive) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {active} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (active && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.active = !active;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (active) {\r\n                    this.active = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.active = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"icon\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"label\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"output\", {\r\n                        part: [\"value\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"options\"],\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        part: [\"separator\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"description\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"icon\"]\r\n                        }),\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"select\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"menubutton\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            user-select: none;\r\n                        }\r\n                        \r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        [part=\"content\"]:hover {\r\n                            background-color: whitesmoke;\r\n                        }\r\n\r\n                        :host([active]) [part=\"content\"] {\r\n                            background-color: whitesmoke;\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) [part=\"content\"] {\r\n                            background-color: gainsboro;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            display: flex;\r\n                            line-height: 22px;\r\n                        }\r\n                        \r\n                        [part=\"label\"] {\r\n                            order: 0;\r\n                            margin-right: auto;\r\n                            overflow: hidden;\r\n                            text-overflow: ellipsis;\r\n                            white-space: nowrap;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"toolbar\"]) {\r\n                            order: 1;\r\n                        }\r\n\r\n                        ::slotted([slot=\"badge\"]) {\r\n                            order: 2;\r\n                            pointer-events: none;\r\n                        }\r\n\r\n                        ::slotted([slot=\"menu\"]) {\r\n                            position: absolute;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"toolbar\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            name: \"badge\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            outline: 1px solid black;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        item.active = true;\r\n        item.tabIndex = 0;\r\n        this.#activeIndex = Array.from(items).indexOf(item);\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            properties: {\r\n                innerText: /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            }\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    element(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            element(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { MenuWidget, menuWidgets } from \"./MenuWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\nexport { MenuItemWidget };\r\nexport { menuItemWidgets };\r\n\r\ninterface MenuItemWidgetConstructor {\r\n    readonly prototype: MenuItemWidget;\r\n    new(init: {\r\n        type: MenuItemType;\r\n        label: string;\r\n        menu?: MenuWidget;\r\n    }): MenuItemWidget;\r\n}\r\n\r\ninterface MenuItemWidget extends Widget {\r\n    readonly menu: MenuWidget | null;\r\n    type: MenuItemType;\r\n    label: string;\r\n    active: boolean;\r\n    hasPopup: boolean;\r\n    expanded: boolean;\r\n    checked: boolean;\r\n    trigger(): void;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidget;\r\n    }\r\n    \r\n    interface WidgetWritablePropertiesMap {\r\n        \"menuitem\": Pick<MenuItemWidget, \"type\" | \"label\" | \"hasPopup\">;\r\n    }\r\n}\r\n\r\nvar widgetTemplate: HTMLTemplateElement;\r\nvar menuItemWidgets: WeakMap<Element, MenuItemWidget>;\r\n\r\n@CustomWidget({\r\n    name: \"menuitem\"\r\n})\r\nclass MenuItemWidgetBase extends Widget implements MenuItemWidget {\r\n\r\n    static {\r\n        widgetTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"button\", {\r\n                    properties: {\r\n                        className: \"menuitem\"\r\n                    },\r\n                    attributes: {\r\n                        role: \"menuitem\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"content\"\r\n                            },\r\n                            children: [\r\n                                element(\"span\", {\r\n                                    properties: {\r\n                                        className: \"icon\"\r\n                                    }\r\n                                }),\r\n                                element(\"span\", {\r\n                                    properties: {\r\n                                        className: \"label\"\r\n                                    }\r\n                                }),\r\n                                element(\"span\", {\r\n                                    properties: {\r\n                                        className: \"arrow\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        menuItemWidgets = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super(<HTMLElement>widgetTemplate.content.cloneNode(true).firstChild);\r\n        menuItemWidgets.set(this.element, this);\r\n    }\r\n\r\n    get #labelElement() {\r\n        return this.element.querySelector(\":scope > .content > .label\")!;\r\n    }\r\n\r\n    get #menuElement() {\r\n        return this.element.querySelector(\":scope > .menu\")!;\r\n    }\r\n\r\n    get checked(): boolean {\r\n        return this.element.hasAttribute(\"aria-checked\");\r\n    }\r\n\r\n    set checked(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-checked\", value);\r\n    }\r\n\r\n    get label(): string {\r\n        return this.#labelElement.textContent ?? \"\";\r\n    }\r\n\r\n    set label(value: string) {\r\n        this.#labelElement.textContent = value;\r\n    }\r\n\r\n    get type(): MenuItemType {\r\n        return <MenuItemType>this.element.dataset.type ?? \"button\";\r\n    }\r\n\r\n    set type(value: MenuItemType) {\r\n        this.element.dataset.type = value;\r\n    }\r\n\r\n    get active(): boolean {\r\n        return this.element.hasAttribute(\"aria-active\");\r\n    }\r\n\r\n    set active(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-active\", value);\r\n    }\r\n\r\n    get hasPopup(): boolean {\r\n        return this.element.hasAttribute(\"aria-haspopup\");\r\n    }\r\n\r\n    set hasPopup(value: boolean) {\r\n        this.element.setAttribute(\"aria-haspopup\", value.toString());\r\n    }\r\n\r\n    get expanded(): boolean {\r\n        return this.element.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    set expanded(value: boolean) {\r\n        this.element.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    get menu(): MenuWidget | null {\r\n        return menuWidgets.get(this.#menuElement) ?? null;\r\n    }\r\n\r\n    trigger(): void {\r\n        const {type, element} = this;\r\n        switch (type) {\r\n            case \"checkbox\": {\r\n                this.checked = !this.checked;\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                this.checked = true;\r\n                break;\r\n            }\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                this.toggle();\r\n                break;\r\n            }\r\n        }\r\n        element.dispatchEvent(new Event(\"trigger\", {\r\n            bubbles: true\r\n        }));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {element, type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !this.expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                element.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const {expanded} = this;\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {element, menu} = this;\r\n        if (menu !== null) {\r\n            const {element: menuElement} = menu;\r\n            const {style: menuStyle} = menuElement;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = element.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menuElement.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = element.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menuElement);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar MenuItemWidget: MenuItemWidgetConstructor = MenuItemWidgetBase;","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { MenuItemWidget, menuItemWidgets } from \"./MenuItemWidget\";\r\nimport { Widget } from \"./Widget\";\r\n\r\nexport { MenuWidget };\r\nexport { menuWidgets };\r\n\r\ninterface MenuWidgetConstructor {\r\n    readonly prototype: MenuWidget;\r\n    new(items: MenuItemWidget[]): MenuWidget;\r\n}\r\n\r\ninterface MenuWidget extends Widget {\r\n    readonly items: MenuItemWidget[];\r\n    readonly activeItem: MenuItemWidget | null;\r\n    insertItems(index: number, ...items: MenuItemWidget[]): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidget;\r\n    }\r\n\r\n    interface WidgetWritablePropertiesMap {\r\n        \"menu\": Pick<MenuWidget, never>;\r\n    }\r\n}\r\n\r\nvar widgetTemplate: HTMLTemplateElement;\r\nvar menuWidgets: WeakMap<Element, MenuWidget>;\r\nvar toggleTimeouts: WeakMap<MenuItemWidget, {clear(): void;}>;\r\n\r\n@CustomWidget({\r\n    name: \"menu\"\r\n})\r\nclass MenuWidgetBase extends Widget implements MenuWidget {\r\n\r\n    get #itemElements() {\r\n        return this.element.querySelectorAll(\":scope > .menuitem, :scope > .menuitemgroup > .menuitem\");\r\n    }\r\n\r\n    get items(): MenuItemWidget[] {\r\n        return <MenuItemWidget[]>Array.from(this.#itemElements).map(\r\n            element_i => menuItemWidgets.get(element_i)\r\n        ).filter(item_i => item_i !== void 0);\r\n    }\r\n\r\n    get activeItem(): MenuItemWidget | null {\r\n        return this.#activeItem;\r\n    }\r\n\r\n    #activeItem: MenuItemWidget | null;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        widgetTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"menu\", {\r\n                    properties: {\r\n                        className: \"menu\",\r\n                        tabIndex: -1\r\n                    },\r\n                    attributes: {\r\n                        role: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        menuWidgets = new WeakMap();\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super(<HTMLElement>widgetTemplate.content.cloneNode(true).firstChild);\r\n        const {element} = this;\r\n        this.#activeItem = null;\r\n        this.#walker = document.createTreeWalker(\r\n            element, NodeFilter.SHOW_ELEMENT, <NodeFilter>this.#walkerNodeFilter.bind(this)\r\n        );\r\n        element.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        element.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        element.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        element.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        element.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        element.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        element.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        menuWidgets.set(element, this);\r\n    }\r\n\r\n    insertItems(index: number, ...items: MenuItemWidget[]) {\r\n        const {items: _items, element} = this;\r\n        if (_items.length > index) {\r\n            _items[index].element.after(...items.map(item_i => item_i.element));\r\n        }\r\n        else {\r\n            element.append(...items.map(item_i => item_i.element));\r\n        }\r\n    }\r\n\r\n    #walkerNodeFilter(element: Element): number {\r\n        const {classList} = element;\r\n        if (classList.contains(\"menuitem\")) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (classList.contains(\"menuitemgroup\")) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        else {\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.items\r\n            .forEach((item_i) => {\r\n                item_i.collapse()\r\n            });\r\n    }\r\n\r\n    #firstItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.element;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: MenuItemWidget): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item.element;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: MenuItemWidget): HTMLElement | null {\r\n        const {menu} = item;\r\n        if (menu == null) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu.element;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #setActiveItem(item: MenuItemWidget | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null && activeItem !== item) {\r\n            item.active = true;\r\n        }\r\n        this.#activeItem = item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLButtonElement) {\r\n            const item = menuItemWidgets.get(target);\r\n            if (item !== void 0) {\r\n                item.trigger();\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        /*const {target} = event;\r\n        const {items} = this;\r\n        const targetClosestItem = Array.from(items).find(\r\n            item_i => item_i.contains(<HTMLElement>target)\r\n        ) ?? null;\r\n        if (targetClosestItem) {\r\n            this.#setActiveItem(targetClosestItem);\r\n        }*/\r\n        const {target} = event;\r\n        if (target instanceof HTMLButtonElement) {\r\n            const item = menuItemWidgets.get(target);\r\n            if (item !== void 0) {\r\n                this.#setActiveItem(item);\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<HTMLElement>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            /*const {contextual} = this;\r\n            if (contextual) {\r\n                this.remove();\r\n            }\r\n            else {*/\r\n                const {activeItem} = this;\r\n                activeItem?.collapse();\r\n                this.#setActiveItem(null);\r\n            //}\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: MenuItemWidget, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: MenuItemWidget): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {element, activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        if (activeItem.expanded) {\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    else {\r\n                        activeItem.click();\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == element;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLMenuElement\r\n                    ) == element;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {hasPopup} = activeItem;\r\n                    if (hasPopup) {\r\n                        activeItem.expand();\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #closestItem(target: Element): MenuItemWidget | null {\r\n        const {element} = this;\r\n        const targetElement = target.closest(\".menuitem\");\r\n        if (targetElement !== null && element.contains(targetElement)) {\r\n            const itemWidget = menuItemWidgets.get(targetElement);\r\n            if (itemWidget !== void 0) {\r\n                return itemWidget;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        const {element} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null;\r\n        if (targetClosestItemWidget?.hasPopup && !targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == element;\r\n        if (isTargetClosestMenu) {\r\n            const {clientX, clientY} = event;\r\n            const {left, right, top, bottom} = element.getBoundingClientRect();\r\n            const intersectsWithMouse = !(\r\n                left > clientX || right < clientX || top > clientY || bottom < clientY\r\n            );\r\n            const containsRelatedTarget = element.contains(<Node>relatedTarget);\r\n            if (intersectsWithMouse && containsRelatedTarget) {\r\n                if (relatedTarget instanceof HTMLMenuElement && relatedTarget !== element) {\r\n                    relatedTarget.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    /*const {activeItem} = this;\r\n                    if (activeItem !== null) {\r\n                        activeItem.active = false;\r\n                    }*/\r\n                    this.focus({preventScroll: true});\r\n                    this.#setActiveItem(null);\r\n                }\r\n            }\r\n            if (!intersectsWithMouse) {\r\n                this.focus({preventScroll: true});\r\n                this.#setActiveItem(null);\r\n                /*const {activeItem} = this;\r\n                if (activeItem !== null) {\r\n                    activeItem.active = false;\r\n                }*/\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {element} = this;\r\n        const targetClosestItemWidget = target instanceof Element ? this.#closestItem(target) : null; \r\n        if (targetClosestItemWidget?.hasPopup && targetClosestItemWidget.expanded) {\r\n            this.#clearItemTimeout(targetClosestItemWidget);\r\n        }\r\n        const isTargetClosestMenu = event.composedPath().find(\r\n            target_i => target_i instanceof HTMLMenuElement\r\n        ) == element;\r\n        if (isTargetClosestMenu) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.hasPopup && activeItem.expanded && \r\n                !activeItem.contains(<HTMLElement>target)) {\r\n                this.#clearItemTimeout(activeItem);\r\n                this.#setItemTimeout(activeItem, 400)\r\n                    .then(() => {\r\n                        activeItem.collapse();\r\n                    })\r\n                    .catch(() => void 0);\r\n            }\r\n            if (targetClosestItemWidget !== null) {\r\n                this.#setActiveItem(targetClosestItemWidget);\r\n                targetClosestItemWidget.focus({preventScroll: true});\r\n                if (targetClosestItemWidget.hasPopup) {\r\n                    if (!targetClosestItemWidget.expanded) {\r\n                        this.#clearItemTimeout(targetClosestItemWidget);\r\n                        this.#setItemTimeout(targetClosestItemWidget, 200)\r\n                            .then(() => {\r\n                                const {activeItem} = this;\r\n                                this.#collapseSubmenus();\r\n                                if (activeItem) {\r\n                                    this.#clearItemTimeout(activeItem);\r\n                                    activeItem.expand();\r\n                                    activeItem.menu?.focus({preventScroll: true});\r\n                                }\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    else {\r\n                        if (activeItem) {\r\n                            activeItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        /*if (target instanceof HTMLButtonElement) {\r\n            const item = MenuItemWidget.fromRoot(target);\r\n            if (item !== void 0) {\r\n                item\r\n            }\r\n        }*/\r\n    }\r\n}\r\n\r\nvar MenuWidget: MenuWidgetConstructor = MenuWidgetBase;","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveObject, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            properties: {\r\n                tabIndex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            eventListeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                label: item.label,\r\n                name: item.label,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"e-toolbar\", {\r\n                    properties: {\r\n                        slot: \"toolbar\",\r\n                        tabIndex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveObject(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveObject(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabIndex: -1\r\n                                        },\r\n                                        eventListeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true,\r\n                    contextX: clientX,\r\n                    contextY: clientY,\r\n                    slot: \"menu\"\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveObject } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.extract(row)\r\n                }\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        properties: {\r\n                            type: \"search\"\r\n                        },\r\n                        eventListeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveObject(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                properties: {\r\n                                    className: \"gridcell-label\",\r\n                                    textContent: column.label\r\n                                },\r\n                                eventListeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            type: \"menubutton\",\r\n                                            tabIndex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                properties: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabIndex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        properties: {\r\n                                                            slot: \"menu\",\r\n                                                            tabIndex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"button\",\r\n                                                                    textContent: \"Resize column\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                eventListeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Sort\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    reactiveObject(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            properties: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabIndex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Ascending\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Descending\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            eventListeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            Array.from(menu.items).filter(item_i => item_i.name.startsWith(\"sort\"))\r\n                                                                                .forEach((sortRadioItem_i => {\r\n                                                                                    sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                                })\r\n                                                                            );\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Filter\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        properties: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabIndex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                properties: {\r\n                                                                                    tabIndex: -1,\r\n                                                                                    textContent: filter_i.name,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                eventListeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    eventListeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            properties: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { CustomElement, reactiveChildElements, reactiveObject, widget } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { MenuItemWidget, menuItemWidgets } from \"./widgets/MenuItemWidget\";\r\nimport { MenuWidget } from \"./widgets/MenuWidget\";\r\n\r\nexport { MenuModel };\r\nexport { MenuItemModel };\r\nexport { MenuView };\r\n\r\nclass MenuModel extends ModelObject {\r\n    @ModelProperty()\r\n    readonly items: ModelList<MenuItemModel>;\r\n    \r\n    @ModelProperty()\r\n    name?: string;\r\n    \r\n    constructor()\r\n    constructor(init: {name?: string, items?: MenuItemModel[]})\r\n    constructor(init?: {name?: string, items?: MenuItemModel[]}) {\r\n        super();\r\n        this.name = init?.name;\r\n        this.items = new ModelList(init?.items ?? [])\r\n    }\r\n}\r\n\r\nclass MenuItemModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    label: string;\r\n\r\n    @ModelProperty()\r\n    type: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\n    @ModelProperty()\r\n    menu?: MenuModel;\r\n    \r\n    constructor(init: {name: string, label: string, type: \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\"; menu?: MenuModel;}) {\r\n        super();\r\n        const {name, label, type, menu} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.menu = menu;\r\n    }\r\n}\r\n\r\ninterface MenuViewConstructor {\r\n    readonly prototype: MenuView;\r\n    new(): MenuView;\r\n    new(model: MenuModel): MenuView;\r\n}\r\n\r\ninterface MenuView extends View {\r\n    readonly model: MenuModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-menu\": MenuView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-menu\"\r\n})\r\nclass MenuViewBase extends View {\r\n    readonly model!: MenuModel;\r\n\r\n    constructor()\r\n    constructor(model: MenuModel)\r\n    constructor(model?: MenuModel) {\r\n        super();\r\n        this.setModel(model ?? new MenuModel());\r\n    }\r\n\r\n    renderLight() {\r\n        const {model} = this;\r\n        return this.#renderMenu(model);\r\n    }\r\n\r\n    #renderMenu(menu: MenuModel) {\r\n        return widget(\"menu\", {\r\n            children: reactiveChildElements(\r\n                menu.items,\r\n                item_i => this.#renderMenuItem(item_i)\r\n            )\r\n        }).element;\r\n    }\r\n\r\n    #renderMenuItem(item: MenuItemModel): Element {\r\n        const {type, menu} = item;\r\n        return reactiveObject(\r\n            item,\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    type: type,\r\n                    hasPopup: menu !== void 0\r\n                },\r\n                children: menu !== void 0 ? [\r\n                    this.#renderMenu(menu)\r\n                ] : void 0\r\n            }),\r\n            [\"label\", \"name\"],\r\n            (menuitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\": {\r\n                        menuitem.label = newValue;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        ).element;\r\n    }\r\n}\r\n\r\nvar MenuView: MenuViewConstructor = MenuViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment, widget } from \"./src/elements/Element\";\r\nimport { MenuItemModel, MenuModel, MenuView } from \"./src/views/MenuView\";\r\nimport { MenuItemWidget } from \"./src/views/widgets/MenuItemWidget\";\r\nimport { MenuWidget } from \"./src/views/widgets/MenuWidget\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        properties: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    //document.body.append(gridView);\r\n    /*const menuWidget = new MenuWidget([\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A1\",\r\n            type: \"checkbox\"\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"MenuItem A2\",\r\n            type: \"submenu\",\r\n            menu: new MenuWidget([\r\n                new MenuItemWidget({label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                new MenuItemWidget({label: \"MenuItem B2\", type: \"checkbox\"})\r\n            ])\r\n        })\r\n    ]);\r\n    document.body.append(menuWidget.element);*/\r\n\r\n    const menuView = new MenuView(\r\n        new MenuModel({\r\n            items: [\r\n                new MenuItemModel({\r\n                    name: \"MenuItem A1\",\r\n                    label: \"MenuItem A1\",\r\n                    type: \"submenu\",\r\n                    menu: new MenuModel({\r\n                        name: \"MenuItem A2\",\r\n                        items: [\r\n                            new MenuItemModel({name: \"MenuItem B1\", label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                            new MenuItemModel({name: \"MenuItem B2\", label: \"MenuItem B2\", type: \"checkbox\"})\r\n                        ]\r\n                    })\r\n                }),\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(menuView);\r\n    const submenuItems = [\r\n        widget(\"menuitem\", {\r\n            properties: {\r\n                type: \"checkbox\",\r\n                label: \"First\"\r\n            }\r\n        }),\r\n        widget(\"menuitem\", {\r\n            properties: {\r\n                type: \"button\",\r\n                label: \"Second\"\r\n            }\r\n        })\r\n    ];\r\n    const submenu = widget(\"menu\");\r\n    submenu.insertItems(0, ...submenuItems);\r\n\r\n    const menu = widget(\"menu\", {\r\n        children: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    type: \"checkbox\",\r\n                    label: \"Hello, World!\"\r\n                }\r\n            }).element,\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    type: \"submenu\",\r\n                    label: \"Submenu\",\r\n                    hasPopup: true\r\n                },\r\n                children: [\r\n                    submenu.element\r\n                ]\r\n            }).element,\r\n        ]\r\n    });\r\n    \r\n    menu.items[0].trigger();\r\n\r\n    document.body.append(menu.element);\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\nimport { Widget } from \"./views/widgets/Widget\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","widgets","constructor","this","Map","define","name","widget","set","create","ctor","Error","Widget","element","click","focus","options","blur","contains","node","ModelChangeRecordBase","init","target","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","customElements","CustomWidget","widgetCtor","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","part","exportParts","attributes","dataset","children","eventListeners","style","createElement","is","isBuiltinElement","keys","key_i","assign","elementPart","add","join","attributeValue","elementStyle","property_i","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","content","reactiveObjectsMap","reactiveObjectsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveObject","reactiveObjectsMapEntry","reactiveObjectsArray","reactiveObjectsPropertyObserver","reactiveObject_i","objectRef","react","object","deref","WeakRef","register","observerOptions","concat","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","HTMLElement","shadowRoot","attachShadow","mode","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","textContent","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","connectedCallback","level","parentElement","HTMLETreeElement","attributeChangedCallback","Event","bubbles","labelPart","querySelector","toggle","force","expanded","shiftKey","ctrlKey","slotName","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","root","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","preventScroll","previousItem","nextItem","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","dragstart","drop","contextmenu","keydown","rel","href","className","hidden","treeItemElement","draggable","slot","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","contextX","contextY","close","body","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","previousNode","targetClosestItem","find","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","intersectsWithMouse","containsRelatedTarget","activeIndex","catch","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","querySelectorAll","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","text","stylesheet","CSSStyleSheet","replaceSync","Stylesheet","newlineIndex","indentMatch","substring","match","indent","replaceAll","trimEnd","trimMultilineIndent","HTMLEMenuItemCollectionBase","HTMLEMenuItemRadioList","HTMLEMenuItemRadioListBase","itemName","itemType","HTMLEMenuItemCollection","HTMLEMenuBarElementBase","isActive","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","innerText","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","widgetTemplate","menuItemWidgets","MenuItemWidgetBase","toggleAttribute","menuWidgets","menuElement","role","MenuWidgetBase","insertItems","after","classList","HTMLButtonElement","hasPopup","HTMLMenuElement","targetElement","itemWidget","targetClosestItemWidget","Element","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","MenuModel","MenuItemModel","MenuViewBase","menuitem","MenuView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","submenuItems","_widgets","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","MutationObserver","_actionsObserverCallback","mutationsList","mutation","addedNodes","registerActionElement","removedNodes","unregisterActionElement","setup","registerWidget","unregisterWidget","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}