{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { WidgetFactoryConstructor };\r\n\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    readonly prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement;\r\n    get slots(): string[];\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, [WidgetFactory, HTMLElement][]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const [widget, element] = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element, target);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList) => {\r\n                    const element = Reflect.apply(target, thisArg, argumentsList);\r\n                    const targets = widget.slots.map(slot_i => {\r\n                        return widget.slot(element, slot_i);\r\n                    }).concat(element);\r\n                    targets.forEach(target_i => {\r\n                        slotsObserver.observe(target_i, {\r\n                            childList: true\r\n                        });\r\n                        const slotReferences = slotsMap.get(target_i);\r\n                        if (Array.isArray(slotReferences)) {\r\n                            slotReferences.push([widget, element]);\r\n                        }\r\n                        else {\r\n                            slotsMap.set(target_i, new Array([widget, element]));\r\n                        }\r\n                    });\r\n                    return element;\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error();\r\n    }\r\n\r\n    setup(): void {}\r\n\r\n    slot(root: HTMLElement): HTMLElement {\r\n        return root;\r\n    }\r\n\r\n    get slots(): string[] {\r\n        return [];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { widgets, WidgetFactoryConstructor } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { Widget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (attributeValue !== void 0) {\r\n                    if (typeof attributeValue == \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | ((Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: string, init?: WidgetInit<K>): HTMLElement\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        const element = <HTMLElement>widget.create(init?.properties);\r\n        if (init) {\r\n            const {attributes, dataset, slotted, listeners} = init;\r\n            if (attributes) {\r\n                Object.keys(attributes).forEach((attributeName) => {\r\n                    const attributeValue = attributes[attributeName];\r\n                    if (attributeValue !== void 0) {\r\n                        if (typeof attributeValue == \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted == \"function\" || Array.isArray(slotted) || slotted instanceof NodeList) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (typeof slotted == \"function\") {\r\n                        slot.append(...slotted(element));\r\n                    }\r\n                    else {\r\n                        slot.append(...Array.from(slotted));\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (typeof slotted == \"function\") {\r\n                            slot.append(...slotted(element));\r\n                        }\r\n                        else {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n    throw new Error(`Unknown widget ${name}.`);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== void 0) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { Fragment } from \"../../../../lib\";\r\nimport { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: \"true\"\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            attributes: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            attributes: {\r\n                                tabindex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabindex: -1\r\n                                    },\r\n                                    listeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[active]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                target.trigger();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n    }\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { NodeCollection } from \"../../../observers/NodeCollection\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        //this.items = new NodeCollection<HTMLEMenuItemElement>(this, this.#walkerNodeFilter.bind(this));\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { Widget, element } from \"../../elements/Element\";\r\nimport { WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n\r\n}\r\n\r\nvar separatorWidget = new (Widget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    trigger(item: HTMLElement): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new (Widget({\r\n    name: \"menuitem\"\r\n})(class MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                tabindex: -1,\r\n                type: \"button\",\r\n                role: \"menuitem\"\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(properties?: {\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== void 0) {\r\n            const {keyshortcut, checked, type, label, name, value} = properties;\r\n            if (keyshortcut !== void 0) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== void 0) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== void 0) {\r\n                this.setValue(item, value);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", hasChildMenu.toString());\r\n    }\r\n\r\n    #label(item: HTMLElement) {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement) {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement) {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null) {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement) {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string) {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement) {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType) {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = item.querySelector(\":scope > .label\");\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement) {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string) {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement) {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string) {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement) {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? false.toString());\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean) {\r\n        item.setAttribute(\"aria-checked\", value.toString());\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean) {\r\n        item.toggleAttribute(\"disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement) {\r\n        return item.hasAttribute(\"disabled\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean) {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement) {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    trigger(item: HTMLElement) {\r\n        const type = this.getType(item);\r\n        switch (type) {\r\n            case \"checkbox\": {\r\n                this.setChecked(item, !this.getChecked(item));\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                this.setChecked(item, true);\r\n                break;\r\n            }\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                this.toggle(item);\r\n                break;\r\n            }\r\n        }\r\n        item.dispatchEvent(new Event(\"trigger\", {\r\n            bubbles: true\r\n        }));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean) {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement) {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement) {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement) {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, Widget } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menubarWidget };\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menubarWidget = new (Widget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                tabindex: -1,\r\n                role: \"menubar\"\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        menubar.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (activeItem !== null && !menuItemWidget.getExpanded(activeItem)) {\r\n                        menuItemWidget.expand(activeItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(target);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menubar);\r\n        if (activeItem !== null && menuItemWidget.getExpanded(activeItem)) {\r\n            menuItemWidget.collapse(activeItem);\r\n        }\r\n        this.setExpanded(menubar, false);\r\n        menubar.focus({preventScroll: true});\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        contextual?: boolean;\r\n    }): HTMLElement;\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    getId(menu: HTMLElement): string;\r\n    setId(menu: HTMLElement, value: string): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar menuWidget = new (Widget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                tabindex: -1,\r\n                role: \"menu\"\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        contextual?: boolean;\r\n    }) {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        menu.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        if (properties !== void 0) {\r\n            const {id, contextual} = properties;\r\n            if (id !== void 0) {\r\n                this.setId(menu, id);\r\n            }\r\n            if (contextual !== void 0) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n        }\r\n        return menu;\r\n    };\r\n\r\n    positionContextual(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    getId(menu: HTMLElement): string {\r\n        return menu.id ?? \"\";\r\n    }\r\n\r\n    setId(menu: HTMLElement, value: string): void {\r\n        menu.id = value;\r\n    }\r\n\r\n    items(menu: HTMLElement) {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menu)\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.#isClosestMenu(menu, target);\r\n            if (isClosestMenu) {\r\n                menuItemWidget.trigger(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !menu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin && target instanceof HTMLElement) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                } catch (error) {};\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(menu, target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(menu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menu) :\r\n                    this.#firstItem(menu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menu) :\r\n                    this.#lastItem(menu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(menu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(menu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            menuItemWidget.trigger(activeItem);\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = menu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = menu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== menu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            menu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        menu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(menu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(menu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, 400)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(menu);\r\n                                    this.#collapseSubmenus(menu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const contextual = this.getContextual(menu);\r\n            if (contextual) {\r\n                try {\r\n                    menu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(menu, target);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(target);\r\n                    const name = menuItemWidget.getName(target);\r\n                    const value = menuItemWidget.getValue(target);\r\n                    if (type == \"radio\") {\r\n                        menu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { Widget, element } from \"../../../elements/Element\";\r\nimport { WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (Widget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            attributes: {\r\n                tabindex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            listeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                name: item.label,\r\n                draggable: \"true\"\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    children: [\r\n                        item.label\r\n                    ]\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    attributes: {\r\n                        //slot: \"toolbar\",\r\n                        tabindex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabindex: -1\r\n                                        },\r\n                                        listeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Display\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1\r\n                                },\r\n                                children: [\r\n                                    \"Delete\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        attributes: {\r\n                            tabindex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: [\r\n                                    activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                ],\r\n                                listeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                listeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.extract(row)\r\n                ]\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        attributes: {\r\n                            type: \"search\"\r\n                        },\r\n                        listeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    tabindex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                attributes: {\r\n                                    class: \"gridcell-label\"\r\n                                },\r\n                                children: [\r\n                                    column.label\r\n                                ],\r\n                                listeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                attributes: {\r\n                                    tabindex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        attributes: {\r\n                                            type: \"menubutton\",\r\n                                            tabindex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                attributes: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabindex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        attributes: {\r\n                                                            slot: \"menu\",\r\n                                                            tabindex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"button\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Resize Column\"\r\n                                                                ],\r\n                                                                listeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Sort\",\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            attributes: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabindex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Ascending\"\r\n                                                                                    ]\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    attributes: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabindex: -1,\r\n                                                                                    },\r\n                                                                                    children: [\r\n                                                                                        \"Descending\"\r\n                                                                                    ]\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            listeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            menu.querySelectorAll<HTMLEMenuItemElement>(\"e-menuitem[name^=sort]\")\r\n                                                                            .forEach(sortRadioItem_i => {\r\n                                                                                sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                            });\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                attributes: {\r\n                                                                    type: \"submenu\",\r\n                                                                    tabindex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    \"Filter\",\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        attributes: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabindex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                attributes: {\r\n                                                                                    tabindex: -1,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                children: [\r\n                                                                                    filter_i.name\r\n                                                                                ],\r\n                                                                                listeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    listeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier, menuWidget } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment, widget } from \"./src/elements/Element\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                children: [\r\n                    column.label\r\n                ]\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        attributes: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n    \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    /*registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;*/\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    //private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        //this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    /*public registerWidget(widget: Widget): void {\r\n        widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }\r\n    }*/\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","slotsMap","WeakMap","slotsObserver","MutationObserver","mutationsList","forEach","mutation","target","type","HTMLElement","slotReferences","slotRef_i","widget","element","slottedCallback","WidgetFactory","constructor","this","create","Proxy","apply","thisArg","argumentsList","Reflect","slots","map","slot_i","slot","concat","target_i","observe","childList","Array","isArray","push","set","Error","setup","root","widgets","Map","ModelChangeRecordBase","init","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","callback_i","addEventListener","callback","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","subtree","filter","record_i","includes","ModelChangeObserver","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","name","customElements","define","Widget","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","createElement","keys","attributeValue","toggleAttribute","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","slotted","NodeList","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","shadowRoot","attachShadow","mode","content","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","level","closestItem","matches","parentElement","closest","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","attributeChangedCallback","Event","bubbles","labelPart","querySelector","textContent","style","toggle","force","expanded","shiftKey","ctrlKey","slotName","part","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","blur","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","HTMLETreeElement","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","tabindex","dragstart","drop","contextmenu","keydown","rel","href","class","hidden","treeItemElement","draggable","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","join","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","close","body","positionContextual","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","assign","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","x","y","querySelectorAll","find","previousNode","nearestItem","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","activeIndex","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","itemName","itemType","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","role","menuItemWidget","hasIcon","hasArrow","keyshortcut","setKeyShortcut","setChecked","setType","setLabel","setName","setValue","hasChildMenu","childNode_i","classList","getMenu","getKeyShortcut","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","add","iconPart","arrowPart","after","getValue","getName","getChecked","setDisabled","getDisabled","setExpanded","getExpanded","menubar","setId","setContextual","getContextual","getId","menuitem_i","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","sortRadioItem_i","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","addedNodes","registerActionElement","removedNodes","unregisterActionElement","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}