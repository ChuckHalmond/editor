{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemCollection.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/MenuItemWidget.ts","webpack://main/./src/views/widgets/MenuWidget.ts","webpack://main/./src/views/widgets/MenuBarWidget.ts","webpack://main/./src/views/widgets/MenuItemGroupWidget.ts","webpack://main/./src/views/ListView.ts","webpack://main/./src/views/GridView.ts","webpack://main/./main.ts","webpack://main/./src/Editor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { Widget };\r\n\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface Widget {\r\n    create(properties?: object): HTMLElement;\r\n}\r\n\r\ninterface WidgetRegistry {\r\n    define(name: string, widget: Widget): void;\r\n    create<K extends keyof WidgetNameMap>(name: K, properties?: Parameters<WidgetNameMap[K][\"create\"]>[0]): ReturnType<WidgetNameMap[K][\"create\"]>;\r\n}\r\n\r\nclass WidgetRegistryBase implements WidgetRegistry {\r\n    #map: Map<string, Widget>;\r\n\r\n    constructor() {\r\n        this.#map = new Map();\r\n    }\r\n\r\n    define(name: string, widget: Widget): void {\r\n        this.#map.set(name, widget);\r\n    }\r\n\r\n    create<K extends keyof WidgetNameMap>(name: K, properties?: Parameters<WidgetNameMap[K][\"create\"]>[0]): ReturnType<WidgetNameMap[K][\"create\"]> {\r\n        const widget = this.#map.get(name);\r\n        if (widget !== void 0) {\r\n            return <ReturnType<WidgetNameMap[K][\"create\"]>>widget.create(properties);\r\n        }\r\n        else {\r\n            throw new Error(`Unknown widget ${name}`);\r\n        }\r\n    }\r\n}\r\n\r\nvar widgets: WidgetRegistry = new WidgetRegistryBase();","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    readonly prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? void 0;\r\n        this.newValue = init.newValue ?? void 0;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    readonly prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    readonly prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    readonly prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    readonly prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    readonly prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    readonly prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    readonly prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { Widget, widgets } from \"../views/widgets/Widget\";\r\nimport { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { CustomWidget };\r\nexport { widget };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = property.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends Widget>(widget: W) => W;\r\n}\r\n\r\nconst CustomWidget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends Widget>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.define(\r\n            name,\r\n            widget\r\n        );\r\n        return widget;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = propertyKey.toString();\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P, never>\r\n}[keyof T];\r\n\r\ntype ReadonlyKeys<T> = {\r\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\r\n}[keyof T];\r\n\r\ninterface HTMLElementInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportParts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\ninterface HTMLElementInitMap {\r\n    \"template\": HTMLTemplateInit;\r\n}\r\n\r\ninterface HTMLTemplateInit extends HTMLElementInit<HTMLTemplateElement> {\r\n    content?: (Node | string)[] | NodeList;\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementInitMap>(\r\n    tagName: K, init?: HTMLElementInitMap[K]): E;\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<E>): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit<HTMLElement>): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, properties, part, exportParts, attributes, dataset, children, eventListeners, style} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (options) {\r\n            const {is: isBuiltinElement} = options;\r\n            if (isBuiltinElement) {\r\n                element.setAttribute(\"is\", isBuiltinElement)\r\n            }\r\n        }\r\n        if (properties) {\r\n            const keys = Object.keys(properties);\r\n            keys.forEach((key_i) => {\r\n                const value = Reflect.get(properties, key_i, properties);\r\n                if (value !== void 0) {\r\n                    Object.assign(\r\n                        element, {\r\n                            [key_i]: value\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        if (part) {\r\n            const {part: elementPart} = element;\r\n            part.forEach((part) => {\r\n                elementPart.add(part);\r\n            });\r\n        }\r\n        if (exportParts) {\r\n            element.setAttribute(\"exportparts\", exportParts.join(\", \"));\r\n        }\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        switch (tagName) {\r\n            case \"template\":\r\n                const {content} = init as HTMLTemplateInit;\r\n                if (content) {\r\n                    (<HTMLTemplateElement>element).content.append(\r\n                        ...Array.from(content)\r\n                    );\r\n                }\r\n                break;\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    style?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: (Node | string)[] | NodeList | ReactiveChildElements,\r\n    eventListeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: string, init?: WidgetInit<K>): HTMLElement\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const element = <HTMLElement>widgets.create(name, init?.properties);\r\n    if (init) {\r\n        const {attributes, dataset, children, eventListeners, style} = init;\r\n        if (attributes) {\r\n            Object.keys(attributes).forEach((attributeName) => {\r\n                const attributeValue = attributes[attributeName];\r\n                if (typeof attributeValue == \"boolean\") {\r\n                    if (attributeValue) {\r\n                        element.setAttribute(camelToTrain(attributeName), \"\");\r\n                    }\r\n                }\r\n                else {\r\n                    element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n        if (style) {\r\n            const {style: elementStyle} = element;\r\n            Object.keys(style).forEach((property_i) => {\r\n                if (Array.isArray(style[property_i])) {\r\n                    elementStyle.setProperty(property_i, style[property_i][0], style[property_i][1]);\r\n                }\r\n                else {\r\n                    elementStyle.setProperty(property_i, <string>style[property_i]);\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = dataset[datasetEntry_i].toString();\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children == \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else {\r\n                element.append(...Array.from(children));\r\n            }\r\n        }\r\n        if (eventListeners) {\r\n            Object.entries(eventListeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return element;\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== void 0) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== void 0) {\r\n                react(element, <any>property_i, <any>void 0, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    readonly prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"style\", {\r\n                    properties: {\r\n                        textContent: /*css*/`\r\n                            :host {\r\n                                display: block;\r\n                            }\r\n                        `\r\n                    }\r\n                }),\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"div\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"arrow\"]\r\n                        }),\r\n                        element(\"slot\")\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"group\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this), true);\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                const {selected} = target;\r\n                if (selected) {\r\n                    target.blur();\r\n                }\r\n                (!selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    readonly prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        this.#model = model;\r\n        this.#render();            \r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        const shadow = this.renderShadow();\r\n        if (shadow) {\r\n            if (shadowRoot) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { HTMLEToolBarElement } from \"../..\";\r\nimport { HTMLEToolBarItemElement } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment, TextNode } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number})\r\n    constructor(init?: {items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number}) {\r\n        super();\r\n        const childItems = new ModelList(init?.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = init?.sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass TreeItemList implements TreeItem {\r\n    #items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    static of(...items: TreeItemModel[]): TreeItemList {\r\n        return new TreeItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        console.log(this.#items);\r\n        this.#items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.#items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    \r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject implements TreeItem {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    @ModelProperty(/*{type: Number}*/)\r\n    childCount: number;\r\n\r\n    @ModelProperty(/*{type: Boolean}*/)\r\n    visibility: boolean;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type} = init;\r\n        const childItems = new ModelList(init.items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.childCount = childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    readonly prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-tree\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-tree\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly model!: TreeModel;\r\n    #treeElement: WeakRef<HTMLETreeElement> | undefined;\r\n    #dragImagesElementsMap: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n    #treeItemElementsMap: WeakMap<TreeItemModel, WeakRef<HTMLETreeItemElement>>;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.#treeItemElementsMap = new WeakMap();\r\n        this.#dragImagesElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    getTreeElement(): HTMLETreeElement | null {\r\n        return this.#treeElement?.deref() ?? null;\r\n    }\r\n\r\n    getTreeItemElement(model: TreeItemModel): HTMLETreeItemElement | null {\r\n        return this.#treeItemElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getDragImageElement(model: TreeItemModel): Element | null {\r\n        return this.#dragImagesElementsMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    selectedItems(): TreeItemModel[] {\r\n        const tree = this.getTreeElement();\r\n        if (tree) {\r\n            const {model} = this;\r\n            const selectedElements = tree.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item)\r\n            ),\r\n            eventListeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#treeElement = new WeakRef(treeElement);\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/treeview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                properties: {\r\n                    className: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel): Element {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    label: item.label,\r\n                    type: item.type,\r\n                    draggable: true\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children:\r\n                    ((item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            properties: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item)\r\n                            )\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"label\"\r\n                            }\r\n                        })\r\n                    ]).concat((item.type == \"parent\") ? [\r\n                        element(\"span\", {\r\n                            properties: {\r\n                                className: \"badge\"\r\n                            }\r\n                        })\r\n                    ] : []).concat([\r\n                        element(\"e-toolbar\", {\r\n                            properties: {\r\n                                tabIndex: 0\r\n                            },\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        tabIndex: -1\r\n                                    },\r\n                                    eventListeners: {\r\n                                        trigger: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ])\r\n            }),\r\n            [\"label\", \"childCount\", \"visibility\"],\r\n            (treeitem, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        const label = treeitem.querySelector(\":scope > .label\");\r\n                        if (label) {\r\n                            label.textContent = newValue;\r\n                        }\r\n                        break;\r\n                    case \"childCount\":\r\n                        const badge = treeitem.querySelector(\":scope > .badge\");\r\n                        if (badge) {\r\n                            badge.textContent = `(${newValue})`;\r\n                        }\r\n                        break;\r\n                    case \"visibility\": {\r\n                        const toolbar = treeitem.querySelector<HTMLEToolBarElement>(\":scope > e-toolbar\");\r\n                        if (toolbar) {\r\n                            const visibilityItem = <HTMLEToolBarItemElement>toolbar.items.namedItem(\"visibility\");\r\n                            if (visibilityItem) {\r\n                                visibilityItem.title = newValue ? \"Hide\" : \"Show\";\r\n                                visibilityItem.checked = newValue;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n        this.#treeItemElementsMap.set(item, new WeakRef(treeItemElement));\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                properties: {\r\n                    className: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImagesElementsMap.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = currentTarget.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.getDragImageElement(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = target.dataset.uri!;\r\n                const targetItem = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    //TODO: handle items with same label (replace or cancel)\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItem;\r\n                    const targetList = targetType == \"parent\" ?\r\n                        targetItem.childItems :\r\n                        targetParentItem ?\r\n                        targetParentItem.childItems :\r\n                        model.childItems;\r\n                    TreeItemList.from(transferedItems).remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(target.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = transferedItems.map(\r\n                        item_i => this.getTreeItemElement(item_i)!\r\n                    );\r\n                    currentTarget.beginSelection();\r\n                    newElements.forEach(\r\n                        (element_i) => {\r\n                            element_i.selected = true;\r\n                        }\r\n                    );\r\n                    currentTarget.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLETreeElement && target instanceof HTMLETreeItemElement) {\r\n            const activeItem = model.getItemByUri(target.dataset.uri!)!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = TreeItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            document.body.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLETreeElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    TreeItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    readonly prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    readonly prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    readonly prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    active: boolean;\r\n    index: number;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLEActionElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    index!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {part: [\"icon\"]}),\r\n                        element(\"span\", {\r\n                            part: [\"label\"],\r\n                            children: [\r\n                                element(\"slot\")\r\n                            ]\r\n                        }),\r\n                        element(\"span\", {part: [\"arrow\"]})\r\n                    ]\r\n                }),\r\n                element(\"slot\", {\r\n                    properties: {\r\n                        name: \"menu\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    @QueryProperty({selector: \"e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type,\r\n                textContent: label\r\n            },\r\n            children: menu ? [menu] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            properties: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                properties: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[active]\"\r\n        );\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                target.trigger();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {contextual} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            properties: {\r\n                name: name,\r\n                tabIndex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    readonly prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    readonly prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    readonly prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    readonly prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    readonly prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, trimMultilineIndent, Stylesheet, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    readonly prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n    }\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"slot\")\r\n            ]\r\n        });\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return <HTMLEGridBodyElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridBodyElement\r\n        ) ?? null;\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return <HTMLEGridHeadElement>Array.from(this.childNodes).find(\r\n            node_i => node_i instanceof HTMLEGridHeadElement\r\n        ) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        /*const selectedCells = <HTMLEGridCellElement[]>[];\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cellsWalker.root;\r\n        let cell = <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n        while (cell !== null) {\r\n            if (cell.selected) {\r\n                selectedCells.push(cell);\r\n            }\r\n            cell = <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n        }\r\n        return selectedCells;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        /*const selectedRows = <HTMLEGridRowElement[]>[];\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = rowsWalker.root;\r\n        let row = <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n        while (row !== null) {\r\n            if (row.selected) {\r\n                selectedRows.push(row);\r\n            }\r\n            row = <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n        }\r\n        return selectedRows;*/\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        cell.active = true;\r\n        cell.tabIndex = 0;\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            this.#setActiveRow(closestRow);\r\n        }\r\n        this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        row.active = true;\r\n        row.tabIndex = 0;\r\n        this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    const selectedCells = this.selectedCells();\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    const selectedRows = this.selectedRows();\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { NodeCollection } from \"../../../observers/NodeCollection\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemCollection } from \"./MenuItemCollection\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEMenuItemElement>;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        //this.items = new NodeCollection<HTMLEMenuItemElement>(this, this.#walkerNodeFilter.bind(this));\r\n        this.items = this.getElementsByTagName(\"e-menuitem\");\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {activeItem} = this;\r\n            if (activeItem?.expanded) {\r\n                activeItem.collapse();\r\n            }\r\n            this.#setActiveItem(null);\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"icon\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    readonly prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"label\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    readonly prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    readonly prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    readonly prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    element(\"label\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    element(\"output\", {\r\n                        part: [\"value\"]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"options\"],\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        part: [\"separator\"]\r\n                    }),\r\n                    element(\"span\", {\r\n                        part: [\"description\"]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\", {\r\n            content: [\r\n                element(\"span\", {\r\n                    part: [\"content\"],\r\n                    children: [\r\n                        element(\"span\", {\r\n                            part: [\"icon\"]\r\n                        }),\r\n                        element(\"span\", {\r\n                            part: [\"label\"]\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"select\"\r\n                            }\r\n                        }),\r\n                        element(\"slot\", {\r\n                            properties: {\r\n                                name: \"menubutton\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    readonly prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : void 0,\r\n            eventListeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    readonly prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLEToolBarElement } from \"./ToolBar\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarItemRadioList };\r\nexport { HTMLEToolBarItemCollection };\r\n\r\ninterface HTMLEToolBarItemCollectionConstructor {\r\n    readonly prototype: HTMLEToolBarItemCollection;\r\n    new(root: HTMLEToolBarElement): HTMLEToolBarItemCollection;\r\n}\r\n\r\ninterface HTMLEToolBarItemCollection {\r\n    length: number;\r\n    item(index: number): HTMLEToolBarItemElement | null;\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioListConstructor {\r\n    readonly prototype: HTMLEToolBarItemRadioList;\r\n    new(root: HTMLEToolBarElement, name: string): HTMLEToolBarItemRadioList;\r\n}\r\n\r\ninterface HTMLEToolBarItemRadioList {\r\n    value: string;\r\n    values(): IterableIterator<HTMLEToolBarItemElement>;\r\n}\r\n\r\nclass HTMLEToolBarItemCollectionBase implements HTMLEToolBarItemCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLEToolBarElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEToolBarItemElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEToolBarItemElement | HTMLEToolBarItemRadioList | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n        }\r\n        if (currentNode && currentNode.type == \"radio\") {\r\n            return new HTMLEToolBarItemRadioList(<HTMLEToolBarElement>walker.root, name);\r\n        }\r\n        return <HTMLEToolBarItemElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEToolBarItemElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    static HTMLEToolBarItemRadioListBase? = class HTMLEToolBarItemRadioListBase implements HTMLEToolBarItemRadioList {\r\n        #walker: TreeWalker;\r\n        #name: string;\r\n\r\n        get value(): string {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                if (currentNode.name == name && currentNode.type == \"radio\" && currentNode.checked) {\r\n                    return currentNode.value;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        constructor(root: HTMLEToolBarElement, name: string) {\r\n            this.#walker = document.createTreeWalker(\r\n                root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n            );\r\n            this.#name = name;\r\n        }\r\n        \r\n        #nodeFilter(node: Node): number {\r\n            if (node instanceof HTMLEToolBarItemElement) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            if (node instanceof HTMLEToolBarItemGroupElement) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n\r\n        *values(): IterableIterator<HTMLEToolBarItemElement> {\r\n            const name = this.#name;\r\n            const walker = this.#walker;\r\n            walker.currentNode = walker.root;\r\n            let currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            while (currentNode !== null) {\r\n                const {name: itemName, type: itemType} = currentNode;\r\n                if (itemName == name && itemType == \"radio\") {\r\n                    yield currentNode;\r\n                }\r\n                currentNode = <HTMLEToolBarItemElement | null>walker.nextNode();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemCollection: HTMLEToolBarItemCollectionConstructor =  HTMLEToolBarItemCollectionBase;\r\nvar HTMLEToolBarItemRadioList: HTMLEToolBarItemRadioListConstructor = HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase!;\r\ndelete HTMLEToolBarItemCollectionBase.HTMLEToolBarItemRadioListBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemCollection, HTMLEToolBarItemRadioList } from \"./ToolBarItemCollection\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    readonly prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLEToolBarItemCollection;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.items.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.items = new HTMLEToolBarItemCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = Array.from(items.values()).indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {items} = this;\r\n        const activeItem = Array.from(items.values()).find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.menu?.items.item(0)?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                Array.from(new HTMLEToolBarItemRadioList(this, name).values()).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    readonly prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    readonly prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    readonly prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    element(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            element(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    element(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    readonly prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    readonly prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    readonly prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            properties: {\r\n                innerText: /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            }\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    element(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            element(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { CustomWidget, element } from \"../../elements/Element\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": typeof menuItemWidget\r\n    }\r\n}\r\n\r\nvar iconPartTemplate = element(\"span\", {\r\n    properties: {\r\n        className: \"icon\"\r\n    }\r\n});\r\n\r\nvar arrowPartTemplate = element(\"span\", {\r\n    properties: {\r\n        className: \"arrow\"\r\n    }\r\n});\r\n\r\nvar menuItemWidget = CustomWidget({\r\n    name: \"menuitem\"\r\n})(Object.freeze({\r\n    \r\n    template: element(\"button\", {\r\n        properties: {\r\n            className: \"menuitem menuitem-button\",\r\n            tabIndex: -1,\r\n        },\r\n        attributes: {\r\n            role: \"menuitem\"\r\n        },\r\n        children: [\r\n            element(\"span\", {\r\n                properties: {\r\n                    className: \"content\"\r\n                },\r\n                children: [\r\n                    iconPartTemplate.cloneNode(true),\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    }),\r\n\r\n    observer: new MutationObserver(\r\n        (mutationsList: MutationRecord[]) => {\r\n            mutationsList.forEach((mutation: MutationRecord) => {\r\n                const {target, type} = mutation;\r\n                if (target instanceof HTMLElement) {\r\n                    switch (type) {\r\n                        case \"attributes\": {\r\n                            const {attributeName, oldValue} = mutation;\r\n                            const newValue = target.getAttribute(attributeName!);\r\n                            menuItemWidget.attributeChangedCallback(target, attributeName!, oldValue, newValue);\r\n                            break;\r\n                        }\r\n                        case \"childList\": {\r\n                            const {addedNodes, removedNodes} = mutation;\r\n                            if (addedNodes.length > 0) {\r\n                                menuItemWidget.childNodesAddedCallback(target, addedNodes);\r\n                            }\r\n                            if (removedNodes.length > 0) {\r\n                                menuItemWidget.childNodesRemovedCallback(target, addedNodes);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n    ),\r\n\r\n    create(init?: {\r\n        checked?: boolean;\r\n        type?: MenuItemType;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n    }): HTMLButtonElement {\r\n        const item = <typeof this.template>this.template.cloneNode(true);\r\n        this.observer.observe(item, {\r\n            attributes: true,\r\n            attributeOldValue: true,\r\n            attributeFilter: [\"aria-checked\"],\r\n            childList: true\r\n        });\r\n        item.addEventListener(\"keydown\", this.handleKeyDownEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {keyshortcut, checked, type, label, name} = init;\r\n            if (keyshortcut !== void 0) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== void 0) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== void 0) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== void 0) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== void 0) {\r\n                this.setName(item, name);\r\n            }\r\n        }\r\n        return item;\r\n    },\r\n\r\n    handleKeyDownEvent(event: KeyboardEvent) {\r\n        event.preventDefault();\r\n    },\r\n\r\n    attributeChangedCallback(item: HTMLElement, name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"aria-checked\": {\r\n                item.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    },\r\n\r\n    childNodesAddedCallback(item: HTMLElement, childNodes: NodeList): void {\r\n        childNodes.forEach(node_i => {\r\n            if (node_i instanceof HTMLElement && node_i.classList.contains(\"menu\")) {\r\n                this.setHasPopup(item, true);\r\n            }\r\n        });\r\n    },\r\n\r\n    childNodesRemovedCallback(item: HTMLElement, childNodes: NodeList): void {\r\n        childNodes.forEach(node_i => {\r\n            if (node_i instanceof HTMLElement && node_i.classList.contains(\"menu\")) {\r\n                this.setHasPopup(item, false);\r\n            }\r\n        });\r\n    },\r\n\r\n    label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    },\r\n\r\n    menu(item: HTMLElement) {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\")!;\r\n    },\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    },\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    },\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.label(item).textContent ?? \"\";\r\n    },\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.label(item).textContent = value;\r\n    },\r\n\r\n    getType(item: HTMLElement): MenuItemType {\r\n        const typeClass = Array.from(item.classList).find(\r\n            class_i => class_i.startsWith(\"menuitem-\")\r\n        )!;\r\n        return <MenuItemType>typeClass.substring(typeClass.indexOf(\"-\") + 1);\r\n    },\r\n\r\n    setType(item: HTMLElement, value: MenuItemType) {\r\n        const type = this.getType(item);\r\n        item.classList.replace(`menuitem-${type}`, `menuitem-${value}`);\r\n        switch (value) {\r\n            case \"checkbox\": {\r\n                item.setAttribute(\"aria-role\", \"menuitemcheckbox\");\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                item.setAttribute(\"aria-role\", \"menuitemradio\");\r\n                break;\r\n            }\r\n            default: {\r\n                item.setAttribute(\"aria-role\", \"menuitem\");\r\n                break;\r\n            }\r\n        }\r\n        switch (value) {\r\n            case \"menu\": {\r\n                const iconPart = item.querySelector(\".icon\");\r\n                if (iconPart) {\r\n                    iconPart.remove();\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const iconPart = item.querySelector(\".icon\");\r\n                if (!iconPart) {\r\n                    const contentPart = item.querySelector(\".content\");\r\n                    if (contentPart) {\r\n                        contentPart.prepend(iconPartTemplate.cloneNode(true));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        switch (value) {\r\n            case \"submenu\": {\r\n                const arrowPart = item.querySelector(\".arrow\");\r\n                if (!arrowPart) {\r\n                    const contentPart = item.querySelector(\".content\");\r\n                    if (contentPart) {\r\n                        contentPart.append(arrowPartTemplate.cloneNode(true));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                const arrowPart = item.querySelector(\".arrow\");\r\n                if (arrowPart) {\r\n                    arrowPart.remove();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    },\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-active\");\r\n    },\r\n\r\n    setActive(item: HTMLElement, value: boolean) {\r\n        item.toggleAttribute(\"aria-active\", value);\r\n    },\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    },\r\n\r\n    setName(item: HTMLElement, value: string) {\r\n        item.setAttribute(\"name\", value);\r\n    },\r\n\r\n    getHasPopup(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-haspopup\");\r\n    },\r\n\r\n    setHasPopup(item: HTMLElement, value: boolean) {\r\n        value ?\r\n            item.setAttribute(\"aria-haspopup\", \"menu\") :\r\n            item.removeAttribute(\"aria-haspopup\");\r\n    },\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-checked\", value);\r\n    },\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-checked\");\r\n    },\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    },\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    },\r\n\r\n    trigger(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        switch (type) {\r\n            case \"checkbox\": {\r\n                this.setChecked(item, !this.getChecked(item));\r\n                break;\r\n            }\r\n            case \"radio\": {\r\n                this.setChecked(item, true);\r\n                break;\r\n            }\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                this.toggle(item);\r\n                break;\r\n            }\r\n        }\r\n        item.dispatchEvent(new Event(\"trigger\", {\r\n            bubbles: true\r\n        }));\r\n    },\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.positionMenu(item);\r\n        }\r\n    },\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.positionMenu(item);\r\n        }\r\n    },\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    },\r\n\r\n    positionMenu(item: HTMLElement): void {\r\n        const menu = this.menu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\nvar toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}> = new WeakMap();\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": typeof menuWidget\r\n    }\r\n}\r\n\r\nvar menuWidget = CustomWidget({\r\n    name: \"menu\"\r\n})(Object.freeze({\r\n    template: element(\"menu\", {\r\n        properties: {\r\n            className: \"menu\",\r\n            tabIndex: -1\r\n        },\r\n        attributes: {\r\n            role: \"menu\"\r\n        }\r\n    }),\r\n\r\n    walker: document.createTreeWalker(\r\n        document, NodeFilter.SHOW_ELEMENT, (node: Node) => {\r\n            if (node instanceof Element) {\r\n                const {classList} = node;\r\n                if (classList.contains(\"menuitem\")) {\r\n                    return NodeFilter.FILTER_ACCEPT;\r\n                }\r\n                else if (classList.contains(\"menuitemgroup\")) {\r\n                    return NodeFilter.FILTER_SKIP;\r\n                }\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n    ),\r\n    \r\n    create(init?: {\r\n        name?: string;\r\n    }): HTMLMenuElement {\r\n        const menu = <HTMLMenuElement>this.template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusin\", this.handleFocusInEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.handleKeyDownEvent.bind(this));\r\n        menu.addEventListener(\"trigger\", this.handleTriggerEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {name} = init;\r\n            if (name !== void 0) {\r\n                this.setName(menu, name);\r\n            }\r\n        }\r\n        return menu;\r\n    },\r\n\r\n    walkerNodeFilter(node: Node): number {\r\n        if (node instanceof Element) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\")) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    },\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        return menu.hasAttribute(\"data-contextual\");\r\n    },\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        menu.toggleAttribute(\"data-contextual\", value);\r\n    },\r\n\r\n    getName(menu: HTMLElement): string {\r\n        return menu.getAttribute(\"data-name\") ?? \"\";\r\n    },\r\n\r\n    setName(menu: HTMLElement, value: string): void {\r\n        menu.setAttribute(\"data-name\", value);\r\n    },\r\n\r\n    collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    },\r\n\r\n    isClosestMenu(menu: HTMLElement, target: Element): boolean {\r\n        return target.closest(\":is(.menu)\") == menu;\r\n    },\r\n\r\n    nearestItem(menu: HTMLElement, target: Element): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    },\r\n\r\n    firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    },\r\n\r\n    lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    },\r\n\r\n    previousItem(item: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    },\r\n\r\n    nextItem(item: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    },\r\n\r\n    firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.menu(item);\r\n        if (menu) {\r\n            const {walker} = this;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    },\r\n\r\n    getActiveItem(menu: HTMLMenuElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-active]\"\r\n        );\r\n    },\r\n    \r\n    setActiveItem(menu: HTMLMenuElement, item: HTMLElement | null): void {\r\n        const activeItem = this.getActiveItem(menu);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            menuItemWidget.setActive(activeItem, false);\r\n        }\r\n        if (item !== null) {\r\n            menuItemWidget.setActive(item, true);\r\n        }\r\n    },\r\n\r\n    handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.isClosestMenu(menu, target);\r\n            if (isClosestMenu) {\r\n                menuItemWidget.trigger(target);\r\n            }\r\n        }\r\n    },\r\n\r\n    handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.nearestItem(menu, target);\r\n            if (nearestItem !== null) {\r\n                this.setActiveItem(menu, nearestItem);\r\n            }\r\n        }\r\n    },\r\n\r\n    handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        const lostFocusWithin = !menu.contains(<HTMLElement>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const activeItem = this.getActiveItem(menu);\r\n            if (activeItem !== null) {\r\n                menuItemWidget.collapse(activeItem);\r\n            }\r\n            this.setActiveItem(menu, null);\r\n        }\r\n    },\r\n\r\n    async setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(void 0);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    },\r\n\r\n    clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    },\r\n\r\n    handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        const activeItem = this.getActiveItem(menu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.previousItem(activeItem) ?? this.lastItem(menu) :\r\n                    this.firstItem(menu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.nextItem(activeItem) ?? this.firstItem(menu) :\r\n                    this.firstItem(menu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem(menu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.lastItem(menu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            menuItemWidget.trigger(activeItem);\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == menu;\r\n                    if (!isClosestTargetMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    },\r\n\r\n    handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.nearestItem(menu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.getActiveItem(menu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.clearItemTimeout(activeItem);\r\n                        this.setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => void 0);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = menu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = menu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== menu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            menu.focus({preventScroll: true});\r\n                            this.setActiveItem(menu, null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        menu.focus({preventScroll: true});\r\n                        this.setActiveItem(menu, null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.nearestItem(menu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == menu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.getActiveItem(menu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.clearItemTimeout(activeItem);\r\n                            this.setItemTimeout(activeItem, 400)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                    }\r\n                    this.setActiveItem(menu, nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.clearItemTimeout(nearestItem);\r\n                            this.setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const activeItem = this.getActiveItem(menu);\r\n                                    this.collapseSubmenus(menu);\r\n                                    if (activeItem) {\r\n                                        this.clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.menu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => void 0);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.menu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    handleTriggerEvent(event: Event): void {\r\n        const {target, currentTarget} = event;\r\n        const menu = <HTMLMenuElement>currentTarget;\r\n        const contextual = this.getContextual(menu);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.isClosestMenu(menu, target);\r\n            /*if (isClosestMenu) {\r\n                const {type, name, value} = target;\r\n                if (type == \"radio\") {\r\n                    this.querySelectorAll<HTMLEMenuItemElement>(\r\n                        `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                    )\r\n                    .forEach((radio_i) => {\r\n                        radio_i.checked = radio_i.value == value;\r\n                    });\r\n                }\r\n            }\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }*/\r\n        }\r\n    }\r\n}));","import { CustomWidget, element } from \"../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": typeof menubarWidget\r\n    }\r\n}\r\n\r\nvar menubarWidget = CustomWidget({\r\n    name: \"menubar\"\r\n})(Object.freeze({\r\n    template: element(\"menu\", {\r\n        properties: {\r\n            className: \"menubar\",\r\n            tabIndex: -1\r\n        },\r\n        attributes: {\r\n            role: \"menubar\"\r\n        }\r\n    }),\r\n\r\n    walker: document.createTreeWalker(\r\n        document, NodeFilter.SHOW_ELEMENT, (node: Node) => {\r\n            if (node instanceof Element) {\r\n                const {classList} = node;\r\n                if (classList.contains(\"menuitem\")) {\r\n                    return NodeFilter.FILTER_ACCEPT;\r\n                }\r\n                else if (classList.contains(\"menuitemgroup\")) {\r\n                    return NodeFilter.FILTER_SKIP;\r\n                }\r\n            }\r\n            return NodeFilter.FILTER_REJECT;\r\n        }\r\n    ),\r\n\r\n    create() {\r\n        const menubar = <typeof this.template>this.template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.handleKeyDownEvent.bind(this));\r\n        menubar.addEventListener(\"trigger\", this.handleTriggerEvent.bind(this));\r\n        return menubar;\r\n    },\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    },\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    },\r\n\r\n    getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-active]\"\r\n        );\r\n    },\r\n\r\n    firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    },\r\n\r\n    lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    },\r\n\r\n    previousItem(item: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    },\r\n\r\n    nextItem(item: HTMLElement): HTMLElement | null {\r\n        const {walker} = this;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    },\r\n\r\n    firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.menu(item);\r\n        if (menu) {\r\n            const {walker} = this;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    },\r\n\r\n    setActiveItem(menubar: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            menuItemWidget.collapse(activeItem);\r\n            menuItemWidget.setActive(activeItem, false);\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                menuItemWidget.expand(item);\r\n            }\r\n            menuItemWidget.setActive(item, true);\r\n        }\r\n    },\r\n\r\n    isClosestMenu(menubar: HTMLElement, target: Element): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    },\r\n\r\n    nearestItem(menubar: HTMLElement, target: Element): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    },\r\n\r\n    handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.nearestItem(menubar, target);\r\n            this.setActiveItem(menubar, nearestItem);\r\n        }\r\n    },\r\n\r\n    handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const activeItem = this.getActiveItem(menubar);\r\n            if (activeItem && this.getExpanded(activeItem)) {\r\n                menuItemWidget.collapse(activeItem);\r\n            }\r\n            this.setActiveItem(menubar, null);\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    },\r\n\r\n    handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.menu(target);\r\n                if (menu) {\r\n                    menuItemWidget.expand(target);\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const isClosestMenu = this.isClosestMenu(menubar, target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (activeItem !== null && !menuItemWidget.getExpanded(activeItem)) {\r\n                        menuItemWidget.expand(activeItem);\r\n                    }\r\n                    const menu = menuItemWidget.menu(target);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.previousItem(activeItem) ?? this.lastItem(menubar) :\r\n                    this.firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.nextItem(activeItem) ?? this.firstItem(menubar) : \r\n                    this.lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    },\r\n\r\n    handleTriggerEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const activeItem = this.getActiveItem(menubar);\r\n        if (activeItem !== null && menuItemWidget.getExpanded(activeItem)) {\r\n            menuItemWidget.collapse(activeItem);\r\n        }\r\n        this.setExpanded(menubar, false);\r\n        menubar.focus({preventScroll: true});\r\n    }\r\n}));","import { CustomWidget, element } from \"../../elements/Element\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": typeof menuItemGroupWidget\r\n    }\r\n}\r\n\r\nvar menuItemGroupWidget = CustomWidget({\r\n    name: \"menuitemgroup\"\r\n})(Object.freeze({\r\n    \r\n    template: element(\"div\", {\r\n        properties: {\r\n            className: \"menuitemgroup\"\r\n        },\r\n        attributes: {\r\n            role: \"group\"\r\n        }\r\n    }),\r\n\r\n    observer: new MutationObserver(\r\n        (mutationsList: MutationRecord[]) => {\r\n            mutationsList.forEach((mutation: MutationRecord) => {\r\n                const {target, type} = mutation;\r\n                if (target instanceof HTMLElement) {\r\n                    switch (type) {\r\n                        case \"childList\": {\r\n                            const {addedNodes, removedNodes} = mutation;\r\n                            if (addedNodes.length > 0) {\r\n                                menuItemGroupWidget.childNodesAddedCallback(target, addedNodes);\r\n                            }\r\n                            if (removedNodes.length > 0) {\r\n                                menuItemGroupWidget.childNodesRemovedCallback(target, addedNodes);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n    ),\r\n\r\n    create(init?: {\r\n        name?: string;\r\n    }): HTMLDivElement {\r\n        return <typeof this.template>this.template.cloneNode(true);\r\n    },\r\n\r\n    childNodesAddedCallback(item: HTMLElement, childNodes: NodeList): void {\r\n        childNodes.forEach(node_i => {\r\n            if (node_i instanceof HTMLElement && node_i.classList.contains(\"menuitem\")) {\r\n                //this.setHasPopup(item, true);\r\n            }\r\n        });\r\n    },\r\n\r\n    childNodesRemovedCallback(item: HTMLElement, childNodes: NodeList): void {\r\n        childNodes.forEach(node_i => {\r\n            if (node_i instanceof HTMLElement && node_i.classList.contains(\"menuitem\")) {\r\n                //this.setHasPopup(item, false);\r\n            }\r\n        });\r\n    }\r\n}));","import { HTMLEListElement } from \"../elements/containers/lists/List\";\r\nimport { HTMLEListItemElement } from \"../elements/containers/lists/ListItem\";\r\nimport { EMenu } from \"../elements/containers/menus/Menu\";\r\nimport { EMenuButton } from \"../elements/containers/menus/MenuButton\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"../elements/containers/menus/MenuItem\";\r\nimport { EMenuItemGroup } from \"../elements/containers/menus/MenuItemGroup\";\r\nimport { EToolBarItem } from \"../elements/containers/toolbars/ToolBarItem\";\r\nimport { element, reactiveChildElements, reactiveElement, CustomElement, Fragment } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { ListModel };\r\nexport { ListItemModel };\r\nexport { ListView };\r\n\r\nclass ListModel extends ModelObject {\r\n    readonly items: ModelList<ListItemModel>;\r\n    sortFunction: ((item_a: ListItemModel, item_b: ListItemModel) => number) | null;\r\n    \r\n    constructor()\r\n    constructor(init: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number})\r\n    constructor(init?: {items: ListItemModel[], sortFunction?: (item_a: ListItemModel, item_b: ListItemModel) => number}) {\r\n        super();\r\n        const sortFunction = init?.sortFunction ?? function(item_a: ListItemModel, item_b: ListItemModel) {\r\n            return item_a.label.localeCompare(item_b.label);\r\n        };\r\n        const items = new ModelList(init?.items ?? []);\r\n        items.setParent(this);\r\n        this.sortFunction = sortFunction;\r\n        this.items = items;\r\n    }\r\n\r\n    getItemByIndex(index: number): ListItemModel | null {\r\n        return this.items.get(index);\r\n    }\r\n}\r\n\r\ninterface TreeItem {\r\n    show(): void;\r\n    hide(): void;\r\n    display(): void;\r\n    remove(): void;\r\n}\r\n\r\nclass ListItemList implements TreeItem {\r\n    #items: ListItemModel[];\r\n\r\n    constructor(items: ListItemModel[]) {\r\n        this.#items = items;\r\n    }\r\n\r\n    static from(items: ListItemModel[]): ListItemList {\r\n        return new ListItemList(items);\r\n    }\r\n\r\n    show(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.show();\r\n        });\r\n    }\r\n\r\n    hide(): void {\r\n        const items = this.#items;\r\n        items.forEach(item_i => {\r\n            item_i.hide();\r\n        });\r\n    }\r\n\r\n    display(): void {\r\n        const items = this.#items;\r\n        const result = items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n\r\n    remove(): void {\r\n        const items = this.#items;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof ListModel) {\r\n                const {items} = parentNode;\r\n                const group = map.get(items);\r\n                if (group) group.push(item_i);\r\n                else map.set(items, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, ListItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItemModel extends ModelObject implements TreeItem {\r\n    readonly label: string;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n    \r\n    constructor(init: {label: string}) {\r\n        super();\r\n        const {label} = init;\r\n        this.label = label;\r\n        this.visibility = true;\r\n    }\r\n\r\n    get index(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            return parentNode.items.index(this);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof ListModel) {\r\n            const {items} = parentNode;\r\n            if (items) {\r\n                items.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ListViewConstructor {\r\n    readonly prototype: ListView;\r\n    new(): ListView;\r\n    new(model: ListModel): ListView;\r\n}\r\n\r\ninterface ListView extends View {\r\n    model: ListModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-list\": ListView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-list\"\r\n})\r\nclass ListViewBase extends View implements ListView {\r\n    readonly model!: ListModel;\r\n    #listElementMap: WeakMap<ListModel, WeakRef<HTMLEListElement>>;\r\n    #listItemElementsMap: WeakMap<ListItemModel, WeakRef<HTMLEListItemElement>>;\r\n\r\n    constructor()\r\n    constructor(model: ListModel)\r\n    constructor(model?: ListModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#listElementMap = new WeakMap();\r\n        this.#listItemElementsMap = new WeakMap();\r\n        this.setModel(model ?? new ListModel());\r\n    }\r\n\r\n    getListElement(): HTMLEListElement | null {\r\n        const {model} = this;\r\n        return this.#listElementMap.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    getListItemElement(model: ListItemModel): HTMLEListItemElement | null {\r\n        return this.#listItemElementsMap.get(model)?.deref()  ?? null;\r\n    }\r\n\r\n    selectedItems(): ListItemModel[] {\r\n        const list = this.getListElement();\r\n        if (list) {\r\n            const {model} = this;\r\n            const selectedElements = list.selectedItems();\r\n            return selectedElements.map(\r\n                item_i => <ListItemModel>model.getItemByIndex(\r\n                    item_i.posinset\r\n                )\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        return Fragment(\r\n            element(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const listElement = element(\"e-list\", {\r\n            properties: {\r\n                tabIndex: 0\r\n            },\r\n            children: [\r\n                element(\"e-listitemgroup\", {\r\n                    children: reactiveChildElements(\r\n                        model.items, item => this.#renderListItem(item)\r\n                    )\r\n                })\r\n            ],\r\n            eventListeners: {\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this)\r\n            }\r\n        });\r\n        this.#listElementMap.set(model, new WeakRef(listElement));\r\n        return listElement;\r\n    }\r\n\r\n    #renderListItem(item: ListItemModel): Element {\r\n        const listItemElement = element(\"e-listitem\", {\r\n            properties: {\r\n                tabIndex: -1,\r\n                name: item.label,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                index: item.index\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    properties: {\r\n                        textContent: item.label\r\n                    }\r\n                }),\r\n                element(\"e-toolbar\", {\r\n                    properties: {\r\n                        //slot: \"toolbar\",\r\n                        tabIndex: 0\r\n                    },\r\n                    children: [\r\n                        element(\"e-toolbaritemgroup\", {\r\n                            children: [\r\n                                EToolBarItem.menubutton({\r\n                                    name: \"settings\",\r\n                                    label: \"Actions\",\r\n                                    menubutton: new EMenuButton({\r\n                                        menu: reactiveElement(\r\n                                            item,\r\n                                            new EMenu({\r\n                                                children: [\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"display\",\r\n                                                                label: \"Display\",\r\n                                                                trigger: () => {\r\n                                                                    item.display();\r\n                                                                }\r\n                                                            }),\r\n                                                            EMenuItem.button({\r\n                                                                name: \"delete\",\r\n                                                                label: \"Delete\",\r\n                                                                trigger: () => {\r\n                                                                    item.remove();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    }),\r\n                                                    new EMenuItemGroup({\r\n                                                        items: [\r\n                                                            EMenuItem.button({\r\n                                                                name: \"visibility\",\r\n                                                                label: \"Visibility\",\r\n                                                                trigger: () => {\r\n                                                                    item.visibility ?\r\n                                                                    item.hide() :\r\n                                                                    item.show();\r\n                                                                }\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            }),\r\n                                            [\"visibility\"],\r\n                                            (menu, property, oldValue, newValue) => {\r\n                                                //const {items} = menu;\r\n                                                switch (property) {\r\n                                                    case \"visibility\": {\r\n                                                        /*const item = <HTMLEMenuItemElement>items.namedItem(\"visibility\");\r\n                                                        item.textContent = newValue ? \"Hide\" : \"Show\";\r\n                                                        item.title = newValue ? \"Hide\" : \"Show\";*/\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    })\r\n                                }),\r\n                                reactiveElement(\r\n                                    item,\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            name: \"visibility\",\r\n                                            type: \"checkbox\",\r\n                                            tabIndex: -1\r\n                                        },\r\n                                        eventListeners: {\r\n                                            trigger: () => {\r\n                                                item.visibility ?\r\n                                                    item.hide() :\r\n                                                    item.show();\r\n                                            }\r\n                                        }\r\n                                    }),\r\n                                    [\"visibility\"],\r\n                                    (toolbaritem, property, oldValue, newValue) => {\r\n                                        toolbaritem.title = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbaritem.checked = newValue;\r\n                                    }\r\n                                )\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n        this.#listItemElementsMap.set(item, new WeakRef(listItemElement));\r\n        return listItemElement;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const {model} = this;\r\n        if (currentTarget instanceof HTMLEListElement && target instanceof HTMLEListItemElement) {\r\n            const activeItem = model.getItemByIndex(\r\n                parseInt(target.dataset.index!)\r\n            )!;\r\n            const menu = element(\"e-menu\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    contextual: true\r\n                },\r\n                children: [\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Display\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).display();\r\n                                    }\r\n                                }\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    textContent: \"Delete\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        ).remove();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitemgroup\", {\r\n                        properties: {\r\n                            tabIndex: -1\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                    type: \"checkbox\",\r\n                                    textContent: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                                },\r\n                                eventListeners: {\r\n                                    trigger: () => {\r\n                                        const selectedItems = ListItemList.from(\r\n                                            this.selectedItems()\r\n                                        );\r\n                                        activeItem.visibility ?\r\n                                            selectedItems.hide() :\r\n                                            selectedItems.show();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ],\r\n                eventListeners: {\r\n                    close: () => {\r\n                        target.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            target.append(menu);\r\n            menu.positionContextual(clientX, clientY);\r\n            menu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        if (currentTarget instanceof HTMLEListElement) {\r\n            switch (key) {\r\n                case \"Delete\": {\r\n                    ListItemList.from(\r\n                        this.selectedItems()\r\n                    ).remove();\r\n                    event.preventDefault();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ListView: ListViewConstructor = ListViewBase;","import { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { element, reactiveChildElements, CustomElement, Fragment, AttributeProperty, trimMultilineIndent, reactiveElement } from \"../elements/Element\";\r\nimport { HTMLEWidthSashElement } from \"../elements/utils/WidthSash\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\nimport { HTMLEMenuItemRadioList } from \"../elements/containers/menus/MenuItemCollection\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const rows = new ModelList(init?.rows ?? []);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(init?.columns ?? []);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i == column ? sortOrder : void 0;\r\n        });\r\n        this.rows.sort(\r\n            (row_1, row_2) => {\r\n                const cell_1 = <string>column.extract(row_1).toString();\r\n                const cell_2 = <string>column.extract(row_2).toString();\r\n                return sortOrder * cell_1.localeCompare(cell_2);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    readonly prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string;\r\n    readonly label: string;\r\n    readonly type: T;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        label: string,\r\n        type: T,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, label, type, extract} = init;\r\n        this.name = name;\r\n        this.label = label;\r\n        this.type = type;\r\n        this.extract = extract;\r\n        this.filters = init.filters ?? [];\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {name: string, age: number}) {\r\n        super();\r\n        const {name, age} = init;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    readonly prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-grid\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-grid\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n\r\n    #gridRowElementsMap: WeakMap<GridRowModel, WeakRef<HTMLEGridRowElement>>\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.#gridRowElementsMap = new WeakMap();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.setModel(model ?? new GridModel());\r\n        this.#cellDelegate = (row: GridRowModel, column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.extract(row)\r\n                }\r\n            });\r\n        };\r\n        this.#columnDelegate = (column: GridColumnModel) => {\r\n            return element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.#gridRowElementsMap.get(row)?.deref() ?? null;\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > e-grid > e-gridhead > e-gridrow > e-gridcell[type=columnheader][name=${column.name}]`);\r\n    }\r\n\r\n    getColumnDataElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return Fragment(\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                properties: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: [\r\n                    element(\"input\", {\r\n                        properties: {\r\n                            type: \"search\"\r\n                        },\r\n                        eventListeners: {\r\n                            input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"e-grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\"\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: [\r\n                            element(\"e-gridrow\", {\r\n                                children: reactiveChildElements(\r\n                                    model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                                )\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        this.#searchFilter = filter;\r\n        Array.from(this.model.rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden =\r\n                    !this.#displayFilters.some(filter_i => filter_i.filter(row_i))\r\n                    && !(filter?.filter(row_i) ?? true);\r\n            }\r\n        });\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            this.#displayFilters.push(filter);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.some(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(this.model.rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#displayFilters.every(filter_i => filter_i.filter(row_i));\r\n                }\r\n            });\r\n        }\r\n        const {gridElement} = this;\r\n        gridElement.beginSelection();\r\n        gridElement.selectedRows().forEach(selectedRow_i => selectedRow_i.selected = false);\r\n        gridElement.endSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const {model} = this;\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    name: column.name,\r\n                    id: this.resizable ? `${column.name}-columnheader` : void 0,\r\n                    type: \"columnheader\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        properties: {\r\n                            className: \"gridcell-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"label\", {\r\n                                properties: {\r\n                                    className: \"gridcell-label\",\r\n                                    textContent: column.label\r\n                                },\r\n                                eventListeners: {\r\n                                    click: <EventListener>this.#handleColumnLabelClickEvent.bind(this)\r\n                                }\r\n                            }),\r\n                            element(\"e-toolbar\", {\r\n                                properties: {\r\n                                    tabIndex: -1,\r\n                                },\r\n                                children: [\r\n                                    element(\"e-toolbaritem\", {\r\n                                        properties: {\r\n                                            type: \"menubutton\",\r\n                                            tabIndex: -1,\r\n                                        },\r\n                                        children: [\r\n                                            element(\"e-menubutton\",  {\r\n                                                properties: {\r\n                                                    slot: \"menubutton\",\r\n                                                    tabIndex: -1,\r\n                                                },\r\n                                                children: [\r\n                                                    element(\"e-menu\",  {\r\n                                                        properties: {\r\n                                                            slot: \"menu\",\r\n                                                            tabIndex: -1,\r\n                                                        },\r\n                                                        children: [\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"button\",\r\n                                                                    textContent: \"Resize column\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                eventListeners: {\r\n                                                                    trigger: () => {\r\n                                                                        const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                                                        if (columnHeaderElement) {\r\n                                                                            columnHeaderElement.style.removeProperty(\"width\");\r\n                                                                            columnHeaderElement.style.removeProperty(\"max-width\");\r\n                                                                            this.getColumnDataElements(column).forEach(\r\n                                                                                cell_i => cell_i.style.maxWidth = \"unset\"\r\n                                                                            );\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Sort\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    reactiveElement(\r\n                                                                        column,\r\n                                                                        element(\"e-menu\",  {\r\n                                                                            properties: {\r\n                                                                                slot: \"menu\",\r\n                                                                                tabIndex: -1,\r\n                                                                            },\r\n                                                                            children: [\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Ascending\",\r\n                                                                                        value: \"1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                }),\r\n                                                                                element(\"e-menuitem\",  {\r\n                                                                                    properties: {\r\n                                                                                        type: \"radio\",\r\n                                                                                        name: \"sort\",\r\n                                                                                        textContent: \"Descending\",\r\n                                                                                        value: \"-1\",\r\n                                                                                        tabIndex: -1,\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            ],\r\n                                                                            eventListeners: {\r\n                                                                                trigger: (event) => {\r\n                                                                                    const {target} = event;\r\n                                                                                    const sortOrder = (<HTMLEMenuItemElement>target).value;\r\n                                                                                    model.sortByColumn(column, parseInt(sortOrder));\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }),\r\n                                                                        [\"sortorder\"],\r\n                                                                        (menu, property, oldValue, newValue) => {\r\n                                                                            /*Array.from(menu.items).filter(item_i => item_i.name.startsWith(\"sort\"))\r\n                                                                                .forEach((sortRadioItem_i => {\r\n                                                                                    sortRadioItem_i.checked = parseInt(sortRadioItem_i.value) === newValue;\r\n                                                                                })\r\n                                                                            );*/\r\n                                                                        }\r\n                                                                    )\r\n                                                                ]\r\n                                                            }),\r\n                                                            element(\"e-menuitem\",  {\r\n                                                                properties: {\r\n                                                                    type: \"submenu\",\r\n                                                                    textContent: \"Filter\",\r\n                                                                    tabIndex: -1,\r\n                                                                },\r\n                                                                children: [\r\n                                                                    element(\"e-menu\",  {\r\n                                                                        properties: {\r\n                                                                            slot: \"menu\",\r\n                                                                            tabIndex: -1,\r\n                                                                        },\r\n                                                                        children: column.filters.map((filter_i, i) =>\r\n                                                                            element(\"e-menuitem\", {\r\n                                                                                properties: {\r\n                                                                                    tabIndex: -1,\r\n                                                                                    textContent: filter_i.name,\r\n                                                                                    type: \"checkbox\",\r\n                                                                                    checked: this.#displayFilters.includes(filter_i)\r\n                                                                                },\r\n                                                                                eventListeners: {\r\n                                                                                    trigger: (event) => {\r\n                                                                                        const {currentTarget} = event;\r\n                                                                                        if (currentTarget instanceof HTMLEMenuItemElement) {\r\n                                                                                            const {checked} = currentTarget;\r\n                                                                                            if (checked) {\r\n                                                                                                this.addDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                            else {\r\n                                                                                                this.removeDisplayFilter(filter_i);\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            })\r\n                                                                        )\r\n                                                                    })\r\n                                                                ]\r\n                                                            })\r\n                                                        ]\r\n                                                    })\r\n                                                ]\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    properties: {\r\n                                        controls: `${column.name}-columnheader`\r\n                                    },\r\n                                    eventListeners: {\r\n                                        resize: () => {\r\n                                            this.getColumnDataElements(column).forEach(\r\n                                                cell_i => cell_i.style.removeProperty(\"max-width\")\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            cell.dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete cell.dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            properties: {\r\n                tabIndex: -1\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        this.#gridRowElementsMap.set(row, new WeakRef(gridRowElement));\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            properties: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: [\r\n                this.#cellDelegate(row, column)\r\n            ]\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().startsWith(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleColumnLabelClickEvent(event: MouseEvent): void {\r\n        const {currentTarget} = event;\r\n        const {model} = this;\r\n        const {columns} = model;\r\n        if (currentTarget instanceof Element) {\r\n            const targetCell = currentTarget.closest(\"e-gridcell\");\r\n            if (targetCell) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetCell.name);\r\n                if (targetColumn) {\r\n                    const sortorder = typeof targetColumn.sortorder !== \"undefined\" ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { Editor, HotKey, Key, KeyModifier } from \"./index\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, Fragment, widget } from \"./src/elements/Element\";\r\nimport { MenuItemModel, MenuModel, MenuView } from \"./src/views/MenuView\";\r\n\r\nexport async function main() {\r\n    \r\n    /*const menubar = new MenuBarWidget([\r\n        new MenuItemWidget({\r\n            label: \"File\",\r\n            name: \"file\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"File\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Import file...\",\r\n                                name: \"import\"\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Export file...\",\r\n                                name: \"export\",\r\n                                hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        }),\r\n        new MenuItemWidget({\r\n            label: \"Preferences\",\r\n            name: \"preferences\",\r\n            type: \"menu\",\r\n            menu: new MenuWidget({\r\n                name: \"Preferences\",\r\n                groups: [\r\n                    new MenuItemGroupWidget({\r\n                        name: \"fileActions\",\r\n                        items: [\r\n                            new MenuItemWidget({\r\n                                label: \"Advanced User\",\r\n                                name: \"advanced\",\r\n                                type: \"checkbox\",\r\n                                hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n                            }),\r\n                            new MenuItemWidget({\r\n                                label: \"Layout\",\r\n                                name: \"layout\",\r\n                                type: \"submenu\",\r\n                                menu: new MenuWidget({\r\n                                    name: \"Layout\",\r\n                                    groups: [\r\n                                        new MenuItemGroupWidget({\r\n                                            name: \"Layout\",\r\n                                            items: [\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Standard\",\r\n                                                    name: \"standard\",\r\n                                                    type: \"radio\"\r\n                                                }),\r\n                                                new MenuItemWidget({\r\n                                                    label: \"Advanced\",\r\n                                                    name: \"advanced\",\r\n                                                    type: \"radio\"\r\n                                                })\r\n                                            ]\r\n                                        })\r\n                                    ]\r\n                                })\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    ]);*/\r\n\r\n    const treeView = new TreeView();\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new TreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new TreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new TreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new TreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new TreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    treeView.setModel(treeModel);\r\n    document.body.append(treeView);\r\n    \r\n    treeModel.childItems.append(\r\n        new TreeItemModel({\r\n            label: \"yo\",\r\n            type: \"parent\",\r\n            items: [\r\n                new TreeItemModel({\r\n                    type: \"leaf\",\r\n                    label: \"plop\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    const listView = new ListView();\r\n    listView.setModel(\r\n        new ListModel({\r\n            items: [\r\n                new ListItemModel({\r\n                    label: \"Hey\"\r\n                }),\r\n                new ListItemModel({\r\n                    label: \"Yo\"\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(listView);\r\n\r\n    // Menu actions\r\n    // Toolbar actions\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.sortable = true;\r\n    gridView.setColumnDelegate((column) => {\r\n        return Fragment(\r\n            element(\"label\", {\r\n                properties: {\r\n                    textContent: column.label\r\n                }\r\n            })/*,\r\n            element(\"e-toolbar\", {\r\n                children: [\r\n                    element(\"e-toolbaritem\", {\r\n                        properties: {\r\n                            type: \"button\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n        );\r\n    });\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    label: \"Name\",\r\n                    type: String,\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    label: \"Age\",\r\n                    type: Number,\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                })\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(gridView);\r\n\r\n    /*const menuView = new MenuView(\r\n        new MenuModel({\r\n            items: [\r\n                new MenuItemModel({\r\n                    name: \"MenuItem A1\",\r\n                    label: \"MenuItem A1\",\r\n                    type: \"submenu\",\r\n                    menu: new MenuModel({\r\n                        name: \"MenuItem A2\",\r\n                        items: [\r\n                            new MenuItemModel({name: \"MenuItem B1\", label: \"MenuItem B1\", type: \"checkbox\"}),\r\n                            new MenuItemModel({name: \"MenuItem B2\", label: \"MenuItem B2\", type: \"checkbox\"})\r\n                        ]\r\n                    })\r\n                }),\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(menuView);*/\r\n\r\n    /*const menuView = element(\"e-menu\", {\r\n        children: [\r\n            element(\"e-menuitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    textContent: \"MenuItem 1\"\r\n                }\r\n            }),\r\n            element(\"e-menuitem\", {\r\n                properties: {\r\n                    tabIndex: -1,\r\n                    textContent: \"MenuItem 2\"\r\n                }\r\n            })\r\n        ]\r\n    });*/\r\n    const menuView = widget(\"menubar\", {\r\n        children: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                children: [\r\n                    widget(\"menu\", {\r\n                        properties: {\r\n                            name: \"menu\"\r\n                        },\r\n                        children: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                children: [\r\n                    widget(\"menu\", {\r\n                        properties: {\r\n                            name: \"menu\"\r\n                        },\r\n                        children: [\r\n                            widget(\"menuitemgroup\", {\r\n                                children: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    widget(\"menu\", {\r\n                                        properties: {\r\n                                            name: \"submenu\"\r\n                                        },\r\n                                        children: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"checkbox\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 2\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n    \r\n    const editor = new Editor();\r\n    editor.setup();\r\n\r\n    /*editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n        console.log(`Advanced user is now ${newValue}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n    editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n        editor.setPair(\"layout\", newValue);\r\n    });\r\n\r\n    editor.registerButtonAction(\"execLayout\", () => {\r\n        const layout = editor.getPair(\"layout\");\r\n        console.log(`Layout is ${layout}`);\r\n    }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});*/\r\n\r\n\r\n    /*editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n        console.log(`Test is ${newValue}`);\r\n    }, {value: \"2\", key: \"test\"});\r\n\r\n    document.addEventListener(\"slotchange\", (event) => {\r\n        console.log(event);\r\n    });*/\r\n    \r\n    /*setTimeout(() => {\r\n        const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n        if (execLayoutToolBarItem) {\r\n            editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n                if (newValue !== oldValue) {\r\n                    execLayoutToolBarItem.value = newValue;\r\n                }\r\n            });\r\n        }\r\n    }, 100);\r\n\r\n    const button = element(\"button\", {\r\n        properties: {\r\n            textContent: \"Focus\"\r\n        },\r\n        listeners: {\r\n            click: () => {\r\n                const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n                if (menuitem) {\r\n                    menuitem.focus();\r\n                }\r\n            }\r\n        }\r\n    });\r\n    document.body.append(button);\r\n    document.body.append(menubar.element);\r\n    \r\n    editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n    editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);*/\r\n\r\n    //editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n    //editor.executeRadioAction(\"setLayout\", \"other\");\r\n}","import { ActionType, HTMLEActionElement } from \"./elements/containers/actions/Action\";\r\nimport { subtreeNodes } from \"./elements/Element\";\r\nimport { HotKey } from \"./Input\";\r\nimport { Widget } from \"./views/widgets/Widget\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface Action {\r\n    name: string;\r\n    type: ActionType;\r\n    trigger: (oldValue: any, newValue: any) => void;\r\n    key?: string;\r\n    value?: string;\r\n    checked?: boolean;\r\n}\r\n\r\ninterface ButtonAction {\r\n    name: string;\r\n    type: \"button\";\r\n    trigger: () => void;\r\n}\r\n\r\ninterface RadioAction {\r\n    name: string;\r\n    type: \"radio\";\r\n    trigger: (oldValue: string, newValue: string) => void;\r\n    value: string;\r\n    key?: string;\r\n}\r\n\r\ninterface CheckboxAction {\r\n    name: string;\r\n    type: \"checkbox\";\r\n    trigger: (oldValue: boolean, newValue: boolean) => void;\r\n    checked: boolean;\r\n    key?: string;\r\n}\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    registerWidget(widget: Widget): void;\r\n    unregisterWidget(widget: Widget): void;\r\n    \r\n    /*setPair(key: string, value: any): void;\r\n    getPair<T>(key: string): T;\r\n    addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;\r\n    removePairListener(key: string, listener: (oldValue: any, newValue: any) => void): void;*/\r\n\r\n    registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    \r\n    executeButtonAction(name: string): void;\r\n    executeCheckboxAction(name: string, newChecked: boolean): void;\r\n    executeRadioAction(name: string, newValue: string): void;\r\n\r\n    setCheckboxActionValue(name: string, checked: boolean): void;\r\n    setRadioActionValue(name: string, value: string): void;\r\n\r\n    unregisterActionElement(action: string, element: HTMLEActionElement): void;\r\n    registerActionElement(action: string, element: HTMLEActionElement): void;\r\n    setup(): void;\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    private _widgets: Array<Widget>;\r\n    private _actions: Array<Action>;\r\n    private _actionElements: Array<Array<HTMLEActionElement>>;\r\n    private _hotkeys: Array<HotKey>;\r\n    private _pairs: Map<string, any>;\r\n    private _pairsListeners: Map<string, Array<(oldValue: any, newValue: any) => void>>;\r\n\r\n    private _actionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        this._widgets = new Array();\r\n        this._actions = new Array();\r\n        this._actionElements = new Array();\r\n        this._hotkeys = new Array();\r\n        this._pairs = new Map();\r\n        this._pairsListeners = new Map();\r\n\r\n        this._actionsObserver =  new MutationObserver(this._actionsObserverCallback.bind(this));\r\n    }\r\n\r\n    private _actionsObserverCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.registerActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                Array.from(subtreeNodes(node)).forEach((node) => {\r\n                    if (node instanceof HTMLEActionElement) {\r\n                        this.unregisterActionElement(node.name, node);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", this);\r\n        document.body.addEventListener(\"trigger\", this);\r\n\r\n        this._actionsObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    /*public getPair<T>(key: string): T {\r\n        return this._pairs.get(key) as T;\r\n    }\r\n\r\n    public setPair(key: string, value: any): void {\r\n        const oldValue = this._pairs.get(key);\r\n        this._pairs.set(key, value);\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.forEach((listener_i) => {\r\n                listener_i(oldValue, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public addPairListener(key: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(key);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners.push(listener);\r\n        }\r\n        else {\r\n            this._pairsListeners.set(key, [listener]);\r\n        }\r\n    }\r\n\r\n    public removePairListener(name: string, listener: (oldValue: any, newValue: any) => void): void {\r\n        const listeners = this._pairsListeners.get(name);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const listenerIndex = listeners.findIndex(listener_i => listener_i == listener);\r\n            if (listenerIndex > -1) {\r\n                listeners.copyWithin(listenerIndex, listenerIndex + 1);\r\n                listeners.length--;\r\n            }\r\n        }\r\n    }*/\r\n    \r\n    public registerWidget(widget: Widget): void {\r\n        /*widget.element.addEventListener(\"focusin\", this);\r\n        this._widgets.push(widget);*/\r\n    }\r\n\r\n    public unregisterWidget(widget: Widget): void {\r\n        /*if (this._widgets.includes(widget)) {\r\n            widget.element.removeEventListener(\"focusin\", this);\r\n            this._widgets.splice(this._widgets.indexOf(widget), 1);\r\n        }*/\r\n    }\r\n\r\n    public handleEvent(event: Event): void {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"keydown\":\r\n                const actionsIndices = this._hotkeys\r\n                    .map((hotkey_i, i) => hotkey_i.test(event as KeyboardEvent) ? i : -1)\r\n                    .filter(i => i > -1);\r\n                actionsIndices.forEach((index) => {\r\n                    const {name, type, value, checked} = this._actions[index];\r\n                    switch (type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(name, checked!);\r\n                            break;\r\n                        case \"radio\":\r\n                            this.executeRadioAction(name, value!);\r\n                            break;\r\n                    }\r\n                });\r\n                break;\r\n            case \"trigger\":\r\n                if (target instanceof HTMLEActionElement) {\r\n                    switch (target.type) {\r\n                        case \"button\":\r\n                            this.executeButtonAction(target.name);\r\n                            break;\r\n                        case \"checkbox\":\r\n                            this.executeCheckboxAction(target.name, target.checked);\r\n                            break;\r\n                        case \"radio\":\r\n                        case \"select\":\r\n                            this.executeRadioAction(target.name, target.value);\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public registerButtonAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction {\r\n            return this.registerAction(name, trigger, \"button\", init);\r\n    }\r\n\r\n    public registerRadioAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction {\r\n            return this.registerAction(name, trigger, \"radio\", init);\r\n    }\r\n\r\n    public registerCheckboxAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction {\r\n            return this.registerAction(name, trigger, \"checkbox\", init);\r\n    }\r\n\r\n    public registerAction(\r\n        name: string,\r\n        trigger: () => void,\r\n        type: \"button\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n        }): ButtonAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: boolean, newValue: boolean) => void,\r\n        type: \"checkbox\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            checked?: boolean;\r\n        }): CheckboxAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: string, newValue: string) => void,\r\n        type: \"radio\",\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n        }): RadioAction;\r\n    public registerAction(\r\n        name: string,\r\n        trigger: (oldValue: any, newValue: any) => void,\r\n        type: ActionType,\r\n        init?: {\r\n            hotkey?: HotKey;\r\n            key?: string;\r\n            value?: string;\r\n            checked?: boolean;\r\n        }): Action {\r\n        const hotkey = init?.hotkey;\r\n        const key = init?.key;\r\n        const value = init?.value;\r\n        const checked = init?.checked;\r\n        const action: Action = {name, trigger, key, type};\r\n        if (value ?? false) {\r\n            action.value = value;\r\n        }\r\n        if (key !== void 0 && value !== void 0) {\r\n            localStorage.setItem(key, value);\r\n        }\r\n        if (checked ?? false) {\r\n            action.checked = checked;\r\n        }\r\n        const index = this._actions.push(action) - 1;\r\n        if (hotkey) {\r\n            this._hotkeys[index] = hotkey;\r\n        }\r\n        return action;\r\n    }\r\n\r\n    public executeButtonAction(name: string): void {\r\n        this.executeAction(name, \"button\");\r\n    }\r\n\r\n    public executeCheckboxAction(name: string, newChecked: boolean): void {\r\n        this.executeAction(name, \"checkbox\", newChecked);\r\n    }\r\n\r\n    public executeRadioAction(name: string, newValue: string): void {\r\n        this.executeAction(name, \"radio\", newValue);\r\n    }\r\n\r\n    public executeAction(name: string, type: \"button\"): void;\r\n    public executeAction(name: string, type: \"checkbox\", newChecked: boolean): void;\r\n    public executeAction(name: string, type: \"radio\", newValue: string): void;\r\n    public executeAction(name: string, type: ActionType, newValue?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            let oldValue;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    oldValue = action.value ?? \"\";\r\n                    break;\r\n                case \"checkbox\":\r\n                    oldValue = action.value ?? false;\r\n                    break;\r\n            }\r\n            action.trigger(oldValue, newValue);\r\n            this.setActionValue(name, newValue);\r\n            /*action.value = newValue;\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == newValue);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = newValue;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = newValue;\r\n                        });\r\n                        break;\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    public setCheckboxActionValue(name: string, checked: boolean): void {\r\n        this.setActionValue(name, checked);\r\n    }\r\n\r\n    public setRadioActionValue(name: string, value: string): void {\r\n        this.setActionValue(name, value);\r\n    }\r\n\r\n    public setActionValue(name: string, value?: any): void {\r\n        const actionIndex = this._actions.findIndex(\r\n            action_i => action_i.name == name\r\n        );\r\n        if (actionIndex > -1) {\r\n            const action = this._actions[actionIndex];\r\n            const {type, key} = action;\r\n            action.value = value;\r\n            if (key) {\r\n                localStorage.setItem(key, value);\r\n            }\r\n            \r\n            const actionElements = this._actionElements[actionIndex];\r\n            if (actionElements) {\r\n                switch (type) {\r\n                    case \"radio\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            if (actionElement_i.type == \"radio\") {\r\n                                actionElement_i.checked = (actionElement_i.value == value);\r\n                            }\r\n                            else if (actionElement_i.type == \"select\") {\r\n                                actionElement_i.value = value;\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"checkbox\":\r\n                        actionElements.forEach((actionElement_i) => {\r\n                            actionElement_i.checked = value;\r\n                        });\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                if (!elements.includes(element)) {\r\n                    elements.push(element);\r\n                }\r\n            }\r\n            else {\r\n                this._actionElements[actionIndex] = [element];\r\n            }\r\n\r\n            const action = this._actions[actionIndex];\r\n            const {type, value, checked} = action;\r\n            switch (type) {\r\n                case \"radio\":\r\n                    if (element.type == \"radio\") {\r\n                        element.checked = (element.value == value!);\r\n                    }\r\n                    else if (element.type == \"select\") {\r\n                        element.value = value!;\r\n                    }\r\n                    break;\r\n                case \"checkbox\":\r\n                    element.checked = checked!;\r\n                    break;\r\n            }\r\n\r\n            const hotkey = this._hotkeys[actionIndex];\r\n            if (hotkey) {\r\n                element.hotkey = hotkey.toString();\r\n            }\r\n        }\r\n    }\r\n\r\n    public unregisterActionElement(name: string, element: HTMLEActionElement): void {\r\n        const actionIndex = this._actions.findIndex(action_i => action_i.name == name);\r\n        if (actionIndex > -1) {\r\n            const elements = this._actionElements[actionIndex];\r\n            if (elements) {\r\n                const elementIndex = elements.findIndex(element_i => element_i == element);\r\n                if (elementIndex > -1) {\r\n                    elements.copyWithin(elementIndex, elementIndex + 1);\r\n                    elements.length--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","widgets","constructor","this","Map","define","name","widget","set","create","properties","Error","ModelChangeRecordBase","init","target","changeType","propertyName","oldValue","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","toString","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","String","CustomElement","elementCtor","customElements","CustomWidget","subtreeNodes","childNodes","childNodesCount","childIndex","child","Fragment","nodes","fragment","document","createDocumentFragment","tagName","part","exportParts","attributes","dataset","children","eventListeners","style","element","createElement","is","isBuiltinElement","keys","key_i","assign","elementPart","add","join","attributeValue","elementStyle","property_i","elementDataset","datasetEntry_i","from","entries","name_i","listener_i","content","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLETreeItemGroupElementBase","HTMLElement","shadowRoot","attachShadow","mode","cloneNode","assignedElements","element_i","HTMLETreeItemElement","posinset","level","closestItem","matches","parentElement","closest","textContent","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","attributeChangedCallback","Event","bubbles","labelPart","querySelector","toggle","force","expanded","shiftKey","ctrlKey","slotName","HTMLETreeElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","getElementsByTagName","selectedItems","walker","currentNode","root","selected","beginSelection","endSelection","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleItem","DOCUMENT_POSITION_PRECEDING","previousVisibleItem","selectedItem_i","contains","activeItem","active","tabIndex","dropTargetItem","droptarget","lastChild","previousSibling","nextNode","nextSibling","lastItem","blur","stopPropagation","lastSelectedItem","preventDefault","relatedTarget","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","firstItem","parentItem","focus","preventScroll","previousItem","nextItem","click","HTMLETreeElement","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","TreeModel","childItems","flattenItems","sortFunction","item_a","item_b","label","localeCompare","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","show","console","log","hide","display","result","reduce","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","childCount","visibility","TreeViewBase","getTreeElement","getTreeItemElement","getDragImageElement","tree","treeElement","dragstart","drop","contextmenu","keydown","rel","href","className","hidden","treeItemElement","draggable","slot","trigger","treeitem","badge","toolbar","visibilityItem","namedItem","title","checked","dragImageElement","span","dataTransfer","selectedElements","selectedCount","selectedUris","uri_i","_","uris","some","uri_j","selectedUrisString","lastUri","dropEffect","setData","dragImage","setDragImage","targetUri","targetItem","transferedUris","getData","split","transferedItems","targetType","targetParentItem","targetList","newElements","clientX","clientY","menu","contextual","close","body","positionContextual","TreeView","HTMLEActionElementBase","disabled","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","expand","collapse","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","overflowX","overflowY","closestMenu","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","selector","propertyKey","getter","withinShadowRoot","HTMLEMenuItemElement","EMenuItem","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","EMenuItemGroup","radios","HTMLEMenuElementBase","x","y","querySelectorAll","find","previousNode","nearestItem","error","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","radio_i","EMenu","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridHeadElementBase","HTMLEGridHeadElement","HTMLEGridElementBase","node_i","clearSelection","selectedCells","selectedRows","toIndex","min","max","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","row_i","cell","activeCell","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","selectby","targetCell","targetRow","lastSelectedCell","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","EMenuButton","HTMLEOptionElementBase","innerText","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","activeIndex","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarItemCollectionBase","HTMLEToolBarItemRadioList","HTMLEToolBarItemRadioListBase","itemName","itemType","HTMLEToolBarItemCollection","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","connectedCallback","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","HTMLEListElement","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","iconPartTemplate","arrowPartTemplate","menuItemWidget","freeze","template","role","observer","MutationObserver","mutationsList","mutation","addedNodes","removedNodes","childNodesAddedCallback","childNodesRemovedCallback","attributeOldValue","attributeFilter","handleKeyDownEvent","keyshortcut","setKeyShortcut","setChecked","setType","setLabel","setName","classList","setHasPopup","getKeyShortcut","getLabel","getType","typeClass","class_i","substring","iconPart","contentPart","arrowPart","getActive","setActive","toggleAttribute","getName","getHasPopup","getChecked","setExpanded","getExpanded","positionMenu","menubar","handleClickEvent","handleFocusInEvent","handleFocusOutEvent","handleMouseOverEvent","handleTriggerEvent","getActiveItem","firstChildItem","setActiveItem","isClosestMenu","menuItemGroupWidget","handleMouseOutEvent","walkerNodeFilter","getContextual","setContextual","collapseSubmenus","menuitem_i","clearItemTimeout","setItemTimeout","ListModel","getItemByIndex","ListItemList","ListItemModel","ListViewBase","getListElement","getListItemElement","listElement","listItemElement","toolbaritem","parseInt","ListView","GridModel","columns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","row_1","row_2","cell_1","extract","cell_2","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnDataElements","input","setSearchFilter","rowElement","filter_i","gridElement","addDisplayFilter","removeDisplayFilter","displayFilters","filterIndex","every","resizable","columnHeaderElement","removeProperty","maxWidth","resize","gridRowElement","headers","HTMLInputElement","targetColumn","GridView","main","treeView","treeModel","aLabel","bLabel","listView","gridView","sortable","menuView","_widgets","_actions","_actionElements","_hotkeys","_pairs","_pairsListeners","_actionsObserver","_actionsObserverCallback","registerActionElement","unregisterActionElement","setup","registerWidget","unregisterWidget","hotkey_i","executeButtonAction","executeCheckboxAction","executeRadioAction","registerButtonAction","registerAction","registerRadioAction","registerCheckboxAction","hotkey","localStorage","setItem","executeAction","newChecked","actionIndex","action_i","setActionValue","setCheckboxActionValue","setRadioActionValue","actionElements","actionElement_i","elements","elementIndex","copyWithin"],"sourceRoot":""}