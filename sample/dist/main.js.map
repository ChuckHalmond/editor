{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.#firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() :\r\n                    this.#firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    description: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n        \r\n    @AttributeProperty({type: String})\r\n    description!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 12px;\r\n                        }\r\n                        \r\n                        :host([active]) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n\r\n                        :host::before {\r\n                            display: flex;\r\n                            content: \"\";\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin-right: 6px;\r\n\r\n                            mask-size: 18px 18px;\r\n                            -webkit-mask-size: 18px 18px;\r\n                            background-color: var(--icon-color, none);\r\n                            -webkit-mask-image: var(--icon-image, none);\r\n                            mask-image: var(--icon-image, none);\r\n                        }\r\n\r\n                        [part=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n\r\n                        :host([default])::after {\r\n                            display: inline-block;\r\n                            content: \"(default)\";\r\n                            margin-left: 24px;\r\n                            text-align: right;\r\n                        }\r\n\r\n                        [part=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeIndex: number;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedIndex: number;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this.#selectedIndex;\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#activeIndex) ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.options.item(this.#selectedIndex) ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n    #selectedIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"options\"\r\n                },\r\n                children: [\r\n                    element(\"slot\"),\r\n                    element(\"hr\", {\r\n                        attributes: {\r\n                            part: \"separator\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"description\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#selectedIndex = -1;\r\n        this.options = new HTMLEOptionCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {options} = this;\r\n                const matchingOption = Array.from(options.values()).find(option => option.value == newValue);\r\n                if (matchingOption) {\r\n                    this.#setSelectedOption(matchingOption);\r\n                    this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded, options} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            const {selectedIndex} = this;\r\n            this.#positionOptions();\r\n            const option = options.item(selectedIndex);\r\n            if (option) {\r\n                option.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(item: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement): void {\r\n        if (option && !option.disabled) {\r\n            this.value = option.value;\r\n        }\r\n    }\r\n\r\n    #setActiveOption(option: HTMLEOptionElement | null): void {\r\n        const {options, activeOption} = this;\r\n        if (activeOption !== null && activeOption !== option) {\r\n            activeOption.active = false;\r\n        }\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot} = this;\r\n                const descriptionPart = shadowRoot.querySelector(\"[part='description']\");\r\n                if (descriptionPart) {\r\n                    descriptionPart.textContent = option.description;\r\n                }\r\n                this.#activeIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n            option.active = true;\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setSelectedOption(option: HTMLEOptionElement | null): void {\r\n        const {options} = this;\r\n        if (option !== null) {\r\n            if (!option.disabled) {\r\n                const {shadowRoot, selectedOption} = this;\r\n                const valuePart = shadowRoot.querySelector(\"[part='value']\");\r\n                if (valuePart) {\r\n                    valuePart.textContent = option.label;\r\n                }\r\n                option.selected = true;\r\n                if (selectedOption) {\r\n                    selectedOption.selected = false;\r\n                }\r\n                this.#selectedIndex = Array.from(options.values()).indexOf(option);\r\n            }\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #positionOptions(): void {\r\n        const {shadowRoot} = this;\r\n        const options = shadowRoot.querySelector<HTMLElement>(\"[part=options]\")!;\r\n        const {style: optionsStyle} = options;  \r\n        const {bottom: selectBottom, left: selectLeft} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${selectBottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${selectLeft + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            this.#selectOption(target);\r\n            this.collapse();\r\n        }\r\n        else {\r\n            if (target == this) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {expanded} = this;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            if (!expanded) {\r\n                this.expand();\r\n            }\r\n            this.#setActiveOption(target);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {expanded} = this;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            if (expanded) {\r\n                this.collapse();\r\n            }\r\n            this.#setActiveOption(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {options, activeOption, selectedOption, selectedIndex, expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const previousOption = this.#previousOption(activeOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const previousOption = this.#previousOption(selectedOption) ?? this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded && activeOption !== null) {\r\n                    const nextOption = this.#nextOption(activeOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else if (!expanded && selectedOption !== null) {\r\n                    const nextOption = this.#nextOption(selectedOption) ?? this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption !== null) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption !== null) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption !== null) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    const option = options.item(selectedIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {activeIndex} = this;\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const optionsArray = Array.from(options.values());\r\n                    const firstMatchIndex = optionsArray.findIndex(\r\n                        option_i => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    const nextMatchIndex = optionsArray.findIndex(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    );\r\n                    const matchIndex = nextMatchIndex > -1 ?\r\n                        nextMatchIndex :\r\n                        firstMatchIndex;\r\n                    const option = options.item(matchIndex);\r\n                    if (option !== null) {\r\n                        option.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEOptionElement) {\r\n            target.focus({preventScroll: true});\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const options = <HTMLEOptionElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEOptionElement\r\n            );\r\n        if (options.length > 0) {\r\n            let selectedOption: HTMLEOptionElement | null = null;\r\n            let {value} = this;\r\n            if (value) {\r\n                selectedOption = options.find(option => option.value == value) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.selected) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = options.find(option => option.default) ?? null;\r\n            }\r\n            if (selectedOption == null) {\r\n                selectedOption = this.#firstOption();\r\n            }\r\n            options.forEach(option_i => {\r\n                option_i.selected = option_i == selectedOption\r\n            });\r\n            if (selectedOption !== null) {\r\n                this.#setSelectedOption(selectedOption);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEActionElement } from \"../actions/Action\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLEActionElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get menubutton(): HTMLEMenuButtonElement | null {\r\n        return this.#menubutton;\r\n    }\r\n    \r\n    get select(): HTMLESelectElement | null {\r\n        return this.#select;\r\n    }\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    \r\n    #menubutton: HTMLEMenuButtonElement | null;\r\n    #select: HTMLESelectElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menubutton = null;\r\n        this.#select = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    toggle(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menubutton\": {\r\n                const {menubutton} = this;\r\n                if (menubutton) {\r\n                    menubutton.toggle();\r\n                    if (menubutton.expanded) {\r\n                        menubutton.firstItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                const {select} = this;\r\n                if (select) {\r\n                    select.toggle();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                /*case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }*/\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                const {expanded} = menubutton;\r\n                                if (!expanded) {\r\n                                    menubutton.expand();\r\n                                    menubutton.firstItem?.focus({preventScroll: true});\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.trigger();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.checked = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridbody > .gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridhead > .gridheader[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > .grid > .gridbody > .gridrow > .gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            widget(\"grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                slotted: [\r\n                    widget(\"gridhead\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    widget(\"gridbody\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            widget(\"gridheader\", {\r\n                properties: {\r\n                    id: column.name\r\n                },\r\n                slotted: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                widget(\"widthsash\", {\r\n                                    properties: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = widget(\"gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = widget(\"gridcell\", {\r\n            properties: {\r\n                headers: column.name\r\n            },\r\n            slotted: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = widget(\"menu\",  {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: [\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        }\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            model.sortByColumn(column, Number(menuItemWidget.getValue(targetItem)));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: column.filters.map((filter_i, i) =>\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    treeElement(): HTMLElement;\r\n    treeItemElement(item: TreeItemModel): HTMLElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        //this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    treeElement(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\".tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(`.treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            /*element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),*/\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate.call(this, item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model, itemContextMenuDelegate} = this;\r\n        if (itemContextMenuDelegate && targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: itemContextMenuDelegate.call(this, activeItem, this.selectedItems(targetTree))!,\r\n                listeners: {\r\n                    /*click: () => {\r\n                        if (targetItem.isConnected) {\r\n                            targetItem.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetTree.focus({preventScroll: true});\r\n                        }\r\n                    },*/\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeView = new TreeView(treeModel);\r\n    /*treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                        toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                        toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );*/\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Display\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    treeView.treeElement().focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        element(\"e-import\", {\r\n            attributes: {\r\n                src: \"containers/tree.html\"\r\n            }\r\n        })\r\n    );\r\n}","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","HTMLEActionElementBase","HTMLElement","trigger","disabled","checked","Event","bubbles","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","content","cloneNode","attributeChangedCallback","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","shadowRoot","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","connectedCallback","tabIndex","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","selector","propertyKey","getter","withinShadowRoot","querySelector","HTMLEMenuItemElement","EMenuItem","assign","label","slot","tabindex","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","textContent","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","querySelectorAll","activeIndex","positionContextual","x","y","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","walker","currentNode","root","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","contextual","error","radio_i","nearestItem","relatedTarget","activeItem","focus","preventScroll","stopPropagation","click","composedPath","target_i","HTMLEMenuElement","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","selectby","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","firstItem","HTMLEMenuButtonElement","HTMLEOptionElementBase","labelPart","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","matchingOption","option","selectedIndex","activeOption","descriptionPart","description","selectedOption","valuePart","optionsStyle","selectBottom","selectLeft","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","optionsArray","firstMatchIndex","option_i","nextMatchIndex","matchIndex","default","slottedKeyboardListeners","slottedTriggerListeners","HTMLESelectElement","HTMLEToolBarItemElementBase","menubutton","select","selectValue","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","matches","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","parentItem","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","draggable","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","close","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","slotted","NodeList","Widget","class","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","targetItem","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","group","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","treeWidget","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","listItemWidget","targetList","toolbarItemWidget","pressed","setPressed","getPressed","toolbar","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","combobox","targetCombobox","addedNodes","box","targetOption","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","GridModel","initRows","columns","initColumns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","contextmenu","setSearchFilter","gridElement","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","toString","targetHead","targetHeader","contextMenu","columnHeaderElement","maxWidth","reduce","removeProperty","HTMLInputElement","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","TreeItemModel","list_i","children_i","TreeViewBase","itemContentDelegate","itemContextMenuDelegate","itemsList","count","treeElement","treeItemElement","dragstart","drop","keydown","focusin","focusout","dragImageElement","span","selectedElements","selectedCount","selectedUris","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","split","transferedItems","targetType","targetParentItem","sameLabelIndex","item_j","copyWithin","newElements","targetElement","TreeView","MyTreeItemList","show","hide","display","result","console","log","MyTreeItemModel","childCount","visibility","main","gridView","Date","getFullYear","treeModel","aLabel","bLabel","treeView","menuView","TreeMain"],"sourceRoot":""}