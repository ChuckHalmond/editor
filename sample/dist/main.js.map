{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/OptionCollection.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./TreeMain.ts","webpack://main/./main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n\r\n    expand(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!this.expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (this.expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeCellIndex: number;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    readonly activeRowIndex: number;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCellIndex(): number {\r\n        return this.#activeCellIndex;\r\n    }\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.cells.item(this.#activeCellIndex) ?? null;\r\n    }\r\n\r\n    get activeRowIndex(): number {\r\n        return this.#activeRowIndex;\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.rows.item(this.#activeRowIndex) ?? null;\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #activeCellIndex: number;\r\n    #activeRowIndex: number;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeCellIndex = -1;\r\n        this.#activeRowIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell, cells} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        else if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n            const closestRow = this.#closestRow(cell);\r\n            if (closestRow) {\r\n                this.#setActiveRow(closestRow);\r\n            }\r\n            this.#activeCellIndex = Array.from(cells.values()).indexOf(cell);\r\n        }\r\n        else {\r\n            this.#activeCellIndex = -1;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow, rows} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        else if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n            this.#activeRowIndex = Array.from(rows.values()).indexOf(row);\r\n        }\r\n        else {\r\n            this.#activeRowIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                if (target instanceof HTMLEGridCellElement) {\r\n                    this.#setActiveCell(target);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                if (target instanceof HTMLEGridRowElement) {\r\n                    this.#setActiveRow(target);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        if (!this.expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        if (this.expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    get firstItem(): HTMLEMenuItemElement | null {\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":scope > :is(e-menu, e-menu > e-menuitemgroup) > e-menuitem\"\r\n        );\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                this.menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    this.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n        this.#menu = (element instanceof HTMLEMenuElement) ? element : null;\r\n    }\r\n\r\n    #handleTriggerEvent(): void {\r\n        this.collapse();\r\n        this.focus({preventScroll: true});\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar slottedKeyboardListeners: WeakMap<HTMLElement, EventListener>;\r\nvar slottedTriggerListeners: WeakMap<HTMLElement, EventListener>;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            /*element(\"span\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"icon\"\r\n                        }\r\n                    }),\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"select\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\", {\r\n                        attributes: {\r\n                            name: \"menubutton\"\r\n                        }\r\n                    })\r\n                ]\r\n            })*/\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        )\r\n        slottedKeyboardListeners = new WeakMap();\r\n        slottedTriggerListeners = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const expand = force ?? !this.expanded;\r\n        this.expanded = expand;\r\n        if (expand) {\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target == this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.pressed = !this.pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menu} = this;\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle();\r\n                        const {expanded} = this;\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {type} = this;\r\n        if (type == \"menubutton\") {\r\n            const {menu} = this;\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#addSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedKeyboardEvent.bind(this);\r\n        slottedKeyboardListeners.set(element, listener);\r\n        element.addEventListener(\"keydown\", listener);\r\n    }\r\n\r\n    #removeSlottedKeyboardHandler(element: HTMLElement): void {\r\n        const listener = slottedKeyboardListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"keydown\", listener);\r\n        }\r\n    }\r\n\r\n    #addSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = <EventListener>this.#handleSlottedTriggerEvent.bind(this);\r\n        slottedTriggerListeners.set(element, listener);\r\n        element.addEventListener(\"trigger\", listener);\r\n    }\r\n\r\n    #removeSlottedTriggerHandler(element: HTMLElement): void {\r\n        const listener = slottedTriggerListeners.get(element);\r\n        if (listener) {\r\n            element.removeEventListener(\"trigger\", listener);\r\n        }\r\n    }\r\n\r\n    #handleSlottedKeyboardEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \"Escape\": {\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlottedTriggerEvent(event: KeyboardEvent): void {\r\n        this.focus({preventScroll: true});\r\n        event.stopPropagation();\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"menubutton\": {\r\n                let menubutton = this.#menubutton;\r\n                if (menubutton !== null) {\r\n                    this.#removeSlottedTriggerHandler(menubutton);\r\n                    this.#removeSlottedKeyboardHandler(menubutton);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                menubutton = element instanceof HTMLEMenuButtonElement ? element : null;\r\n                if (menubutton !== null) {\r\n                    this.#addSlottedTriggerHandler(menubutton);\r\n                    this.#addSlottedKeyboardHandler(menubutton);\r\n                }\r\n                this.#menubutton = menubutton;\r\n                break;\r\n            }\r\n            case \"select\": {\r\n                let select = this.#select;\r\n                if (select !== null) {\r\n                    this.#removeSlottedKeyboardHandler(select);\r\n                }\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                select = element instanceof HTMLESelectElement ? element : null;\r\n                if (select !== null) {\r\n                    this.#addSlottedKeyboardHandler(select);\r\n                }\r\n                this.#select = select;\r\n                break;\r\n            }\r\n        }\r\n    }*/\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        //this.addEventListener(\"change\", this.#handleChangeEvent.bind(this));\r\n        //this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"trigger\", this.#handleTriggerEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    /*#handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*#handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const activeItem = this.items().find(\r\n            item_i => item_i.contains(<Node>target)\r\n        ) ?? null;\r\n        this.#setActiveItem(activeItem);\r\n        this.tabIndex = -1;\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menu, expanded} = activeItem;\r\n                            if (menu && !expanded) {\r\n                                activeItem.expand();\r\n                                menu.firstItem()?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleTriggerEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type, name, value} = target;\r\n            if (type == \"radio\") {\r\n                this.querySelectorAll<HTMLEToolBarItemElement>(\r\n                    `:is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    radio_i.pressed = radio_i.value == value;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    active: boolean;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    default: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    default!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\nimport { HTMLESelectElement } from \"./Select\";\r\n\r\nexport { HTMLEOptionCollection };\r\n\r\ninterface HTMLEOptionCollectionConstructor {\r\n    prototype: HTMLEOptionCollection;\r\n    new(root: HTMLESelectElement): HTMLEOptionCollection;\r\n}\r\n\r\ninterface HTMLEOptionCollection {\r\n    length: number;\r\n    item(index: number): HTMLEOptionElement | null;\r\n    namedItem(name: string): HTMLEOptionElement | null;\r\n    values(): IterableIterator<HTMLEOptionElement>;\r\n}\r\n\r\nclass HTMLEOptionCollectionBase implements HTMLEOptionCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    get value(): string {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null) {\r\n            if (currentNode.selected) {\r\n                return currentNode.value;\r\n            }\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    constructor(root: HTMLESelectElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEOptionElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEOptionElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        let currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEOptionElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEOptionElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEOptionElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEOptionElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionCollection: HTMLEOptionCollectionConstructor =  HTMLEOptionCollectionBase;","import { HTMLEActionElement } from \"../../containers/actions/Action\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionCollection } from \"./OptionCollection\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLEActionElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n    readonly activeOption: HTMLEOptionElement | null;\r\n    readonly selectedOption: HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n    //attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLEActionElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly options: HTMLEOptionCollection;\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[active]\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#mutationCallback.bind(this)\r\n        );\r\n        this.#optionsObserver.observe(this, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        this.options = new HTMLEOptionCollection(this);\r\n    }\r\n\r\n    connectedCallback() {\r\n        const {selectedOption} = this;\r\n        if (selectedOption !== null) {\r\n            this.#value().textContent = selectedOption.getAttribute(\"label\");\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #mutationCallback(mutationsList: MutationRecord[]): void {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {type} = mutation;\r\n            switch (type) {\r\n                case \"childList\": {\r\n                    const {addedNodes} = mutation;\r\n                    const selector = \"e-option[selected]\";\r\n                    for (let node of addedNodes) {\r\n                        if (node instanceof HTMLElement) {\r\n                            const selectedOption = <HTMLEOptionElement | null>(\r\n                                node.matches(selector) ? node :\r\n                                node.querySelector(selector)\r\n                            );\r\n                            if (selectedOption !== null) {\r\n                                this.#setSelectedOption(selectedOption);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (selectedOption) {\r\n            selectedOption.selected = false;\r\n        }\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n            this.#setSelectedOption(option);\r\n            this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        this.#value().textContent = option.label;\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        this.toggle();\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            const {selectedOption} = this;\r\n            (selectedOption ?? this.options.item(0))?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            \r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand();\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = Array.from(this.options.values());\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            width: 100%;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(135, 206, 250);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            width: 4px;\r\n                            \r\n                            background-color: transparent;\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            background-color: rgb(135, 206, 250);\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridbody > .gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLElement | null {\r\n        return this.shadowRoot.querySelector(`:scope > .grid > .gridhead > .gridheader[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`:scope > .grid > .gridbody > .gridrow > .gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            widget(\"grid\", {\r\n                properties: {\r\n                    tabIndex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                slotted: [\r\n                    widget(\"gridhead\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    widget(\"gridbody\", {\r\n                        slotted: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            widget(\"gridheader\", {\r\n                properties: {\r\n                    id: column.name\r\n                },\r\n                slotted: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                widget(\"widthsash\", {\r\n                                    properties: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = widget(\"gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = widget(\"gridcell\", {\r\n            properties: {\r\n                headers: column.name\r\n            },\r\n            slotted: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = widget(\"menu\",  {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: [\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: [\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\",  {\r\n                                        properties: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        }\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            model.sortByColumn(column, Number(menuItemWidget.getValue(targetItem)));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    widget(\"menuitem\",  {\r\n                        properties: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        slotted: [\r\n                            widget(\"menu\",  {\r\n                                slotted: column.filters.map((filter_i, i) =>\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLElement>(<HTMLElement>target).closest(\".gridheader\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    treeElement(): HTMLElement;\r\n    treeItemElement(item: TreeItemModel): HTMLElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        //this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    treeElement(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\".tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(`.treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderLight(): Node {\r\n        const {model} = this;\r\n        const treeElement = widget(\"tree\", {\r\n            properties: {\r\n                tabIndex: 0,\r\n            },\r\n            slotted: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            /*element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),*/\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = treeWidget.selectedItems(tree);\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate.call(this, item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(treeItemWidget.getPosInSet(targetItem), ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLElement>(`.treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    treeWidget.beginSelection(targetTree);\r\n                    newElements.forEach((element_i) => {\r\n                        treeItemWidget.setSelected(element_i, true);\r\n                    });\r\n                    treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const {model, itemContextMenuDelegate} = this;\r\n        if (itemContextMenuDelegate && targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = widget(\"menu\", {\r\n                properties: {\r\n                    contextual: true,\r\n                    position: {\r\n                        x: clientX,\r\n                        y: clientY\r\n                    }\r\n                },\r\n                slotted: itemContextMenuDelegate.call(this, activeItem, this.selectedItems(targetTree))!,\r\n                listeners: {\r\n                    /*click: () => {\r\n                        if (targetItem.isConnected) {\r\n                            targetItem.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetTree.focus({preventScroll: true});\r\n                        }\r\n                    },*/\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement.matches(\".treeitem\")) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\".toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        widget(\"toolbar\", {\r\n                            slotted: [\r\n                                widget(\"toolbaritem\", {\r\n                                    properties: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        toolbarItemWidget.setLabel(visibilityItem, label);\r\n                                        toolbarItemWidget.setTitle(visibilityItem, label);\r\n                                        toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Display\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    treeView.treeElement().focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                widget(\"menuitemgroup\", {\r\n                    slotted: [\r\n                        widget(\"menuitem\", {\r\n                            properties: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n}","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport \"./index\";\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","HTMLEActionElementBase","HTMLElement","trigger","disabled","checked","Event","bubbles","enable","disable","Key","KeyModifier","MouseButton","HTMLEActionElement","shadowTemplate","HTMLEGridCellElementBase","attachShadow","mode","content","cloneNode","attributeChangedCallback","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","element_i","posinset","HTMLEGridRowGroupElement","HTMLEMenuItemElementBase","internals","attachInternals","role","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","connectedCallback","tabIndex","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","part","HTMLEMenuItemElement","EMenuItem","assign","label","slot","tabindex","title","button","checkbox","radio","submenu","HTMLEMenuItemGroupElementBase","textContent","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","querySelectorAll","activeIndex","positionContextual","x","y","firstItem","walker","currentNode","root","find","contains","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","contextual","error","radio_i","nearestItem","relatedTarget","activeItem","focus","preventScroll","stopPropagation","click","composedPath","target_i","HTMLEMenuElement","catch","clientX","clientY","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","slotName","cell_i","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","rows","HTMLEGridElementBase","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","to","toIndex","min","max","position","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","DOCUMENT_POSITION_PRECEDING","previousVisibleRow","selectedCell_i","selected","selectedRow_i","row_i","cell","activeCell","active","closestRow","row","activeRow","cellsWalker","rowsWalker","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","selectby","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","preventDefault","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","labelPart","select","selectValue","pressed","HTMLEToolBarItemElement","EToolBarItem","menubutton","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","lastItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","matches","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","selectedItems","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","parentItem","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","draggable","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","id","thisDraggedDraggable","firstIndex","direction","sign","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","confirm","open","close","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","MutationObserver","selectedOption","mutationsList","mutation","addedNodes","HTMLOptionElement","option","box","optionsStyle","targetOption","activeOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","option_i","targetItem","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","Error","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","replaceChildren","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","slotsMap","slotsObserver","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","widgets","slotted","NodeList","Widget","class","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","group","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","treeWidget","tree","multisectable","setMultiSelectable","child_i","getMultiSelectable","targetTree","listItemWidget","targetList","toolbarItemWidget","setPressed","getPressed","toolbarWidget","toolbar","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","headers","setHeaders","getHeaders","gridRowWidget","gridWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","combobox","targetCombobox","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","light","View","GridModel","initRows","columns","initColumns","getColumnByName","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","contextmenu","setSearchFilter","gridElement","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","toString","targetHead","targetHeader","contextMenu","columnHeaderElement","maxWidth","reduce","removeProperty","HTMLInputElement","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","TreeItemModel","list_i","children_i","TreeViewBase","itemContentDelegate","itemContextMenuDelegate","itemsList","count","treeElement","treeItemElement","dragstart","drop","keydown","focusin","focusout","dragImageElement","span","selectedElements","selectedCount","selectedUris","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","split","transferedItems","targetType","targetParentItem","sameLabelIndex","item_j","copyWithin","newElements","targetElement","TreeView","MyTreeItemList","show","hide","display","result","console","log","MyTreeItemModel","childCount","visibility","main","gridView","Date","getFullYear","treeModel","aLabel","bLabel","treeView","badge","visibilityItem","menuView","TreeMain"],"sourceRoot":""}