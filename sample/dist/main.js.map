{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/HTMLElement.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/events/EventDispatcher.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/Editor.ts","webpack://main/./src/commands/Command.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/status/StatusItem.ts","webpack://main/./src/elements/containers/status/StatusBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/forms/Snippets.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/observers/ReactiveNodesObserver.ts","webpack://main/./sample/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { forAllSubtreeElements };\r\nexport { forAllSubtreeNodes };\r\nexport { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { pointIntersectsWithDOMRect };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction forAllSubtreeElements(element: Element, func: (element: Element) => void) {\r\n  let index = 0;\r\n  func(element);\r\n  while (index < element.children.length) {\r\n    let child = element.children.item(index);\r\n    if (child) {\r\n      forAllSubtreeElements(child, func);\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction forAllSubtreeNodes(parent: Node & ParentNode, func: (childNode: Node & ChildNode, parentNode: Node & ParentNode) => void) {\r\n  let index = 0;\r\n  while (index < parent.childNodes.length) {\r\n    let child = parent.childNodes.item(index);\r\n    if (child) {\r\n      func(child, parent);\r\n      if (child.hasChildNodes()) {\r\n        forAllSubtreeNodes(child as unknown as Node & ParentNode, func);\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n}\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      let index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction pointIntersectsWithDOMRect(x: number, y: number, rect: DOMRect) {\r\n  return !(rect.left > x || \r\n    rect.right < x || \r\n    rect.top > y ||\r\n    rect.bottom < y);\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain, titlize } from \"./Snippets\";\r\n\r\nexport { RegisterCustomHTMLElement };\r\nexport { GenerateAttributeAccessors };\r\nexport { bindShadowRoot };\r\nexport { isParentNode };\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { isElement };\r\nexport { Element };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { GenerateDatasetAccessors };\r\n\r\ninterface RegisterCustomHTMLElementDecorator {\r\n    (args: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst RegisterCustomHTMLElement: RegisterCustomHTMLElementDecorator = function(args: {\r\n    name: string;\r\n    attributes?: string[],\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, options } = args;\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateAttributeAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends {readonly prototype: HTMLElement}>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateAttributeAccessors: GenerateAttributeAccessorsDecorator = function(attributes: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends {readonly prototype: HTMLElement}>(\r\n        elementCtor: C\r\n    ) => {\r\n        attributes.forEach((attr: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const name = camelToTrain(attr.name);\r\n            const type = attr.type;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val === \"\" || false);\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, \"\");\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? JSON.parse(val) : null;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value !== null) {\r\n                                this.setAttribute(name, JSON.stringify(value));\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return (val !== null) ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, name, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.getAttribute(name);\r\n                            return val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.setAttribute(name, value);\r\n                            }\r\n                            else {\r\n                                this.removeAttribute(name);\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface GenerateDatasetAccessorsDecorator {\r\n    (attributes: {\r\n        name: string,\r\n        type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }[]): <C extends {readonly prototype: HTMLElement}>(elementCtor: C) => C;\r\n}\r\n\r\nconst GenerateDatasetAccessors: GenerateDatasetAccessorsDecorator = function(dataset: {\r\n    name: string,\r\n    type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}[]) {\r\n    return <C extends {readonly prototype: HTMLElement}>(\r\n        elementCtor: C\r\n    ) => {\r\n        dataset.forEach((datasetEntry: {\r\n            name: string,\r\n            type?: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n        }) => {\r\n            const dataEntryName = datasetEntry.name;\r\n            const accessorName = `data${titlize(dataEntryName)}`;\r\n            const type = datasetEntry.type;\r\n            switch (type) {\r\n                case \"boolean\":\r\n                    Object.defineProperty(elementCtor.prototype, accessorName, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.dataset[dataEntryName];\r\n                            return (val === \"\");\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (value) {\r\n                                this.dataset[dataEntryName] = \"\";\r\n                            }\r\n                            else {\r\n                                this.dataset[dataEntryName] = void 0;\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"json\":\r\n                    Object.defineProperty(elementCtor.prototype, accessorName, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.dataset[dataEntryName];\r\n                            return (typeof val !== \"undefined\") ? JSON.parse(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (typeof value !== \"undefined\") {\r\n                                this.dataset[dataEntryName] = JSON.stringify(value);\r\n                            }\r\n                            else {\r\n                                this.dataset[dataEntryName] = void 0;\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"number\":\r\n                    Object.defineProperty(elementCtor.prototype, accessorName, {\r\n                        get: function(this: HTMLElement) {\r\n                            const val = this.dataset[dataEntryName];\r\n                            return (typeof val !== \"undefined\") ? parseFloat(val) : val;\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            if (typeof value !== \"undefined\") {\r\n                                this.dataset[dataEntryName] = value.toString();\r\n                            }\r\n                            else {\r\n                                this.dataset[dataEntryName] = void 0;\r\n                            }\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"string\":\r\n                default:\r\n                    Object.defineProperty(elementCtor.prototype, accessorName, {\r\n                        get: function(this: HTMLElement) {\r\n                            return this.dataset[dataEntryName];\r\n                        },\r\n                        set: function(this: HTMLElement, value) {\r\n                            this.dataset[dataEntryName] = value;\r\n                        }\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction bindShadowRoot(element: HTMLElement, templateContent?: string): ShadowRoot {\r\n    const root = element.attachShadow({mode: \"open\"});\r\n    const template = document.createElement(\"template\");\r\n    if (typeof templateContent !== \"undefined\") {\r\n        template.innerHTML = templateContent;\r\n    }\r\n    root.appendChild(template.content.cloneNode(true));\r\n    return root;\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?: _IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    props?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    attrs?: {[name: string]: number | string | boolean},\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: DOMStringMap,\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: (event: HTMLElementEventMap[EventName]) => void | [(event: HTMLElementEventMap[EventName]) => void, Partial<boolean | AddEventListenerOptions>]\r\n    }\r\n}\r\n\r\nfunction Element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<E>):E;\r\nfunction Element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init && init.options && init.options.is) {\r\n            element.setAttribute(\"is\", init.options.is)\r\n        }\r\n        if (init) {\r\n            const { props, part, attrs, dataset, children, listeners, styles } = init;\r\n            if (props) {\r\n                const keys = Object.keys(props) as (keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[];\r\n                keys.forEach((key) => {\r\n                    const value = props[key];\r\n                    if (typeof props[key] !== \"undefined\") {\r\n                        Object.assign(\r\n                            element, {\r\n                                [key]: value\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            if (part) {\r\n                part.forEach((part) => {\r\n                    element.part.add(part);\r\n                });\r\n            }\r\n            if (attrs) {\r\n                Object.keys(attrs).forEach((attrName) => {\r\n                    const value = attrs[attrName];\r\n                    if (typeof value === \"boolean\") {\r\n                        if (value) {\r\n                            element.setAttribute(camelToTrain(attrName), \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attrName), value.toString());\r\n                    }\r\n                });\r\n            }\r\n            if (styles) {\r\n                Object.keys(styles).forEach((property) => {\r\n                    if (Array.isArray(styles[property])) {\r\n                        element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n                    }\r\n                    else {\r\n                        element.style.setProperty(property, styles[property] as string);\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                Object.keys(dataset).forEach((datasetEntry) => {\r\n                    element.dataset[datasetEntry] = dataset[datasetEntry];\r\n                });\r\n            }\r\n            if (children) {\r\n                if (typeof children === \"function\") {\r\n                    element.replaceChildren(...children(element));\r\n                }\r\n                else {\r\n                    element.replaceChildren(...children);\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach((entry) => {\r\n                    if (Array.isArray(entry[1])) {\r\n                        element.addEventListener(entry[0], entry[1][0] as EventListener, entry[1][1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(entry[0], entry[1] as EventListener);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\ntype ReactiveParentNode = Node & {\r\n    _reactiveParentNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nfunction isParentNode(node: Node): node is Node & ParentNode {\r\n    return node.hasChildNodes();\r\n}\r\n\r\nfunction isElement(node: Node): node is Element {\r\n    return node.nodeType === node.ELEMENT_NODE;\r\n}\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    return typeof (node as ReactiveNode)._reactiveNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    return typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (list: ListModel<Data>, node: N, react: (node: N, addedItems: Data[], removedItems: Data[], index: number) => void): N\r\nfunction ReactiveNode<Model extends ObjectModel, N extends Node>\r\n    (object: Model, node: N, react: <K extends Exclude<keyof Model, keyof EventDispatcher>>(node: N, property: K, oldValue: Model[K], newValue: Model[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (objectOrList: ObjectModel | ListModel<Data>, node: N, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, addedItems: Data[], removedItems: Data[], index: number) => void)): N {\r\n        if (\"items\" in objectOrList) {\r\n            const listener = (event: ListModelChangeEvent) => {\r\n                react(node,  event.data.addedItems as any, event.data.removedItems as any, event.data.index as any);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"listmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"listmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            react(node, objectOrList.items as any, [], 0 as any);\r\n        }\r\n        else {\r\n            const listener = (event: ObjectModelChangeEvent) => {\r\n                react(node, event.data.property as any, event.data.oldValue, event.data.newValue);\r\n            };\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"objectmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"objectmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n            const keys = Object.keys(objectOrList) as (keyof Data)[];\r\n            keys.forEach((key) => {\r\n                react(node, key as any, void 0 as any, (objectOrList as any)[key] as any);\r\n            });\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends any>(list: ListModel<Item>, map: (item: Item) => Node | string, placeholder?: Node): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        const listener = (event: ListModelChangeEvent) => {\r\n            if (event.data.addedItems.length === list.items.length) {\r\n                parent.textContent = \"\";\r\n            }\r\n            if (event.data.removedItems.length) {\r\n                for (let i = 0; i < event.data.removedItems.length; i++) {\r\n                    if (parent.childNodes.length > event.data.index) {\r\n                        parent.childNodes.item(event.data.index).remove();\r\n                    }\r\n                }\r\n            }\r\n            if (event.data.addedItems.length) {\r\n                let addedElements = event.data.addedItems.map(item => map(item));\r\n                if (event.data.index >= list.items.length - event.data.addedItems.length) {\r\n                    parent.append(...addedElements);\r\n                }\r\n                else {\r\n                    parent.childNodes.item(event.data.index - event.data.removedItems.length)!.before(...addedElements);\r\n                }\r\n            }\r\n            if (list.items.length === 0 && placeholder) {\r\n                parent.append(placeholder);\r\n            }\r\n        };\r\n        Object.assign(\r\n            parent, {\r\n                _reactiveParentNodeAttributes: {\r\n                    addReactListener: () => {\r\n                        list.addEventListener(\"listmodelchange\", listener);\r\n                    },\r\n                    removeReactListener: () => {\r\n                        list.removeEventListener(\"listmodelchange\", listener);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        const children = placeholder && list.items.length === 0 ? [placeholder] : list.items.map(map);\r\n        return children;\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"listitem\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"listitem\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}","\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { bindShadowRoot, GenerateAttributeAccessors, RegisterCustomHTMLElement } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: \"list\" | \"grid\";\r\n    rows: number;\r\n    cells: number;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"rows\", type: \"number\"},\r\n    {name: \"cells\", type: \"number\"},\r\n])\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: \"list\" | \"grid\";\r\n    public rows!: number;\r\n    public cells!: number;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    user-select: none;\r\n                }\r\n                \r\n                :host(:not([label])) [part~=\"label\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px 6px 6px;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                [part~=\"separator\"] {\r\n                    margin: 6px 0;\r\n                }\r\n\r\n                :host(:first-child) [part~=\"separator\"] {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <hr part=\"separator\"/>\r\n            <span part=\"label\"></span>\r\n            <div part=\"container\">\r\n                <slot></slot> \r\n            </div>\r\n        `);\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLEMenuItemElement) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.group = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (this.items.includes(target)) {\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n            else if (targetIndex >= 0) {\r\n                this.focusItemAt(this.items.indexOf(target), true);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            let thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            let target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            let newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"e_radiochangerequest\", (event: Event) => {\r\n            let target = event.target as any;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                let item = target;\r\n                if (item.type === \"radio\" && !item.checked) {\r\n                    let checkedRadio = this.findItem(\r\n                        (item: HTMLEMenuItemElement) => {\r\n                            return item.type === \"radio\" && item.checked\r\n                        }\r\n                    );\r\n                    if (checkedRadio) {\r\n                        checkedRadio.checked = false;\r\n                    }\r\n                    item.checked = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    if (this.activeIndex > 0) {\r\n                        this.focusItemAt(this.activeIndex - 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeIndex < this.items.length - 1) {\r\n                        this.focusItemAt(this.activeIndex + 1);\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    break;\r\n                case \"Escape\":\r\n                    this.reset();\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem && foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { pointIntersectsWithDOMRect } from \"../../Snippets\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menu\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"overflowing\", type: \"boolean\"}\r\n])\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    public name!: string;\r\n    public expanded!: boolean;\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"expanded\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    user-select: none;\r\n\r\n                    padding: 6px 0;\r\n                    background-color: white;\r\n                    cursor: initial;\r\n                    width: max-content;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n\r\n                ::slotted(hr) {\r\n                    margin: 6px 0;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEMenuItemElement || elem instanceof HTMLEMenuItemGroupElement\r\n                ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            let target = event.target as any;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                let thisIncludesTarget = this.items.includes(target);\r\n                if (thisIncludesTarget) {\r\n                    target.trigger();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseover\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            const targetIndex = this.items.indexOf(target);\r\n            if (this === target) {\r\n                this.reset();\r\n                this.focus();\r\n            } \r\n            else if (targetIndex >= 0) {\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this._activeIndex = targetIndex;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mouseout\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            const thisIntersectsWithMouse = pointIntersectsWithDOMRect(\r\n                event.clientX, event.clientY,\r\n                this.getBoundingClientRect()\r\n            );\r\n            if ((this === target || this.items.includes(target)) && !thisIntersectsWithMouse) {\r\n                this.reset();\r\n                this.focus();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            const target = event.target as any;\r\n            this._activeIndex = this.items.findIndex(\r\n                (item) => item.contains(target)\r\n            );\r\n            this.expanded = true;\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const newTarget = event.relatedTarget as any;\r\n            if (!this.contains(newTarget)) {  \r\n                this.reset();\r\n                this.expanded = false;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Home\":\r\n                    this.focusItemAt(0);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(0);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"End\":\r\n                    this.focusItemAt(this.items.length - 1);\r\n                    if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                        this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem instanceof HTMLEMenuItemElement) {\r\n                        this.activeItem.trigger();\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (parentMenu instanceof HTMLEMenuElement) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        document.body.focus();\r\n                    }\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.parentItem) {\r\n                        let parentGroup = this.parentItem.group;\r\n                        let parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                        if (parentMenu instanceof HTMLEMenuElement) {\r\n                            if (parentGroup) {\r\n                                parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                            }\r\n                            else {\r\n                                parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                            }\r\n                            this.reset();\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.items.includes(event.target as any)) {\r\n                        if (this.activeItem instanceof HTMLEMenuItemElement && this.activeItem.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        const thisRect = this.getBoundingClientRect();\r\n                        const thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        const item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        const item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item instanceof HTMLEMenuItemElement && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (item instanceof HTMLEMenuItemGroupElement) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;","import { HotKey } from \"../../../Input\";\r\nimport { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemElement };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    value: string;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n\r\n    trigger(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent,\r\n        \"e_trigger\": Event,\r\n        \"e_radiochangerequest\": Event,\r\n        \"e_change\": Event,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menuitem\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"checked\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public type!: EMenuItemElementType;\r\n    public disabled!: boolean;\r\n    public checked!: boolean;\r\n    public value!: string;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\", \"checked\", \"type\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) {\r\n                    padding-left: 12px;\r\n                    padding-right: 12px;\r\n                }\r\n\r\n                :host(:focus-within) {\r\n                    color: black;\r\n                    background-color: lightgray;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                    left: 100%;\r\n                    top: -6px;\r\n                }\r\n                \r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 100%;\r\n                    left: auto;\r\n                }\r\n                \r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    flex: auto;\r\n                    display: flex;\r\n                    overflow: hidden;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"input\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    width: 16px;\r\n                    height: 16px;\r\n                    margin: 2px;\r\n                }\r\n\r\n                [part~=\"label\"] {\r\n                    flex: auto;\r\n                    text-align: left;\r\n                }\r\n\r\n                [part~=\"hotkey\"] {\r\n                    flex: none;\r\n                    text-align: right;\r\n                    margin-left: 16px;\r\n                }\r\n\r\n                [part~=\"hotkey\"]:empty {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"arrow\"] {\r\n                    display: inline-block;\r\n                    flex: none;\r\n                    margin: auto;\r\n                    color: inherit;\r\n                    text-align: center;\r\n                    font-weight: bold;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    content: \"►\";\r\n                    color: dimgray;\r\n                }\r\n\r\n                :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                :host([type=\"menu\"]) [part~=\"input\"] {\r\n                    display: none;\r\n                }\r\n\r\n                :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                    padding-left: 10px;\r\n                    padding-right: 12px;\r\n                }\r\n                \r\n                :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n                \r\n                :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                    visibility: hidden;\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <input part=\"input\" type=\"button\" tabindex=\"-1\"></input>\r\n                <span part=\"label\"></span>\r\n                <span part=\"hotkey\"></span>\r\n                <span part=\"arrow\"></span>\r\n            </span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        let hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (menuElem instanceof HTMLEMenuElement) {\r\n                    this.childMenu = menuElem;\r\n                    menuElem.parentItem = this;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_radiochangerequest\", {bubbles: true}));\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;","export { EventBase };\r\nexport { Event };\r\nexport { EventDispatcher };\r\nexport { EventDispatcherBase };\r\n\r\ninterface Event<D extends object = object> {\r\n    readonly type: string;\r\n    readonly data: D;\r\n}\r\n\r\ninterface EventConstructor {\r\n    readonly prototype: Event;\r\n    new<D extends object>(type: string, data: D): Event<D>;\r\n}\r\n\r\nclass EventBase<D extends object = object> implements Event<D> {\r\n    readonly type: string;\r\n    readonly data: D;\r\n\r\n    constructor(type: string, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nvar Event: EventConstructor = EventBase;\r\n\r\ntype EventHandler<E extends Event> = (event: E) => void;\r\n\r\ninterface EventListener<E extends Event = Event> {\r\n    handler: EventHandler<E>;\r\n    once?: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {}\r\n}\r\n\r\ninterface EventDispatcher {\r\n    addEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): (event: EventsMap[K]) => void;\r\n    addEventListener(event: string, handler: (event: Event) => void, once?: boolean): (event: Event) => void;\r\n    removeEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): number;\r\n    removeEventListener(event: string, handler: (event: Event) => void, once?: boolean): number;\r\n    dispatchEvent<K extends keyof EventsMap>(event: EventsMap[K]): void;\r\n    dispatchEvent(event: Event): void;\r\n}\r\n\r\ninterface EventDispatcherConstructor {\r\n    readonly prototype: EventDispatcher;\r\n    new(): EventDispatcher;\r\n}\r\n\r\nclass EventDispatcherBase implements EventDispatcher {\r\n    private _listeners: Map<string, EventListener<any>[]>;\r\n\r\n    constructor() {\r\n        this._listeners = new Map();\r\n    }\r\n\r\n    public addEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): (event: EventsMap[K]) => void;\r\n    public addEventListener(event: string, handler: (event: Event) => void, once?: boolean): (event: Event) => void {\r\n        let listeners = this._listeners.get(event);\r\n        let newListener: EventListener<any> = {\r\n            handler: handler,\r\n            once: once\r\n        };\r\n        \r\n        if (typeof listeners === \"undefined\") {\r\n            this._listeners.set(event, [newListener]);\r\n        }\r\n        else if (!listeners.find(listener => listener.handler === handler && listener.once === once)) {\r\n            listeners.push(newListener);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    public removeEventListener<K extends keyof EventsMap>(event: K, handler: (event: EventsMap[K]) => void, once?: boolean): number;\r\n    public removeEventListener(event: string, handler: (event: Event) => void, once?: boolean): number {\r\n        let listeners = this._listeners.get(event);\r\n        if (typeof listeners !== \"undefined\") {\r\n            const count = listeners.length;\r\n            const idx = listeners.findIndex(listener => listener.handler === handler && listener.once === once);\r\n            if (idx > -1) {\r\n                if (count > 1) {\r\n                    listeners[idx] = listeners.pop()!;\r\n                    return count - 1;\r\n                }\r\n                else {\r\n                    this._listeners.delete(event.toString());\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public dispatchEvent<K extends keyof EventsMap>(event: EventsMap[K]): void;\r\n    public dispatchEvent(event: Event): void {\r\n        let listeners = this._listeners.get(event.type);\r\n        if (typeof listeners !== \"undefined\") {\r\n            listeners = listeners.filter((listener) => {\r\n                listener.handler(event);\r\n                return !listener.once\r\n            });\r\n            if (listeners.length === 0) {\r\n                this._listeners.delete(event.type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst EventDispatcher: EventDispatcherConstructor = EventDispatcherBase;","import { EventDispatcher, Event } from \"../events/EventDispatcher\";\r\n\r\nexport { GenerateObjectModelAccessors };\r\nexport { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ListModelChangeEvent };\r\nexport { ListModel };\r\n\r\ninterface ObjectModelChangeEvent {\r\n    type: \"objectmodelchange\";\r\n    data: {\r\n        property: string;\r\n        oldValue: any;\r\n        newValue: any;\r\n    };\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {\r\n        \"objectmodelchange\": ObjectModelChangeEvent;\r\n    }\r\n}\r\n\r\ninterface ObjectModelConstructor {\r\n    readonly prototype: ObjectModel;\r\n    new(): ObjectModel;\r\n}\r\n\r\ninterface ObjectModel extends EventDispatcher {}\r\n\r\nclass ObjectModelBase extends EventDispatcher implements ObjectModel {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\ninterface GenerateObjectModelAccessorsDecorator {\r\n    (props: string[]): <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => C\r\n}\r\n\r\nconst GenerateObjectModelAccessors: GenerateObjectModelAccessorsDecorator = function(props: string[]) {\r\n    return <O extends ObjectModelBase, C extends new(...args: any[]) => O>(ctor: C) => {\r\n        const properties = props.reduce(\r\n            (obj, prop) => {\r\n                return {\r\n                    ...obj,\r\n                    [prop]: {\r\n                        enumerable: true,\r\n                        get: function(this: ObjectModelBase) {\r\n                            return (this as {[key: string]: any})[`_${prop}`];\r\n                        },\r\n                        set: function(this: ObjectModelBase, value: any) {\r\n                            const oldValue = (this as {[key: string]: any})[`_${prop}`];\r\n                            (this as {[key: string]: any})[`_${prop}`] = value;\r\n                            this.dispatchEvent(new Event(\"objectmodelchange\", {property: prop, oldValue: oldValue, newValue: value}));\r\n                        }\r\n                    }\r\n                }\r\n            }, {}\r\n        );\r\n        Object.defineProperties(ctor.prototype, properties);\r\n        return ctor;\r\n    }\r\n}\r\n\r\nvar ObjectModel: ObjectModelConstructor = ObjectModelBase;\r\n\r\ninterface ListModelChangeEvent {\r\n    type: \"listmodelchange\";\r\n    data: {\r\n        addedItems: any[];\r\n        removedItems: any[];\r\n        index: number;\r\n    };\r\n}\r\n\r\ndeclare global {\r\n    interface EventsMap {\r\n        \"listmodelchange\": ListModelChangeEvent;\r\n    }\r\n}\r\n\r\ninterface ListModelConstructor {\r\n    readonly prototype: ListModel;\r\n    new<Item>(): ListModel<Item>;\r\n    new<Item>(items: Item[]): ListModel<Item>;\r\n}\r\n\r\ninterface ListModel<Item = any> extends EventDispatcher {\r\n    readonly items: ReadonlyArray<Item>;\r\n    set(index: number, item: Item): void;\r\n    insert(index: number, ...items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    pop(): Item | undefined;\r\n    remove(item: Item): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ListModelBase<Item = any> extends EventDispatcher implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor()\r\n    constructor(items: Item[] = []) {\r\n        super();\r\n        this._items = items;\r\n    }\r\n\r\n    public get items(): ReadonlyArray<Item> {\r\n        return this._items;\r\n    }\r\n\r\n    public set(index: number, item: Item): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            this._items[index] = item;\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [item], removedItems: [], index: index}));\r\n        }\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const newLength = this._items.push(...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: newLength - items.length}));\r\n        return newLength;\r\n    }\r\n\r\n    public pop(): Item | undefined {\r\n        const item = this._items.pop();\r\n        if (item) {\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: this._items.length}));\r\n        }\r\n        return item;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index > this._items.length) {\r\n            index = this._items.length;\r\n        }\r\n        else if (index < 0) {\r\n            if (index < -this._items.length) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = this._items.length + index;\r\n            }\r\n        }\r\n        this._items.splice(index, 0, ...items);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: items, removedItems: [], index: index}));\r\n    }\r\n\r\n    public remove(item: Item): void {\r\n        const itemIndex = this._items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this._items.splice(itemIndex, 1);\r\n            this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: [item], index: itemIndex}));\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        const removedItems = this._items.slice();\r\n        this._items.splice(0, this._items.length);\r\n        this.dispatchEvent(new Event(\"listmodelchange\", {addedItems: [], removedItems: removedItems, index: 0}));\r\n    }\r\n}\r\n\r\nvar ListModel: ListModelConstructor = ListModelBase;","\r\nimport { Command, isUndoCommand } from \"./commands/Command\";\r\nimport { HTMLEMenuItemElement } from \"./elements/containers/menus/MenuItem\";\r\nimport { HotKey } from \"./Input\";\r\nimport { ObjectModel } from \"./models/Model\";\r\n\r\nexport { Editor };\r\nexport { EditorBase };\r\n\r\ninterface EditorConstructor {\r\n    readonly prototype: Editor;\r\n    new(): Editor;\r\n}\r\n\r\ninterface Editor {\r\n    addHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    removeHotkeyExec(hotkey: HotKey, exec: () => void): void;\r\n    registerCommand(name: string, command: Command): void;\r\n    executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void;\r\n    setup(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface EditorState {}\r\n}\r\n\r\nclass EditorBase implements Editor {\r\n    readonly state: ObjectModel;\r\n    private _commands: Map<string, Command>;\r\n    private _hotkeys: Map<HotKey, (() => void)[]>;\r\n\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._hotkeys = new Map();\r\n        this.state = new ObjectModel();\r\n    }\r\n    \r\n    public setup(): void {\r\n        document.body.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            Array.from(this._hotkeys.keys()).forEach((hotkey) => {\r\n                if (hotkey.test(event)) {\r\n                    const execs = this._hotkeys.get(hotkey);\r\n                    if (execs) {\r\n                        execs.forEach((exec) => {\r\n                            exec();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        document.body.addEventListener(\"e_hotkeychange\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                if (event.detail.oldHotKey) {\r\n                    this.removeHotkeyExec(event.detail.oldHotKey, target.trigger.bind(target));\r\n                }\r\n                if (event.detail.newHotKey) {\r\n                    this.addHotkeyExec(event.detail.newHotKey, target.trigger.bind(target));\r\n                }\r\n            }\r\n        });\r\n\r\n        document.body.addEventListener(\"e_trigger\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLEMenuItemElement) {\r\n                if (target.command) {\r\n                    this.executeCommand(target.command, target.commandArgs)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public registerCommand(name: string, command: Command) {\r\n        this._commands.set(name, command);\r\n    }\r\n\r\n    public executeCommand(name: string, args?: any, opts?: {undo?: boolean}): void {\r\n        const command = this._commands.get(name);\r\n        if (command) {\r\n            if (opts && opts.undo && isUndoCommand(command)) {\r\n                command.undo(args);\r\n            }\r\n            else {\r\n                command.exec(args);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys === \"undefined\") {\r\n            this._hotkeys.set(hotkey, [exec]);\r\n        };\r\n    }\r\n\r\n    public removeHotkeyExec(hotkey: HotKey, exec: () => void): void {\r\n        const hotkeys = this._hotkeys.get(hotkey);\r\n        if (typeof hotkeys !== \"undefined\") {\r\n            const index = hotkeys.indexOf(exec);\r\n            if (index >= 0) {\r\n                hotkeys.splice(index, 1);\r\n            }\r\n            if (hotkeys.length === 0) {\r\n                this._hotkeys.delete(hotkey);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar Editor: EditorConstructor = EditorBase;","export { isCommand };\r\nexport { isUndoCommand };\r\nexport { Command };\r\nexport { UndoCommand };\r\n\r\nfunction isCommand(obj: any): obj is Command {\r\n    return (typeof obj.exec === 'function');\r\n}\r\n\r\nfunction isUndoCommand(obj: any): obj is UndoCommand {\r\n    return (typeof obj.exec === 'function')\r\n        && (typeof obj.undo === 'function');\r\n}\r\n\r\ninterface Command {\r\n    exec: (args?: any) => void;\r\n    undo?: (args?: any) => void;\r\n}\r\n\r\ninterface UndoCommand {\r\n    exec: (args?: any) => void;\r\n    undo: (args?: any) => void;\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mod: KeyModifier): string {\r\n    switch (mod) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mod;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nfunction testKeyModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: block;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLEMenuItemElement) as HTMLEMenuItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parentMenu = this;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"mouseover\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (this.contains(document.activeElement)) {\r\n                    if (this.active) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    if (this.active && this.activeItem?.childMenu) {\r\n                        this.activeItem.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    this.active = true;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focusItemAt(this.activeIndex);\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"mousedown\", (event) => {\r\n            let targetIndex = this.items.indexOf(event.target as any);\r\n            if (targetIndex >= 0) {\r\n                if (!this.contains(document.activeElement)) {\r\n                    this.active = true;\r\n                    this.focusItemAt(targetIndex, true);\r\n                }\r\n                else {\r\n                    this.active = false;\r\n                    document.body.focus();\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focus\", () => {\r\n            this._activeIndex = 0;\r\n        });\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        let item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        let item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    trigger(): void;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-menubutton\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    padding: 2px;\r\n                }\r\n\r\n                :host(:hover) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:focus-within:not(:focus)) {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    color: lightgray;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    z-index: 1;\r\n                    position: absolute;\r\n                    color: initial;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]) {\r\n                    top: 100%;\r\n                    left: 0;\r\n                }\r\n                \r\n                ::slotted([slot=\"menu\"][overflowing]) {\r\n                    right: 0;\r\n                    left: auto;\r\n                }\r\n\r\n                ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                    opacity: 0;\r\n                    pointer-events: none !important;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    flex: auto;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    text-align: center;\r\n                    width: 18px;\r\n                    position: absolute;\r\n                    content: \"▼\";\r\n                    color: dimgray;\r\n                }\r\n            </style>\r\n            <span part=\"toggle_arrow\"></span>\r\n            <slot name=\"menu\"></slot>\r\n        `);\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const menuSlot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot[name=menu]\");\r\n        if (menuSlot) {\r\n            menuSlot.addEventListener(\"slotchange\", () => {\r\n                const menuElem = menuSlot.assignedElements()[0];\r\n                if (menuElem instanceof HTMLEMenuElement) {\r\n                    this.childMenu = menuElem;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Enter\":\r\n                    if (!this.active) {\r\n                        this.active = true;\r\n                        if (this.childMenu) {\r\n                            this.childMenu.focusItemAt(0);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.focus();\r\n                    this.active = false;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            let target = event.target as Element;\r\n            if (this.childMenu && !this.childMenu.contains(target)) {\r\n                this.toggle();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"blur\", (event: FocusEvent) => {\r\n            let containsNewFocus = (event.relatedTarget !== null) && this.contains(event.relatedTarget as Node);\r\n            if (!containsNewFocus) {\r\n                this.active = false;\r\n            }\r\n        }, {capture: true});\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public trigger(): void {\r\n        alert();\r\n        if (!this.disabled) {\r\n            this.dispatchEvent(new CustomEvent(\"trigger\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEStatusItemElement };\r\n\r\ninterface HTMLEStatusItemElementConstructor {\r\n    readonly prototype: HTMLEStatusItemElement;\r\n    new(): HTMLEStatusItemElement;\r\n}\r\n\r\ninterface HTMLEStatusItemElement extends HTMLElement {\r\n\r\n}\r\n\r\ntype EStatusElementType = \"button\" | \"widget\";\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusitem\",\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"icon\", type: \"string\"},\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEStatusItemElementBase extends HTMLElement implements HTMLEStatusItemElement {\r\n\r\n    public name!: string;\r\n    public type!: EStatusElementType;\r\n    public icon!: string;\r\n\r\n    public command: string | null;\r\n\r\n    private _stateMap: ((state: any) => {content: string}) | null;\r\n\r\n    public get stateMap(): ((state: any) => {content: string}) | null {\r\n        return this._stateMap;\r\n    }\r\n\r\n    public set stateMap(stateMap: ((state: any) => {content: string}) | null) {\r\n        this._stateMap = stateMap;\r\n    }\r\n\r\n    public update(newValue: any): void {\r\n        const { content } = (typeof this.stateMap === \"function\") ? this.stateMap(newValue) : newValue;\r\n        this.textContent = content;\r\n    }\r\n\r\n\r\n    // TODO: Add sync with Promise (icons, etc.)\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    position: relative;\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 2px 6px;\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus-visible) {\r\n                    outline: none;\r\n                }\r\n\r\n                :host(:hover),\r\n                :host([active]) {\r\n                    background-color: rgb(180, 180, 180);\r\n                }\r\n                \r\n                li {\r\n                    display: flex;\r\n                    height: 100%;\r\n                    list-style-type: none;\r\n                }\r\n            </style>\r\n            <li>\r\n                <slot></slot>\r\n            </li>\r\n        `);\r\n\r\n        this.command = null;\r\n        this._stateMap = null;\r\n    }\r\n\r\n    public activate() {\r\n        this.dispatchEvent(new CustomEvent(\"activate\"));\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.addEventListener(\"click\", (event: Event) => {\r\n            this.activate();\r\n            event.stopPropagation();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEStatusItemElement: HTMLEStatusItemElementConstructor = HTMLEStatusItemElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusitem\": HTMLEStatusItemElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLEStatusItemElement } from \"./StatusItem\";\r\n\r\nexport { HTMLEStatusBarElement };\r\n\r\ninterface HTMLEStatusBarElement  extends HTMLElement {\r\n    items: HTMLEStatusItemElement[];\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-statusbar\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n])\r\nclass HTMLEStatusBarElementBase extends HTMLElement implements HTMLEStatusBarElement {\r\n\r\n    public name!: string;\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEStatusItemElement[];\r\n\r\n    public _selectedItemIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    position: relative; \r\n                    user-select: none;\r\n\r\n                    background-color: white;\r\n                }\r\n\r\n                :host(:focus) {\r\n                    outline: 1px solid -webkit-focus-ring-color;\r\n                }\r\n\r\n                :host(:focus) ::slotted(:first-child),\r\n                :host(:not(:focus-within)) ::slotted(:hover) {\r\n                    color: black;\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                [part~=\"ul\"] {\r\n                    display: block;\r\n                    list-style-type: none;\r\n                    padding: 0; margin: 0;\r\n                }\r\n            </style>\r\n            <ul part=\"ul\">\r\n                <slot></slot>\r\n            </ul>\r\n        `);\r\n\r\n        this.items = [];\r\n        this._selectedItemIndex = -1;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event: Event) => {\r\n                const items = (event.target as HTMLSlotElement).assignedElements()\r\n                    .filter(item => item instanceof HTMLEStatusItemElement) as HTMLEStatusItemElement[];\r\n                this.items = items;\r\n            }, {once: true});\r\n        }\r\n    }\r\n\r\n    public get selectedItemIndex(): number {\r\n        return this._selectedItemIndex;\r\n    }\r\n\r\n    public get selectedItem(): HTMLEStatusItemElement | null {\r\n        return this.items[this.selectedItemIndex] || null;\r\n    }\r\n\r\n    public insertItem(index: number, item: HTMLEStatusItemElement): void {\r\n        index = Math.min(Math.max(index, -this.items.length), this.items.length);\r\n        this.insertBefore(item, this.children[index >= 0 ? index : this.children.length + index]);\r\n        this.items.splice(index, 0, item);\r\n        item.addEventListener(\"mouseenter\", () => {\r\n            this.selectItem(this.items.indexOf(item));\r\n        });\r\n        item.addEventListener(\"mouseleave\", () => {\r\n        });\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement | null {\r\n        const items = this.findItems(predicate);\r\n        if (items.length > 0) {\r\n            return items[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public findItems(predicate: (item: HTMLEStatusItemElement) => boolean): HTMLEStatusItemElement[] {\r\n        const items: HTMLEStatusItemElement[] = [];\r\n        this.items.forEach((item) => {\r\n            if (predicate(item)) {\r\n                items.push(item);\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    public selectItem(index: number): void {\r\n        if (index !== this.selectedItemIndex) {\r\n            this.clearSelection();\r\n            let item = this.items[index];\r\n            if (item) {\r\n                this._selectedItemIndex = index;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearSelection() {\r\n        let item = this.selectedItem;\r\n        if (item) {\r\n            this._selectedItemIndex = -1;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-statusbar\": HTMLEStatusBarElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tabpanel\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([hidden]) {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tab\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n    {name: \"controls\", type: \"string\"},\r\n])\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    public name!: string;\r\n    public disabled!: boolean;\r\n    public active!: boolean;\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"active\", \"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    position: relative;\r\n                    \r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n                    padding: 2px 6px;\r\n                    border-left: 3px solid transparent;\r\n                    cursor: pointer;\r\n                }\r\n                \r\n                :host([disabled]) {\r\n                    color: grey;\r\n                    pointer-events: none;\r\n                }\r\n\r\n                :host([active]) {\r\n                    border-left: 3px solid dimgray;\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    pointer-events: none;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n            this.panel = panel;\r\n        }\r\n        if (this.panel)  {\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"active\":\r\n                    if (this.active) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                    }\r\n                    const panel = document.getElementById(this.controls);\r\n                    if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                        this.panel = panel;\r\n                    }\r\n                    if (this.panel)  {\r\n                        this.panel.hidden = !this.active;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { RegisterCustomHTMLElement, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                }\r\n            </style>\r\n            <slot></slot>\r\n        `);\r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    selected: boolean;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n    trigger(): void;\r\n\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-treeitem\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"label\", type: \"string\"},\r\n    {name: \"indent\", type: \"number\"},\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"expanded\", type: \"boolean\"},\r\n    {name: \"leaf\", type: \"boolean\"}\r\n])\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    public name!: string;\r\n    public label!: string;\r\n    public indent!: number;\r\n    public expanded!: boolean;\r\n    public value!: string;\r\n    public selected!: boolean;\r\n    public active!: boolean;\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\", \"expanded\", \"indent\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    user-select: none;\r\n                    white-space: nowrap;\r\n\r\n                    padding: 0;\r\n                    cursor: pointer;\r\n\r\n                    --indent-width: 6px;\r\n                }\r\n                \r\n                [part~=\"content\"]:hover,\r\n                :host([active]:not([selected])) [part~=\"content\"] {\r\n                    background-color: whitesmoke;\r\n                }\r\n\r\n                :host([selected]) [part~=\"content\"] {\r\n                    background-color: gainsboro;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"container\"] {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"content\"] {\r\n                    font-size: 1em;\r\n                    display: flex;\r\n                    padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                }\r\n\r\n                [part~=\"label\"],\r\n                ::slotted([slot=\"label\"]) {\r\n                    display: block;\r\n                    width: 100%;\r\n                    pointer-events: none;\r\n                    overflow: hidden;\r\n                    white-space: nowrap;\r\n                    text-overflow: ellipsis;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"container\"],\r\n                [part~=\"container\"]:empty {\r\n                    display: none;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"] {\r\n                    flex: none;\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    margin: 2px;\r\n                    margin-right: 6px;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                :host([leaf]) [part~=\"toggle_arrow\"] {\r\n                    visibility: hidden;\r\n                }\r\n\r\n                [part~=\"toggle_arrow\"]::after {\r\n                    display: inline-block;\r\n                    width: 18px;\r\n                    height: 18px;\r\n                    position: absolute;\r\n                    color: dimgray;\r\n                    text-align: center;\r\n                }\r\n\r\n                :host(:not([expanded])) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"►\";\r\n                }\r\n\r\n                :host([expanded]) [part~=\"toggle_arrow\"]::after {\r\n                    content: \"▼\";\r\n                }\r\n\r\n                [part~=\"state\"] {\r\n                    flex: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <span part=\"content\">\r\n                <span part=\"toggle_arrow\"></span>\r\n                <slot name=\"label\"><span part=\"label\"></span></slot>\r\n            </span>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this.parent = null;\r\n        this.indent = 0;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector<HTMLSlotElement>(\"slot:not([name])\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                this.items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = this.indent + 1;\r\n                });\r\n            });\r\n        }\r\n\r\n        const content = this.shadowRoot!.querySelector(\"[part=content]\")!;\r\n        content.addEventListener(\"click\", () => {\r\n            this.toggle();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"expanded\":\r\n                    if (oldValue !== newValue) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n                    }\r\n                    break;\r\n                case \"indent\":\r\n                    if (oldValue !== newValue) {\r\n                        this.style.setProperty(\"--tree-indent\", newValue);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return this.parent instanceof HTMLETreeItemElement ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (this.parent instanceof HTMLETreeItemElement) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n    }\r\n\r\n    public trigger(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_trigger\", {bubbles: true}));\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_trigger\": Event,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly selectedItem: HTMLETreeItemElement | null;\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n    reset(): void;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-tree\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"active\", type: \"boolean\"},\r\n    {name: \"name\", type: \"string\"}\r\n])\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    public active!: boolean;\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n    private _selectedItem: HTMLETreeItemElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    position: relative;\r\n                    user-select: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.items = [];\r\n        this._activeItem = null;\r\n        this._selectedItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public get selectedItem(): HTMLETreeItemElement | null {\r\n        return this._selectedItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const items = slot.assignedElements()\r\n                    .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                this.items = items;\r\n                items.forEach((item) => {\r\n                    item.parent = this;\r\n                    item.indent = 1;\r\n                });\r\n            });\r\n        }\r\n        \r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (this.activeItem) {\r\n                        if (this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.parent instanceof HTMLETreeItemElement) {\r\n                                this.focusItem(this.activeItem.parent);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.activeItem) {\r\n                        if (!this.activeItem.expanded) {\r\n                            this.activeItem.toggle();\r\n                        }\r\n                        else {\r\n                            if (this.activeItem.items.length > 0) {\r\n                                this.focusItem(this.activeItem.items[0]);\r\n                            }\r\n                        }\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.previousVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.activeItem) {\r\n                        this.focusItem(this.activeItem.nextVisibleItem());\r\n                    }\r\n                    else if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Home\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[0]);\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"End\":\r\n                    if (this.items.length > 0) {\r\n                        this.focusItem(this.items[this.items.length - 1].deepestVisibleChildItem());\r\n                    }\r\n                    event.preventDefault();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeItem) {\r\n                        this.selectItem(this.activeItem);\r\n                        this.activeItem.trigger();\r\n                    }\r\n                    break;\r\n                case \"Escape\":\r\n                    this.active = false;\r\n                    this.reset();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const target = event.target as Element;\r\n            if (target instanceof HTMLETreeItemElement) {\r\n                this.selectItem(target);\r\n                target.trigger();\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusin\", (event: FocusEvent) => {\r\n            const target = event.target as Element;\r\n            if (!this.active) {\r\n                this.active = true;\r\n            }\r\n            const closestItem = target.closest(\"e-treeitem\");\r\n            if (closestItem && this.contains(closestItem)) {\r\n                this.focusItem(closestItem);\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as Element;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.active = false;\r\n                if (this.activeItem) {\r\n                    this.activeItem.active = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public focusItem(item: HTMLETreeItemElement) {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        this._activeItem = item;\r\n        this._activeItem.active = true;\r\n        item.focus();\r\n    }\r\n\r\n    public selectItem(item: HTMLETreeItemElement) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        this._selectedItem.selected = true;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../../Snippets\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n\r\n    getReference(): this;\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-draggable\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"selected\", type: \"boolean\"},\r\n    {name: \"dragged\", type: \"boolean\"},\r\n    {name: \"dragovered\", type: \"boolean\"},\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    public selected!: boolean;\r\n    public dragovered!: boolean;\r\n    public dragged!: boolean;\r\n    public disabled!: boolean;\r\n\r\n    private _referee: this | null;\r\n    public readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                    padding: 3px 4px;\r\n                    cursor: pointer;\r\n                    white-space: nowrap;\r\n                    border-radius: 4px;\r\n                    border: 1px solid black;\r\n                    user-select: none;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                    color: gray;\r\n                    border-color: gray;\r\n                }\r\n\r\n                :host([selected]:active) {\r\n                    cursor: grabbing;\r\n                }\r\n                \r\n                :host([selected]) {\r\n                    cursor: grab;\r\n                    font-weight: bold;\r\n                    outline: 1px auto black;\r\n                }\r\n\r\n                :host([dragovered]) {\r\n                    border-style: dotted;\r\n                }\r\n                \r\n                [part=\"container\"] {\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot>&nbsp;</slot>\r\n            </div>\r\n        `);\r\n        this.references = [];\r\n        this._referee = null;\r\n    }\r\n\r\n    public get referee(): this | null {\r\n        return this._referee;\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    public disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n                const refereeId = this.referee.id;\r\n                if (refereeId) {\r\n                    this.referee.references.slice(thisRefIndex).forEach((reference, index) => {\r\n                        forAllSubtreeElements(reference, (element) => {\r\n                            if (element.id) {\r\n                                element.id = `${element.id}-${thisRefIndex + index + 1}`;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getReference(): this {\r\n        const reference = this.cloneNode(true) as this;\r\n        const referenceIdx = this.references.push(reference);\r\n        reference._referee = this;\r\n        if (this.id) {\r\n            forAllSubtreeElements(reference, (element) => {\r\n                if (element.id) {\r\n                    element.id = `${element.id}-${referenceIdx}`;\r\n                }\r\n            });\r\n        }\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { RegisterCustomHTMLElement, bindShadowRoot, GenerateAttributeAccessors } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dragzone\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"disabled\", type: \"boolean\"},\r\n])\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    public disabled!: boolean;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                }\r\n\r\n                :host([disabled]) {\r\n                    pointer-events: none;\r\n                }\r\n\r\n                [part~=\"container\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    padding-left: 2px;\r\n                    padding-right: 2px;\r\n                }\r\n\r\n                ::slotted(*) {\r\n                    margin-top: 2px;\r\n                    margin-bottom: 2px;\r\n                }\r\n            </style>\r\n            <div part=\"container\">\r\n                <slot></slot>\r\n            </div>\r\n        `);\r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../../HTMLElement\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dropzone\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"name\", type: \"string\"},\r\n    {name: \"dragovered\", type: \"string\"},\r\n    {name: \"placeholder\", type: \"string\"},\r\n    {name: \"multiple\", type: \"boolean\"},\r\n])\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    public name!: string;\r\n    public dragovered!: DropzoneDragoveredType | null;\r\n    public placeholder!: string;\r\n    public multiple!: boolean;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"placeholder\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.innerHTML += /*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `;\r\n\r\n        this.shadowRoot!.innerHTML += /*html*/`\r\n            <div part=\"appendarea\">\r\n                <span part=\"placeholder\">&nbsp;</span>\r\n            </div>\r\n        `;\r\n\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../../HTMLElement\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_open\": Event,\r\n        \"e_close\": Event,\r\n        \"e_cancel\": Event,\r\n        \"e_confirm\": Event,\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-dialog\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"},\r\n])\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n    public type!: EDialogElementType;\r\n\r\n    private _closeButton: HTMLButtonElement;\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n\r\n                    padding: 6px;\r\n                    background-color: white;\r\n\r\n                    -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                }\r\n\r\n                button {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                [part~=\"actions\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"header\"] {\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: flex-end;\r\n                }\r\n\r\n                [part~=\"button\"]:not(:first-child) {\r\n                    margin-left: 4px;\r\n                }\r\n\r\n                :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                    display: none !important;\r\n                }\r\n            </style>\r\n            <div part=\"header\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button close-button\">x</button>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"body\">\r\n                <slot></slot>\r\n            </div>\r\n            <hr part=\"separator\"/>\r\n            <div part=\"actions\">\r\n                <button type=\"button\" tabindex=\"0\" part=\"button cancel-button\">Cancel</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button confirm-button\">Confirm</button>\r\n                <button type=\"button\" tabindex=\"0\" part=\"button ok-button\">OK</button>\r\n            </div>\r\n        `);\r\n\r\n        this._closeButton = this.shadowRoot!.querySelector(\"[part~='close-button']\")!;\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~='cancel-button']\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~='confirm-button']\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~='ok-button']\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._closeButton || target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_open\", {bubbles: true}));\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_close\", {bubbles: true}));\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","export { FormState };\r\nexport { getFormState };\r\nexport { setFormState };\r\n\r\ninterface FormState {\r\n    [name: string]: {\r\n        value: string | number | boolean | null;\r\n        _control?: string;\r\n    }\r\n};\r\n\r\nconst getFormState = (form: HTMLFormElement) => {\r\n    const elements = Array.from(form.elements);\r\n    const state: FormState = {};\r\n    elements.forEach((element) => {\r\n        if (element instanceof HTMLInputElement) {\r\n            if (element.type === \"radio\") {\r\n                if (typeof state[element.name] === \"undefined\") {\r\n                    state[element.name] = {\r\n                        value: null,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n                if (element.checked) {\r\n                    state[element.name] = {\r\n                        value: element.value,\r\n                        _control: element.type\r\n                    };\r\n                }\r\n            }\r\n            else if (element.type === \"checkbox\") {\r\n                state[element.name] = {\r\n                    value: element.checked,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else if (element.type === \"number\") {\r\n                const floatValue = parseFloat(element.value);\r\n                state[element.name] = {\r\n                    value: !isNaN(floatValue) ? floatValue : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n            else {\r\n                state[element.name] = {\r\n                    value: (element.value !== \"\") ? element.value : null,\r\n                    _control: element.type\r\n                };\r\n            }\r\n        }\r\n        else if (element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\r\n            state[element.name] = {\r\n                value: (element.value !== \"\") ? element.value : null,\r\n                _control: element.type\r\n            };\r\n        }\r\n    });\r\n\r\n    return state;\r\n}\r\n\r\nconst setFormState = (form: HTMLFormElement, state: FormState) => {\r\n    const elements = Array.from(form.elements);\r\n    const names = Object.keys(state);\r\n    names.forEach((name) => {\r\n        const namedElements = elements.filter((element) => (element as any).name === name);\r\n        namedElements.forEach((element) => {\r\n            const stateValue = state[name].value;\r\n            if (element instanceof HTMLInputElement) {\r\n                if (element.type === \"radio\") {\r\n                    element.checked = (stateValue !== null && element.value === stateValue.toString());\r\n                }\r\n                else if (element.type === \"checkbox\") {\r\n                    element.checked = !!stateValue;\r\n                }\r\n                else if (element.type === \"number\") {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n                else {\r\n                    element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n                }\r\n            }\r\n            else if (element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\r\n                element.value = (stateValue !== null) ? stateValue.toString() : \"\";\r\n            }\r\n        });\r\n    });\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ntype EHeightSashDirection = \"top\" | \"bottom\";\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EHeightSashDirection;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-hsash\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EHeightSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    public static get observedAttributes() {\r\n        return [\"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    max-height: 4px;\r\n                    height: 4px;\r\n                    min-height: 4px;\r\n\r\n                    margin-top: -2px;\r\n                    margin-bottom: -2px;\r\n                    \r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ns-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let newHeight = Math.trunc(height + ((this.growdir === \"top\") ? -1 : 1) * event.movementY);\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { RegisterCustomHTMLElement, GenerateAttributeAccessors } from \"../HTMLElement\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-import\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"src\", type: \"string\"}\r\n])\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-loader\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"type\", type: \"string\"}\r\n])\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    public type!: LoaderType;\r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                \r\n                :host([type=\"bar\"]) {\r\n                    display: inline-block;\r\n                    width: 64px;\r\n                }\r\n\r\n                :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                    display: none !important;\r\n                }\r\n                \r\n                :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                    display: none !important;\r\n                }\r\n\r\n                [part~=\"circle\"] {\r\n                    position: relative;\r\n                    width: 12px;\r\n                    height: 12px;\r\n                    border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                    border-left: 4px solid transparent;\r\n                    border-bottom: 4px solid transparent;\r\n                    border-radius: 50%;\r\n                    animation-duration: 1s;\r\n                    animation-name: circle;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes circle {\r\n                    0% {\r\n                        transform: rotate(0);\r\n                    }\r\n                    100% {\r\n                        transform: rotate(360deg);\r\n                    }\r\n                }\r\n\r\n                [part~=\"bar\"] {\r\n                    display: block;\r\n                    position: relative;\r\n                    overflow: hidden;\r\n                }\r\n\r\n                [part~=\"slider\"] {\r\n                    position: relative;\r\n                    display: flex;\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: slider;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                [part~=\"cursor\"] {\r\n                    position: relative;\r\n                    display: inline-block;\r\n                    width: 32px;\r\n                    height: 4px;\r\n                    background-color: var(--loader-color, rgb(0, 128, 255));\r\n                    border-radius: 4px;\r\n\r\n                    will-change: transform;\r\n                    animation-duration: 1s;\r\n                    animation-name: cursor;\r\n                    animation-timing-function: linear;\r\n                    animation-iteration-count: infinite;\r\n                }\r\n\r\n                @keyframes slider {\r\n                    0% {\r\n                        transform: translateX(0);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n\r\n                @keyframes cursor {\r\n                    0% {\r\n                        transform: translateX(-100%);\r\n                    }\r\n                    100% {\r\n                        transform: translateX(100%);\r\n                    }\r\n                }\r\n            </style>\r\n            <div part=\"bar\">\r\n                <div part=\"slider\">\r\n                    <div part=\"cursor\"></div>\r\n                </div>\r\n            </div>\r\n            <div part=\"circle\"></div>\r\n        `);\r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { RegisterCustomHTMLElement, GenerateAttributeAccessors, bindShadowRoot } from \"../HTMLElement\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ntype EWidthSashDirection = \"left\" | \"right\";\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EWidthSashDirection;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"e-wsash\"\r\n})\r\n@GenerateAttributeAccessors([\r\n    {name: \"controls\", type: \"string\"},\r\n    {name: \"growdir\", type: \"string\"},\r\n])\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    public controls!: string;\r\n    public growdir!: EWidthSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    public static get observedAttributes() {\r\n        return [\"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        bindShadowRoot(this, /*template*/`\r\n            <style>\r\n                :host {\r\n                    display: block;\r\n                    z-index: 1;\r\n\r\n                    min-width: 4px;\r\n                    width: 4px;\r\n                    max-width: 4px;\r\n\r\n                    margin-left: -2px;\r\n                    margin-right: -2px;\r\n                    \r\n                    background-color: rgb(0, 128, 255);\r\n                    cursor: ew-resize;\r\n\r\n                    transition-property: opacity;\r\n                    transition-delay: 0.2s;\r\n                    transition-duration: 0.2s;\r\n                    transition-timing-function: ease-out;\r\n                    opacity: 0;\r\n                }\r\n\r\n                :host(:active),\r\n                :host(:hover) {\r\n                    opacity: 1;\r\n                }\r\n            </style>\r\n        `);\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let newWidth = Math.trunc(width + ((this.growdir === \"left\") ? -1 : 1) * event.movementX);\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", () => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin, isElement } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeElements } from \"../elements/Snippets\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    readonly prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    private _observer: MutationObserver;\r\n    private _mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n        this._mixins = mixins.slice();\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.attach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isElement(node)) {\r\n                    forAllSubtreeElements(node, (childElement: Element) => {\r\n                        [...childElement.attributes].forEach((attr) => {\r\n                            let matchingMixins = this._mixins.filter(\r\n                                mixin => areAttributesMatching(\r\n                                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                    attr.name, attr.value\r\n                                )\r\n                            );\r\n                            matchingMixins.forEach((mixin) => {\r\n                                mixin.detach(childElement);\r\n                            });\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            if (isElement(mutation.target)) {\r\n                let targetElement = mutation.target;\r\n                let attrName = mutation.attributeName;\r\n                if (attrName) {\r\n                    let relatedMixins = this._mixins.filter(mixin => mixin.attributeName === attrName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attrName!, targetElement.getAttribute(attrName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this._mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { isParentNode, isReactiveNode, isReactiveParentNode } from \"../elements/HTMLElement\";\r\nimport { forAllSubtreeNodes } from \"../elements/Snippets\";\r\n\r\nexport { ReactiveNodesObserver };\r\n\r\ninterface ReactiveNodesObserverConstructor {\r\n    readonly prototype: ReactiveNodesObserver;\r\n    new(): ReactiveNodesObserver;\r\n}\r\n\r\ninterface ReactiveNodesObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass ReactiveNodesObserverBase implements ReactiveNodesObserver {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor() {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (isReactiveNode(node)) {\r\n                    node._reactiveNodeAttributes.addReactListener();\r\n                }\r\n                if (isReactiveParentNode(node)) {\r\n                    node._reactiveParentNodeAttributes.addReactListener();\r\n                }\r\n                if (isParentNode(node)) {\r\n                    forAllSubtreeNodes(node, (childNode) => {\r\n                        if (isReactiveNode(childNode)) {\r\n                            childNode._reactiveNodeAttributes.addReactListener();\r\n                        }\r\n                        if (isReactiveParentNode(childNode)) {\r\n                            childNode._reactiveParentNodeAttributes.addReactListener();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\r\nvar ReactiveNodesObserver: ReactiveNodesObserverConstructor = ReactiveNodesObserverBase;","import * as editor from \"../index\";\r\nimport { Element, GenerateObjectModelAccessors, HTMLEDraggableElement, HTMLEDropzoneElement, ListModel, ObjectModel, ReactiveChildNodes, ReactiveNode, ReactiveNodesObserver, RegisterCustomHTMLElement, TextNode } from \"../index\";\r\n\r\neditor;\r\n\r\n@RegisterCustomHTMLElement({\r\n    name: \"my-drag\"\r\n})\r\nclass MyDraggable extends HTMLEDraggableElement {\r\n    constructor(str: string) {\r\n        super();\r\n        console.log(str);\r\n    }\r\n}\r\n\r\nconst observer = new ReactiveNodesObserver();\r\nobserver.observe(document.body);\r\n\r\nexport async function main() {\r\n    /*console.log(new MyDraggable(\"salut!\"));\r\n    setTimeout(() => {\r\n        document.getElementById(\"dragzone\")!.append(document.createElement(\"my-drag\"));\r\n    }, 100);\r\n    console.log(\"Main loaded!\");\r\n\r\n    @GenerateObjectModelAccessors([\"lol\"])\r\n    class MyModel extends ObjectModel {\r\n        public lol: string = \"holoo\";\r\n    }\r\n\r\n    class MyListModel extends ListModel<string> {\r\n        \r\n    }\r\n\r\n    const model = new MyModel();\r\n    const listModel = new MyListModel();\r\n\r\n    listModel.push(\"lol\");\r\n\r\n\r\n    (window as any)[\"model\"] = model;\r\n    \r\n    (window as any)[\"listModel\"] = listModel;\r\n    document.body.append(\r\n        ReactiveNode(\r\n            model,\r\n            TextNode(model.lol),\r\n            (node, prop, oldValue, newValue) => {\r\n                if (prop === \"lol\") {\r\n                    node.textContent = newValue;\r\n                }\r\n            }\r\n        )\r\n    )\r\n\r\n    const parent = Element(\"div\", {\r\n        children: [\r\n            Element(\"ul\", {\r\n                children: ReactiveChildNodes(\r\n                    listModel,\r\n                    item => Element(\"li\", {\r\n                        props: {\r\n                            textContent: item as string\r\n                        }\r\n                    })\r\n                )\r\n            }),\r\n            Element(\"button\", {\r\n                props: {\r\n                    textContent: \"Print date!\"\r\n                },\r\n                listeners: {\r\n                    click: () => {\r\n                        listModel.push(new Date().toLocaleString());\r\n                    }\r\n                }\r\n            })\r\n        ]\r\n    });\r\n    document.body.append(parent);*/\r\n\r\n    document.body.addEventListener(\"dragover\", (event) => {\r\n        const target = event.target;\r\n        if (!(target instanceof HTMLEDropzoneElement)) {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"move\";\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    document.body.addEventListener(\"drop\", (event) => {\r\n        const dataTransfer = event.dataTransfer;\r\n        if (dataTransfer) {\r\n            const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n            const dragzone = document.getElementById(dragzoneId);\r\n            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                const selectedDraggables = dragzone.selectedDraggables;\r\n                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n            }\r\n        }\r\n    });\r\n    /*(window as {[key: string]: any})[\"editor\"] = editor;\r\n    let formDataImport = document.getElementById(\"formdata-import\");\r\n    if (formDataImport) {\r\n        formDataImport.addEventListener(\"load\", () => {\r\n            formdata();\r\n        });\r\n    }*/\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","forAllSubtreeElements","element","func","index","children","length","child","item","forAllSubtreeNodes","parent","childNodes","hasChildNodes","getPropertyFromPath","src","path","props","split","forEach","includes","parseInt","substring","indexOf","Number","isNaN","console","error","Array","isArray","setPropertyFromPath","idx","pointIntersectsWithDOMRect","x","y","rect","left","right","top","bottom","titlize","str","charAt","toUpperCase","substr","toLowerCase","snakeToCamel","map","join","camelToSnake","replace","trainToCamel","camelToTrain","RegisterCustomHTMLElement","args","elementCtor","name","options","customElements","define","GenerateAttributeAccessors","attributes","attr","type","this","getAttribute","set","setAttribute","removeAttribute","val","JSON","parse","stringify","parseFloat","GenerateDatasetAccessors","dataset","datasetEntry","dataEntryName","accessorName","toString","bindShadowRoot","templateContent","root","attachShadow","mode","template","document","createElement","innerHTML","appendChild","content","cloneNode","Fragment","nodes","fragment","createDocumentFragment","append","TextNode","text","createTextNode","Element","tagName","init","is","part","attrs","listeners","styles","keys","assign","add","attrName","property","style","setProperty","replaceChildren","entries","entry","addEventListener","isParentNode","node","isElement","nodeType","ELEMENT_NODE","isReactiveNode","_reactiveNodeAttributes","addReactListener","removeReactListener","isReactiveParentNode","_reactiveParentNodeAttributes","ReactiveNode","objectOrList","react","listener","event","data","addedItems","removedItems","removeEventListener","items","oldValue","newValue","ReactiveChildNodes","list","placeholder","textContent","i","remove","addedElements","before","areAttributesMatching","refAttributeType","refAttrName","refAttrValue","attrValue","RegExp","test","AttributeMutationMixinBase","constructor","attributeName","attributeType","attributeValue","HTMLEMenuItemGroupElementBase","HTMLElement","super","_activeIndex","parentMenu","activeIndex","connectedCallback","tabIndex","slot","shadowRoot","querySelector","assignedElements","filter","HTMLEMenuItemElement","group","target","trigger","targetIndex","reset","focus","focusItemAt","thisIntersectsWithMouse","clientX","clientY","getBoundingClientRect","findIndex","contains","newTarget","relatedTarget","checked","checkedRadio","findItem","stopPropagation","activeItem","childMenu","attributeChangedCallback","label","predicate","subitems","foundItem","HTMLEMenuItemGroupElement","HTMLEMenuElementBase","parentItem","elem","expanded","parentGroup","HTMLEMenuElement","body","clientWidth","overflowing","HTMLEMenuItemElementBase","command","_hotkey","hotkey","dispatchEvent","CustomEvent","bubbles","detail","oldHotKey","newHotKey","hotkeyPart","menuSlot","menuElem","labelPart","inputPart","disabled","EventBase","Event","EventDispatcherBase","_listeners","Map","handler","once","newListener","find","push","count","pop","delete","EventDispatcher","GenerateObjectModelAccessors","ctor","properties","reduce","defineProperties","ObjectModel","ListModel","_items","newLength","insert","splice","itemIndex","clear","slice","EditorBase","_commands","_hotkeys","state","setup","from","execs","exec","removeHotkeyExec","bind","addHotkeyExec","executeCommand","commandArgs","registerCommand","opts","undo","hotkeys","Key","KeyModifier","MouseButton","Editor","displayKeyModifier","mod","Control","testKeyModifier","altKey","ctrlKey","shiftKey","HotKey","mod1","mod2","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuBarElement","HTMLEMenuButtonElementBase","toggle","capture","alert","HTMLEMenuButtonElement","HTMLEStatusItemElementBase","_stateMap","stateMap","update","activate","HTMLEStatusItemElement","HTMLEStatusBarElementBase","_selectedItemIndex","selectedItemIndex","insertItem","Math","min","max","insertBefore","selectItem","findItems","clearSelection","selectedItem","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","hidden","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","HTMLETabListElement","HTMLETreeItemElementBase","indent","HTMLETreeItemElement","deepestVisibleChildItem","previousVisibleItem","indexOfThis","nextVisibleItem","nearestItem","nearestParentItem","indexOfNearest","subitem","HTMLETreeElementBase","_activeItem","_selectedItem","focusItem","closestItem","closest","selected","HTMLEDraggableElementBase","references","_referee","draggable","disconnectedCallback","referee","thisRefIndex","id","reference","getReference","referenceIdx","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","thisDraggedDraggable","button","firstIndex","direction","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","replaceChild","action","toRemove","atPosition","HTMLEDialogElementBase","_closeButton","_cancelButton","_confirmButton","_okButton","cancel","confirm","open","close","HTMLEDialogElement","getFormState","form","elements","HTMLInputElement","_control","floatValue","HTMLSelectElement","HTMLTextAreaElement","setFormState","stateValue","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","height","getPropertyValue","newHeight","trunc","growdir","movementY","window","getComputedStyle","setPointerCapture","pointerId","releasePointerCapture","HTMLEHeightSashElement","HTMLEImportElementBase","async","outerHTML","fetch","then","response","ok","Error","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","HTMLEWidthSashElementBase","width","newWidth","movementX","AttributeMixinsObserver","mixins","_observer","MutationObserver","callback","_mixins","mutationsList","mutation","addedNodes","childElement","mixin","attach","removedNodes","detach","targetElement","observe","childList","attributeFilter","disconnect","ReactiveNodesObserver","childNode","MyDraggable","log","main"],"sourceRoot":""}