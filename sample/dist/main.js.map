{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/models/Model.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/views/View.ts","webpack://main/./src/observers/ReactiveNodesObserver.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\nexport { titlize };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj === \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj === \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = void 0;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx === props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx === props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction titlize(str: string) {\r\n  return `${str.charAt(0).toUpperCase()}${str.substr(1).toLowerCase()}`;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { ListModel, ListModelChangeEvent, ObjectModel, ObjectModelChangeEvent } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { CustomElement };\r\nexport { AttributeProperty }\r\nexport { isReactiveNode };\r\nexport { isReactiveParentNode };\r\nexport { ReactiveNode };\r\nexport { ReactiveParentNode };\r\nexport { ReactiveChildNodes };\r\nexport { HTML };\r\nexport { Fragment };\r\nexport { TextNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const { name, options } = init;\r\n\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\ninterface AttributePropertyDecorator {\r\n    (init: {\r\n        type: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n    }): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(init: {\r\n    type: \"string\" | \"number\" | \"boolean\" | \"json\"\r\n}) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const type = init.type;\r\n        const propertyName = propertyKey.toString();\r\n        const attributeName = camelToTrain(propertyName);\r\n        switch (type) {\r\n            case \"boolean\":\r\n                Object.defineProperty(target.constructor.prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            case \"json\":\r\n                Object.defineProperty(target.constructor.prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : null;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            case \"number\":\r\n                Object.defineProperty(target.constructor.prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : val;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            case \"string\":\r\n            default:\r\n                Object.defineProperty(target.constructor.prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.getAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction Fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction TextNode(text: string = \"\"): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ntype _IfEquals<X, Y, A = X, B = never> =\r\n  (<T>() => T extends X ? 1 : 2) extends\r\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\r\n\r\ntype WritableKeys<T> = {\r\n    [P in keyof T]-?:\r\n        T[P] extends Function ? never : _IfEquals<\r\n            { [Q in P]: T[P] },\r\n            { -readonly [Q in P]: T[P] }\r\n        , P>\r\n}[keyof T];\r\n\r\ninterface HTMLInit<E extends HTMLElement> {\r\n    options?: ElementCreationOptions,\r\n    properties?: Partial<Pick<E, WritableKeys<E>>>,\r\n    part?: string[],\r\n    exportparts?: string[],\r\n    attributes?: {[name: string]: number | string | boolean},\r\n    styles?: {\r\n        [property: string]: string | [string, string]\r\n    },\r\n    dataset?: DOMStringMap,\r\n    children?: Node[] | NodeList | ReactiveChildNodes,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction HTML<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<E>): E;\r\n    function HTML(\r\n        tagName: string, init?: HTMLInit<HTMLElement>): HTMLElement;\r\nfunction HTML<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLInit<HTMLElementTagNameMap[K]>): HTMLElementTagNameMap[K] {\r\n        const element = document.createElement(tagName, init?.options);\r\n        if (init && init.options && init.options.is) {\r\n            element.setAttribute(\"is\", init.options.is)\r\n        }\r\n        if (init) {\r\n            const { properties, part, exportparts, attributes, dataset, children, listeners, styles } = init;\r\n            if (properties) {\r\n                const keys = Object.keys(properties) as (keyof Partial<Pick<HTMLElementTagNameMap[K], WritableKeys<HTMLElementTagNameMap[K]>>>)[];\r\n                keys.forEach((key) => {\r\n                    const value = properties[key];\r\n                    if (typeof properties[key] !== \"undefined\") {\r\n                        Object.assign(\r\n                            element, {\r\n                                [key]: value\r\n                            }\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            if (part) {\r\n                part.forEach((part) => {\r\n                    element.part.add(part);\r\n                });\r\n            }\r\n            if (exportparts) {\r\n                element.setAttribute(\"exportparts\", exportparts.join(\", \"));\r\n            }\r\n            if (attributes) {\r\n                Object.keys(attributes).forEach((attributeName) => {\r\n                    const attributeValue = attributes[attributeName];\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        if (attributeValue) {\r\n                            element.setAttribute(camelToTrain(attributeName), \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), attributeValue.toString());\r\n                    }\r\n                });\r\n            }\r\n            if (styles) {\r\n                Object.keys(styles).forEach((property) => {\r\n                    if (Array.isArray(styles[property])) {\r\n                        element.style.setProperty(property, styles[property][0], styles[property][1]);\r\n                    }\r\n                    else {\r\n                        element.style.setProperty(property, styles[property] as string);\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                Object.keys(dataset).forEach((datasetEntry) => {\r\n                    element.dataset[datasetEntry] = dataset[datasetEntry];\r\n                });\r\n            }\r\n            if (children) {\r\n                if (typeof children === \"function\") {\r\n                    element.replaceChildren(...children(element));\r\n                }\r\n                else {\r\n                    element.replaceChildren(...(Array.isArray(children) ? children : Array.from(children)));\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach((entry) => {\r\n                    if (Array.isArray(entry[1])) {\r\n                        element.addEventListener(entry[0], entry[1][0], entry[1][1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(entry[0], entry[1]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return element;\r\n}\r\n\r\ntype ReactiveNode = Node & {\r\n    _reactiveNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\ntype ReactiveParentNode = Node & {\r\n    _reactiveParentNodeAttributes: {\r\n        addReactListener: () => void;\r\n        removeReactListener: () => void;\r\n    }\r\n};\r\n\r\nfunction isReactiveNode(node: Node): node is ReactiveNode {\r\n    return typeof (node as ReactiveNode)._reactiveNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveNode)._reactiveNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction isReactiveParentNode(node: Node): node is ReactiveParentNode {\r\n    return typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes === \"object\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.addReactListener === \"function\" &&\r\n        typeof (node as ReactiveParentNode)._reactiveParentNodeAttributes.removeReactListener === \"function\";\r\n}\r\n\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (list: ListModel<Data>, node: N, react: (node: N, addedItems: Data[], removedItems: Data[], index: number) => void): N\r\nfunction ReactiveNode<Model extends ObjectModel, N extends Node>\r\n    (object: Model, node: N, react: <K extends Exclude<keyof Model, keyof EventDispatcher>>(node: N, property: K, oldValue: Model[K], newValue: Model[K]) => void): N\r\nfunction ReactiveNode<Data extends object, N extends Node>\r\n    (objectOrList: ObjectModel | ListModel<Data>, node: N, react: (<K extends keyof Data>(node: N, property: K, oldValue: Data[K], newValue: Data[K]) => void)\r\n    | ((node: N, addedItems: Data[], removedItems: Data[], index: number) => void)): N {\r\n        if (\"clear\" in objectOrList) {\r\n            const listener = ((event: ListModelChangeEvent) => {\r\n                react(node,  event.detail.addedItems as any, event.detail.removedItems as any, event.detail.index as any);\r\n            }) as EventListener;\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"listmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"listmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n        }\r\n        else {\r\n            const listener = ((event: ObjectModelChangeEvent) => {\r\n                react(node, event.detail.property as any, event.detail.oldValue, event.detail.newValue);\r\n            }) as EventListener;\r\n            Object.assign(\r\n                node, {\r\n                    _reactiveNodeAttributes: {\r\n                        addReactListener: () => {\r\n                            objectOrList.addEventListener(\"objectmodelchange\", listener);\r\n                        },\r\n                        removeReactListener: () => {\r\n                            objectOrList.removeEventListener(\"objectmodelchange\", listener);\r\n                        }\r\n                    }\r\n                }\r\n            ) as ReactiveNode;\r\n        }\r\n        return node;\r\n}\r\n\r\ninterface ReactiveChildNodes {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nfunction ReactiveChildNodes<Item extends any>(list: ListModel<Item>, map: (item: Item) => Node | string, placeholder?: Node): ReactiveChildNodes {\r\n    return (parent: Node & ParentNode) => {\r\n        const mapping = (item: Item) => {\r\n            const node = map(item);\r\n            if (node instanceof DocumentFragment) {\r\n                console.warn(\"DocumentFragment with several child nodes are not supported in ReactiveChildNodes map.\");\r\n                return node.firstChild || \"\";\r\n            }\r\n            return node;\r\n        };\r\n        const listener = ((event: ListModelChangeEvent) => {\r\n            const listLength = list.length();\r\n            if (listLength === event.detail.addedItems.length) {\r\n                parent.replaceChildren(\"\");\r\n            }\r\n            if (event.detail.removedItems.length) {\r\n                for (let i = 0; i < event.detail.removedItems.length; i++) {\r\n                    if (parent.childNodes.length > event.detail.index) {\r\n                        parent.childNodes.item(event.detail.index).remove();\r\n                    }\r\n                }\r\n            }\r\n            if (event.detail.addedItems.length) {\r\n                const addedNodes = event.detail.addedItems.map(mapping);\r\n                if (event.detail.index >= listLength - event.detail.addedItems.length) {\r\n                    parent.append(...addedNodes);\r\n                }\r\n                else {\r\n                    parent.childNodes.item(event.detail.index - event.detail.removedItems.length)!.before(...addedNodes);\r\n                }\r\n            }\r\n            if (listLength === 0 && placeholder) {\r\n                parent.replaceChildren(placeholder);\r\n            }\r\n        }) as EventListener;\r\n        Object.assign(\r\n            parent, {\r\n                _reactiveParentNodeAttributes: {\r\n                    addReactListener: () => {\r\n                        list.addEventListener(\"listmodelchange\", listener);\r\n                    },\r\n                    removeReactListener: () => {\r\n                        list.removeEventListener(\"listmodelchange\", listener);\r\n                    }\r\n                }\r\n            }\r\n        ) as ReactiveParentNode;\r\n        return list.length() === 0 && placeholder ?\r\n            [placeholder] : list.getAll().map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(refAttributeType: AttributeType, refAttrName: string, refAttrValue: string, attrName: string, attrValue: string | null): boolean {\r\n    if (refAttrName == attrName) {\r\n        switch (refAttributeType) {\r\n            case \"boolean\":\r\n                return refAttrValue == \"\" && attrValue == \"\";\r\n            case \"string\":\r\n                return refAttrValue !== \"\" && (refAttrValue === attrValue);\r\n            case \"list\":\r\n                return (refAttrValue !== \"\" && attrValue !== null) && new RegExp(`${refAttrValue}\\s*?`, \"g\").test(attrValue);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nabstract class AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    public abstract attach(element: Element): void;\r\n    public abstract detach(element: Element): void;\r\n}","\r\nimport { HTML, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    readonly prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n\r\n    parentMenu: HTMLEMenuElement | null;\r\n    items: HTMLEMenuItemElement[];\r\n\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    \r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public label!: string;\r\n    \r\n    public parentMenu: HTMLEMenuElement | null;\r\n    public items: HTMLEMenuItemElement[];\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    private _activeIndex: number;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            position: relative;\r\n                            display: inline-block;\r\n                            user-select: none;\r\n                        }\r\n                        \r\n                        :host(:not([label])) [part~=\"label\"] {\r\n                            display: none;\r\n                        }\r\n        \r\n                        [part~=\"label\"] {\r\n                            white-space: nowrap;\r\n                            padding: 2px 6px 6px 6px;\r\n                            font-weight: bold;\r\n                        }\r\n        \r\n                        [part~=\"container\"] {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n        \r\n                        [part~=\"separator\"] {\r\n                            margin: 6px 0;\r\n                        }\r\n        \r\n                        :host(:first-child) [part~=\"separator\"] {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            HTML(\"span\", {\r\n                part: [\"label\"]\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\"),\r\n                ]\r\n            })\r\n        );\r\n\r\n        this._activeIndex = -1;\r\n        this.parentMenu = null;\r\n        this.items = [];\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n                \r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n\r\n        this.addEventListener(\"mousedown\", this);\r\n        this.addEventListener(\"mouseover\", this);\r\n        this.addEventListener(\"mouseout\", this);\r\n        this.addEventListener(\"focusin\", this);\r\n        this.addEventListener(\"focusout\", this);\r\n        this.addEventListener(\"click\", this);\r\n        this.addEventListener(\"keydown\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                this.items = (target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        elem => elem instanceof HTMLEMenuItemElement\r\n                    ) as HTMLEMenuItemElement[];\r\n                break;\r\n            case \"click\":\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    if (target.type === \"radio\" && !target.checked) {\r\n                        const checkedRadio = this.findItem(\r\n                            (item) => item.type === \"radio\" && item.checked\r\n                        );\r\n                        if (checkedRadio) {\r\n                            checkedRadio.checked = false;\r\n                        }\r\n                        target.checked = true;\r\n                    }\r\n                }\r\n                break;\r\n            case \"focusout\":\r\n                const newTarget = (event as FocusEvent).relatedTarget;\r\n                if (newTarget instanceof Element && !this.contains(newTarget)) {\r\n                    this.reset();\r\n                }\r\n                break;\r\n            /*case \"mousedown\":\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    if (this.items.includes(target)) {\r\n                        target.click();\r\n                    }\r\n                }\r\n                break;*/\r\n            case \"mouseover\":\r\n                const targetIndex = this.items.indexOf(target as HTMLEMenuItemElement);\r\n                if (this === target) {\r\n                    this.reset();\r\n                    this.focus();\r\n                }\r\n                else if (targetIndex >= 0) {\r\n                    this.focusItemAt(this.items.indexOf(target as HTMLEMenuItemElement), true);\r\n                }\r\n                break;\r\n            case \"mouseout\":\r\n                const thisRect = this.getBoundingClientRect();\r\n                const thisIntersectsWithMouse = !(\r\n                    thisRect.left > (event as MouseEvent).clientX || \r\n                    thisRect.right < (event as MouseEvent).clientX || \r\n                    thisRect.top > (event as MouseEvent).clientY ||\r\n                    thisRect.bottom < (event as MouseEvent).clientY\r\n                );\r\n                if ((this === target || this.items.includes(target as HTMLEMenuItemElement)) && !thisIntersectsWithMouse) {\r\n                    this.reset();\r\n                    this.focus();\r\n                }\r\n                break;\r\n            case \"focusin\":\r\n                if (target instanceof Element) {\r\n                    this._activeIndex = this.items.findIndex(\r\n                        (item) => item.contains(target)\r\n                    );\r\n                }\r\n                break;\r\n            case \"keydown\":\r\n                switch ((event as KeyboardEvent).key) {\r\n                    case \"ArrowUp\":\r\n                        if (this.activeIndex > 0) {\r\n                            this.focusItemAt(this.activeIndex - 1);\r\n                            event.stopPropagation();\r\n                        }\r\n                        break;\r\n                    case \"ArrowDown\":\r\n                        if (this.activeIndex < this.items.length - 1) {\r\n                            this.focusItemAt(this.activeIndex + 1);\r\n                            event.stopPropagation();\r\n                        }\r\n                        break;\r\n                    case \"Enter\":\r\n                        if (this.activeItem) {\r\n                            this.activeItem.click();\r\n                            event.stopPropagation();\r\n                        }\r\n                        break;\r\n                    case \"ArrowRight\":\r\n                        if (this.items.includes(event.target as any)) {\r\n                            if (this.activeItem?.childMenu) {\r\n                                this.activeItem.childMenu.focusItemAt(0);\r\n                                event.stopPropagation();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"Home\":\r\n                        this.focusItemAt(0);\r\n                        break;\r\n                    case \"End\":\r\n                        this.focusItemAt(this.items.length - 1);\r\n                        break;\r\n                    case \"Escape\":\r\n                        this.reset();\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (oldValue !== newValue) {\r\n            switch (name) {\r\n            case \"label\":\r\n                if (oldValue !== newValue) {\r\n                    const label = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                    if (label) {\r\n                        label.textContent = newValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        const item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        const item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subitems && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subitems);\r\n                if (foundItem && foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    name: string;\r\n    expanded: boolean;\r\n    overflowing: boolean;\r\n    parentItem: HTMLEMenuItemElement | null;\r\n    items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    readonly prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public expanded!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public overflowing!: boolean;\r\n\r\n    public parentItem: HTMLEMenuItemElement | null;\r\n    public items: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    private _activeIndex: number;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"expanded\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            user-select: none;\r\n        \r\n                            padding: 6px 0;\r\n                            background-color: white;\r\n                            cursor: initial;\r\n                            width: max-content;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n        \r\n                        ::slotted(hr) {\r\n                            margin: 6px 0;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.parentItem = null;\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | HTMLEMenuItemGroupElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.parentItem = (\r\n            this.parentElement instanceof HTMLEMenuItemElement\r\n        ) ? this.parentElement : null;\r\n        \r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n\r\n        this.addEventListener(\"mousedown\", this);\r\n        this.addEventListener(\"mouseover\", this);\r\n        this.addEventListener(\"mouseout\", this);\r\n        this.addEventListener(\"focusin\", this);\r\n        this.addEventListener(\"focusout\", this);\r\n        this.addEventListener(\"keydown\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                this.items = (target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        elem => elem instanceof HTMLEMenuItemElement || elem instanceof HTMLEMenuItemGroupElement\r\n                    ) as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement)[];\r\n                break;\r\n            case \"mousedown\":\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    if (this.items.includes(target)) {\r\n                        target.click();\r\n                    }\r\n                }\r\n                break;\r\n            case \"mouseover\":\r\n                const targetIndex = this.items.indexOf(target as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement));\r\n                if (this === target) {\r\n                    this.reset();\r\n                    this.focus();\r\n                } \r\n                else if (targetIndex >= 0) {\r\n                    if (target instanceof HTMLEMenuItemElement) {\r\n                        this.focusItemAt(targetIndex, true);\r\n                    }\r\n                    else {\r\n                        this._activeIndex = targetIndex;\r\n                    }\r\n                }\r\n                break;\r\n            case \"mouseout\":\r\n                const thisRect = this.getBoundingClientRect();\r\n                const thisIntersectsWithMouse = !(\r\n                    thisRect.left > (event as MouseEvent).clientX || \r\n                    thisRect.right < (event as MouseEvent).clientX || \r\n                    thisRect.top > (event as MouseEvent).clientY ||\r\n                    thisRect.bottom < (event as MouseEvent).clientY\r\n                );\r\n                if ((this === target || this.items.includes(target as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement))) && !thisIntersectsWithMouse) {\r\n                    this.reset();\r\n                    this.focus();\r\n                }\r\n                break;\r\n            case \"focusin\":\r\n                this._activeIndex = this.items.findIndex(\r\n                    (item) => item.contains(target as (HTMLEMenuItemElement | HTMLEMenuItemGroupElement))\r\n                );\r\n                this.expanded = true;\r\n                break;\r\n            case \"focusout\":\r\n                const newTarget = (event as FocusEvent).relatedTarget;\r\n                if (newTarget instanceof Element && !this.contains(newTarget)) {\r\n                    this.reset();\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            case \"keydown\":\r\n                switch ((event as KeyboardEvent).key) {\r\n                    case \"ArrowUp\":\r\n                        this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                        if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                            this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                        }\r\n                        event.stopPropagation();\r\n                        break;\r\n                    case \"ArrowDown\":\r\n                        this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                        if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                            this.activeItem.focusItemAt(0);\r\n                        }\r\n                        event.stopPropagation();\r\n                        break;\r\n                    case \"Home\":\r\n                        this.focusItemAt(0);\r\n                        if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                            this.activeItem.focusItemAt(0);\r\n                        }\r\n                        event.stopPropagation();\r\n                        break;\r\n                    case \"End\":\r\n                        this.focusItemAt(this.items.length - 1);\r\n                        if (this.activeItem instanceof HTMLEMenuItemGroupElement) {\r\n                            this.activeItem.focusItemAt(this.activeItem.items.length - 1);\r\n                        }\r\n                        event.stopPropagation();\r\n                        break;\r\n                    case \"Enter\":\r\n                        if (this.activeItem instanceof HTMLEMenuItemElement) {\r\n                            this.activeItem.click();\r\n                            event.stopPropagation();\r\n                        }\r\n                        break;\r\n                    case \"Escape\":\r\n                        if (this.parentItem) {\r\n                            const parentGroup = this.parentItem.group;\r\n                            const parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                            if (parentMenu instanceof HTMLEMenuElement) {\r\n                                if (parentGroup) {\r\n                                    parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                                }\r\n                                else {\r\n                                    parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                                }\r\n                                this.reset();\r\n                                event.stopPropagation();\r\n                            }\r\n                        }\r\n                        else {\r\n                            document.body.focus();\r\n                        }\r\n                        break;\r\n                    case \"ArrowLeft\":\r\n                        if (this.parentItem) {\r\n                            const parentGroup = this.parentItem.group;\r\n                            const parentMenu = parentGroup ? parentGroup.parentMenu : this.parentItem.parentMenu;\r\n                            if (parentMenu instanceof HTMLEMenuElement) {\r\n                                if (parentGroup) {\r\n                                    parentGroup.focusItemAt(parentGroup.activeIndex);\r\n                                }\r\n                                else {\r\n                                    parentMenu.focusItemAt(parentMenu.activeIndex);\r\n                                }\r\n                                this.reset();\r\n                                event.stopPropagation();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"ArrowRight\":\r\n                        if (this.items.includes(event.target as any)) {\r\n                            if (this.activeItem instanceof HTMLEMenuItemElement && this.activeItem.childMenu) {\r\n                                this.activeItem.childMenu.focusItemAt(0);\r\n                                event.stopPropagation();\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"expanded\":\r\n                    if (newValue !== null) {\r\n                        const thisRect = this.getBoundingClientRect();\r\n                        const thisIsOverflowing = thisRect.right > document.body.clientWidth;\r\n                        if (thisIsOverflowing) {\r\n                            this.overflowing = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.overflowing = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        const item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (childMenu && item.childMenu) {\r\n                    item.childMenu.focus();\r\n                }\r\n            }\r\n            else {\r\n                item.focusItemAt(0);\r\n            } \r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        const item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item instanceof HTMLEMenuItemElement && item.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subitems?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (item instanceof HTMLEMenuItemElement) {\r\n                if (predicate(item)) {\r\n                    return item;\r\n                }\r\n                if (subitems && item.childMenu) {\r\n                    foundItem = item.childMenu.findItem(predicate, subitems);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n            else if (item instanceof HTMLEMenuItemGroupElement) {\r\n                foundItem = item.findItem(predicate, subitems);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    readonly prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    items: HTMLEMenuItemElement[];\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeIndex: number;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    focusItemAt(index: number, childMenu?: boolean): void;\r\n    reset(): void;\r\n    findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public active!: boolean;\r\n    \r\n    public items: HTMLEMenuItemElement[];\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            position: relative;\r\n                            display: block;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host(:not(:focus-within)) ::slotted(:hover) {\r\n                            color: black;\r\n                            background-color: gainsboro;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.items = [];\r\n        this._activeIndex = -1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeItem(): HTMLEMenuItemElement | null {\r\n        return this.items[this.activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n\r\n        this.addEventListener(\"mouseover\", this);\r\n        this.addEventListener(\"keydown\", this);\r\n        this.addEventListener(\"mousedown\", this);\r\n        this.addEventListener(\"focus\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                this.items = (target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        elem => elem instanceof HTMLEMenuItemElement\r\n                    ) as HTMLEMenuItemElement[];\r\n                break;\r\n            case \"focus\":\r\n                this._activeIndex = 0;\r\n                break;\r\n            case \"mousedown\":\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    const targetIndex = this.items.indexOf(target);\r\n                    if (targetIndex >= 0) {\r\n                        if (!this.contains(document.activeElement)) {\r\n                            this.active = true;\r\n                            this.focusItemAt(targetIndex, true);\r\n                        }\r\n                        else {\r\n                            this.active = false;\r\n                            document.body.focus();\r\n                        }\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n                break;\r\n            case \"mouseover\":\r\n                if (target instanceof HTMLEMenuItemElement) {\r\n                    const targetIndex = this.items.indexOf(target);\r\n                    if (targetIndex >= 0) {\r\n                        if (this.contains(document.activeElement)) {\r\n                            if (this.active) {\r\n                                this.focusItemAt(targetIndex, true);\r\n                            }\r\n                            else {\r\n                                this._activeIndex = targetIndex;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"keydown\":\r\n                switch ((event as KeyboardEvent).key) {\r\n                    case \"ArrowLeft\":\r\n                        this.focusItemAt((this.activeIndex <= 0) ? this.items.length - 1 : this.activeIndex - 1);\r\n                        if (this.active && this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                        }\r\n                        break;\r\n                    case \"ArrowRight\":\r\n                        this.focusItemAt((this.activeIndex >= this.items.length - 1) ? 0 : this.activeIndex + 1);\r\n                        if (this.active && this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                        }\r\n                        break;\r\n                    case \"ArrowDown\":\r\n                        this.focusItemAt(this.activeIndex);\r\n                        if (this.active && this.activeItem?.childMenu) {\r\n                            this.activeItem.childMenu.focusItemAt(0);\r\n                        }\r\n                        break;\r\n                    case \"Enter\":\r\n                        this.active = true;\r\n                        if (this.activeItem) {\r\n                            this.activeItem.click();\r\n                        }\r\n                        break;\r\n                    case \"Escape\":\r\n                        this.focusItemAt(this.activeIndex);\r\n                        this.active = false;\r\n                        break;\r\n                }\r\n        }\r\n    }\r\n\r\n    public focusItemAt(index: number, childMenu?: boolean): void {\r\n        const item = this.items[index];\r\n        if (item) {\r\n            this._activeIndex = index;\r\n            item.focus();\r\n            if (childMenu && item.childMenu) {\r\n                item.childMenu.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        const item = this.activeItem;\r\n        this._activeIndex = -1;\r\n        if (item?.childMenu) {\r\n            item.childMenu.reset();\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLEMenuItemElement) => boolean, subtree?: boolean): HTMLEMenuItemElement | null {\r\n        let foundItem: HTMLEMenuItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.childMenu) {\r\n                foundItem = item.childMenu.findItem(predicate, subtree);\r\n                if (foundItem) {\r\n                    return foundItem;\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { HotKey } from \"../../../Input\";\r\nimport { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuBarElement } from \"./MenuBar\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuItemElement };\r\n\r\ntype EMenuItemElementType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    readonly prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    type: EMenuItemElementType;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n\r\n    group: HTMLEMenuItemGroupElement | null;\r\n    parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    childMenu: HTMLEMenuElement | null;\r\n\r\n    hotkey: HotKey | null;\r\n    command: string | null;\r\n    commandArgs: any;\r\n    \r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype HotKeyChangeEvent = CustomEvent<{\r\n    oldHotKey: HotKey | null;\r\n    newHotKey: HotKey | null;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_hotkeychange\": HotKeyChangeEvent\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n    \r\n    @AttributeProperty({type: \"string\"})\r\n    public label!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public type!: EMenuItemElementType;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public disabled!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public checked!: boolean;\r\n\r\n    public group: HTMLEMenuItemGroupElement | null;\r\n    public parentMenu: HTMLEMenuElement | HTMLEMenuBarElement | null;\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public command: string | null;\r\n    public commandArgs: any;\r\n\r\n    private _hotkey: HotKey | null;\r\n\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\", \"checked\", \"type\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            position: relative;\r\n                            display: inline-block;\r\n        \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n        \r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        :host(:not([type=\"menu\"])) {\r\n                            padding-left: 12px;\r\n                            padding-right: 12px;\r\n                        }\r\n        \r\n                        :host(:focus-within) {\r\n                            color: black;\r\n                            background-color: lightgray;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: dimgray;\r\n                        }\r\n        \r\n                        :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]),\r\n                        :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                            z-index: 1;\r\n                            position: absolute;\r\n                            color: initial;\r\n                        }\r\n        \r\n                        :host([type=\"menu\"]) ::slotted([slot=\"menu\"]) {\r\n                            top: 100%;\r\n                            left: 0;\r\n                        }\r\n                        \r\n                        :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]) {\r\n                            left: 100%;\r\n                            top: -6px;\r\n                        }\r\n                        \r\n                        :host([type=\"submenu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                            right: 100%;\r\n                            left: auto;\r\n                        }\r\n                        \r\n                        :host([type=\"menu\"]) ::slotted([slot=\"menu\"][overflowing]) {\r\n                            right: 0;\r\n                            left: auto;\r\n                        }\r\n        \r\n                        :host([type=\"menu\"]) ::slotted([slot=\"menu\"]:not([expanded])),\r\n                        :host([type=\"submenu\"]) ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                            opacity: 0;\r\n                            pointer-events: none !important;\r\n                        }\r\n        \r\n                        [part~=\"content\"] {\r\n                            flex: auto;\r\n                            display: flex;\r\n                            overflow: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part~=\"input\"] {\r\n                            display: inline-block;\r\n                            flex: none;\r\n                            width: 16px;\r\n                            height: 16px;\r\n                            margin: 2px;\r\n                        }\r\n        \r\n                        [part~=\"label\"] {\r\n                            flex: auto;\r\n                            text-align: left;\r\n                        }\r\n        \r\n                        [part~=\"hotkey\"] {\r\n                            flex: none;\r\n                            text-align: right;\r\n                            margin-left: 16px;\r\n                        }\r\n        \r\n                        [part~=\"hotkey\"]:empty {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        [part~=\"arrow\"] {\r\n                            display: inline-block;\r\n                            flex: none;\r\n                            margin: auto;\r\n                            color: inherit;\r\n                            text-align: center;\r\n                            font-weight: bold;\r\n                            width: 18px;\r\n                            height: 18px;\r\n                        }\r\n        \r\n                        [part~=\"arrow\"]::after {\r\n                            display: inline-block;\r\n                            text-align: center;\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            position: absolute;\r\n                            content: \"►\";\r\n                            color: dimgray;\r\n                        }\r\n        \r\n                        :host([type=\"menu\"]) [part~=\"arrow\"],\r\n                        :host([type=\"menu\"]) [part~=\"input\"] {\r\n                            display: none;\r\n                        }\r\n        \r\n                        :host(:not([type=\"menu\"])) [part~=\"label\"] {\r\n                            padding-left: 10px;\r\n                            padding-right: 12px;\r\n                        }\r\n                        \r\n                        :host(:not([type=\"checkbox\"]):not([type=\"radio\"])) [part~=\"input\"] {\r\n                            visibility: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                        \r\n                        :host(:not([type=\"submenu\"])) [part~=\"arrow\"] {\r\n                            visibility: hidden;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    HTML(\"input\", {\r\n                        part: [\"input\"],\r\n                        properties: {\r\n                            type: \"button\",\r\n                            tabIndex: -1\r\n                        }\r\n                    }),\r\n                    HTML(\"span\", {\r\n                        part: [\"label\"]\r\n                    }),\r\n                    HTML(\"span\", {\r\n                        part: [\"hotkey\"]\r\n                    }),\r\n                    HTML(\"span\", {\r\n                        part: [\"arrow\"]\r\n                    })\r\n                ]\r\n            }),\r\n            HTML(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.childMenu = null;\r\n        this.parentMenu = null;\r\n        this.group = null;\r\n        this.command = null;\r\n        this._hotkey = null;\r\n    }\r\n\r\n    public get hotkey(): HotKey | null {\r\n        return this._hotkey;\r\n    }\r\n\r\n    public set hotkey(hotkey: HotKey | null) {\r\n        this.dispatchEvent(\r\n            new CustomEvent(\"e_hotkeychange\", {\r\n                bubbles: true,\r\n                detail: {\r\n                    oldHotKey: this._hotkey,\r\n                    newHotKey: hotkey\r\n                }\r\n            })\r\n        );\r\n\r\n        this._hotkey = hotkey;\r\n\r\n        const hotkeyPart = this.shadowRoot?.querySelector(\"[part~=hotkey]\");\r\n        if (hotkeyPart) {\r\n            hotkeyPart.textContent = hotkey ? hotkey.toString() : \"\";\r\n        }\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.setAttribute(\"aria-label\", this.label);\r\n\r\n        this.group = (\r\n            this.parentElement instanceof HTMLEMenuItemGroupElement\r\n        ) ? this.parentElement : null;\r\n\r\n        this.parentMenu = (\r\n            this.parentElement instanceof HTMLEMenuElement ||\r\n            this.parentElement instanceof HTMLEMenuBarElement\r\n        ) ? this.parentElement : null;\r\n\r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                const slottedMenu = (target as HTMLSlotElement).assignedElements()[0];\r\n                this.childMenu = (slottedMenu instanceof HTMLEMenuElement) ? slottedMenu : null;\r\n                break;\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"checked\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            inputPart.checked = (newValue !== null);\r\n                            this.dispatchEvent(new CustomEvent(\"e_change\", {bubbles: true}));\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"type\":\r\n                    if (oldValue !== newValue) {\r\n                        const inputPart = this.shadowRoot?.querySelector<HTMLInputElement>(\"[part~=input]\");\r\n                        if (inputPart) {\r\n                            switch (this.type) {\r\n                                case \"radio\":\r\n                                    inputPart.type = \"radio\";\r\n                                    break;\r\n                                case \"menu\":\r\n                                    inputPart.type = \"hidden\";\r\n                                    break;\r\n                                default:\r\n                                    inputPart.type = \"checkbox\";\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public click(): void {\r\n        super.click();\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"menu\":\r\n                    if (this.childMenu) {\r\n                        this.childMenu.focusItemAt(0);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;","export { ObjectModelChangeEvent };\r\nexport { ObjectModel };\r\nexport { ListModelChangeEvent };\r\nexport { ListModel };\r\n\r\ninterface ObjectModelEventDetail {\r\n    property: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n}\r\n\r\ninterface ObjectModelChangeEventConstructor {\r\n    readonly prototype: ObjectModelChangeEvent;\r\n    new(eventInitDict?: CustomEventInit<ObjectModelEventDetail>): ObjectModelChangeEvent;\r\n}\r\n\r\ninterface ObjectModelChangeEvent extends CustomEvent<ObjectModelEventDetail> {\r\n    type: \"objectmodelchange\";\r\n}\r\n\r\nclass ObjectModelChangeEventBase extends CustomEvent<ObjectModelEventDetail> {\r\n    type!: \"objectmodelchange\";\r\n\r\n    constructor(eventInitDict?: CustomEventInit<ObjectModelEventDetail>) {\r\n        super(\"objectmodelchange\", eventInitDict);\r\n    }\r\n}\r\n\r\ninterface ObjectModelEventMap {\r\n    \"objectmodelchange\": ObjectModelChangeEvent;\r\n}\r\n\r\nvar ObjectModelChangeEvent: ObjectModelChangeEventConstructor = ObjectModelChangeEventBase;\r\n\r\ninterface ObjectModelConstructor {\r\n    readonly prototype: ObjectModel;\r\n    new(): ObjectModel;\r\n}\r\n\r\ninterface ObjectModel extends EventTarget {\r\n    dispatchEvent(event: Event): boolean;\r\n    addEventListener<K extends keyof ObjectModelEventMap>(type: K, listener: (this: ObjectModel, ev: ObjectModelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n    removeEventListener<K extends keyof ObjectModelEventMap>(type: K, listener: (this: ObjectModel, ev: ObjectModelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\r\n}\r\n\r\nclass ObjectModelBase extends EventTarget implements ObjectModel {\r\n    private _listmodelListeners: Map<string, EventListener>;\r\n\r\n    constructor() {\r\n        super();\r\n        this._listmodelListeners = new Map();\r\n        return new Proxy(this, {\r\n            get: (target: this, property: string, receiver: any) => {\r\n                const value = Reflect.get(target, property, receiver);\r\n                return typeof value === \"function\" ? value.bind(target) : value;\r\n            },\r\n            set: (target: this, property: string, value: any, receiver: any) => {\r\n                const oldValue = Reflect.get(target, property, receiver);\r\n                if (oldValue instanceof ListModel) {\r\n                    if (this._listmodelListeners.has(property)) {\r\n                        const listmodelListener = this._listmodelListeners.get(property)!;\r\n                        oldValue.removeEventListener(\"listmodelchange\", listmodelListener);\r\n                        this._listmodelListeners.delete(property);\r\n                    }\r\n                }\r\n                if (value instanceof ListModel) {\r\n                    const listmodelListener = () => {\r\n                        target.dispatchEvent(new ObjectModelChangeEvent({detail: {property: property, oldValue: value, newValue: value}}));\r\n                    };\r\n                    this._listmodelListeners.set(property, listmodelListener);\r\n                    value.addEventListener(\"listmodelchange\", listmodelListener);\r\n                }\r\n                target.dispatchEvent(new ObjectModelChangeEvent({detail: {property: property, oldValue: oldValue, newValue: value}}));\r\n                return Reflect.set(target, property, value, receiver);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar ObjectModel: ObjectModelConstructor = ObjectModelBase;\r\n\r\ninterface ListModelEventDetail {\r\n    addedItems: any[];\r\n    removedItems: any[];\r\n    index: number;\r\n}\r\n\r\ninterface ListModelChangeEventConstructor {\r\n    readonly prototype: ListModelChangeEvent;\r\n    new(eventInitDict?: CustomEventInit<ListModelEventDetail>): ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModelChangeEvent extends Event {\r\n    type: \"listmodelchange\";\r\n    detail: ListModelEventDetail;\r\n}\r\n\r\nclass ListModelChangeEventBase extends CustomEvent<ListModelEventDetail> {\r\n    type!: \"listmodelchange\";\r\n\r\n    constructor(eventInitDict?: CustomEventInit<ListModelEventDetail>) {\r\n        super(\"listmodelchange\", eventInitDict);\r\n    }\r\n}\r\n\r\nvar ListModelChangeEvent: ListModelChangeEventConstructor = ListModelChangeEventBase;\r\n\r\ninterface ListModelConstructor {\r\n    readonly prototype: ListModel;\r\n    new(): ListModel;\r\n    new<Item>(items: Item[]): ListModel<Item>;\r\n}\r\n\r\ninterface ListModelEventMap {\r\n    \"listmodelchange\": ListModelChangeEvent;\r\n}\r\n\r\ninterface ListModel<Item = any> extends EventTarget {\r\n    get(index: number): Item | undefined;\r\n    getAll(): Item[];\r\n    length(): number;\r\n    set(index: number, item: Item): void;\r\n    setAll(items: Item[]): void;\r\n    insert(index: number, ...items: Item[]): void;\r\n    push(...items: Item[]): number;\r\n    pop(): Item | undefined;\r\n    remove(item: Item): void;\r\n    clear(): void;\r\n\r\n    addEventListener<K extends keyof ListModelEventMap>(type: K, listener: (this: ListModel, ev: ListModelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n    removeEventListener<K extends keyof ListModelEventMap>(type: K, listener: (this: ListModel, ev: ListModelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\r\n}\r\n\r\nclass ListModelBase<Item = any> extends EventTarget implements ListModel<Item> {\r\n    private _items: Item[];\r\n    \r\n    constructor()\r\n    constructor(items: Item[] = []) {\r\n        super();\r\n        this._items = items.slice();\r\n    }\r\n\r\n    public get(index: number): Item | undefined {\r\n        return this._items[index];\r\n    }\r\n\r\n    public getAll(): Item[] {\r\n        return this._items.slice();\r\n    }\r\n\r\n    public length(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    public set(index: number, item: Item): void {\r\n        if (index >= 0 && index < this._items.length) {\r\n            this._items[index] = item;\r\n            this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: [item], removedItems: [], index: index}}));\r\n        }\r\n    }\r\n\r\n    public setAll(items: Item[]): void {\r\n        this._items = items.slice();\r\n    }\r\n\r\n    public push(...items: Item[]): number {\r\n        const newLength = this._items.push(...items);\r\n        this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: items, removedItems: [], index: newLength - items.length}}));\r\n        return newLength;\r\n    }\r\n\r\n    public pop(): Item | undefined {\r\n        const item = this._items.pop();\r\n        if (item) {\r\n            this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: [], removedItems: [item], index: this._items.length}}));\r\n        }\r\n        return item;\r\n    }\r\n\r\n    public insert(index: number, ...items: Item[]): void {\r\n        if (index > this._items.length) {\r\n            index = this._items.length;\r\n        }\r\n        else if (index < 0) {\r\n            if (index < -this._items.length) {\r\n                index = 0;\r\n            }\r\n            else {\r\n                index = this._items.length + index;\r\n            }\r\n        }\r\n        this._items.splice(index, 0, ...items);\r\n        this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: items, removedItems: [], index: index}}));\r\n    }\r\n\r\n    public remove(item: Item): void {\r\n        const itemIndex = this._items.indexOf(item);\r\n        if (itemIndex > -1) {\r\n            this._items.splice(itemIndex, 1);\r\n            this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: [], removedItems: [item], index: itemIndex}}));\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        const removedItems = this._items.slice();\r\n        this._items.splice(0, this._items.length);\r\n        this.dispatchEvent(new ListModelChangeEvent({detail: {addedItems: [], removedItems: removedItems, index: 0}}));\r\n    }\r\n}\r\n\r\nvar ListModel: ListModelConstructor = ListModelBase;","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = 'a',\r\n    B = 'b',\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\",\r\n}\r\n\r\nfunction displayKeyModifier(mod: KeyModifier): string {\r\n    switch (mod) {\r\n        case KeyModifier.Control:\r\n            return \"Ctrl\";\r\n        default:\r\n            return mod;\r\n    }\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nfunction testKeyModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n    switch (mod) {\r\n        case 'Alt':\r\n            return event.altKey;\r\n        case 'Control':\r\n            return event.ctrlKey;\r\n        case 'Shift':\r\n            return event.shiftKey;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nclass HotKey {\r\n    public readonly key: Key;\r\n    public readonly mod1?: KeyModifier;\r\n    public readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.mod1 ? `${displayKeyModifier(this.mod1)}+` : ''}${this.mod2 ? `${displayKeyModifier(this.mod2)}+` : ''}${(this.key.length === 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    public test(event: KeyboardEvent): boolean {\r\n        return ((!this.mod1 || testKeyModifier(this.mod1, event)) && (!this.mod2 || testKeyModifier(this.mod2, event)) && event.key === this.key);\r\n    }\r\n}","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    readonly prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    active: boolean;\r\n    childMenu: HTMLEMenuElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public label!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public disabled!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public active!: boolean;\r\n\r\n    public childMenu: HTMLEMenuElement | null;\r\n\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            position: relative;\r\n                            display: inline-block;\r\n        \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            cursor: pointer;\r\n                            padding: 2px;\r\n                        }\r\n        \r\n                        :host(:hover) {\r\n                            background-color: gainsboro;\r\n                        }\r\n        \r\n                        :host(:focus-within:not(:focus)) {\r\n                            background-color: gainsboro;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                        }\r\n        \r\n                        ::slotted([slot=\"menu\"]) {\r\n                            z-index: 1;\r\n                            position: absolute;\r\n                            color: initial;\r\n                        }\r\n        \r\n                        ::slotted([slot=\"menu\"]) {\r\n                            top: 100%;\r\n                            left: 0;\r\n                        }\r\n                        \r\n                        ::slotted([slot=\"menu\"][overflowing]) {\r\n                            right: 0;\r\n                            left: auto;\r\n                        }\r\n        \r\n                        ::slotted([slot=\"menu\"]:not([expanded])) {\r\n                            opacity: 0;\r\n                            pointer-events: none !important;\r\n                        }\r\n        \r\n                        [part~=\"toggle_arrow\"] {\r\n                            position: relative;\r\n                            display: inline-block;\r\n                            flex: auto;\r\n                            width: 18px;\r\n                            height: 18px;\r\n                        }\r\n        \r\n                        [part~=\"toggle_arrow\"]::after {\r\n                            display: inline-block;\r\n                            text-align: center;\r\n                            width: 18px;\r\n                            position: absolute;\r\n                            content: \"▼\";\r\n                            color: dimgray;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"span\", {\r\n                part: [\"toggle_arrow\"]\r\n            }),\r\n            HTML(\"slot\", {\r\n                properties: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        \r\n        this.childMenu = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n\r\n        this.addEventListener(\"keydown\", this);\r\n        this.addEventListener(\"click\", this);\r\n        this.addEventListener(\"focusout\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                const slottedMenu = (target as HTMLSlotElement).assignedElements()[0];\r\n                this.childMenu = (slottedMenu instanceof HTMLEMenuElement) ? slottedMenu : null;\r\n                break;\r\n            case \"click\":\r\n                if (target instanceof Element && this.childMenu && !this.childMenu.contains(target)) {\r\n                    this.toggle();\r\n                }\r\n                break;\r\n            case \"focusout\":\r\n                const newTarget = (event as FocusEvent).relatedTarget;\r\n                if (newTarget instanceof Element && !this.contains(newTarget)) {\r\n                    this.active = false;\r\n                }\r\n                break;\r\n            case \"keydown\":\r\n                switch ((event as KeyboardEvent).key) {\r\n                    case \"Enter\":\r\n                        if (!this.active) {\r\n                            this.active = true;\r\n                            if (this.childMenu) {\r\n                                this.childMenu.focusItemAt(0);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"Escape\":\r\n                        this.focus();\r\n                        this.active = false;\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public toggle(): void {\r\n        if (!this.active) {\r\n            this.active = true;\r\n            if (this.childMenu) {\r\n                this.childMenu.focusItemAt(0);\r\n            }\r\n        }\r\n        else {\r\n            this.active = false;\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    if (oldValue !== newValue) {\r\n                        const labelPart = this.shadowRoot?.querySelector(\"[part~=label]\");\r\n                        if (labelPart) {\r\n                            labelPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    readonly prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"slot\")\r\n        );\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    readonly prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public disabled!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public active!: boolean;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public controls!: string;\r\n\r\n    public panel: HTMLETabPanelElement | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"active\", \"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            position: relative;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                            padding: 2px 6px;\r\n                            border-left: 3px solid transparent;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: grey;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            border-left: 3px solid dimgray;\r\n                            background-color: whitesmoke;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"slot\")\r\n        );\r\n\r\n        this.panel = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n            this.panel = panel;\r\n        }\r\n        if (this.panel)  {\r\n            this.panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"active\":\r\n                    if (this.active) {\r\n                        this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                    }\r\n                    const panel = document.getElementById(this.controls);\r\n                    if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                        this.panel = panel;\r\n                    }\r\n                    if (this.panel)  {\r\n                        this.panel.hidden = !this.active;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, HTML } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    readonly prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    public tabs: HTMLETabElement[];\r\n\r\n    private _activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this._activeIndex = 1;\r\n    }\r\n\r\n    public get activeIndex(): number {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    public get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this._activeIndex] || null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n                const tabs = (event.target as HTMLSlotElement)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement) as HTMLETabElement[];\r\n                this.tabs = tabs;\r\n                this._activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this._activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    public focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this._activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    public findTab(predicate: (tab: HTMLETabElement) => boolean): HTMLETabElement | null {\r\n        return this.tabs.find(predicate) || null;\r\n    }\r\n\r\n    public activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    readonly prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    name: string;\r\n    items: HTMLETreeItemElement[];\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly selectedItem: HTMLETreeItemElement | null;\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n    reset(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public active!: boolean;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n    \r\n    public items: HTMLETreeItemElement[];\r\n\r\n    private _activeItem: HTMLETreeItemElement | null;\r\n    private _selectedItem: HTMLETreeItemElement | null;\r\n\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        [part~=\"container\"] {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        \r\n        this.items = [];\r\n        this._activeItem = null;\r\n        this._selectedItem = null;\r\n    }\r\n\r\n    public get activeItem(): HTMLETreeItemElement | null {\r\n        return this._activeItem;\r\n    }\r\n\r\n    public get selectedItem(): HTMLETreeItemElement | null {\r\n        return this._selectedItem;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n        \r\n        this.addEventListener(\"click\", this);\r\n        this.addEventListener(\"focusin\", this);\r\n        this.addEventListener(\"focusout\", this);\r\n        this.addEventListener(\"keydown\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        const target = event.target;\r\n        switch (event.type) {\r\n            case \"slotchange\":\r\n                if (target instanceof Element && target.matches(\"slot:not([name])\")) {\r\n                    this.items = (event.target as HTMLSlotElement)\r\n                        .assignedElements()\r\n                        .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                }\r\n                break;\r\n            case \"click\":\r\n                if (target instanceof HTMLETreeItemElement) {\r\n                    this.selectItem(target);\r\n                }\r\n                break;\r\n            case \"focusin\":\r\n                if (!this.active) {\r\n                    this.active = true;\r\n                }\r\n                if (target instanceof Element) {\r\n                    const closestItem = target.closest(\"e-treeitem\");\r\n                    if (closestItem && this.contains(closestItem)) {\r\n                        this.focusItem(closestItem);\r\n                    }\r\n                }\r\n                break;\r\n            case \"focusout\":\r\n                const relatedTarget = (event as FocusEvent).relatedTarget;\r\n                if (relatedTarget instanceof Element && !this.contains(relatedTarget)) {\r\n                    this.active = false;\r\n                    if (this.activeItem) {\r\n                        this.activeItem.active = false;\r\n                    }\r\n                }\r\n            case \"keydown\":\r\n                switch ((event as KeyboardEvent).key) {\r\n                    case \"ArrowLeft\":\r\n                        if (this.activeItem) {\r\n                            if (this.activeItem.expanded) {\r\n                                this.activeItem.toggle();\r\n                            }\r\n                            else {\r\n                                if (this.activeItem.parent instanceof HTMLETreeItemElement) {\r\n                                    this.focusItem(this.activeItem.parent);\r\n                                }\r\n                            }\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"ArrowRight\":\r\n                        if (this.activeItem) {\r\n                            if (!this.activeItem.expanded) {\r\n                                this.activeItem.toggle();\r\n                            }\r\n                            else {\r\n                                if (this.activeItem.items.length > 0) {\r\n                                    this.focusItem(this.activeItem.items[0]);\r\n                                }\r\n                            }\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"ArrowUp\":\r\n                        if (this.activeItem) {\r\n                            this.focusItem(this.activeItem.previousVisibleItem());\r\n                        }\r\n                        else if (this.items.length > 0) {\r\n                            this.focusItem(this.items[0]);\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"ArrowDown\":\r\n                        if (this.activeItem) {\r\n                            this.focusItem(this.activeItem.nextVisibleItem());\r\n                        }\r\n                        else if (this.items.length > 0) {\r\n                            this.focusItem(this.items[this.items.length - 1]);\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"Home\":\r\n                        if (this.items.length > 0) {\r\n                            this.focusItem(this.items[0]);\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"End\":\r\n                        if (this.items.length > 0) {\r\n                            this.focusItem(this.items[this.items.length - 1].deepestVisibleChildItem());\r\n                        }\r\n                        event.preventDefault();\r\n                        break;\r\n                    case \"Enter\":\r\n                        if (this.activeItem) {\r\n                            this.selectItem(this.activeItem);\r\n                            this.activeItem.click();\r\n                        }\r\n                        break;\r\n                    case \"Escape\":\r\n                        this.active = false;\r\n                        this.reset();\r\n                        this.focus();\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public focusItem(item: HTMLETreeItemElement) {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        this._activeItem = item;\r\n        this._activeItem.active = true;\r\n        item.focus();\r\n    }\r\n\r\n    public selectItem(item: HTMLETreeItemElement) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        this._selectedItem.selected = true;\r\n    }\r\n\r\n    public reset(): void {\r\n        if (this.activeItem) {\r\n            this.activeItem.active = false;\r\n        }\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}","import { CustomElement, HTML, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    readonly prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    expanded: boolean;\r\n    indent: number;\r\n    selected: boolean;\r\n    active: boolean;\r\n    leaf: boolean;\r\n\r\n    shadowRoot: ShadowRoot;\r\n    items: HTMLETreeItemElement[];\r\n    parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    deepestVisibleChildItem(): HTMLETreeItemElement;\r\n    previousVisibleItem(): HTMLETreeItemElement;\r\n    nextVisibleItem(): HTMLETreeItemElement;\r\n    nearestParentItem(): HTMLETreeItemElement;\r\n\r\n    toggle(): void;\r\n\r\n    findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_toggle\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public label!: string;\r\n\r\n    @AttributeProperty({type: \"number\"})\r\n    public indent!: number;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public expanded!: boolean;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public value!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public selected!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public active!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public leaf!: boolean;\r\n\r\n    public items: HTMLETreeItemElement[];\r\n    public parent: HTMLETreeItemElement | HTMLETreeElement | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"label\", \"expanded\", \"indent\"];\r\n    }\r\n\r\n    public readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    textContent: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                        \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n                        \r\n                            padding: 0;\r\n                            cursor: pointer;\r\n                        \r\n                            --indent-width: 6px;\r\n                        }\r\n                        \r\n                        [part~=\"content\"]:hover,\r\n                        :host([active]:not([selected])) [part~=\"content\"] {\r\n                            background-color: whitesmoke;\r\n                        }\r\n                        \r\n                        :host([selected]) [part~=\"content\"] {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:not([expanded])) [part~=\"container\"] {\r\n                            display: none;\r\n                        }\r\n                        \r\n                        [part~=\"content\"] {\r\n                            font-size: 1em;\r\n                            display: flex;\r\n                            padding-left: calc(var(--tree-indent) * var(--indent-width));\r\n                            pointer-events: auto;\r\n                        }\r\n                        \r\n                        [part~=\"label\"],\r\n                        ::slotted([slot=\"label\"]) {\r\n                            display: block;\r\n                            width: 100%;\r\n                            pointer-events: none;\r\n                            overflow: hidden;\r\n                            white-space: nowrap;\r\n                            text-overflow: ellipsis;\r\n                        }\r\n                        \r\n                        :host([leaf]) [part~=\"container\"],\r\n                        [part~=\"container\"]:empty {\r\n                            display: none;\r\n                        }\r\n                        \r\n                        [part~=\"toggle-arrow\"] {\r\n                            flex: none;\r\n                            display: inline-block;\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            margin: 2px;\r\n                            margin-right: 6px;\r\n                            border-radius: 2px;\r\n                        }\r\n                        \r\n                        :host([leaf]) [part~=\"toggle-arrow\"] {\r\n                            visibility: hidden;\r\n                        }\r\n                        \r\n                        [part~=\"toggle-arrow\"]::after {\r\n                            display: inline-block;\r\n                            width: 18px;\r\n                            height: 18px;\r\n                            position: absolute;\r\n                            color: dimgray;\r\n                            text-align: center;\r\n                        }\r\n                        \r\n                        :host(:not([expanded])) [part~=\"toggle-arrow\"]::after {\r\n                            content: \"►\";\r\n                        }\r\n                        \r\n                        :host([expanded]) [part~=\"toggle-arrow\"]::after {\r\n                            content: \"▼\";\r\n                        }\r\n                        \r\n                        [part~=\"state\"] {\r\n                            flex: none;\r\n                        }\r\n                        \r\n                        [part~=\"container\"] {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            pointer-events: none;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"span\", {\r\n                part: [\"content\"],\r\n                children: [\r\n                    HTML(\"span\", {\r\n                        part: [\"toggle-arrow\"]\r\n                    }),\r\n                    HTML(\"slot\", {\r\n                        properties: {\r\n                            name: \"label\",\r\n                        },\r\n                        children: [\r\n                            HTML(\"span\", {\r\n                                part: [\"label\"]\r\n                            }),\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        \r\n        this.items = [];\r\n        this.parent = null;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n        \r\n        this.indent = (() => {\r\n            let indent = 0;\r\n            let item: Element = this;\r\n            while (item.parentElement instanceof HTMLETreeItemElement) {\r\n                indent++;\r\n                item = item.parentElement;\r\n            }\r\n            if (item.parentElement instanceof HTMLETreeElement) {\r\n                indent++;\r\n            }\r\n            return indent;\r\n        })();\r\n\r\n        this.parent = (\r\n            this.parentElement instanceof HTMLETreeItemElement ||\r\n            this.parentElement instanceof HTMLETreeElement\r\n        ) ? this.parentElement : null;\r\n\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n        this.shadowRoot.addEventListener(\"slotchange\", this);\r\n    }\r\n\r\n    public handleEvent(event: Event) {\r\n        if (!(event.target instanceof Element)) {\r\n            throw new Error(\"Target must be of type Element.\");\r\n        }\r\n        switch (event.type) {\r\n            case \"click\":\r\n                if (event.target.matches(\"[part~=content]\")) {\r\n                    if (!this.leaf) {\r\n                        this.toggle();\r\n                    }\r\n                }\r\n                break;\r\n            case \"slotchange\":\r\n                if (event.target.matches(\"slot:not([name])\")) {\r\n                    this.items = (event.target as HTMLSlotElement)\r\n                        .assignedElements()\r\n                        .filter(item => item instanceof HTMLETreeItemElement) as HTMLETreeItemElement[];\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"label\":\r\n                    const labelPart = this.shadowRoot.querySelector(\"[part~=label]\");\r\n                    if (labelPart) {\r\n                        labelPart.textContent = newValue;\r\n                    }\r\n                    break;\r\n                case \"expanded\":\r\n                    this.dispatchEvent(new CustomEvent(\"e_toggle\", {bubbles: true}));\r\n                    break;\r\n                case \"indent\":\r\n                    this.style.setProperty(\"--tree-indent\", newValue);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public deepestVisibleChildItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            let lastChildItem = this.items[this.items.length - 1];\r\n            return lastChildItem.deepestVisibleChildItem();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public previousVisibleItem(): HTMLETreeItemElement {\r\n        if (this.parent) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis > 0) {\r\n                let previousItem = this.parent.items[indexOfThis - 1];\r\n                return previousItem.deepestVisibleChildItem();\r\n            }\r\n            return this.parent instanceof HTMLETreeItemElement ? this.parent : this;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nextVisibleItem(): HTMLETreeItemElement {\r\n        if (this.expanded && this.items.length > 0) {\r\n            return this.items[0];\r\n        }\r\n        let nearestItem = this.nearestParentItem();\r\n        if (nearestItem.parent) {\r\n            let indexOfNearest = nearestItem.parent.items.indexOf(nearestItem);\r\n            if (indexOfNearest < nearestItem.parent.items.length - 1) {\r\n                return nearestItem.parent.items[indexOfNearest + 1];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public nearestParentItem(): HTMLETreeItemElement {\r\n        if (this.parent instanceof HTMLETreeItemElement) {\r\n            let indexOfThis = this.parent.items.indexOf(this);\r\n            if (indexOfThis === this.parent.items.length - 1) {\r\n                return this.parent.nearestParentItem();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public toggle(): void {\r\n        this.expanded = !this.expanded;\r\n    }\r\n\r\n    public findItem(predicate: (item: HTMLETreeItemElement) => boolean, subtree?: boolean): HTMLETreeItemElement | null {\r\n        let foundItem: HTMLETreeItemElement | null = null;\r\n        for (let item of this.items) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n            if (subtree && item.items) {\r\n                for (let subitem of item.items) {\r\n                    foundItem = subitem.findItem(predicate, subtree);\r\n                    if (foundItem) {\r\n                        return foundItem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return foundItem;\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    readonly prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n\r\n    getReference(): this;\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: \"boolean\"})\r\n    public selected!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public dragged!: boolean;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public disabled!: boolean;\r\n\r\n    private _referee: this | null;\r\n    public readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: gray;\r\n                            border-color: gray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\", {\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this._referee = null;\r\n    }\r\n\r\n    public get referee(): this | null {\r\n        return this._referee;\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    public disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getReference(): this {\r\n        const reference = this.cloneNode(true) as this;\r\n        reference._referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    readonly prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    draggables: HTMLEDraggableElement[];\r\n    selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public disabled!: boolean;\r\n\r\n    public draggables: HTMLEDraggableElement[];\r\n    public selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part~=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"container\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        \r\n        this.draggables = [];\r\n        this.selectedDraggables = [];\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            let targetIndex = this.draggables.indexOf(target);\r\n                            let firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            let direction = Math.sign(targetIndex - firstIndex);\r\n                            let fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            let toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            let startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            let endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button === 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    readonly prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: \"string\"})\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public placeholder!: string;\r\n\r\n    @AttributeProperty({type: \"boolean\"})\r\n    public multiple!: boolean;\r\n\r\n    public droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    public static get observedAttributes(): string[] {\r\n        return [\"placeholder\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot!.append(\r\n            HTML(\"div\", {\r\n                part: [\"appendarea\"],\r\n                children: [\r\n                    HTML(\"span\", {\r\n                        part: [\"placeholder\"],\r\n                        properties: {\r\n                            textContent: \"&nbsp;\"\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n\r\n    public selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        draggable.selected = true;\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n    }\r\n\r\n    public unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        let index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            draggable.selected = false;\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.selectedDraggables = [];\r\n    }\r\n    \r\n    public connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"placeholder\":\r\n                    if (oldValue !== newValue) {\r\n                        const placeholderPart = this.shadowRoot?.querySelector(\"[part~=placeholder]\");\r\n                        if (placeholderPart) {\r\n                            placeholderPart.textContent = newValue;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    readonly prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype EDialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    name: string;\r\n    type: EDialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_open\": Event,\r\n        \"e_close\": Event,\r\n        \"e_cancel\": Event,\r\n        \"e_confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    public name!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public type!: EDialogElementType;\r\n\r\n    private _closeButton: HTMLButtonElement;\r\n    private _cancelButton: HTMLButtonElement;\r\n    private _confirmButton: HTMLButtonElement;\r\n    private _okButton: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part~=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part~=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part~=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part~=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part~=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part~=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"header\"],\r\n                children: [\r\n                    HTML(\"button\", {\r\n                        part: [\"button\", \"close-button\"],\r\n                        properties: {\r\n                            textContent: \"x\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            HTML(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"body\"],\r\n                children: [\r\n                    HTML(\"slot\")\r\n                ]\r\n            }),\r\n            HTML(\"hr\", {\r\n                part: [\"separator\"]\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"actions\"],\r\n                children: [\r\n                    HTML(\"button\", {\r\n                        part: [\"button\", \"cancel-button\"],\r\n                        properties: {\r\n                            textContent: \"Cancel\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    HTML(\"button\", {\r\n                        part: [\"button\", \"confirm-button\"],\r\n                        properties: {\r\n                            textContent: \"Confirm\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    }),\r\n                    HTML(\"button\", {\r\n                        part: [\"button\", \"ok-button\"],\r\n                        properties: {\r\n                            textContent: \"OK\",\r\n                            type: \"button\",\r\n                            tabIndex: 0\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n\r\n        this._closeButton = this.shadowRoot!.querySelector(\"[part~=close-button]\")!;\r\n        this._cancelButton = this.shadowRoot!.querySelector(\"[part~=cancel-button]\")!;\r\n        this._confirmButton = this.shadowRoot!.querySelector(\"[part~=confirm-button]\")!;\r\n        this._okButton = this.shadowRoot!.querySelector(\"[part~=ok-button]\")!;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        this.shadowRoot!.addEventListener(\"mousedown\", (event) => {\r\n            let target = event.target as Element;\r\n            if (target === this._closeButton || target === this._cancelButton) {\r\n                this.cancel();\r\n            }\r\n            else if (target === this._confirmButton || target === this._okButton) {\r\n                this.confirm();\r\n            }\r\n        });\r\n    }\r\n\r\n    public open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_open\", {bubbles: true}));\r\n    }\r\n\r\n    public close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_close\", {bubbles: true}));\r\n    }\r\n\r\n    public cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    public confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"e_confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, HTML } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ntype EHeightSashDirection = \"top\" | \"bottom\";\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    readonly prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EHeightSashDirection;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public controls!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public growdir!: EHeightSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    public static get observedAttributes() {\r\n        return [\"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            z-index: 1;\r\n        \r\n                            max-height: 4px;\r\n                            height: 4px;\r\n                            min-height: 4px;\r\n        \r\n                            margin-top: -2px;\r\n                            margin-bottom: -2px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n                            cursor: ns-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n        \r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let height = parseFloat(this._targetStyle.getPropertyValue(\"height\"));\r\n                let newHeight = Math.trunc(height + ((this.growdir === \"top\") ? -1 : 1) * event.movementY);\r\n                this._target.style.setProperty(\"height\", `${newHeight}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", (event) => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\nexport { HTMLEImportElementBase };\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public src!: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    public connectedCallback(): void {\r\n        const importRequest = async (src: string) => {\r\n            this.outerHTML = await fetch(src).then((response: Response) => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.statusText);\r\n                }\r\n            });\r\n            this.dispatchEvent(new CustomEvent(\"e_load\"));\r\n        }\r\n        if (this.src) {\r\n            importRequest(this.src);\r\n        }\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement,\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_load\": CustomEvent\r\n    }\r\n}","import { CustomElement, AttributeProperty, HTML } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\nexport { HTMLELoaderElementBase };\r\n\r\ntype LoaderType = \"bar\" | \"circle\";\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    type: LoaderType;\r\n    promise: Promise<any> | null;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public type!: LoaderType;\r\n    \r\n    private _promise: Promise<any> | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                        }\r\n                        \r\n                        :host([type=\"bar\"]) {\r\n                            display: inline-block;\r\n                            width: 64px;\r\n                        }\r\n        \r\n                        :host([type]:not([type=\"circle\"])) [part~=\"circle\"] {\r\n                            display: none !important;\r\n                        }\r\n                        \r\n                        :host(:not([type=\"bar\"])) [part~=\"bar\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        [part~=\"circle\"] {\r\n                            position: relative;\r\n                            width: 12px;\r\n                            height: 12px;\r\n                            border-top: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                            border-right: 4px solid var(--loader-color, rgb(0, 128, 255));\r\n                            border-left: 4px solid transparent;\r\n                            border-bottom: 4px solid transparent;\r\n                            border-radius: 50%;\r\n                            animation-duration: 1s;\r\n                            animation-name: circle;\r\n                            animation-timing-function: linear;\r\n                            animation-iteration-count: infinite;\r\n                        }\r\n        \r\n                        @keyframes circle {\r\n                            0% {\r\n                                transform: rotate(0);\r\n                            }\r\n                            100% {\r\n                                transform: rotate(360deg);\r\n                            }\r\n                        }\r\n        \r\n                        [part~=\"bar\"] {\r\n                            display: block;\r\n                            position: relative;\r\n                            overflow: hidden;\r\n                        }\r\n        \r\n                        [part~=\"slider\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            will-change: transform;\r\n                            animation-duration: 1s;\r\n                            animation-name: slider;\r\n                            animation-timing-function: linear;\r\n                            animation-iteration-count: infinite;\r\n                        }\r\n        \r\n                        [part~=\"cursor\"] {\r\n                            position: relative;\r\n                            display: inline-block;\r\n                            width: 32px;\r\n                            height: 4px;\r\n                            background-color: var(--loader-color, rgb(0, 128, 255));\r\n                            border-radius: 4px;\r\n        \r\n                            will-change: transform;\r\n                            animation-duration: 1s;\r\n                            animation-name: cursor;\r\n                            animation-timing-function: linear;\r\n                            animation-iteration-count: infinite;\r\n                        }\r\n        \r\n                        @keyframes slider {\r\n                            0% {\r\n                                transform: translateX(0);\r\n                            }\r\n                            100% {\r\n                                transform: translateX(100%);\r\n                            }\r\n                        }\r\n        \r\n                        @keyframes cursor {\r\n                            0% {\r\n                                transform: translateX(-100%);\r\n                            }\r\n                            100% {\r\n                                transform: translateX(100%);\r\n                            }\r\n                        }\r\n                    `\r\n                }\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"bar\"],\r\n                children: [\r\n                    HTML(\"div\", {\r\n                        part: [\"slider\"],\r\n                        children: [\r\n                            HTML(\"div\", {\r\n                                part: [\"cursor\"]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            HTML(\"div\", {\r\n                part: [\"circle\"]\r\n            })\r\n        );\r\n        \r\n        this._promise = null;\r\n    }\r\n\r\n    public set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this._promise = promise;\r\n    }\r\n\r\n    public get promise(): Promise<any> | null {\r\n        return this._promise;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, HTML } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ntype EWidthSashDirection = \"left\" | \"right\";\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    readonly prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n    readonly observedAttributes: string[];\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    controls: string;\r\n    growdir: EWidthSashDirection;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n\r\n    interface HTMLElementEventMap {\r\n        \"e_resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public controls!: string;\r\n\r\n    @AttributeProperty({type: \"string\"})\r\n    public growdir!: EWidthSashDirection;\r\n\r\n    private _target: HTMLElement | null;\r\n    private _targetStyle: CSSStyleDeclaration | null;\r\n\r\n    public static get observedAttributes() {\r\n        return [\"controls\"];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            HTML(\"style\", {\r\n                properties: {\r\n                    innerText: /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            z-index: 1;\r\n        \r\n                            min-width: 4px;\r\n                            width: 4px;\r\n                            max-width: 4px;\r\n        \r\n                            margin-left: -2px;\r\n                            margin-right: -2px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n                            cursor: ew-resize;\r\n        \r\n                            transition-property: opacity;\r\n                            transition-delay: 0.2s;\r\n                            transition-duration: 0.2s;\r\n                            transition-timing-function: ease-out;\r\n                            opacity: 0;\r\n                        }\r\n        \r\n                        :host(:active),\r\n                        :host(:hover) {\r\n                            opacity: 1;\r\n                        }\r\n                    `\r\n                }\r\n            })\r\n        );\r\n\r\n        this._target = null;\r\n        this._targetStyle = null;\r\n    }\r\n\r\n    public connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        let onPointerMove = (event: PointerEvent) => {\r\n            if (this._target && this._targetStyle) {\r\n                let width = parseFloat(this._targetStyle.getPropertyValue(\"width\"));\r\n                let newWidth = Math.trunc(width + ((this.growdir === \"left\") ? -1 : 1) * event.movementX);\r\n                this._target.style.setProperty(\"width\", `${newWidth}px`);\r\n                this.dispatchEvent(new CustomEvent(\"e_resize\"));\r\n            }\r\n        };\r\n\r\n        this.addEventListener(\"pointerdown\", (event: PointerEvent) => {\r\n            const target = document.getElementById(this.controls);\r\n            if (target && this._target !== target) {\r\n                this._target = target;\r\n                this._targetStyle = window.getComputedStyle(target);\r\n            }\r\n            this.setPointerCapture(event.pointerId);\r\n            this.addEventListener(\"pointermove\", onPointerMove);\r\n            this.addEventListener(\"pointerup\", () => {\r\n                this.removeEventListener(\"pointermove\", onPointerMove);\r\n                this.releasePointerCapture(event.pointerId);\r\n            });\r\n        });\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string): void {\r\n        if (newValue !== oldValue) {\r\n            switch (name) {\r\n                case \"controls\":\r\n                    if (oldValue !== newValue) {\r\n                        const target = document.getElementById(this.controls);\r\n                        if (target) {\r\n                            this._target = target;\r\n                            this._targetStyle = window.getComputedStyle(target);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { HTML } from \"../elements/Element\";\r\nimport { ReactiveNodesObserver } from \"../observers/ReactiveNodesObserver\";\r\n\r\nexport interface HTMLView extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    render(): HTMLElement;\r\n    refresh(): void;\r\n}\r\n\r\nexport interface ViewConstructor {\r\n    readonly prototype: HTMLView;\r\n    readonly styles: string | undefined;\r\n}\r\n\r\nexport abstract class HTMLViewBase extends HTMLElement implements HTMLView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const observer = new ReactiveNodesObserver();\r\n        observer.observe(shadowRoot);\r\n        setTimeout(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    public static styles: string | undefined;\r\n    public abstract render(): HTMLElement;\r\n\r\n    public refresh(): void {\r\n        const styles = (this.constructor as typeof HTMLViewBase).styles;\r\n        if (styles !== void 0) {\r\n            this.shadowRoot.replaceChildren(\r\n                HTML(\"style\", {\r\n                    properties: {\r\n                        textContent: styles,\r\n                    }\r\n                }),\r\n                this.render()\r\n            );\r\n        }\r\n        else {\r\n            this.shadowRoot.replaceChildren(\r\n                this.render()\r\n            );\r\n        }\r\n    }\r\n}","import { isReactiveNode, isReactiveParentNode } from \"../elements/Element\";\r\n\r\nexport { ReactiveNodesObserver };\r\n\r\ninterface ReactiveNodesObserverConstructor {\r\n    readonly prototype: ReactiveNodesObserver;\r\n    new(): ReactiveNodesObserver;\r\n}\r\n\r\ninterface ReactiveNodesObserver {\r\n    observe(target: Node): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass ReactiveNodesObserverBase implements ReactiveNodesObserver {\r\n    private _observer: MutationObserver;\r\n\r\n    constructor() {\r\n        this._observer = new MutationObserver(\r\n            this.callback.bind(this)\r\n        );\r\n    }\r\n\r\n    public callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                this.addReactListenersInSubtree(node);\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                this.removeReactListenersInSubtree(node);\r\n            });\r\n        });\r\n    }\r\n\r\n    public observe(target: Node): void  {\r\n        this._observer.observe(target, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        \r\n        this.addReactListenersInSubtree(target);\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this._observer.disconnect();\r\n    }\r\n\r\n    private addReactListenersInSubtree(node: Node) {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.addReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.addReactListener();\r\n        }\r\n        let childIndex = 0;\r\n        while (childIndex < node.childNodes.length) {\r\n            const child = node.childNodes.item(childIndex);\r\n            if (child !== null) {\r\n                this.addReactListenersInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    private removeReactListenersInSubtree(node: Node) {\r\n        if (isReactiveNode(node)) {\r\n            node._reactiveNodeAttributes.removeReactListener();\r\n        }\r\n        if (isReactiveParentNode(node)) {\r\n            node._reactiveParentNodeAttributes.removeReactListener();\r\n        }\r\n        let childIndex = 0;\r\n        while (childIndex < node.childNodes.length) {\r\n            const child = node.childNodes.item(childIndex);\r\n            if (child !== null) {\r\n                this.removeReactListenersInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar ReactiveNodesObserver: ReactiveNodesObserverConstructor = ReactiveNodesObserverBase;","import { HTML, ReactiveChildNodes, ReactiveNode, CustomElement } from \"../elements/Element\";\r\nimport { ListModel, ObjectModel } from \"../models/Model\";\r\nimport { HTMLView, HTMLViewBase } from \"./View\";\r\n\r\nexport class TreeModel extends ObjectModel {\r\n    public items: ListModel<TreeItemModel>;\r\n    \r\n    constructor(items: TreeItemModel[] = []) {\r\n        super();\r\n        this.items = new ListModel(items);\r\n    }\r\n}\r\n\r\nexport class TreeItemModel extends ObjectModel {\r\n    public items: ListModel<TreeItemModel>;\r\n    public label: string;\r\n\r\n    constructor(label: string, items: TreeItemModel[] = []) {\r\n        super();\r\n        this.label = label;\r\n        this.items = new ListModel(items);\r\n    }\r\n}\r\n\r\ninterface HTMLVTreeView extends HTMLView {\r\n    model: TreeModel;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"v-treeview\": HTMLVTreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"v-treeview\"\r\n})\r\nclass HTMLVTreeViewBase extends HTMLViewBase implements HTMLVTreeView {\r\n    model: TreeModel;\r\n\r\n    constructor() {\r\n        super();\r\n        this.model = new TreeModel();\r\n    }\r\n\r\n    private renderTreeItem(item: TreeItemModel): Node {\r\n        return ReactiveNode(item,\r\n            HTML(\"e-treeitem\", {\r\n                part: [\r\n                    \"treeitem\"\r\n                ],\r\n                exportparts: [\r\n                    \"content: treeitem-content\",\r\n                    \"container: treeitem-container\"\r\n                ],\r\n                properties: {\r\n                    label: item.label,\r\n                    leaf: item.items.length() === 0\r\n                },\r\n                children: ReactiveChildNodes(item.items,\r\n                    item => this.renderTreeItem(item)\r\n                )\r\n            }),\r\n            (node, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"label\":\r\n                        node.label = (newValue as TreeItemModel[\"label\"]);\r\n                        break;\r\n                    case \"items\":\r\n                        node.leaf = (newValue as TreeItemModel[\"items\"]).length() === 0;\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    public render() {\r\n        return HTML(\"e-tree\", {\r\n            part: [\r\n                \"tree\"\r\n            ],\r\n            exportparts: [\r\n                \"container: tree-container\"\r\n            ],\r\n            children: ReactiveChildNodes(\r\n                this.model.items, item => this.renderTreeItem(item)\r\n            )\r\n        });\r\n    }\r\n}","import { HTML } from \"./index\";\r\n\r\nimport { TreeItemModel, TreeModel } from \"./src/views/TreeView\";\r\n\r\nexport async function main() {\r\n    document.body.append(HTML(\"v-treeview\", {\r\n        properties: {\r\n            model: new TreeModel([\r\n                new TreeItemModel(\"TI 1\", [\r\n                    new TreeItemModel(\"TI 1A\", [\r\n                        new TreeItemModel(\"TI 1AX\"),\r\n                    ]),\r\n                    new TreeItemModel(\"TI 1B\")\r\n                ]),\r\n                new TreeItemModel(\"TI 2\"),\r\n                new TreeItemModel(\"TI 3\")\r\n            ])\r\n        }\r\n    }));\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","camelToTrain","str","replace","toLowerCase","CustomElement","init","elementCtor","name","options","customElements","define","AttributeProperty","target","propertyKey","type","propertyName","toString","attributeName","constructor","this","hasAttribute","set","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","parseFloat","HTML","tagName","element","document","createElement","is","properties","part","exportparts","attributes","dataset","children","listeners","styles","keys","forEach","assign","add","join","attributeValue","property","Array","isArray","style","setProperty","datasetEntry","replaceChildren","from","entries","entry","addEventListener","isReactiveNode","node","_reactiveNodeAttributes","addReactListener","removeReactListener","isReactiveParentNode","_reactiveParentNodeAttributes","ReactiveChildNodes","list","map","placeholder","parent","mapping","item","DocumentFragment","console","warn","firstChild","listener","event","listLength","length","detail","addedItems","removedItems","i","childNodes","index","remove","addedNodes","append","before","removeEventListener","getAll","HTMLEMenuItemGroupElementBase","HTMLElement","super","attachShadow","mode","textContent","_activeIndex","parentMenu","items","activeIndex","connectedCallback","tabIndex","shadowRoot","handleEvent","assignedElements","filter","elem","HTMLEMenuItemElement","checked","checkedRadio","findItem","newTarget","relatedTarget","Element","contains","reset","targetIndex","indexOf","focus","focusItemAt","thisRect","getBoundingClientRect","thisIntersectsWithMouse","left","clientX","right","top","clientY","bottom","includes","findIndex","stopPropagation","activeItem","click","childMenu","attributeChangedCallback","oldValue","newValue","label","querySelector","predicate","subitems","foundItem","HTMLEMenuItemGroupElement","HTMLEMenuElementBase","innerText","parentItem","parentElement","expanded","parentGroup","group","HTMLEMenuElement","body","clientWidth","overflowing","HTMLEMenuBarElementBase","activeElement","active","preventDefault","subtree","HTMLEMenuBarElement","HTMLEMenuItemElementBase","command","_hotkey","hotkey","dispatchEvent","CustomEvent","bubbles","oldHotKey","newHotKey","hotkeyPart","slottedMenu","labelPart","inputPart","disabled","ObjectModelChangeEventBase","eventInitDict","ObjectModelChangeEvent","ObjectModelBase","EventTarget","_listmodelListeners","Map","Proxy","receiver","Reflect","bind","ListModel","has","listmodelListener","delete","ObjectModel","ListModelChangeEventBase","ListModelChangeEvent","ListModelBase","_items","slice","setAll","push","newLength","pop","insert","splice","itemIndex","clear","Key","KeyModifier","MouseButton","HTMLEMenuButtonElementBase","toggle","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","controls","hidden","tab","HTMLETabElement","HTMLETabListElementBase","tabs","slot","focusTabAt","activeTab","activateTab","thisTab","thisTabIndex","findTab","find","HTMLETreeElementBase","_activeItem","_selectedItem","matches","HTMLETreeItemElement","selectItem","closestItem","closest","focusItem","previousVisibleItem","nextVisibleItem","deepestVisibleChildItem","selected","subitem","HTMLETreeElement","HTMLETreeItemElementBase","indent","Error","leaf","indexOfThis","nearestItem","nearestParentItem","indexOfNearest","HTMLEDraggableElementBase","references","_referee","draggable","disconnectedCallback","referee","thisRefIndex","getReference","reference","cloneNode","HTMLEDraggableElement","HTMLEDragzoneElementBase","draggables","selectedDraggables","selectDraggable","unselectDraggable","clearSelection","thisSelectedDraggable","dragged","dataTransfer","dropEffect","setData","id","thisDraggedDraggable","button","shiftKey","ctrlKey","firstIndex","direction","Math","sign","fromIndex","toIndex","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","getData","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","position","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","toRemove","atPosition","HTMLEDialogElementBase","_closeButton","_cancelButton","_confirmButton","_okButton","cancel","confirm","open","close","HTMLEHeightSashElementBase","_target","_targetStyle","onPointerMove","height","getPropertyValue","newHeight","trunc","growdir","movementY","window","getComputedStyle","setPointerCapture","pointerId","releasePointerCapture","HTMLEImportElementBase","src","async","outerHTML","fetch","then","response","ok","text","statusText","importRequest","HTMLELoaderElementBase","_promise","promise","finally","HTMLEWidthSashElementBase","width","newWidth","movementX","HTMLViewBase","_observer","MutationObserver","callback","mutationsList","mutation","addReactListenersInSubtree","removedNodes","removeReactListenersInSubtree","observe","childList","disconnect","childIndex","child","setTimeout","refresh","render","TreeModel","TreeItemModel","HTMLVTreeViewBase","model","renderTreeItem","objectOrList","react","ReactiveNode","main"],"sourceRoot":""}