{"version":3,"file":"main.js","mappings":"4BACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,quBC2CvD,MAAMC,EAYFC,YACIC,GAaAC,KAAKC,OAASF,EAAKE,OACnBD,KAAKE,WAAaH,EAAKG,WACvBF,KAAKG,aAAeJ,EAAKI,cAAgB,KACzCH,KAAKI,SAAWL,EAAKK,eAAYC,EACjCL,KAAKM,SAAWP,EAAKO,eAAYD,EACjCL,KAAKO,aAAeR,EAAKQ,cAAgB,EACzCP,KAAKQ,aAAe,IAAIC,EAAeV,EAAKS,cAAgB,IAC5DR,KAAKU,cAAgBX,EAAKW,eAAiB,EAC3CV,KAAKW,cAAgB,IAAIF,EAAeV,EAAKY,eAAiB,IAC9DX,KAAKY,cAAgBb,EAAKa,eAAiB,GAG/C,6BACI,OAAO,EAGX,yBACI,OAAO,EAGX,yBACI,OAAO,EAGX,uBACI,OAAO,EAGX,sBACI,OAAOf,EAAsBgB,gBAGjC,kBACI,OAAOhB,EAAsBiB,YAGjC,kBACI,OAAOjB,EAAsBkB,YAGjC,gBACI,OAAOlB,EAAsBmB,WAIrC,IAAIC,EAAkDpB,E,cAiCtD,IAAIY,EApBJ,MAGIX,YAAYoB,GAFZ,mBAGI,EAAAlB,KAAI,EAAUkB,EAAMC,QAAO,KAG/B,aACI,OAAO,EAAAnB,KAAI,OAAQoB,OAGvBC,KAAKC,GACD,OAAO,EAAAtB,KAAI,OAAQsB,IAAU,KAGjCC,SACI,OAAO,EAAAvB,KAAI,OAAQuB,WAiB3B,MAAMC,EAMF1B,YAAY2B,GAHZ,mBACA,mBAGIzB,KAAKyB,KAAOA,EACZ,EAAAzB,KAAI,EAAkB,KAAI,KAC1B,EAAAA,KAAI,EAAW,KAAI,KAGvB,oBACI,OAAO,EAAAA,KAAI,OAGf,aACI,OAAO,EAAAA,KAAI,Q,4BAGR,EAAA0B,yBAA4B,IAAI,MACnCC,iBAAiBC,EAAmBC,GAC5BD,aAAiBJ,GACjB,EAAAI,EAAK,EAAkBC,EAAa,KAI5CC,UAAUF,EAAmB3B,GACrB2B,aAAiBJ,GACjB,EAAAI,EAAK,EAAW3B,EAAM,OAWtC,IAAIyB,EAAqDF,EAAeE,gCACjEF,EAAeE,yBAEtB,IAAIK,EAAoCP,E,cAmFxC,MAAMQ,UArEN,MAGIlC,cAFA,mBAGI,EAAAE,KAAI,EAAc,IAAIiC,IAAK,KAG/BC,aAAaN,GACT,MAAM,KAACH,GAAQG,EACTO,EAAY,EAAAnC,KAAI,OAAYZ,IAAIqC,GACtCC,EAAyBC,iBAAiBC,EAAO5B,MAC7CmC,GACAA,EAAUC,SAASC,IACfA,EAAWT,MAKvBU,iBAAiBb,EAAcc,GAC3B,MAAMJ,EAAY,EAAAnC,KAAI,OAAYZ,IAAIqC,GAClCU,EACAA,EAAUK,KAAKD,GAGf,EAAAvC,KAAI,OAAYyC,IAAIhB,EAAM,CAACc,IAInCG,oBAAoBjB,EAAcc,GAC9B,MAAMJ,EAAY,EAAAnC,KAAI,OAAYZ,IAAIqC,GACtC,GAAIU,EAAW,CACX,MAAMQ,EAAgBR,EAAUS,WAC5BP,GAAcA,GAAcE,IAE5BI,GAAiB,GACjBR,EAAUU,OAAOF,EAAe,GAEZ,GAApBR,EAAUf,QACV,EAAApB,KAAI,OAAY8C,OAAOrB,IAKnCsB,cAAcnB,GACVF,EAAyBI,UAAUF,EAAO5B,MAC1CA,KAAKkC,aAAaN,KA6BtB9B,cACIkD,Q,YALJ,mBACA,mBACA,mBAII,EAAAhD,KAAI,EAAe,KAAI,KACvB,EAAAA,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAgB,EAAK,KAG7B,iBACI,OAAO,EAAAA,KAAI,OAGfiD,UAAUC,GACN,GAAmB,OAAfA,EAAqB,CACrB,IAAIC,EAAoBD,GAAclD,MACjCkD,WAAYE,GAAgBF,EACjC,MAAQC,GAAsC,OAAjBC,KACvBF,WAAYE,GAAgBA,GAC9BD,EAAoBC,GAAgBpD,KAExC,GAAKmD,EAID,MAAM,IAAIE,UAAU,oFAHpB,EAAArD,KAAI,EAAekD,EAAU,UAOjC,EAAAlD,KAAI,EAAe,KAAI,KAI/BsD,eACI,EAAAtD,KAAI,GAAgB,EAAI,KAG5BuD,aACIvD,KAAK+C,cAAc,IAAIhB,EAAW,gBAClC,EAAA/B,KAAI,OAAU6C,OAAO,GACrB,EAAA7C,KAAI,GAAgB,EAAK,KAG7BwD,aACI,OAAO,EAAAxD,KAAI,OAAUmB,QAGzBe,aAAaN,GACToB,MAAMd,aAAaN,GACnB,MAAM,WAACsB,GAAclD,KACjBkD,GACAA,EAAWhB,aAAaN,I,mEAIjB6B,EAAkBrD,EAAeE,GAC5C,MAAMoD,EAAU,EAAA1D,KAAI,OACd2D,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBJ,gBAC9BV,aAAcsD,EACdrD,SAAAA,EAAUE,SAAAA,IAEdoD,EAAQlB,KAAKmB,GACb3D,KAAK+C,cAAc,IAAIhB,EAAW,gBAClC2B,EAAQb,OAAO,IAClB,WAEac,GACV,EAAA3D,KAAI,OAAUwC,KAAKmB,GACd,EAAA3D,KAAI,SACLA,KAAK+C,cAAc,IAAIhB,EAAW,gBAClC,EAAA/B,KAAI,OAAU6C,OAAO,KAItB,EAAAe,yBAA4B,IAAI,MACnCC,cAAcC,EAAiBL,EAAkBrD,EAAeE,GACxDwD,aAAgB9B,GAChB,EAAA8B,EAAI,SAAe,KAAnBA,EAAoBL,EAAUrD,EAAUE,GAIhDyD,aAAaD,EAAiBH,GACtBG,aAAgB9B,GAChB,EAAA8B,EAAI,SAAc,KAAlBA,EAAmBH,KAMnC,IAAIC,EAAqD5B,EAAc4B,gCAChE5B,EAAc4B,yBAErB,IAAII,EAAkChC,EAUtC,MAAMiC,EAAwC,SAC1ClE,GAIA,MAAO,CACHE,EAAqBwD,KAErB,MAAM,YAAC3D,GAAeG,GAChB,UAACV,GAAaO,EAwBpBb,OAAOC,eAAeK,EAAWkE,EAAU,CACvChB,IAZW,SAA4B7C,GACvC,MAAMQ,EAAW8D,EAA8BC,YAAYnE,KAAMyD,GAKjE,OAJAS,EAA8BE,YAAYpE,KAAMyD,EAAU7D,GACtDA,IAAUQ,GACVwD,EAAyBC,cAAc7D,KAAMyD,EAAUrD,EAAUR,IAE9D,GAOPR,IALW,WACX,OAAO8E,EAA8BC,YAAYnE,KAAMyD,IAKvDtE,YAAY,MAiBxB,MAAMkF,UAAwBrC,EAG1BlC,cACIkD,QAHJ,mBAII,EAAAhD,KAAI,EAAe,IAAIiC,IAAK,M,cAGzB,EAAAiC,8BAAiC,IAAI,MACxCE,YAAYN,EAAmBL,EAAkB7D,GACzCkE,aAAgBO,GAChB,EAAAP,EAAI,OAAarB,IAAIgB,EAAU7D,GAIvCuE,YAAYL,EAAmBL,GAC3B,GAAIK,aAAgBO,EAChB,OAAO,EAAAP,EAAI,OAAa1E,IAAIqE,KAM5C,IAAIS,EAA+DG,EAAgBH,qCAC5EG,EAAgBH,8BAEvB,IAAII,EAAsCD,E,cAqM1C,IAAIE,EA9KJ,cAAiEvC,EAK7DlC,YAAYoB,GACR8B,QALJ,mBAMI,EAAAhD,KAAI,EAAUkB,GAAOC,SAAW,GAAE,KAGtC8B,UAAUC,GACNF,MAAMC,UAAUC,GAChB,EAAAlD,KAAI,OAAQoC,SAASoC,IACjBA,EAAOvB,UAAUC,MAIzB,aACI,OAAO,EAAAlD,KAAI,OAAQoB,OAGvBhC,IAAIkC,GACA,OAAO,EAAAtB,KAAI,OAAQsB,IAAU,KAGjCA,MAAMD,EAAaoD,GACf,OAAO,EAAAzE,KAAI,OAAQ0E,QAAQrD,EAAMoD,GAGrClD,SACI,OAAO,EAAAvB,KAAI,OAAQuB,SAGvBoD,KAAKC,GACD,MACMC,EADQ,EAAA7E,KAAI,OACS8E,KACvB,CAACN,EAAQO,KACE,CACH1D,KAAMmD,EACNlD,MAAOyD,MAInBF,EAAaF,MACT,CAACK,EAAeC,IACLL,EACHI,EAAc3D,KAAM4D,EAAc5D,QAI9C,EAAArB,KAAI,EAAU6E,EAAaC,KAAII,GAAiBA,EAAc7D,OAAK,KACnE,MAAMsC,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBD,UAC9BJ,cAAeiE,EAAaC,KAAII,GAAiBA,EAAc5D,UAEnEsC,EAAyBG,aAAa/D,KAAM2D,GAGhDwB,WAAWjE,GACP,MAAMkE,EAAS,EAAApF,KAAI,QACb,WAACkD,GAAclD,KACjBkD,GACAhC,EAAMkB,SAAQoC,IACVA,EAAOvB,UAAUC,MAGzBkC,EAAOvC,OAAO,EAAG,KAAM3B,GACvB,MAAMyC,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBF,YAC9BL,cAAe,EACfC,cAAeO,IAEnB0C,EAAyBG,aAAa/D,KAAM2D,GAGhD0B,UAAUnE,GACN,MAAMkE,EAAS,EAAApF,KAAI,QACb,OAACoB,GAAUgE,GACX,WAAClC,GAAclD,KACjBkD,GACAhC,EAAMkB,SAAQoC,IACVA,EAAOvB,UAAUC,MAGzBkC,EAAO5C,QAAQtB,GACf,MAAMyC,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBF,YAC9BL,cAAeU,EACfT,cAAeO,IAEnB0C,EAAyBG,aAAa/D,KAAM2D,GAGhD2B,OAAOhE,KAAkBJ,GACrB,MAAMkE,EAAS,EAAApF,KAAI,QACb,OAACoB,GAAUgE,EAEjB,GADsBG,KAAKC,IAAIlE,IACVF,EAAQ,CACzB,GAAIE,GAAS,EAAG,CACZ,MAAM,WAAC4B,GAAclD,KACrBkB,EAAMkB,SAAQoC,IACVA,EAAOvB,UAAUC,MAEjB5B,EAAQF,EACRgE,EAAOvC,OAAOvB,EAAO,KAAMJ,GAG3BkE,EAAO5C,QAAQtB,QAGlB,GAAII,EAAQ,EAAG,CAChBA,EAAQF,EAASE,EACjB,MAAM,WAAC4B,GAAclD,KACjBkD,GACAhC,EAAMkB,SAAQoC,IACVA,EAAOvB,UAAUC,MAGzBkC,EAAOvC,OAAOvB,EAAO,KAAMJ,GAE/B,MAAMyC,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBF,YAC9BL,cAAeY,EACfX,cAAeO,EAAMC,UAEzByC,EAAyBG,aAAa/D,KAAM2D,IAIpD8B,OAAOpE,GACH,MAAM+D,EAAS,EAAApF,KAAI,OACbsB,EAAQ8D,EAAOV,QAAQrD,GAC7B,GAAIC,GAAS,EAAG,CACZ,MAAMD,EAAO+D,EAAOvC,OAAOvB,EAAO,GAAG,IAC/B,WAAC4B,GAAclD,KACjBkD,GACA7B,EAAK4B,UAAU,MAEnB,MAAMU,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBH,YAC9BP,aAAce,EACdd,aAAc,CAACa,KAEnBuC,EAAyBG,aAAa/D,KAAM2D,IAIpD+B,QACI,MAAMxE,EAAQ,EAAAlB,KAAI,QACZ,OAACoB,GAAUF,EACjB,GAAIE,EAAS,EAAG,CACZ,MAAMZ,EAAeU,EAAM2B,OAAO,IAC5B,WAACK,GAAclD,KACjBkD,GACA1C,EAAa4B,SAASuD,IAClBA,EAAc1C,UAAU,SAGhC,MAAMU,EAAS,IAAI1C,EAAkB,CACjChB,OAAQD,KACRE,WAAYe,EAAkBH,YAC9BP,aAAc,EACdC,aAAcA,IAElBoD,EAAyBG,aAAa/D,KAAM2D,M,mFAwEhD,MAAMD,EAAU,EAAA1D,KAAI,OAAU6C,OAAO,GACjCa,EAAQtC,OAAS,GACjB,EAAApB,KAAI,OAAU,KAAdA,KAAe0D,IAEtB,WAEiB9B,GACd,IAAK,EAAA5B,KAAI,OAAgB,CACrB,MAAM,OAACC,EAAM,cAAE4B,GAAiBD,EAC1BgE,EAAY,EAAA5F,KAAI,OAAaZ,IAAeyC,GAClD,GAAI+D,EAAW,CACX,MAAM,QAACC,GAAWD,GACZ,WAACE,EAAU,iBAAEC,EAAgB,UAAEC,EAAS,QAAEC,GAAWJ,EACvDI,EACIH,GAAc7F,aAAkB+D,GAC5B+B,EACA,EAAA/F,KAAI,OAAUwC,QACPvC,EAAOuD,aACL0C,QAAOC,IACJ,MAAM,aAAChG,GAAgBgG,EACvB,OAAOJ,EAAiBK,SACpBjG,OAMhB,EAAAH,KAAI,OAAUwC,QACPvC,EAAOuD,cAGlB,EAAAxD,KAAI,SAAS,KAAbA,OAEKgG,GAAa/F,aAAkBsE,IACpC,EAAAvE,KAAI,OAAUwC,QACPvC,EAAOuD,cAEd,EAAAxD,KAAI,SAAS,KAAbA,OAGCC,GAAU4B,IACXiE,GAAc7F,aAAkB+D,GAC5B+B,EACA,EAAA/F,KAAI,OAAUwC,QACPvC,EAAOuD,aACL0C,QAAOC,IACJ,MAAM,aAAChG,GAAgBgG,EACvB,OAAOJ,EAAiBK,SACpBjG,OAMhB,EAAAH,KAAI,OAAUwC,QACPvC,EAAOuD,cAGlB,EAAAxD,KAAI,SAAS,KAAbA,OAEKgG,GAAa/F,aAAkBsE,IACpC,EAAAvE,KAAI,OAAUwC,QACPvC,EAAOuD,cAEd,EAAAxD,KAAI,SAAS,KAAbA,WAQxB,IAAIqG,EAvHJ,MAUIvG,YAAYyC,G,YATZ,mBACA,mBACA,mBAEA,mBAMI,EAAAvC,KAAI,EAAauC,EAAQ,KACzB,EAAAvC,KAAI,EAAY,GAAE,KAClB,EAAAA,KAAI,GAAiB,EAAK,KAC1B,EAAAA,KAAI,EAAe,IAAIsG,QAAS,KAGpCC,QAAQzC,EAAiB+B,GACrB,EAAA7F,KAAI,GAAiB,EAAK,KAC1B,MAAMwG,EAAa,EAAAxG,KAAI,OACvB,IAAI4F,EAAYY,EAAWpH,IAAI0E,GAC/B,GAAK8B,EAODY,EAAW/D,IAAIqB,EAAM8B,OAPT,CACZ,MAAMa,EAAW,EAAAzG,KAAI,SAAmB0G,KAAK1G,MAC7C8D,EAAKxB,iBAAiB,cAAemE,GACrCb,EAAY,CAACa,SAAAA,EAAUZ,QAAAA,GACvBW,EAAW/D,IAAIqB,EAAM8B,IAO7Be,UAAU7C,GAEN,IAAI8B,EADe,EAAA5F,KAAI,OACIZ,IAAI0E,GAC/B,GAAI8B,EAAW,CACX,MAAM,SAACa,GAAYb,EACnB9B,EAAKpB,oBAAoB,cAAe+D,IAIhDG,aACI,EAAA5G,KAAI,OAAU6C,OAAO,GACrB,EAAA7C,KAAI,GAAiB,EAAI,OC7oBjC,SAAS6G,EAAaC,GACpB,OAAOA,EAAIC,QAAQ,mBAAoB,KAAKC,cCjC9C,MAAMC,EAAgD,SAClDlH,GAMA,MAAO,CACHE,EAAWwD,KAEX,MAAM,YAAC3D,GAAeG,GAChB,UAACV,GAAaO,EACdK,EAAe+G,OAAOzD,GACtB0D,EAAgBN,EAAa1G,GAC7BiH,EAAerH,EAAKqH,cAAgB,KAE1C,GADiBrH,EAAKsH,SACR,CACV,MAAMC,EAAqBC,QAAQnI,IAAIU,EAAa,qBAAsBA,GACtE0H,MAAMC,QAAQH,GACdA,EAAmB9E,KAAK2E,GAGxBlI,OAAOC,eACHY,EAAa,qBAAsB,CAC/BF,MAAO,CAACuH,GACRO,UAAU,IAK1B,MAAM,KAACjG,GAAQ1B,EACf,OAAQ0B,GACJ,KAAKkG,QACD1I,OAAOC,eAAeK,EAAWY,EAAc,CAC3Cf,IAAK,WACD,OAAOY,KAAK4H,aAAaT,IAE7B1E,IAAK,SAA4B7C,GACzBA,EACAI,KAAK6H,aAAaV,EAAe,IAGjCnH,KAAK8H,gBAAgBX,MAIjC,MAEJ,KAAKlI,OACDA,OAAOC,eAAeK,EAAWY,EAAc,CAC3Cf,IAAK,WACD,MAAM2I,EAAM/H,KAAKgI,aAAab,GAC9B,OAAgB,OAARY,EAAgBE,KAAKC,MAAMH,GAAOX,GAE9C3E,IAAK,SAA4B7C,GACf,OAAVA,EACAI,KAAK6H,aAAaV,EAAec,KAAKE,UAAUvI,IAGhDI,KAAK8H,gBAAgBX,MAIjC,MAEJ,KAAKiB,OACDnJ,OAAOC,eAAeK,EAAWY,EAAc,CAC3Cf,IAAK,WACD,MAAM2I,EAAM/H,KAAKgI,aAAab,GAC9B,OAAgB,OAARY,EAAgBM,WAAWN,GAAOX,GAE9C3E,IAAK,SAA4B7C,GACf,OAAVA,EACAI,KAAK6H,aAAaV,EAAevH,GAGjCI,KAAK8H,gBAAgBX,MAIjC,MAEJ,KAAKD,OACL,QACIjI,OAAOC,eAAeK,EAAWY,EAAc,CAC3Cf,IAAK,WACD,MAAM2I,EAAM/H,KAAKgI,aAAab,GAC9B,OAAgB,OAARY,EAAgBA,EAAMX,GAElC3E,IAAK,SAA4B7C,GACf,OAAVA,EACAI,KAAK6H,aAAaV,EAAevH,GAGjCI,KAAK8H,gBAAgBX,SAkC3CmB,EAAwC,SAASvI,GAInD,OACIwI,IAEA,MAAM,KAACC,EAAI,QAAE3C,GAAW9F,EAQxB,OAPK0I,eAAerJ,IAAIoJ,IACpBC,eAAeC,OACXF,EACAD,EACA1C,GAGD0C,IAmCTI,EAAwC,SACtC5I,GAKJ,MAAO,CACHE,EAAW2I,KAEX,MAAM,YAAC9I,GAAeG,GAChB,UAACV,GAAaO,EACdK,EAAe+G,OAAO0B,IACtB,SAACC,GAAY9I,EAEb+I,EADmB/I,EAAKgJ,iBACI,WAC9B,OAAO/I,KAAKgJ,WAAYC,cAAcJ,IACtC,WACA,OAAO7I,KAAKiJ,cAAcJ,IAE9B5J,OAAOC,eAAeK,EAAWY,EAAc,CAC3Cf,IAAK0J,MAuCjB,SAASI,KAAYC,GACjB,MAAMD,EAAWE,SAASC,yBAE1B,OADAH,EAAS7D,UAAU8D,GACZD,EAyBX,SAAS,EACLI,EAAYvJ,GACZ,GAAIA,EAAM,CACN,MAAM,QAAC8F,EAAO,WAAE0D,EAAU,QAAEC,EAAO,SAAEC,EAAQ,UAAEC,GAAa3J,EACtD4J,EAAUP,SAASQ,cAAcN,EAASzD,GAahD,GAZI0D,GACAtK,OAAO4K,QAAQN,GAAYnH,SAAQ,EAAE+E,EAAe2C,WACzBzJ,IAAnByJ,IAC8B,kBAAnBA,EACPH,EAAQI,gBAAgBlD,EAAaM,GAAgB2C,GAGrDH,EAAQ9B,aAAahB,EAAaM,GAAgBD,OAAO4C,QAKrEN,EAAS,CACT,MAAOA,QAASQ,GAAkBL,EAClC1K,OAAOgL,KAAKT,GAASpH,SAAS8H,IAC1BF,EAAeE,GAAkBhD,OAAOsC,EAAQU,OAwBxD,OArBIT,IACwB,mBAAbA,EACPE,EAAQtE,UAAUoE,EAASE,IAEF,iBAAbF,GAAyB,WAAYA,EACjDE,EAAQtE,UAAUmC,MAAM2C,KAAKV,IAG7BE,EAAQtE,OAAOoE,IAGnBC,GACAzK,OAAO4K,QAAQH,GAAWtH,SAAQ,EAAEgI,EAAQC,MACpC7C,MAAMC,QAAQ4C,GACdV,EAAQrH,iBAAiB8H,EAAQC,EAAW,GAAIA,EAAW,IAG3DV,EAAQrH,iBAAiB8H,EAAQC,MAItCV,EAEX,OAAOP,SAASQ,cAAcN,GAGlC,MAAMgB,EAAsB,IAAIhE,QAS1BiE,EAAuC,IAAIC,sBAAsBC,IAQnE,MAAM,MAACC,EAAK,gBAAEC,GAAmBF,EAC3BG,EAA2BN,EAAoBlL,IAAIsL,GACzD,QAAiCrK,IAA7BuK,EAAwC,CACxC,MAAM,sBAACC,GAAyBD,EAChCC,EAAsBhI,OAAOgI,EAAsBnG,QAAQiG,GAAkB,OAI/EG,EAAmC,IAAIzE,GAAqB3C,IAC9DA,EAAQtB,SAAS+D,IACb,MAAM,OAAClG,EAAM,aAAEE,EAAY,SAAEC,EAAQ,SAAEE,GAAY6F,GAC7C,sBAAC0E,GAAyBP,EAAoBlL,IAAIa,GACxD4K,EAAsBzI,SAAQ2I,IAC1B,MAAM,WAACC,EAAU,MAAEC,EAAK,WAAEnF,GAAciF,EAClCpB,EAAUqB,EAAWE,QACvBvB,GACI7D,EAAWM,SAASjG,IACpB8K,EAAMtB,EAASxJ,EAAeC,EAAUE,YAa5D,SAASqK,EACLD,EACAf,EACA7D,EACAmF,GAEA,MACMN,EAAkB,CAACK,WADN,IAAIG,QAAQxB,GACMsB,MAAAA,EAAOnF,WAAAA,GACtC8E,EAA2BN,EAAoBlL,IAAIsL,GAEzD,GADAH,EAAqCa,SAASzB,EAAS,CAACe,MAAAA,EAAOC,gBAAAA,IAC1DC,EASA,CACD,MAAM,sBAACC,EAAqB,gBAAEQ,GAAmBT,GAC3C,iBAAC7E,GAAoBsF,EAC3BR,EAAsBrI,KAAKmI,GAC3BU,EAAgBtF,iBAAmBA,EAC/BA,EAAiBuF,OAAOxF,EAAWI,QAC/BqF,IAAexF,EAAiBK,SAASmF,MACxC/D,MAAM2C,KAAK,IAAIqB,IAAI1F,QAhBD,CAC3B,MAAMuF,EAAkB,CACpBvF,YAAY,EACZC,iBAAkBD,GAEhB+E,EAAwB,CAACF,GAC/BL,EAAoB7H,IAAIiI,EAAO,CAACW,gBAAAA,EAAiBR,sBAAAA,IACjDC,EAAiCvE,QAAQmE,EAAOW,GAmBpD,OARAvF,EAAW1D,SAASmJ,IAChB,GAAIA,KAAcb,EAAO,CACrB,MAAM9K,EAAQ2H,QAAQnI,IAAIsL,EAAOa,EAAYb,QAC/BrK,IAAVT,GACAqL,EAAMtB,EAAc4B,OAAiBlL,EAAWT,OAIrD+J,EAOX,MAAM8B,EAA2B,IAAInF,QAQ/BoF,EAA4C,IAAIlB,sBAAsBC,IAQxE,MAAM,KAACkB,EAAI,qBAAEC,GAAwBnB,EAC/BoB,EAAmCJ,EAAyBrM,IAAIuM,GACtE,GAAIE,EAAkC,CAClC,MAAM,2BAACC,GAA8BD,EACrCC,EAA2BjJ,OAAOiJ,EAA2BpH,QAAQkH,GAAuB,OAI9FG,EAAgC,IAAI1F,GAAqB3C,IAC3D,IAAIsI,EAAsB,KAC1BxE,MAAM2C,KAAKzG,EAAQnC,UAAUa,SAAS+D,IAClC,MAAM,OAAClG,GAAUkG,EACXwF,EAAkB1L,GACjBmB,OAAQ6K,GAAcN,GACvB,2BAACG,GAA8BL,EAAyBrM,IAAIuM,GAClEG,EAA2B1J,SAAS8J,IAChC,MAAM,UAACC,EAAS,QAAEC,EAAO,YAAEC,GAAeH,EACpCI,EAASH,EAAUjB,QACzB,GAAIoB,EAAQ,CACR,MAAM,WAACC,EAAU,SAAE9C,GAAY6C,GACxBlL,OAAQoL,GAAiB/C,EAC5B4C,GAAeJ,EAAa,GAAKM,GAAcF,GAC/CC,EAAOG,YAAYJ,GAEvB,MAAM,WAACnM,EAAU,YAAEa,EAAW,YAAED,EAAW,UAAEE,GAAamF,EAC1D,OAAQjG,GACJ,KAAKa,EAAa,CACd,MAAM,cAACL,EAAa,cAAEC,GAAiBwF,EACjCuG,EAAqBlF,MAAM2C,KAAKxJ,EAAcY,UAAUuD,IAAIsH,IAC3DhL,OAAQoL,GAAiB/C,EAC5B/I,EAAgB8L,EAChB/C,EAAS/I,GAAeiM,UAAUD,GAGlCJ,EAAOjH,UAAUqH,GAErB,MAEJ,KAAK5L,EAAa,CACd,MAAM,aAACP,EAAY,aAAEC,GAAgB2F,GAC9B/E,OAAQwL,GAAgBpM,EAC/BwL,EAAQA,GAAS5C,SAASyD,cAC1B,MAAMC,EAAiBvM,GAAgBqM,EAAe,GAClDE,EAAiBN,IACjBR,EAAMe,eAAetD,EAASlJ,IAC9ByL,EAAMgB,YAAYvD,EAASqD,IAC3Bd,EAAMiB,kBAEV,MAEJ,KAAKjM,EAAW,CACZ,MAAM,cAACJ,GAAiBuF,EAClB+G,EAAgB1F,MAAM2C,KAAKV,GACjC6C,EAAOjH,UACAzE,EAAcsF,QACbiH,GAAWA,EAAUX,IACvB1H,KACEqI,GAAWD,EAAcC,MAGjC,OAGU,GAAdlB,GAAmBI,GACnBC,EAAOjH,OAAOgH,aAOlC,SAASe,EACLzB,EACAS,EACAC,GAEA,OAAQC,IACJ,MAAMH,EAAY,IAAIhB,QAAQmB,GACxBe,EAAgC5B,EAAyBrM,IAAIuM,GAC7DC,EAAuB,CAACO,UAAAA,EAAWC,QAAAA,EAASC,YAAAA,GAElD,GADAX,EAA0CN,SAASkB,EAAQ,CAACX,KAAAA,EAAMC,qBAAAA,IAC7DyB,EAOA,CACD,MAAM,2BAACvB,GAA8BuB,EACrCvB,EAA2BtJ,KAAKoJ,OATA,CAChC,MAAME,EAA6B,CAACF,GACpCH,EAAyBhJ,IAAIkJ,EAAM,CAACG,2BAAAA,IACpCC,EAA8BxF,QAAQoF,EAAM,CACxC3F,WAAW,IAOnB,OAAsB,GAAf2F,EAAKvK,QAAeiL,EACvB,CAACA,GAAe7E,MAAM2C,KAAKwB,EAAKpK,UAAUuD,IAAIsH,IAc1D,SAASkB,EACLC,EACAC,EAAgCC,EAChCtG,EAAuB2C,GACvB,GAAI0D,GAA0BrG,EAC1B,OAAQoG,GACJ,IAAK,UACD,MAAkC,IAA3BE,GAAmD,IAAlB3D,EAC5C,IAAK,SACD,MAAmC,KAA5B2D,GAAmCA,GAA2B3D,EACzE,IAAK,OACD,MAAoC,KAA5B2D,GAAqD,OAAnB3D,GAA4B,IAAI4D,OAAO,GAAGD,OAA+B,KAAKE,KAAK7D,GAGzI,OAAO,E,YChjBP8D,G,knBAKJ,IAAMC,GAAN,cAAuCC,YAiGnChO,cACIkD,Q,YACA,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SACtCC,EAAYjO,KAAKkO,kBACvBlO,KAAKiO,UAAYA,EACjBA,EAAUE,KAAO,WACjBnF,EAAW3D,OACPuI,GAAeQ,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,UAAmB0G,KAAK1G,OA1E/DsO,yBAAyBnH,EAAuB/G,EAAyBE,GACrE,MAAM,UAAC2N,GAAajO,KACpB,OAAQmH,GACJ,IAAK,OACD,OAAQ7G,GACJ,IAAK,WACL,IAAK,QACD2N,EAAUE,KAAO,WAAW7N,IAC5B,MAEJ,QACI2N,EAAUE,KAAO,WAIzB,MAEJ,IAAK,UACDF,EAAUM,YAAcrH,OAAoB,OAAb5G,GAC/B,MAEJ,IAAK,WACD2N,EAAUO,aAAetH,OAAoB,OAAb5G,GAChC,MAEJ,IAAK,WACD2N,EAAUQ,aAAevH,OAAoB,OAAb5G,GAChC,MAEJ,IAAK,QACD2N,EAAUS,UAAYpO,GA+ClCqO,OAAOC,GACH,MAAM,KAACnN,EAAI,SAAEoN,GAAY7O,KACzB,OAAQyB,GACJ,IAAK,OACL,IAAK,UAAW,CACZ,MAAMqN,EAASF,IAAUC,EACzB7O,KAAK6O,SAAWC,EACZA,GACA,GAAA9O,KAAI,UAAc,KAAlBA,MAEJA,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KACjD,QAKZC,oBACI,MAAM,SAACC,GAAYlP,KACnBA,KAAKkP,SAAWA,EAGpBJ,SACI,MAAM,KAACrN,EAAI,SAAEoN,GAAY7O,KACzB,OAAQyB,GACJ,IAAK,OACL,IAAK,UACIoN,IACD7O,KAAK6O,UAAW,EAChB,GAAA7O,KAAI,UAAc,KAAlBA,QAOhBmP,WACI,MAAM,KAAC1N,EAAI,SAAEoN,GAAY7O,KACzB,OAAQyB,GACJ,IAAK,OACL,IAAK,UACGoN,IACA7O,KAAK6O,UAAW,M,4BAQ5B,MAAM,KAACO,GAAQpP,KACf,GAAa,OAAToP,EAAe,CACf,MAAOC,MAAOC,GAAaF,GACpBG,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAa9P,KAAK+P,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAcf,EAAKW,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpH,SAASqH,MACvC,KAAChP,GAAQzB,KACf,GAAY,QAARyB,EAAgB,CAChB,MAAMiP,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,OAAQ,GAC1BsM,EAAY,EACZL,EAAUT,EAAWK,EACrBI,EAAUT,OAEdN,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZP,EAAUZ,EAAUW,EACpBC,EAAUV,WAGb,CACD,MAAMkB,EAAc5Q,KAAK6Q,QAAQ,UACjC,GAAoB,OAAhBD,EAAsB,CACtB,MAAOrB,IAAKuB,EAAgBnB,KAAMoB,GAAmBH,EAAYb,wBAC3DW,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,QAClBsM,EAAY,EACZd,EAAWK,EAAYc,EACvBjB,EAAYiB,GAHc,MAK9B,MAAMC,EAAoBV,OAAOW,iBAAiB7B,IAC5C,WAAC8B,EAAU,cAAEC,GAAiBH,EAC9BI,EAAiB/I,WAAW6I,GAC5BG,EAAoBhJ,WAAW8I,GACrC7B,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZjB,EAAaS,EAAaW,EAAiBO,EAC3C7B,EAAUsB,EAAiBM,WAK9C,YAEiBxP,GACd,MAAM,OAAC3B,GAAU2B,EAEjB,GADqC3B,EAAQ4Q,QAAQ,gBAC9B7Q,KAAM,CACzB,MAAM,KAACyB,GAAQzB,KACf,OAAQyB,GACJ,IAAK,WACDzB,KAAKsR,SAAWtR,KAAKsR,QACrB,MAEJ,IAAK,QACDtR,KAAKsR,SAAU,EACf,MAEJ,IAAK,OACL,IAAK,UACDtR,KAAK2O,aAxJjBf,GAAiB,EAAQ,aACVQ,QAAQ/I,OACnB,EAAQ,OAAQ,CACZkE,WAAY,CACRgI,KAAM,UAGd,EAAQ,OAAQ,CACZhI,WAAY,CACRgI,KAAM,SAEV9H,SAAU,CACN,EAAQ,WAGhB,EAAQ,OAAQ,CACZF,WAAY,CACRgI,KAAM,WAGd,EAAQ,OAAQ,CACZhI,WAAY,CACRf,KAAM,WArFtB,IADCG,EAAc,CAACE,SAAU,gC,4BAI1B,IADC5B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,U,6BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,8BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAI7C,IADCJ,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,+BAI7C,IADCJ,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAI7C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,SAAUC,UAAU,K,4BA7BlEwG,GAAwB,IAH7BvF,EAAc,CACXE,KAAM,gBAEJqF,IAqON,I,SAAI2D,GAAwD3D,GA0CxD4D,GAAkCxS,OAAOyS,QAC/B,SAAS3R,GAQf,MAAM,MAAC4R,EAAK,KAAEnJ,EAAI,KAAE/G,EAAI,MAAE7B,EAAK,QAAEgS,EAAO,KAAExC,GAAQrP,EAIlD,OAHIqP,IACAA,EAAKyC,KAAO,QAET,EAAQ,aAAc,CACzBtI,WAAY,CACRuI,UAAW,EACXC,MAAOJ,EACPnJ,KAAMA,EACN5I,MAAOA,EACP6B,KAAMA,GAEVgI,SAAU2F,EAAO,CACbuC,EACAvC,GACA,CACAuC,GAEJjI,UAAW,CACPkI,QAASA,OAGlB,CACCrS,UAAWiS,GAAqBjS,UAChCyS,OAAOjS,GAMI,IAAI0R,GAAU,IACd1R,EAAM0B,KAAM,WAGvBwQ,SAASlS,GAME,IAAI0R,GAAU,IACd1R,EAAM0B,KAAM,aAGvByQ,MAAMnS,GAMK,IAAI0R,GAAU,IACd1R,EAAM0B,KAAM,UAGvB2N,KAAKrP,GAKM,IAAI0R,GAAU,IACd1R,EAAM0B,KAAM,SAGvB0Q,QAAQpS,GAKG,IAAI0R,GAAU,IACd1R,EAAM0B,KAAM,c,spBClX/B,MAAM2Q,WAAiBtE,YAGnBhO,cACIkD,Q,aAHJ,oBAII,GAAAhD,KAAI,GAAU,KAAI,KAGtB,YACI,OAAO,GAAAA,KAAI,QAGfqS,SAAS3H,GACDA,IAAU,GAAA1K,KAAI,UACd,GAAAA,KAAI,GAAU0K,EAAK,KACnB,GAAA1K,KAAI,WAAQ,KAAZA,OAIRsS,eAIAC,gBAIAC,UACI,GAAAxS,KAAI,WAAQ,KAAZA,O,4CAIA,MAAM,WAACgJ,GAAchJ,KACrB,GAAmB,OAAfgJ,EAAqB,CACrB,MAAMyJ,EAASzS,KAAKuS,eAChBE,GACAzJ,EAAW0J,gBAAgBD,GAGnC,MAAME,EAAQ3S,KAAKsS,cACfK,GACA3S,KAAK0S,gBAAgBC,IAKjC,IAAIC,GAAwBR,GCvCxBS,GAIG,IAAIvM,QACPwM,GAAgB,IAAIC,kBACnBC,IACGA,EAAc5Q,SAAS6Q,IACnB,MAAM,OAAChT,EAAM,KAAEwB,GAAQwR,EACvB,GAAIhT,aAAkB6N,YAClB,OAAQrM,GACJ,IAAK,YAAa,CACd,MAAMyR,EAAiBL,GAASzT,IAAIa,GAChCiT,GACAA,EAAe9Q,SAAQ+Q,IACnB,MAAM,OAACC,EAAM,QAAEzJ,EAAO,KAAEkI,GAAQsB,EAC1BE,EAAmBD,EAAgC,gBAC3B,mBAAnBC,GACPA,EAAgB1J,EAAQuB,QAASjL,EAAQ4R,MAIrD,cAQpByB,GAAkD,IAAIhN,QACtDiN,GAAqB,IAAIR,kBACxBC,IACGA,EAAc5Q,SAAS6Q,IACnB,MAAM,OAAChT,EAAM,KAAEwB,GAAQwR,EACvB,GAAIhT,aAAkB6N,YAClB,OAAQrM,GACJ,IAAK,aAAc,CACf,MAAM,cAAC0F,EAAa,SAAE/G,GAAY6S,EAC5BG,EAASE,GAAWlU,IAAIa,GAC9B,GAAImT,EAAQ,CACR,MAAM9E,EAA4B8E,EAAyC,yBACpC,mBAA5B9E,GACPA,EAAyBrO,EAAQkH,EAAe/G,EAAUH,EAAO+H,aAAab,IAGtF,cAsEpBqM,GA9DJ,MAEI1T,cACI,MAAMsT,EAAwBpT,KAC9BA,KAAKyT,OAAS,IAAIC,MACd1T,KAAKyT,OAAQ,CACTE,MAAO,CAAC1T,EAAQ2T,EAASC,KACrB,MAAMlK,EAAuBpC,QAAQoM,MAAM1T,EAAQ2T,EAASC,GACtDC,EAAoCV,EAA8B,cACpE5L,MAAMC,QAAQqM,IACAA,EACThP,KAAIiP,IACM,CACHC,SAAUD,EACVE,YAAab,EAAOvB,KAAKlI,EAASoK,OAGxC3R,SAAQ8R,IACV,MAAM,YAACD,EAAW,SAAED,GAAYE,EAChC,GAAID,EAAa,CACbnB,GAAcvM,QAAQ0N,EAAa,CAC/BjO,WAAW,IAEf,MAAMkN,EAAiBL,GAASzT,IAAI6U,GAC9BE,EAAgB,CAACf,OAAAA,EAAQzJ,QAAS,IAAIwB,QAAQxB,GAAUkI,KAAMmC,GAChExM,MAAMC,QAAQyL,GACdA,EAAe1Q,KAAK2R,GAGpBtB,GAASpQ,IAAIwR,EAAa,IAAIzM,MAAM2M,QAKpD,MAAM7M,EAAsB8L,EAAmC,mBAS/D,OARI5L,MAAMC,QAAQH,KACdgM,GAAW7Q,IAAIkH,EAASyJ,GACxBG,GAAmBhN,QAAQoD,EAAS,CAChCJ,YAAY,EACZ6K,gBAAiB9M,EACjB+M,mBAAmB,KAGpB1K,KAMvB8J,SACI,MAAM,IAAIa,MAAM,oCAGpBzC,OACI,OAAO,KAGX,oBACI,MAAO,CAAC,MAKZ0C,GAAsC,IAAItS,IAoB9C,SAASmR,GACL5K,EAASzI,GACT,MAAMqT,EAASmB,GAAQnV,IAAIoJ,GAC3B,GAAI4K,EAAQ,CACR,QAAa/S,IAATN,EAAoB,CACpB,MAAM,WAAC+F,EAAU,WAAEyD,EAAU,QAAEC,EAAO,QAAEgL,EAAO,UAAE9K,GAAa3J,EACxD4J,EAAUyJ,EAAOK,OAAO3N,GAa9B,GAZIyD,GACAtK,OAAO4K,QAAQN,GAAYnH,SAAQ,EAAE+E,EAAe2C,WACzBzJ,IAAnByJ,IAC8B,kBAAnBA,EACPH,EAAQI,gBAAgBlD,EAAaM,GAAgB2C,GAGrDH,EAAQ9B,aAAahB,EAAaM,GAAgBD,OAAO4C,QAKrEN,EAAS,CACT,MAAOA,QAASQ,GAAkBL,EAClC1K,OAAOgL,KAAKT,GAASpH,SAAS8H,IAC1BF,EAAeE,GAAkBhD,OAAOsC,EAAQU,OAGxD,GAAIsK,EACA,GAAuB,mBAAZA,GAA0BhN,MAAMC,QAAQ+M,IAAYA,aAAmBC,UAA+B,iBAAZD,GAAwBA,aAAmBE,KAAM,CAClJ,MAAM7C,EAAOuB,EAAOvB,KAAKlI,EAAS,MAC9BkI,IACuB,mBAAZ2C,EACP3C,EAAKxM,UAAUmP,EAAQ3C,IAEC,iBAAZ2C,GAAwB,WAAYA,EAChD3C,EAAKxM,UAAUmC,MAAM2C,KAAKqK,IAG1B3C,EAAKxM,OAAOmP,SAKpBvV,OAAO4K,QAAQ2K,GAASpS,SAAQ,EAAE8R,EAAQM,MACtC,MAAM3C,EAAOuB,EAAOvB,KAAKlI,EAASuK,GAC9BrC,IACuB,mBAAZ2C,EACP3C,EAAKxM,UAAUmP,EAAQ3C,IAEC,iBAAZ2C,GAAwB,WAAYA,EAChD3C,EAAKxM,UAAUmC,MAAM2C,KAAKqK,IAG1B3C,EAAKxM,OAAOmP,OAgBhC,OAVI9K,GACAzK,OAAO4K,QAAQH,GAAWtH,SAAQ,EAAEgI,EAAQC,MACpC7C,MAAMC,QAAQ4C,GACdV,EAAQrH,iBAAiB8H,EAAQC,EAAW,GAAIA,EAAW,IAG3DV,EAAQrH,iBAAiB8H,EAAQC,MAItCV,EAGP,OAAOyJ,EAAOK,SAGtB,MAAM,IAAIa,MAAM,kBAAkB9L,sDAStC,MAAMmM,GAA0B,SAAS5U,GAGrC,OACIqT,IAEA,MAAM,KAAC5K,GAAQzI,EAKf,OAJAwU,GAAQ9R,IACJ+F,EACA,IAAI4K,GAEDA,I,8fC7NXwB,GAAiB,IACrBD,GAAO,CACHnM,KAAM,YAFe,EAGvB,GAAC,cAAwCgL,GAGvC1T,cACIkD,Q,aAHJ,oB,+VAII,CAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,WACN2D,UAAW,KAEjB,KAGN2B,OAAO1T,GAOH,MAAM+U,EAAoB,GAAA9U,KAAI,QAAWqO,WAAU,GACnD,QAAahO,IAATN,EAAoB,CACpB,MAAM,GAACgV,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,SAAE+F,EAAQ,QAAEC,GAAWnV,OAC1CM,IAAP0U,IACAD,EAAKC,GAAKA,QAEI1U,IAAd2U,GACAF,EAAKE,UAAUG,OAAOH,QAET3U,IAAb6O,IACA4F,EAAK5F,SAAWA,QAEH7O,IAAb4U,GACAjV,KAAKoV,YAAYN,EAAMG,QAEX5U,IAAZ6U,GACAlV,KAAKqV,WAAWP,EAAMI,GAE1BlV,KAAKsV,YAAYR,GAAM,GAE3B,OAAOA,EAGXjD,KAAKiD,GACD,OAAOA,EAGXS,WAAWlU,GACP,OAAOA,EAAK2G,aAAa,YAAc,GAG3CqN,WAAWhU,EAAmBzB,GAC1ByB,EAAKwG,aAAa,UAAWjI,GAGjC4V,SAASnU,GACL,OAAO,GAAArB,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,aAAe,GAG5CC,SAASrU,EAAmBzB,GACxB,GAAAI,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,YAAc7V,EAGpC+V,YAAYtU,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAG9CgW,YAAYvU,GACR,MAAMwU,EAAWxU,EAAK2G,aAAa,iBACnC,OAAO6N,EAAWC,SAASD,IAAa,EAG5CE,UAAU1U,EAAmBzB,GACzB,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,UAGdH,EAAUvP,OAAO,UAIzBuQ,UAAU3U,GACN,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,UAG9BC,cAAc7U,EAAmBzB,GAC7B,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,cAGdH,EAAUvP,OAAO,cAIzB0Q,cAAc9U,GACV,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,cAG9Bb,YAAY/T,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1CwW,YAAY/U,GACR,OAAOA,EAAKuG,aAAa,iBAG7B0N,YAAYjU,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAC1CyB,EAAK0B,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KAGrDqH,YAAYhV,GACR,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,kBAAoBd,QAAO,M,0CAG5D7F,GACH,OAAOA,EAAK4H,cAA2B,+B,MChI3CqN,GAAgB,IACpB3B,GAAO,CACHnM,KAAM,WAFc,EAGtB,GAAC,cAAuCgL,GAGtC1T,cACIkD,QAHJ,oB,+VAII,CAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,UACP1G,KAAM,MACN2D,UAAW,KAEjB,KAGN2B,OAAO1T,GAGH,MAAMwW,E,uSAAmB,CAAAvW,KAAI,QAAWqO,WAAU,GAClD,QAAahO,IAATN,EAAoB,CACpB,MAAM,SAACkV,GAAYlV,OACFM,IAAb4U,GACAjV,KAAKoV,YAAYmB,EAAKtB,GAE1BjV,KAAKsV,YAAYiB,GAAK,GAE1B,OAAOA,EAGX1E,KAAK0E,GACD,OAAOA,EAGXC,MAAMD,GACF,OAAO/O,MAAM2C,KAAKoM,EAAIE,iBAClB,uBAIRd,YAAYY,EAAkB3W,GAC1B2W,EAAI1O,aAAa,gBAAiBX,OAAOtH,IAG7CgW,YAAYW,GACR,MAAMV,EAAWU,EAAIvO,aAAa,iBAClC,OAAO6N,EAAWC,SAASD,IAAa,EAG5CE,UAAUQ,EAAkB3W,GACxB,MAAM,UAACoV,GAAauB,EAChB3W,EACAoV,EAAUG,IAAI,UAGdH,EAAUvP,OAAO,UAIzBuQ,UAAUO,GACN,MAAM,UAACvB,GAAauB,EACpB,OAAOvB,EAAUiB,SAAS,UAG9BC,cAAcK,EAAkB3W,GAC5B,MAAM,UAACoV,GAAauB,EAChB3W,EACAoV,EAAUG,IAAI,cAGdH,EAAUvP,OAAO,cAIzB0Q,cAAcI,GACV,MAAM,UAACvB,GAAauB,EACpB,OAAOvB,EAAUiB,SAAS,cAG9Bb,YAAYmB,EAAkB3W,GAC1B2W,EAAIxM,gBAAgB,gBAAiBnK,GAGzCwW,YAAYG,GACR,OAAOA,EAAI3O,aAAa,iBAG5B0N,YAAYiB,EAAkB3W,GAC1B2W,EAAI1O,aAAa,gBAAiBX,OAAOtH,IACzC2W,EAAIxT,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KAGpDqH,YAAYE,GACR,OAAOtO,KAAKC,MAAMqO,EAAIvO,aAAa,kBAAoBd,QAAO,IAGlEmM,gBAAgBhS,EAAmBwQ,GAC/B,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACoC,EAAQO,KAChCP,aAAkBsJ,aAClB8G,GAAee,YAAYnR,EAAQO,Q,2qBC/F/C4R,GAAa,IACjBhC,GAAO,CACHnM,KAAM,QAFW,EAGnB,GAAC,cAAoCgL,GAkCnC1T,cACIkD,Q,aAPJ,oBACA,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,QAAS,CAC9BuJ,WAAY,CACRsL,MAAO,OACP1G,KAAM,OACN2D,SAAU,KAEhB,KACF,GAAA9R,KAAI,GAAgB,IAAIsG,QAAS,KACjC,GAAAtG,KAAI,GAAwB,IAAIsG,QAAS,KACzC,GAAAtG,KAAI,GAAgBoJ,SAASwN,iBACzBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAwB0G,KAAK1G,OACvE,KACD,GAAAA,KAAI,GAAeoJ,SAASwN,iBACxBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAuB0G,KAAK1G,OACtE,KAxCLkV,QAAQ6B,GACJ,OAAOvP,MAAM2C,KAAK4M,EAAKN,iBACnB,qCAIRO,KAAKD,GACD,OAAOvP,MAAM2C,KAAK4M,EAAKN,iBACnB,kCAIRD,MAAMO,GACF,OAAOvP,MAAM2C,KAAK4M,EAAKN,iBACnB,8CA6BRhD,OAAO3N,GAOH,MAAMiR,EAAoB,GAAA/W,KAAI,QAAWqO,WAAU,GAQnD,GANA0I,EAAKzU,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnE+W,EAAKzU,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3D+W,EAAKzU,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/D+W,EAAKzU,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjE+W,EAAKzU,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/D+W,EAAKzU,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,YAC1CK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,SAAE+H,EAAQ,cAAEC,GAAiBpR,OAChDzF,IAAP0U,IACAgC,EAAKhC,GAAKA,QAEI1U,IAAd2U,GACA+B,EAAK/B,UAAUG,OAAOH,QAET3U,IAAb6O,IACA6H,EAAK7H,SAAWA,QAEH7O,IAAb4W,GACAjX,KAAKmX,YAAYJ,EAAME,QAEL5W,IAAlB6W,GACAlX,KAAKoX,mBAAmBL,EAAMG,GAGtC,OAAOH,EAGXlF,KAAKkF,GACD,OAAOA,EAGXK,mBAAmBL,EAAmBnX,GAClCmX,EAAKlP,aAAa,uBAAwBX,OAAOtH,IAGrDyX,mBAAmBN,GACf,OAAO9O,KAAKC,MAAM6O,EAAK/O,aAAa,yBAA2Bd,QAAO,IAG1EiQ,YAAYJ,EAAmBnX,GAC3BmX,EAAKlP,aAAa,gBAAiBjI,GAGvC0X,YAAYP,GACR,OAAqBA,EAAK/O,aAAa,kBAAoB,OAG/DuP,eAAeR,GACX,GAAA/W,KAAI,QAAcyC,IAAIsU,GAAM,GAGhCS,aAAaT,GACT,GAAA/W,KAAI,QAAcyC,IAAIsU,GAAM,GACxB,GAAA/W,KAAI,QAAsBZ,IAAI2X,KAC9BA,EAAKhU,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,QAAsByC,IAAIsU,GAAM,IAI5CU,eAAeV,GACX,GAAA/W,KAAI,WAAqB,KAAzBA,KAA0B+W,GAC1B,GAAA/W,KAAI,WAAoB,KAAxBA,KAAyB+W,GAG7BW,cAAcX,GACV,OAAOvP,MAAM2C,KAAK4M,EAAKN,iBAAiB,kEAG5CkB,aAAaZ,GACT,OAAOvP,MAAM2C,KAAK4M,EAAKN,iBAAiB,wD,sGAjI9BM,GACV,OAAOA,EAAK9N,cAA2B,oB,YAG5B8N,GACX,OAAOA,EAAK9N,cAA2B,qB,YA+HpBnF,GACnB,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,cAAgBrB,GAAewB,YAAYtS,KAAUA,EAAK8T,OAC7E,OAAOf,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,YAAcjB,EAAUiB,SAAS,YACzD,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGAjU,GAClB,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,aAAeK,GAAcF,YAAYtS,KAAUA,EAAK8T,OAC3E,OAAOf,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,YACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGP5N,EAAmB6N,GAC9B,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAIiO,EAAW,GAAApY,KAAI,WAAU,KAAdA,KAAemK,GAC9B,KAAOiO,GAAYA,IAAaJ,GAC5BhM,EAAMxJ,KAAK4V,GACXA,EAAW,GAAApY,KAAI,WAAU,KAAdA,KAAeoY,GAG9B,OADApM,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAImO,EAAe,GAAAtY,KAAI,WAAc,KAAlBA,KAAmBmK,GACtC,KAAOmO,GAAgBA,IAAiBN,GACpChM,EAAMxJ,KAAK8V,GACXA,EAAe,GAAAtY,KAAI,WAAa,KAAjBA,KAAkBsY,GAGrC,OADAtM,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,I,YAGG7B,EAAmB6N,GAC7B,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAIoO,EAAU,GAAAvY,KAAI,WAAS,KAAbA,KAAcmK,GAC5B,KAAOoO,GAAWA,IAAYP,GAC1BhM,EAAMxJ,KAAK+V,GACXA,EAAU,GAAAvY,KAAI,WAAS,KAAbA,KAAcuY,GAG5B,OADAvM,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAIqO,EAAc,GAAAxY,KAAI,WAAa,KAAjBA,KAAkBmK,GACpC,KAAOqO,GAAeA,IAAgBR,GAClChM,EAAMxJ,KAAKgW,GACXA,EAAc,GAAAxY,KAAI,WAAa,KAAjBA,KAAkBwY,GAGpC,OADAxM,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,I,YAGQ+K,KAAsBP,GACrCxW,KAAKuX,eAAeR,GACE/W,KAAK0X,cAAcX,GAC3B3U,SAASqW,IACdjC,EAAMpQ,SAASqS,IAChB7D,GAAeU,YAAYmD,GAAgB,MAGnDjC,EAAMpU,SAASsW,IACM9D,GAAeyB,YAAYqC,IAExC9D,GAAeU,YAAYoD,GAAQ,MAG3C1Y,KAAKwX,aAAaT,I,YAGJA,KAAsBC,GACpChX,KAAKuX,eAAeR,GACC/W,KAAK2X,aAAaZ,GAC1B3U,SAASuW,IACb3B,EAAK5Q,SAASuS,IACfrC,GAAchB,YAAYqD,GAAe,MAGjD3B,EAAK5U,SAASwW,IACOtC,GAAcD,YAAYuC,IAEvCtC,GAAchB,YAAYsD,GAAO,MAGzC5Y,KAAKwX,aAAaT,I,YAGDA,KAAsBP,GACvCxW,KAAKuX,eAAeR,GACpBP,EAAMpU,SAASsW,IACM9D,GAAeyB,YAAYqC,IAExC9D,GAAeU,YAAYoD,GAAQ,MAG3C1Y,KAAKwX,aAAaT,I,YAGFA,KAAsBC,GACtChX,KAAKuX,eAAeR,GACpBC,EAAK5U,SAASwW,IACOtC,GAAcD,YAAYuC,IAEvCtC,GAAchB,YAAYsD,GAAO,MAGzC5Y,KAAKwX,aAAaT,I,YAGIA,KAAsBP,GAC5CxW,KAAKuX,eAAeR,GACpB,MAAMW,EAAgB1X,KAAK0X,cAAcX,GACzCP,EAAMpU,SAASsW,IACPhB,EAActR,SAASsS,IACvB9D,GAAeU,YAAYoD,GAAQ,MAG3C1Y,KAAKwX,aAAaT,I,YAGGA,KAAsBC,GAC3ChX,KAAKuX,eAAeR,GACpB,MAAMY,EAAe3X,KAAK2X,aAAaZ,GACvCC,EAAK5U,SAASwW,IACNjB,EAAavR,SAASwS,IACtBtC,GAAchB,YAAYsD,GAAO,MAGzC5Y,KAAKwX,aAAaT,I,YAGDA,GACjB/W,KAAKuX,eAAeR,GACE/W,KAAK0X,cAAcX,GAC3B3U,SAASsW,IACF9D,GAAeyB,YAAYqC,IAExC9D,GAAeU,YAAYoD,GAAQ,MAG3C1Y,KAAKwX,aAAaT,I,YAGFA,GAChB/W,KAAKuX,eAAeR,GACC/W,KAAK2X,aAAaZ,GAC1B3U,SAASwW,IACDtC,GAAcD,YAAYuC,IAEvCtC,GAAchB,YAAYsD,GAAO,MAGzC5Y,KAAKwX,aAAaT,I,YAGPA,EAAmBjC,GAC9B,MAAM+D,EAAa,GAAA7Y,KAAI,WAAe,KAAnBA,KAAoB+W,GACpB,OAAf8B,GAAuBA,IAAe/D,IACtCF,GAAemB,UAAU8C,GAAY,GACrCA,EAAW3J,UAAY,GAEd,OAAT4F,IACAF,GAAemB,UAAUjB,GAAM,GAC/BA,EAAK5F,SAAW,I,YAIV6H,EAAmBR,GAC7B,MAAMuC,EAAY,GAAA9Y,KAAI,WAAc,KAAlBA,KAAmB+W,GACnB,OAAd+B,GAAsBA,IAAcvC,IACpCD,GAAcP,UAAU+C,GAAW,GACnCA,EAAU5J,UAAY,GAEd,OAARqH,IACA3B,GAAemB,UAAUQ,GAAK,GAC9BA,EAAIrH,SAAW,I,YAIZqH,GACP,MAAMwC,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAczC,EACCwC,EAAYxM,c,YAGjCgK,GACN,MAAMwC,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAczC,EACCwC,EAAYE,a,YAG7BnE,GACV,MAAMiE,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAclE,EACCiE,EAAYG,gB,YAGjCpE,GACN,MAAMiE,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAclE,EACCiE,EAAYI,Y,YAG/BrE,GACR,MAAMsE,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAclE,EACEsE,EAAWlW,c,YAGhC6T,GACN,MAAMqC,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAcjC,EACEqC,EAAW7M,c,YAGjCwK,GACL,MAAMqC,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAcjC,EACEqC,EAAWH,a,YAG7B1C,GACT,MAAM6C,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAczC,EACE6C,EAAWF,gB,YAGjC3C,GACL,MAAM6C,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAczC,EACE6C,EAAWD,Y,YAGjCrE,GACL,MAAMuE,EAAa,GAAArZ,KAAI,WAAY,KAAhBA,KAAiB8U,GACpC,GAAIuE,EAAY,CACZ,MAAMC,EAAkBhD,GAAcE,MAAM6C,GACtCE,EAAY/R,MAAM2C,KAAKmP,EAAgB/X,UAAUmD,QAAQoQ,GACzD0D,EAAc,GAAAxY,KAAI,WAAa,KAAjBA,KAAkBqZ,GACtC,GAAIb,EAAa,CACb,MAAMgB,EAAmBlD,GAAcE,MAAMgC,GAC7C,OAAOgB,EAAiBjU,KAAKkU,IAAIF,EAAWC,EAAiBpY,UAGrE,OAAO,M,YAGC0T,GACR,MAAMuE,EAAa,GAAArZ,KAAI,WAAY,KAAhBA,KAAiB8U,GACpC,GAAIuE,EAAY,CACZ,MAAMC,EAAkBhD,GAAcE,MAAM6C,GACtCE,EAAY/R,MAAM2C,KAAKmP,EAAgB/X,UAAUmD,QAAQoQ,GACzDyD,EAAU,GAAAvY,KAAI,WAAS,KAAbA,KAAcqZ,GAC9B,GAAId,EAAS,CACT,MAAMmB,EAAepD,GAAcE,MAAM+B,GACzC,OAAOmB,EAAanU,KAAKkU,IAAIF,EAAWG,EAAatY,UAG7D,OAAO,M,YAgFOQ,GACd,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCgY,EAA0B/X,EAEhC,OADiB7B,KAAKsX,YAAYsC,IAE9B,IAAK,OAAQ,CACT,MAAMf,EAAa,GAAA7Y,KAAI,WAAe,KAAnBA,KAAoB4Z,GACnCf,GAAcc,IAAkBd,GAChCA,EAAWgB,QAEf,MAEJ,IAAK,MAAO,CACR,MAAMf,EAAY,GAAA9Y,KAAI,WAAc,KAAlBA,KAAmB4Z,GACjCd,GAAaa,IAAkBb,GAC/BA,EAAUe,QAEd,S,YAKQjY,GAChB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1BgY,EAA0B/X,EAEhC,OADiB7B,KAAKsX,YAAYsC,IAE9B,IAAK,OAAQ,CACT,MAAME,EAA2B7Z,EAAQ4Q,QAAqB,aAC1DiJ,GACA,GAAA9Z,KAAI,WAAe,KAAnBA,KAAoB4Z,EAAYE,GAEpC,MAEJ,IAAK,MAAO,CACR,MAAMC,EAA0B9Z,EAAQ4Q,QAAqB,YACzDkJ,GACA,GAAA/Z,KAAI,WAAc,KAAlBA,KAAmB4Z,EAAYG,GAEnC,S,YAKSnY,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCgY,EAA0B/X,GACP+X,EAAW3D,SAAe0D,KAE/CC,EAAW1K,SAAW,I,YAIVtN,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvBgY,EAA0B/X,EAC1BgX,EAAa,GAAA7Y,KAAI,WAAe,KAAnBA,KAAoB4Z,GACjCd,EAAY,GAAA9Y,KAAI,WAAc,KAAlBA,KAAmB4Z,GAC/B3C,EAAWjX,KAAKsX,YAAYsC,GAC5BI,EAAkBha,KAAKqX,mBAAmBuC,GAChD,OAAQ7a,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,GAAWD,EACX,OAAQ/C,GACJ,IAAK,OAAQ,CACT,MAAMiD,EAAW,GAAAla,KAAI,WAAU,KAAdA,KAAe4Z,GAC1BO,EAAYD,EAAW,GAAAla,KAAI,WAAW,KAAfA,KAAgBka,GAAY,KACnDE,EAAU,GAAApa,KAAI,WAAS,KAAbA,KAAc4Z,GACxBS,EAAWD,EAAU,GAAApa,KAAI,WAAU,KAAdA,KAAeoa,GAAW,KACrD,GAAID,GAAaE,EAAU,CACvB,MAAMrO,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KAAoBma,EAAWE,GACzCrO,GACA,GAAAhM,KAAI,WAAmB,KAAvBA,KAAwB4Z,KAAe5N,GAG/C,MAEJ,IAAK,MAAO,CACR,MAAMkO,EAAW,GAAAla,KAAI,WAAU,KAAdA,KAAe4Z,GAC1BQ,EAAU,GAAApa,KAAI,WAAS,KAAbA,KAAc4Z,GAC9B,GAAIM,GAAYE,EAAS,CACrB,MAAMpO,EAAQ,GAAAhM,KAAI,WAAc,KAAlBA,KAAmBka,EAAUE,GACvCpO,GACA,GAAAhM,KAAI,WAAkB,KAAtBA,KAAuB4Z,KAAe5N,GAG9C,OAIZpK,EAAM0Y,iBACN,MAEJ,IAAK,YACD,GAAgB,QAAZrD,GACI4B,EAAY,CACZ,MAAMP,EAAe,GAAAtY,KAAI,WAAc,KAAlBA,KAAmB6Y,GACxC,GAAIP,EAAc,CACdA,EAAauB,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACKpF,GAAeyB,YAAYiC,GAExC,GAAAtY,KAAI,WAA0B,KAA9BA,KAA+B4Z,EAAYtB,GAC3C,GAAAtY,KAAI,WAAqB,KAAzBA,KAA0B4Z,EAAYtB,KAK1D1W,EAAM6Y,kBACN,MAEJ,IAAK,aACD,GAAgB,QAAZxD,GACI4B,EAAY,CACZ,MAAMT,EAAW,GAAApY,KAAI,WAAU,KAAdA,KAAe6Y,GAChC,GAAIT,EAAU,CACVA,EAASyB,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACKpF,GAAeyB,YAAY+B,GAExC,GAAApY,KAAI,WAA0B,KAA9BA,KAA+B4Z,EAAYxB,GAC3C,GAAApY,KAAI,WAAqB,KAAzBA,KAA0B4Z,EAAYxB,KAK1DxW,EAAM6Y,kBACN,MAEJ,IAAK,UACD,OAAQxD,GACJ,IAAK,OAAQ,CACT,MAAMiD,EAAWpB,GAAa,GAAA9Y,KAAI,WAAU,KAAdA,KAAe4Z,GACvCc,EAAU7B,EACZ,GAAA7Y,KAAI,WAAS,KAAbA,KAAc6Y,GACdqB,EACA,GAAAla,KAAI,WAAW,KAAfA,KAAgBka,GAChB,KACJ,GAAIQ,EAAS,CACTA,EAAQb,MAAM,CAACU,eAAe,IAC9B,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACKpF,GAAeyB,YAAYqE,GAExC,GAAA1a,KAAI,WAA0B,KAA9BA,KAA+B4Z,EAAYc,GAC3C,GAAA1a,KAAI,WAAqB,KAAzBA,KAA0B4Z,EAAYc,IAGlD,MAEJ,IAAK,MAAO,CACR,MAAMlC,EAAcM,EAChB,GAAA9Y,KAAI,WAAa,KAAjBA,KAAkB8Y,GAClB,GAAA9Y,KAAI,WAAU,KAAdA,KAAe4Z,GACnB,GAAIpB,EAAa,CACbA,EAAYqB,MAAM,CAACU,eAAe,IAClC,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACK1D,GAAcD,YAAYmC,GAEvC,GAAAxY,KAAI,WAAyB,KAA7BA,KAA8B4Z,EAAYpB,GAC1C,GAAAxY,KAAI,WAAoB,KAAxBA,KAAyB4Z,EAAYpB,IAGjD,OAGR5W,EAAM6Y,kBACN,MAEJ,IAAK,YACD,OAAQxD,GACJ,IAAK,OAAQ,CACT,MAAMmD,EAAUtB,GAAa,GAAA9Y,KAAI,WAAS,KAAbA,KAAc4Z,GACrCe,EAAa9B,EACf,GAAA7Y,KAAI,WAAY,KAAhBA,KAAiB6Y,GACjBuB,EACA,GAAApa,KAAI,WAAU,KAAdA,KAAeoa,GACf,KACA,GAAIO,EAAY,CACZA,EAAWd,MAAM,CAACU,eAAe,IACjC,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACKpF,GAAeyB,YAAYsE,GAExC,GAAA3a,KAAI,WAA0B,KAA9BA,KAA+B4Z,EAAYe,GAC3C,GAAA3a,KAAI,WAAqB,KAAzBA,KAA0B4Z,EAAYe,KAItD,MACJ,IAAK,MAAO,CACR,MAAMpC,EAAUO,EACZ,GAAA9Y,KAAI,WAAS,KAAbA,KAAc8Y,GACd,GAAA9Y,KAAI,WAAS,KAAbA,KAAc4Z,GAClB,GAAIrB,EAAS,CACTA,EAAQsB,MAAM,CAACU,eAAe,IAC9B,MAAM,SAACC,GAAY5Y,EACf4Y,GAAYR,IACK1D,GAAcD,YAAYkC,GAEvC,GAAAvY,KAAI,WAAyB,KAA7BA,KAA8B4Z,EAAYrB,GAC1C,GAAAvY,KAAI,WAAoB,KAAxBA,KAAyB4Z,EAAYrB,IAGjD,OAGR3W,EAAM6Y,kBACN,MAEJ,IAAK,OACD,OAAQxD,GACJ,IAAK,OACD,GAAI6B,EAAW,CACX,MAAMqB,EAAY,GAAAna,KAAI,WAAW,KAAfA,KAAgB8Y,GAC9BqB,GACAA,EAAUN,MAAM,CAACU,eAAe,IAGxC,MAEJ,IAAK,MAAO,CACR,MAAML,EAAW,GAAAla,KAAI,WAAU,KAAdA,KAAe4Z,GAC5BM,GACAA,EAASL,MAAM,CAACU,eAAe,IAEnC,OAGR3Y,EAAM6Y,kBACN,MAEJ,IAAK,MACD,OAAQxD,GACJ,IAAK,OACD,GAAI6B,EAAW,CACX,MAAMuB,EAAW,GAAAra,KAAI,WAAU,KAAdA,KAAe8Y,GAC5BuB,GACAA,EAASR,MAAM,CAACU,eAAe,IAGvC,MAEJ,IAAK,MAAO,CACR,MAAMH,EAAU,GAAApa,KAAI,WAAS,KAAbA,KAAc4Z,GAC1BQ,GACAA,EAAQP,MAAM,CAACU,eAAe,IAElC,OAGR3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACD,OAAQxD,GACJ,IAAK,OACG4B,IACA,GAAA7Y,KAAI,WAAmB,KAAvBA,KAAwB4Z,EAAYf,GACpCA,EAAW+B,SAEf,MAEJ,IAAK,MACG9B,IACA,GAAA9Y,KAAI,WAAkB,KAAtBA,KAAuB4Z,EAAYd,GACnCA,EAAU8B,SAKtBhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,OAAQxD,GACJ,IAAK,OACD,GAAAjX,KAAI,WAAqB,KAAzBA,KAA0B4Z,GAC1B,GAAA5Z,KAAI,WAAe,KAAnBA,KAAoB4Z,EAAY,MAChC,MAEJ,IAAK,MACD,GAAA5Z,KAAI,WAAoB,KAAxBA,KAAyB4Z,GACzB,GAAA5Z,KAAI,WAAc,KAAlBA,KAAmB4Z,EAAY,MAIvCA,EAAWC,QACXjY,EAAM6Y,oB,YAMI7Y,GAClB,MAAM,cAACC,EAAa,OAAE5B,EAAM,QAAEga,EAAO,SAAEO,GAAY5Y,EAC7CgY,EAA0B/X,EAC1BoV,EAAWjX,KAAKsX,YAAYsC,GAC5BI,EAAkBha,KAAKqX,mBAAmBuC,GAChD,OAAQ3C,GACJ,IAAK,OAAQ,CACT,MAAM6C,EAA2B7Z,EAAQ4Q,QAAqB,aAC9D,GAAIiJ,EAAY,CACZ,GAAIE,EACA,GAAKQ,GAAaP,GAGb,GAAIA,EACYrF,GAAeyB,YAAYyD,GAGxC,GAAA9Z,KAAI,WAA0B,KAA9BA,KAA+B4Z,EAAYE,GAD3C,GAAA9Z,KAAI,WAAqB,KAAzBA,KAA0B4Z,EAAYE,GAE1ClY,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAM3B,EAAa,GAAA7Y,KAAI,WAAe,KAAnBA,KAAoB4Z,GACvC,GAAIf,EAAY,CACZ,MAAM7M,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV6Y,EACAiB,GAEA9N,GACA,GAAAhM,KAAI,WAAmB,KAAvBA,KAAwB4Z,KAAe5N,GAG/CpK,EAAM6Y,wBApBN,GAAAza,KAAI,WAAmB,KAAvBA,KAAwB4Z,EAAYE,QAwBxC,GAAA9Z,KAAI,WAAmB,KAAvBA,KAAwB4Z,EAAYE,GAExClY,EAAM6Y,kBAEV,MAEJ,IAAK,MAAO,CACR,MAAMV,EAA0B9Z,EAAQ4Q,QAAqB,YAC7D,GAAIkJ,EAAW,CACX,GAAIC,EACA,GAAKQ,GAAaP,GAGb,GAAIA,EACY3D,GAAcD,YAAY0D,GAGvC,GAAA/Z,KAAI,WAAyB,KAA7BA,KAA8B4Z,EAAYG,GAD1C,GAAA/Z,KAAI,WAAoB,KAAxBA,KAAyB4Z,EAAYG,GAEzCnY,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAM1B,EAAY,GAAA9Y,KAAI,WAAc,KAAlBA,KAAmB4Z,GACrC,GAAId,EAAW,CACX,MAAM9M,EAAQ,GAAAhM,KAAI,WAAc,KAAlBA,KACV8Y,EACAiB,GAEA/N,GACA,GAAAhM,KAAI,WAAkB,KAAtBA,KAAuB4Z,KAAe5N,GAG9CpK,EAAM6Y,wBApBN,GAAAza,KAAI,WAAkB,KAAtBA,KAAuB4Z,EAAYG,QAwBvC,GAAA/Z,KAAI,WAAkB,KAAtBA,KAAuB4Z,EAAYG,GAEvCnY,EAAM6Y,kBAEV,S,YAKO7Y,GACf,MAAM,cAACC,GAAiBD,EAClBiZ,EAA0BhZ,EAC5BgZ,IACI,GAAA7a,KAAI,QAAcZ,IAAIyb,GACtB,GAAA7a,KAAI,QAAsByC,IAAIoY,GAAY,GAG1CA,EAAW9X,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,O,4pBC32B5E8L,GAAiB,IACrBnG,GAAO,CACHnM,KAAM,YAFc,EAGtB,GACF,cAAwCgL,GAcpC1T,cACIkD,Q,aAdJ,oBACA,oBACA,oBACA,oBACA,oBACA,oBAUI,GAAAhD,KAAI,GAAqB,EAAQ,OAAQ,CACrCuJ,WAAY,CACRsL,MAAO,UAEb,KACF,GAAA7U,KAAI,GAAsB,EAAQ,OAAQ,CACtCuJ,WAAY,CACRsL,MAAO,WAEb,KACF,GAAA7U,KAAI,GAA6B,EAAQ,OAAQ,CAC7CuJ,WAAY,CACRsL,MAAO,kBAEb,KACF,GAAA7U,KAAI,GAAa,EAAQ,SAAU,CAC/BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,WACN1M,KAAM,SACNqQ,UAAW,GAEfrI,SAAU,CACN,GAAAzJ,KAAI,QAAmBqO,WAAU,GACjC,EAAQ,OAAQ,CACZ9E,WAAY,CACRsL,MAAO,cAIrB,KACF,GAAA7U,KAAI,GAAU,CAAC,WAAY,QAAS,OAAQ,UAAW,UAAS,KAChE,GAAAA,KAAI,GAAkB,CAClBgS,OAAQ,CACJ7D,KAAM,WACN4M,SAAS,EACTC,UAAU,GAEd/I,SAAU,CACN9D,KAAM,mBACN4M,SAAS,EACTC,UAAU,GAEd9I,MAAO,CACH/D,KAAM,gBACN4M,SAAS,EACTC,UAAU,GAEd5L,KAAM,CACFjB,KAAM,WACN4M,SAAS,EACTC,UAAU,GAEd7I,QAAS,CACLhE,KAAM,WACN4M,SAAS,EACTC,UAAU,IAEjB,KAGLvH,OAAO1T,GAYH,MAAMsB,EAAoB,GAAArB,KAAI,QAAWqO,WAAU,GAEnD,GADAhN,EAAKiB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,YAC9CK,IAATN,EAAoB,CACpB,MAAM,GAACgV,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,YAAE+L,EAAW,QAAE3J,EAAO,KAAE7P,EAAI,MAAEkQ,EAAK,KAAEnJ,EAAI,MAAE5I,EAAK,SAAEqV,GAAYlV,OACjFM,IAAP0U,IACA1T,EAAK0T,GAAKA,QAEI1U,IAAd2U,GACA3T,EAAK2T,UAAUG,OAAOH,QAET3U,IAAb6O,IACA7N,EAAK6N,SAAWA,QAEA7O,IAAhB4a,GACAjb,KAAKkb,eAAe7Z,EAAM4Z,QAEd5a,IAAZiR,GACAtR,KAAKmb,WAAW9Z,EAAMiQ,QAEbjR,IAAToB,IACY,QAARA,GAA0B,WAARA,GAClBzB,KAAKob,YAAY/Z,GAAM,GAE3BrB,KAAKqb,QAAQha,EAAMI,SAETpB,IAAVsR,GACA3R,KAAK0V,SAASrU,EAAMsQ,QAEXtR,IAATmI,GACAxI,KAAKsb,QAAQja,EAAMmH,QAETnI,IAAVT,GACAI,KAAKub,SAASla,EAAMzB,QAEPS,IAAb4U,GACAjV,KAAKoV,YAAY/T,EAAM4T,GAG/B,OAAO5T,EAGXwQ,KAAKxQ,GACD,OAAOA,EAGXgS,gBAAgBhS,EAAmBwQ,GAC/B,MAAM2J,EAAehU,MAAM2C,KAAK0H,EAAK6E,YAAY+E,MAC7CC,GAAeA,aAAuB5N,aAAe4N,EAAY1G,UAAUiB,SAAS,UAExF5U,EAAKwG,aAAa,gBAAiBX,OAAOsU,IAO9CG,QAAQta,GACJ,OAAOA,EAAK4H,cAA2B,kBAG3C2S,eAAeva,GACX,OAAOA,EAAK2G,aAAa,qBAG7BkT,eAAe7Z,EAAmBzB,GAC9B,IAAIic,EAAmBxa,EAAK4H,cAAc,0BAC1C,GAAc,OAAVrJ,EAAgB,CAEhB,GADAyB,EAAKwG,aAAa,oBAAqBjI,IAClCic,EAAkB,CACnB,MAAMC,EAAY,GAAA9b,KAAI,WAAO,KAAXA,KAAYqB,GAE9Bwa,EADiC,GAAA7b,KAAI,QACoBqO,WAAU,GACnEyN,EAAUC,MAAMF,GAEpBA,EAAiBpG,YAAc7V,OAG/ByB,EAAKyG,gBAAgB,qBACjB+T,GACAA,EAAiBpW,SAK7B+P,SAASnU,GACL,OAAO,GAAArB,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,aAAe,GAG5CC,SAASrU,EAAmBzB,GACxB,GAAAI,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,YAAc7V,EAGpCoc,QAAQ3a,GACJ,MAAM4a,EAAQ,GAAAjc,KAAI,SACZ,UAACgV,GAAa3T,EACpB,IAAK,IAAI6a,KAAUD,EACf,GAAIjH,EAAUiB,SAAS,YAAYiG,KAC/B,OAAOA,EAGf,OAAO,KAGXb,QAAQha,EAAmBI,GACvB,MAAM0a,EAAgB,GAAAnc,KAAI,QACpBoc,EAAmB,GAAApc,KAAI,QACvBqc,EAAoB,GAAArc,KAAI,SACxB,KAACmO,EAAI,QAAE4M,EAAO,SAAEC,GAAYmB,EAAc1a,GAC1C6a,EAAUtc,KAAKgc,QAAQ3a,IACvB,UAAC2T,GAAa3T,EAChBib,GACAtH,EAAUvP,OAAO,YAAY6W,KAEjCtH,EAAUG,IAAI,YAAY1T,KAC1BJ,EAAKwG,aAAa,OAAQsG,GAC1B,MAAM2N,EAAY,GAAA9b,KAAI,WAAO,KAAXA,KAAYqB,GACxBkb,EAAWlb,EAAK4H,cAAc,kBAC9BuT,EAAYnb,EAAK4H,cAAc,mBACjC8R,GACKwB,GAAYT,GACbA,EAAUnP,OAAOyP,EAAiB/N,WAAU,IAI5CkO,GACAA,EAAS9W,SAGbuV,GACKwB,GAAaV,GACdA,EAAUC,MAAMM,EAAkBhO,WAAU,IAI5CmO,GACAA,EAAU/W,SAKtBgX,SAASpb,GACL,OAAOA,EAAK2G,aAAa,UAAY,GAGzCuT,SAASla,EAAmBzB,GACxByB,EAAKwG,aAAa,QAASjI,GAG/B8c,QAAQrb,GACJ,OAAOA,EAAK2G,aAAa,SAAW,GAGxCsT,QAAQja,EAAmBzB,GACvByB,EAAKwG,aAAa,OAAQjI,GAG9B+c,WAAWtb,GACP,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,iBAAmBd,QAAO,IAGlEiU,WAAW9Z,EAAmBzB,GAC1ByB,EAAKwG,aAAa,eAAgBX,OAAOtH,IAG7CwW,YAAY/U,GACR,OAAOA,EAAKuG,aAAa,iBAG7BwN,YAAY/T,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1Cwb,YAAY/Z,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAG9Cgd,YAAYvb,GACR,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,kBAAoBd,QAAO,IAGnEyH,OAAOtN,EAAmBuN,GACtB,MAAME,EAASF,IAAU5O,KAAK4c,YAAYvb,GAC1CrB,KAAKob,YAAY/Z,EAAMyN,GACnBA,GACA,GAAA9O,KAAI,WAAc,KAAlBA,KAAmBqB,GAI3ByN,OAAOzN,GACcrB,KAAK4c,YAAYvb,KAE9BrB,KAAKob,YAAY/Z,GAAM,GACvB,GAAArB,KAAI,WAAc,KAAlBA,KAAmBqB,IAI3B8N,SAAS9N,GACYrB,KAAK4c,YAAYvb,IAE9BrB,KAAKob,YAAY/Z,GAAM,K,qHAnJxBA,GACH,OAAOA,EAAK4H,cAA2B,oB,YAsJzBrH,GACd,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1Bib,EAAwC5c,EAAQ4Q,QAAQ,aAC9D,GAAIgM,GAAchb,EAEd,OADa7B,KAAKgc,QAAQa,IAEtB,IAAK,WACD7c,KAAKmb,WAAW0B,GAAa7c,KAAK2c,WAAWE,IAC7C,MAEJ,IAAK,QACD7c,KAAKmb,WAAW0B,GAAY,GAC5B,MAEJ,IAAK,OACL,IAAK,UACD7c,KAAK2O,OAAOkO,GACR7c,KAAK4c,YAAYC,IACjB7c,KAAK2b,QAAQkB,IAAahD,MAAM,CAACU,eAAe,M,YAQtDlZ,GACV,MAAM+N,EAAOpP,KAAK2b,QAAQta,GAC1B,GAAa,OAAT+N,EAAe,CACf,MAAOC,MAAOC,GAAaF,GACpBG,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAazO,EAAK0O,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAcf,EAAKW,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpH,SAASqH,KAE7C,GAAY,QADCzQ,KAAKgc,QAAQ3a,GACN,CAChB,MAAMqP,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,OAAQ,GAC1BsM,EAAY,EACZL,EAAUT,EAAWK,EACrBI,EAAUT,OAEdN,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZP,EAAUZ,EAAUW,EACpBC,EAAUV,WAGb,CACD,MAAMkB,EAAcvP,EAAKwP,QAAQ,SACjC,GAAoB,OAAhBD,EAAsB,CACtB,MAAOrB,IAAKuB,EAAgBnB,KAAMoB,GAAmBH,EAAYb,wBAC3DW,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,QAClBsM,EAAY,EACZd,EAAWK,EAAYc,EACvBjB,EAAYiB,GAHc,MAK9B,MAAMC,EAAoBV,OAAOW,iBAAiB7B,IAC5C,WAAC8B,EAAU,cAAEC,GAAiBH,EAC9BI,EAAiB/I,WAAW6I,GAC5BG,EAAoBhJ,WAAW8I,GACrC7B,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZjB,EAAaS,EAAaW,EAAiBO,EAC3C7B,EAAUsB,EAAiBM,W,m+BC5YnD,MAAM0L,WAAkBxY,EAMpBxE,YAAYC,GACRiD,QACA,MAAOgU,KAAM+F,EAAW,GAAIC,QAASC,EAAc,IAAMld,GAAQ,GAC3DiX,EAAO,IAAIzS,EAAUwY,GAC3B/F,EAAK/T,UAAUjD,MACfA,KAAKgX,KAAOA,EACZ,MAAMgG,EAAU,IAAIzY,EAAU0Y,GAC9BD,EAAQ/Z,UAAUjD,MAClBA,KAAKgd,QAAUA,EAGnBE,gBAAgB1U,GACZ,OAAOhB,MAAM2C,KAAKnK,KAAKgd,QAAQzb,UAAU4b,MACrCC,GAAYA,EAAS5U,MAAQA,KAC5B,KAGT6U,aAAaC,EAAyBC,GAClC/V,MAAM2C,KAAKnK,KAAKgd,QAAQzb,UAAUa,SAASgb,IACvCA,EAASI,UAAYJ,IAAaE,EAASC,OAAYld,KAE3D,MAAMod,EAAW,MACb,MAAM,KAAChc,GAAQ6b,EACf,OAAQ7b,GACJ,KAAKyF,OACD,MAAO,CAACwW,EAAqBC,KACzB,MAAMC,EAAS1W,OAAOoW,EAAOO,QAAQH,IAC/BI,EAAS5W,OAAOoW,EAAOO,QAAQF,IACrC,OAAOJ,EAAYK,EAAOG,cAAcD,IAGhD,QACI,MAAO,CAACJ,EAAqBC,KACzB,MAAMC,EAASxV,OAAOkV,EAAOO,QAAQH,IAC/BI,EAAS1V,OAAOkV,EAAOO,QAAQF,IACrC,OAAOpY,KAAKyY,KAAKT,GAAaK,EAASE,OAdtC,GAmBjB9d,KAAKgX,KAAKrS,KAAK8Y,IAavB,MAAMQ,WAA6D3Z,EAU/DxE,YAAYC,GAORiD,QACA,MAAM,KAACwF,EAAI,KAAE/G,EAAI,MAAEkQ,EAAK,QAAEkM,EAAO,QAAEK,EAAU,IAAMne,EACnDC,KAAKwI,KAAOA,EACZxI,KAAKyB,KAAOA,EACZzB,KAAK2R,MAAQA,EACb3R,KAAK6d,QAAUA,EACf7d,KAAKke,QAAUA,EACfle,KAAKwd,UAAY,GAhBrB,IADCvZ,K,iCAqBL,MAAMka,WAAqB7Z,EASvBxE,YAAYC,GAKRiD,QACA,MAAM,GAAC+R,EAAE,KAAEvM,EAAI,IAAE4V,GAAOre,EACxBC,KAAK+U,GAAKA,EACV/U,KAAKwI,KAAOA,EACZxI,KAAKoe,IAAMA,GAdf,IADCna,K,4BAID,IADCA,K,2BAwCL,IAAMoa,GAAN,cAA2BzL,GAmBvB9S,YAAY4K,GACR1H,Q,aAfJ,oBACA,oBAQA,oBACA,oBAMI,GAAAhD,KAAI,GAAmB,GAAE,KACzB,GAAAA,KAAI,GAAiB,KAAI,KACzBA,KAAK+N,aAAa,CAACC,KAAM,SACzB,GAAAhO,KAAI,IACA,CAACuW,EAAmB+G,IAChB,EAAQ,QAAS,CACb7T,SAAU6T,EAAOO,QAAQtH,MAC3B,KACV,GAAAvW,KAAI,IACCsd,GACG,EAAQ,QAAS,CACb7T,SAAU6T,EAAO3L,SACnB,KACV3R,KAAKqS,SAAS3H,GAAS,IAAIoS,IAG/BxO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,YACL,IAAK,WACDxI,KAAKwS,WAMjB,kBACI,OAAOxS,KAAKse,iBAGhBC,kBAAkBC,GACd,GAAAxe,KAAI,GAAmBwe,EAAQ,KAGnCC,gBAAgBD,GACZ,GAAAxe,KAAI,GAAiBwe,EAAQ,KAGjCF,iBACI,OAAOte,KAAKgJ,WAAWC,cAAc,UAGzCyV,cAAcnI,GACV,OAAOvW,KAAKgJ,WAAWC,cAAc,+CAA+CsN,EAAIxB,QAG5F4J,uBAAuBrB,GACnB,OAAOtd,KAAKgJ,WAAWC,cAAc,uCAAuCqU,EAAO9U,SAGvFoW,uBAAuBtB,GACnB,OAAO9V,MAAM2C,KAAKnK,KAAKgJ,WAAWyN,iBAAiB,yDAAyD6G,EAAO9U,UAGvH+J,eACI,MAAM,MAAC7H,GAAS1K,KAChB,OAAOkJ,EACH,EAAQ,OAAQ,CACZK,WAAY,CACRsV,IAAK,aACLC,KAAM,kBAGd,EAAQ,OAAQ,CACZvV,WAAY,CACRsV,IAAK,aACLC,KAAM,4BAGd,EAAQ,MAAO,CACXrV,SAAU,EAAQ,QAAS,CACvBF,WAAY,CACR9H,KAAM,UAEViI,UAAW,CACPqV,MAAsB,GAAA/e,KAAI,WAAyB0G,KAAK1G,WAIpE,EAAQ,SAAU,CACduJ,WAAY,CACRuI,SAAU,EACVmF,SAAU,MACVC,eAAe,GAEnBzN,SAAU,CACN,EAAQ,aAAc,CAClBA,SAAU2D,EACN1C,EAAMsS,SAASM,GAAU,GAAAtd,KAAI,WAA4B,KAAhCA,KAAiCsd,KAE9D5T,UAAW,CACPsV,YAA4B,GAAAhf,KAAI,WAA6B0G,KAAK1G,MAClE4a,MAAsB,GAAA5a,KAAI,WAAuB0G,KAAK1G,SAG9D,EAAQ,aAAc,CAClByJ,SAAU2D,EACN1C,EAAMsM,MAAMT,GAAO,GAAAvW,KAAI,WAAmB,KAAvBA,KAAwBuW,WAenE0I,gBAAgB/Y,GACZ,MAAM,MAACwE,EAAK,YAAEwU,GAAelf,MACvB,KAACgX,GAAQtM,EACf,GAAA1K,KAAI,GAAiBkG,EAAM,KAC3BsB,MAAM2C,KAAK6M,EAAKzV,UAAUa,SAASwW,IAC/B,MAAMuG,EAAanf,KAAK0e,cAAc9F,GAClCuG,IACAA,EAAWvH,QAAU,GAAA5X,KAAI,WAAQ,KAAZA,KAAa4Y,OAG1CjC,GAAWc,eAAeyH,GAG9BE,iBAAiBlZ,GACb,MAAM,MAACwE,EAAK,YAAEwU,GAAelf,MACvB,KAACgX,GAAQtM,EACT2U,EAAiB,GAAArf,KAAI,QACtBqf,EAAejZ,SAASF,KACzBmZ,EAAe7c,KAAK0D,GACpBsB,MAAM2C,KAAK6M,EAAKzV,UAAUa,SAASwW,IAC/B,MAAMuG,EAAanf,KAAK0e,cAAc9F,GAClCuG,IACAA,EAAWvH,QAAU,GAAA5X,KAAI,WAAQ,KAAZA,KAAa4Y,QAI9CjC,GAAWc,eAAeyH,GAG9BI,oBAAoBpZ,GAChB,MAAM,MAACwE,EAAK,YAAEwU,GAAelf,MACvB,KAACgX,GAAQtM,EACT2U,EAAiB,GAAArf,KAAI,QACrBuf,EAAcF,EAAe3a,QAAQwB,GACvCqZ,GAAe,IACfF,EAAexc,OAAO0c,EAAa,GACnC/X,MAAM2C,KAAK6M,EAAKzV,UAAUa,SAASwW,IAC/B,MAAMuG,EAAanf,KAAK0e,cAAc9F,GAClCuG,IACAA,EAAWvH,QAAU,GAAA5X,KAAI,WAAQ,KAAZA,KAAa4Y,QAI9CjC,GAAWc,eAAeyH,K,uFAlDtB3I,GACJ,MAAM8I,EAAiB,GAAArf,KAAI,QACrBwf,EAAe,GAAAxf,KAAI,QACzB,SAAQqf,EAAeje,OAAS,IAAIie,EAAe5D,MAAKgE,GAAYA,EAASvZ,OAAOqQ,SACnFiJ,GAAeA,EAAatZ,OAAOqQ,KACvC,YAgD2B+G,GA+CxB,OA9C0B3S,EACtB2S,EACA,EAAQ,aAAc,CAClB/T,WAAY,CACR9H,KAAM,eACNsT,GAAIuI,EAAO9U,MAEfiB,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,sBAEXpL,SAAmB,CACf,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,oBAEXpL,SAAU,GAAAzJ,KAAI,QAAgB,KAApBA,KAAqBsd,MAEpChS,OACCtL,KAAK0f,UAAY,CACbtM,GAAO,YAAa,CAChBtN,WAAY,CACR6Z,SAAUrC,EAAO9U,SAGzB,SAKpB,CAAC,cACD,CAACsM,EAAMrR,EAAUrD,EAAUE,KACvB,OAAQmD,GACJ,IAAK,YACD,MAAM,QAAC+F,GAAWsL,OACM,IAAbxU,EACPkJ,EAAQgU,UAAYld,EAASsf,kBAGtBpW,EAAQgU,eAOtC,YAEkBjH,GACf,MAAM,MAAC7L,GAAS1K,KAShB,OARuB,EAAQ,YAAa,CACxCwJ,QAAS,CACLlI,MAAOiV,EAAIxB,IAEftL,SAAU2D,EACN1C,EAAMsS,SAASM,GAAU,GAAAtd,KAAI,WAAoB,KAAxBA,KAAyBuW,EAAK+G,QAIlE,YAEmB/G,EAAmB+G,GAoBnC,OAnBwB,EAAQ,aAAc,CAC1C/T,WAAY,CACR9H,KAAM,WACNyT,QAASoI,EAAO9U,MAEpBiB,SAAU,EAAQ,OAAQ,CACtBF,WAAY,CACRsL,MAAO,oBAEXpL,SAAmB,CACf,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,kBAEXpL,SAAU,GAAAzJ,KAAI,QAAc,KAAlBA,KAAmBuW,EAAK+G,WAMrD,YAE2B1b,GACxB,MAAM,QAACie,EAAO,QAAEC,EAAO,cAAEje,EAAa,OAAE5B,GAAU2B,EAC5Cme,EAA0Ble,EAC1Bme,EAAmD/f,EAAQ4Q,QAAQ,eACnE,MAACnG,GAAS1K,KAChB,GAAIggB,EAAc,CACd,MAAM1C,EAAS5S,EAAMwS,gBAAgB8C,EAAajL,IAC5CkL,EAAc,EAAQ,SAAW,CACnC1W,WAAY,CACR2W,YAAY,GAEhBzW,SAAU,CACN,EAAQ,aAAe,CACnBF,WAAY,CACRoI,MAAO,eAEXlI,SAAU,cACVC,UAAW,CACPkR,MAAO,KACH,MAAMuF,EAAsBngB,KAAK2e,uBAAuBrB,GAGxD,GAFA8C,QAAQC,IAAI/C,GACZ8C,QAAQC,IAAIF,GACRA,EAAqB,CACrB,MAAM,MAAC9Q,GAAS8Q,EAIVG,EAHStgB,KAAK4e,uBAAuBtB,GAAQxY,KAC/C4T,GAAUA,EAAOzP,cAAc,qBAEXsX,QACpB,CAACD,EAAU3O,IAAUpM,KAAKib,IAAIF,EAAU3O,EAAM5B,wBAAwBC,QAAQ,GAElFoQ,QAAQC,IAAIC,GACZjR,EAAMjL,YAAY,QAAS,GAAGkc,YAK9C,EAAQ,aAAe,CACnB/W,WAAY,CACRoI,MAAO,qBAEXlI,SAAU,oBACVC,UAAW,CACPkR,MAAO,KACH,MAAMuF,EAAsBngB,KAAK2e,uBAAuBrB,GACxD,GAAI6C,EAAqB,CACrB,MAAM,MAAC9Q,GAAS8Q,EAChB9Q,EAAMoR,eAAe,cAKrC,EAAQ,aAAe,CACnBlX,WAAY,CACR9H,KAAM,UACNkQ,MAAO,QAEXlI,SAAU,CACN,OACA,EAAQ,SAAW,CACfF,WAAY,CACRsI,KAAM,QAEVpI,SAAU,CACN,EAAQ,aAAe,CACnBF,WAAY,CACR9H,KAAM,QACN+G,KAAM,OACN5I,MAAO,IACP+R,MAAO,aAEXlI,SAAU,cAEd,EAAQ,aAAe,CACnBF,WAAY,CACR9H,KAAM,QACN+G,KAAM,OACN5I,MAAO,KACP+R,MAAO,cAEXlI,SAAU,gBAGlBC,UAAW,CACPkR,MAAQhZ,IACJ,MAAM,OAAC3B,GAAU2B,EACXib,EAA0B5c,EAC5B4c,EAAW7H,UAAUiB,SAAS,aAC9BvL,EAAM2S,aAAaC,EAAQlV,OAAO0S,GAAe2B,SAASI,YAOlF,EAAQ,aAAe,CACnBtT,WAAY,CACR9H,KAAM,UACNkQ,MAAO,UAEXlI,SAAU,CACN,SACA,EAAQ,SAAW,CACfF,WAAY,CACRsI,KAAM,QAEVpI,SAAU6T,EAAOY,QAAQpZ,KAAI,CAAC2a,EAAU1a,IACpC,EAAQ,aAAc,CAClBwE,WAAY,CACR9H,KAAM,WACN6P,QAAS,GAAAtR,KAAI,QAAiBoG,SAASqZ,GACvC9N,MAAO8N,EAASjX,MAEpBiB,SAAUgW,EAASjX,KACnBkB,UAAW,CACPkR,MAAQhZ,IACJ,MAAM,cAACC,GAAiBD,EAClBib,EAA0Bhb,EAChBiZ,GAAe6B,WAAWE,GAEtC7c,KAAKof,iBAAiBK,GAGtBzf,KAAKsf,oBAAoBG,iBAWjEM,EAAW1a,OAAO4a,GAClBA,EAAYS,mBAAmBb,EAASC,GACxCG,EAAYpG,MAAM,CAACU,eAAe,IAClC3Y,EAAM0Y,mBAEb,YAEuB1Y,GACpB,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkB0gB,iBAAkB,CACpC,MAAM,MAAC/gB,GAASK,EAChBD,KAAKif,gBAA0B,KAAVrf,EAAe,CAChCsG,OAASqQ,GAAQA,EAAI/N,KAAKxB,cAAcZ,SAASxG,EAAMoH,gBACvD,QAEX,YAEqBpF,GAClB,MAAM,OAAC3B,GAAU2B,EAEjB,GAD0C3B,EAAQ2gB,QAAQ,oDACjC,CACrB,MAAMZ,EAAmD/f,EAAQ4Q,QAAQ,eACnE,MAACnG,GAAS1K,MACV,QAACgd,GAAWtS,EAClB,GAAIsV,EAAc,CACd,MAAMa,EAAerZ,MAAM2C,KAAK6S,EAAQzb,UAAU4b,MAAKC,GAAYA,EAAS5U,MAAQwX,EAAajL,KACjG,GAAI8L,EAAc,CACd,MAAMrD,OAAuCnd,IAA3BwgB,EAAarD,WAA2BqD,EAAarD,UAAY,EACnF9S,EAAM2S,aAAawD,EAAcrD,OAjajD,IADCvW,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,iCAI7C,IADCJ,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAX3CgX,GAAY,IAHjB/V,EAAc,CACXE,KAAM,gBAEJ6V,IAibN,I,iCAAIyC,GAAgCzC,G,2SCxjBpC,MAAM0C,WAAkBzc,EASpBxE,YAAYC,GAGRiD,Q,aACA,MAAM,MAAC9B,EAAK,aAAE8f,GAAgBjhB,GAAQ,GAChCkhB,EAAa,IAAI1c,EAAUrD,GAAS,IAC1C+f,EAAWhe,UAAUjD,MACrBA,KAAKihB,WAAaA,EAClBjhB,KAAKkB,MAAQ,IAAIqD,EAAUvE,KAAKkhB,gBAChClhB,KAAKghB,aAAeA,GAChB,SAASG,EAAuBC,GAC5B,OAAOD,EAAOxP,MAAMoM,cAAcqD,EAAOzP,QAEjD3R,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OAyB3EkhB,eACI,MAAM,WAACD,GAAcjhB,KACrB,OAAOwH,MAAM2C,KAAK8W,EAAW1f,UAAU8f,SACnCC,GAAc9Z,MAAM+Z,GAAGD,KAAeP,GAAUxhB,UAAU2hB,aAAazhB,KAAK6hB,MAIpFE,aAA8CC,GAC1C,MAAM,WAACR,GAAcjhB,MACdoB,OAAQsgB,GAAcT,GACtB7f,OAAQugB,GAAaF,EAC5B,IAAK,IAAI1c,EAAI,EAAGA,EAAI2c,EAAY3c,IAAK,CACjC,MAAMP,EAASyc,EAAW7hB,IAAI2F,IACvB0c,IAAKG,GAAWpd,GAChBpD,OAAQygB,GAAiBD,EAChC,GAAIH,EAAIK,WAAWF,GAAU,CACzB,GAAiC,KAA7BH,EAAIM,OAAOF,GACX,OAAOd,GAAUxhB,UAAUiiB,aAAa/hB,KAAK+E,EAAQid,GAEpD,GAAII,GAAiBF,EACtB,OAAsBnd,GAIlC,OAAO,M,2BA9Ca5C,GACpB,MAAM,OAAC3B,GAAU2B,GACX,MAACV,EAAK,aAAE8f,EAAY,aAAEE,GAAgBlhB,KACxCC,aAAkBsE,GACFtE,EAAOuD,aACfpB,SAAS+D,IACb,MAAM,cAACxF,EAAa,aAAEH,GAAgB2F,EAChC6b,EAA2Cxa,MAAM2C,KAAKxJ,EAAcY,UAAW8f,SACjFY,GAAkBza,MAAM+Z,GAAGU,KAAmBf,EAAazhB,KAAKwiB,MAE9DC,EAA0C1a,MAAM2C,KAAK3J,EAAae,UAAW8f,SAC/E1b,GAAiB6B,MAAM+Z,GAAG5b,KAAkBub,EAAazhB,KAAKkG,MAElEzE,EAAMoC,eACNpC,EAAMmE,UAAU2c,GAChBE,EAAsB9f,SAASuD,GAAkBzE,EAAMuE,OAAOE,KAC1Dqb,GAAc9f,EAAMyD,KAAKqc,GAC7B9f,EAAMqC,iBAiCtB,MAAM4e,GAGFriB,YAAYoB,GACRlB,KAAKkB,MAAQA,EAGjB,YACI,OAAOlB,KAAKkB,MAAME,OAGtBqE,SACI,MAAM,MAACvE,GAASlB,KACVoiB,EAAqBlhB,EAAMqf,QAAO,CAACzb,EAAKN,KAC1C,MAAM,WAACtB,GAAcsB,EACrB,GAAItB,aAAsBmf,IAAiBnf,aAAsB6d,GAAW,CACxE,MAAM,WAACE,GAAc/d,EACfof,EAAQxd,EAAI1F,IAAI6hB,GAClBqB,EAAOA,EAAM9f,KAAKgC,GACjBM,EAAIrC,IAAIwe,EAAY,CAACzc,IAE9B,OAAOM,IACR,IAAI7C,KACPuF,MAAM2C,KAAKiY,EAAmBvY,WAAWzH,SACrC,EAAEmgB,EAAQC,MACND,EAAOjf,eACPkf,EAAWpgB,SAASqgB,IAChBF,EAAO9c,OAAOgd,MAElBF,EAAOhf,iBAMvB,MAAM8e,WAAsB/d,EAqBxBxE,YAAYC,GACRiD,QACA,MAAM,MAAC2O,EAAK,KAAElQ,EAAI,MAAEP,GAASnB,EACvBkhB,EAAa,IAAI1c,EAAUrD,GAAS,IAC1C+f,EAAWhe,UAAUjD,MACrBA,KAAKihB,WAAaA,EAClBjhB,KAAK2R,MAAQA,EACb3R,KAAKyB,KAAOA,EAvBhB,UACI,MAAM,WAACyB,GAAclD,KACrB,OAAIkD,aAAsBmf,GACf,GAAGnf,EAAWue,OAAOzhB,KAAK2R,QAE9B3R,KAAK2R,MAGhB,iBACI,MAAM,WAACzO,GAAclD,KACrB,OAAIkD,aAAsBmf,GACfnf,EAEJ,KAaXuC,SACI,MAAM,WAACvC,GAAclD,KACrB,GAAIkD,aAAsBmf,IAAiBnf,aAAsB6d,GAAW,CACxE,MAAM,WAACE,GAAc/d,EACjB+d,GACAA,EAAWxb,OAAOzF,QA8BlC,IAAM0iB,GAAN,cAA2B9P,GAUvB9S,YAAY4K,GACR1H,Q,aARJ,oBASIhD,KAAK+N,aAAa,CAACC,KAAM,S,+VACzB,CAAAhO,KAAI,GAAe,IAAIsG,QAAS,KAChCtG,KAAK2iB,oBAAsB,SAASthB,GAChC,OAAOsJ,EACHtJ,EACA,EAAQ,QACR,CAAC,UACD,CAACsQ,EAAOlO,EAAUrD,EAAUE,KACxBqR,EAAM8D,YAAcnV,MAIhCN,KAAK4iB,wBAA0B,SAASC,EAA2BC,GAC/D,OAAO5Z,EACH,EAAQ,kBAAmB,CACvBO,SAAU,CACN,EAAQ,aAAc,CAClBF,WAAY,CACRoI,MAAO,UAEXjI,UAAW,CACPkR,MAAO,KACH,MAAMmI,EAAY,IAAIZ,GAAaW,IAC7B,MAACE,GAASD,EACCE,QAAQ,UAAUD,aAE/BD,EAAUtd,kBAS1CzF,KAAKqS,SAAS3H,GAAS,IAAIqW,IAG/BmC,cACI,OAAOljB,KAAKgJ,WAAWC,cAAgC,UAG3Dka,gBAAgB9hB,GACZ,OAAOrB,KAAKgJ,WAAWC,cAAoC,kBAAkB5H,EAAKogB,QAGtFlP,eACI,MAAM,MAAC7H,GAAS1K,KACVkjB,EAAc,EAAQ,SAAU,CAClC3Z,WAAY,CACRuI,SAAU,GAEdrI,SAAU2D,EACN1C,EAAMuW,YAAY5f,GAAQ,GAAArB,KAAI,WAAgB,KAApBA,KAAqBqB,EAAMqJ,KAEzDhB,UAAW,CACP0Z,UAA0B,GAAApjB,KAAI,WAAuB0G,KAAK1G,MAC1DqjB,KAAqB,GAAArjB,KAAI,WAAkB0G,KAAK1G,MAChDgf,YAA4B,GAAAhf,KAAI,WAAyB0G,KAAK1G,MAC9DsjB,QAAwB,GAAAtjB,KAAI,WAAqB0G,KAAK1G,SAK9D,OAAOkJ,EACH,EAAQ,OAAQ,CACZK,WAAY,CACRsV,IAAK,aACLC,KAAM,kBAGd,EAAQ,OAAQ,CACZvV,WAAY,CACRsV,IAAK,aACLC,KAAM,4BAGdoE,EACA,EAAQ,MAAO,CACX3Z,WAAY,CACRsL,MAAO,YACP+C,QAAQ,GAEZnO,SAAU2D,EAAsB1C,EAAMxJ,OAClCG,GAAQ,GAAArB,KAAI,WAAyB,KAA7BA,KAA8BqB,QAMtDyhB,cAAcS,GACV,MAAM,MAAC7Y,GAAS1K,KAEhB,OADyBujB,EAAKT,gBACNhe,KACpBN,GAAyBkG,EAAM8W,aAAahd,EAAOgF,QAAQiY,S,0CAIrD/W,GACV,OAAO,GAAA1K,KAAI,QAAaZ,IAAIsL,IAAQQ,SAAW,MAClD,cAEe7J,EAAqBqJ,GA6CjC,OAxBA,EAAQ,aAAc,CAClBnB,WAAY,CACR9H,KAAMJ,EAAKI,KACX+hB,UAAWtc,QAAO,GAClB4K,UAAW,GAEftI,QAAS,CACLiY,IAAKpgB,EAAKogB,KAEdhY,SAAU,CACNzJ,KAAK2iB,oBAAoBthB,IACvBiK,OACgB,UAAbjK,EAAKI,KAAoB,CACtB,EAAQ,kBAAmB,CACvB8H,WAAY,CACRsI,KAAM,SAEVpI,SAAU2D,EAAsB/L,EAAK4f,YACjC5f,GAAQ,GAAArB,KAAI,UAAgB,KAApBA,KAAqBqB,EAAMqJ,QAG3C,OAInB,YAEwBrJ,GACrB,MAAMoiB,EAAmB9Y,EACrBtJ,EACA,EAAQ,OAAQ,CACZkI,WAAY,CACRsL,MAAO,eAGf,CAAC,UACD,CAAC6O,EAAMjgB,EAAUrD,EAAUE,KACvBojB,EAAKjO,YAAcnV,KAI3B,OADA,GAAAN,KAAI,QAAayC,IAAIpB,EAAM,IAAI8J,QAAQsY,IAChCA,GACV,YAEqB7hB,GAClB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAG1B+hB,EAA+B9hB,EAC/Bgb,EAAiD5c,EAAQ4Q,QAAQ,eACjE,MAACnG,GAAS1K,KAChB,GAAI6c,EAAY,CACZ,MAAM,aAAC+G,GAAgBhiB,EAEjBiiB,EAAmBF,EAAWb,iBAC7B1hB,OAAQ0iB,GAAiBD,EAChC,GAAIC,EAAgB,EAAG,CACnB,MAAMC,EACFF,EACC/e,KAAKkf,GACFA,EAAUxa,QAAQiY,MAErBvb,QACG,CAAC+d,EAAOC,EAAGC,KAAUA,EAAK1I,MACtB2I,GAASH,EAAMnC,WAAW,GAAGsC,UAGnCC,EAAqBN,EAAaO,KAAK,MACvCC,EAAUR,EAAaA,EAAa3iB,OAAS,GAC7CojB,EAAW9Z,EAAM8W,aAAa+C,GACpC,GAAIC,GAAYZ,EAAc,CAC1BA,EAAaa,WAAa,OAC1Bb,EAAac,QAAQ,aAAcL,GACnC,MAAMM,EAAY,GAAA3kB,KAAI,WAAc,KAAlBA,KAAmBwkB,GACjCG,GACAf,EAAagB,aAAaD,GAAY,GAAI,OAK7D,YAEgB/iB,GACb,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAG1B+hB,EAA+B9hB,EAC/Bgb,EAAiD5c,EAAQ4Q,QAAQ,eACjE,MAACnG,GAAS1K,MACV,aAACghB,GAAgBtW,EACvB,GAAImS,EAAY,CACZ,MAAM,aAAC+G,GAAgBhiB,EACvB,GAAIgiB,EAAc,CACd,MAAMiB,EAAYhI,EAAWrT,QAAQiY,IAC/BqD,EAAkBpa,EAAM8W,aAAaqD,GACrCE,EAAiBnB,EAAaoB,QAAQ,cAAcC,MAAM,MAEhE,IADuBF,EAAetJ,MAAKwI,GAASY,EAAU/C,WAAW,GAAGmC,OAAaA,GAASY,IAC7E,CACjB,MAAMK,EAAmCH,EAAejgB,KACpDmf,GAASvZ,EAAM8W,aAAayC,KAC9B/d,QACE1B,GAAqB,OAAXA,KAEP/C,KAAM0jB,EAAYC,WAAYC,GAAoBP,GAClD7D,WAAYpG,GAA4B,UAAdsK,EAC7BL,EACAO,GAEA3a,EACgBlD,MAAM2C,KAAK0Q,EAAWtZ,UAC9Ba,SAASoC,IACjB,MAAM8gB,EAAiBJ,EAAgBtiB,WAAU2iB,GAAUA,EAAO5T,OAASnN,EAAOmN,QAC9E2T,GAAkB,IACArC,QAAQ,WAAWze,EAAOmN,UAExCkJ,EAAWpV,OAAOjB,IAGlB0gB,EAAgBM,WAAWF,EAAgBA,EAAiB,GAC5DJ,EAAgB9jB,cAIV,IAAI+gB,GAAa+C,GACzBzf,SACNub,GACAnG,EAAWvX,eACXuX,EAAWxV,UAAU6f,GACrBrK,EAAWlW,KAAKqc,GAChBnG,EAAWtX,cAGXsX,EAAWvV,OAAiDuX,EAAW4I,YAAaP,GAGxF,MAAMQ,EAAc/B,EAAWlN,iBAAuC,iBAClEyO,EAAgBpgB,KAAIN,GAAU,cAAcA,EAAOid,UAAS6C,KAAK,SAGrEX,EAAWpM,iBACXmO,EAAYtjB,SAAS4hB,IAEjBA,EAAU2B,UAAW,KAEzBhC,EAAWnM,mBAK1B,YAEuB5V,GACpB,MAAM,QAACie,EAAO,QAAEC,EAAO,cAAEje,EAAa,OAAE5B,GAAU2B,EAG5C+hB,EAA+B9hB,EAC/Bgb,EAAiD5c,EAAQ4Q,QAAQ,eACjE,MAACnG,GAAS1K,KAChB,GAAI6c,EAAY,CACZ,MAAMgG,EAAanY,EAAM8W,aAAa3E,EAAWrT,QAAQiY,KACnDxB,EAAc,EAAQ,SAAU,CAClC1W,WAAY,CACR2W,YAAY,EACZpO,UAAW,GAEfrI,SAAUzJ,KAAK4iB,wBAAwBC,EAAY7iB,KAAK8iB,cAAca,IACtEja,UAAW,CACPkc,MAAO,KACH/I,EAAWhD,MAAM,CAACU,eAAe,QAI7CoJ,EAAWte,OAAO4a,GAClBA,EAAYS,mBAAmBb,EAASC,GACxCG,EAAYpG,MAAM,CAACU,eAAe,IAEtC3Y,EAAM0Y,kBACT,YA0BmB1Y,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvB+hB,EAA+B9hB,EACrC,OAAQ9C,GACJ,IAAK,SAAU,CACX,MAAMgkB,EAAY,IAAIZ,GAAaniB,KAAK8iB,cAAca,KAChD,MAACX,GAASD,EACCE,QAAQ,UAAUD,aAE/BD,EAAUtd,SAEdke,EAAW9J,QACXjY,EAAM0Y,iBACN,SA/VVoI,G,mUAAY,EAHjBpa,EAAc,CACXE,KAAM,gBAEJka,IAqWN,I,iFAAImD,GAAgCnD,G,spBC1fhCoD,GAAoB,IACxBnR,GAAO,CACHnM,KAAM,eAFiB,EAGzB,GACF,cAA2CgL,GAIvC1T,cACIkD,Q,aAJJ,oBACA,oBAII,GAAAhD,KAAI,GAAU,CAAC,SAAU,WAAY,QAAS,cAAa,KAC3D,GAAAA,KAAI,GAAa,EAAQ,SAAU,CAC/BuJ,WAAY,CACRsL,MAAO,cACP1G,KAAM,SACN1M,KAAM,SACNqQ,UAAW,GAEfrI,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,cAIrB,KAGNpB,OAAO1T,GAUH,MAAMsB,EAAoB,GAAArB,KAAI,QAAWqO,WAAU,GAGnD,GAFAhN,EAAKiB,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEqB,EAAKiB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,YAC9C,IAATD,EAAiB,CACjB,MAAM,GAACgV,EAAE,YAAEkG,EAAW,QAAE8K,EAAO,KAAEtkB,EAAI,MAAEkQ,EAAK,KAAEnJ,EAAI,MAAE5I,EAAK,SAAEqV,GAAYlV,OAC5DM,IAAP0U,IACA1T,EAAK0T,GAAKA,QAEM1U,IAAhB4a,GACAjb,KAAKkb,eAAe7Z,EAAM4Z,QAEd5a,IAAZ0lB,GACA/lB,KAAKgmB,WAAW3kB,EAAM0kB,QAEb1lB,IAAToB,GACAzB,KAAKqb,QAAQha,EAAMI,QAETpB,IAAVsR,GACA3R,KAAK0V,SAASrU,EAAMsQ,QAEXtR,IAATmI,GACAxI,KAAKsb,QAAQja,EAAMmH,QAETnI,IAAVT,GACAI,KAAKub,SAASla,EAAMzB,QAEPS,IAAb4U,GACAjV,KAAKoV,YAAY/T,EAAM4T,GAG/B,OAAO5T,EAGXwQ,KAAKxQ,GACD,OAAOA,EAGXgS,gBAAgBhS,EAAmBwQ,GAC/B,MAAM2J,EAAehU,MAAM2C,KAAK0H,EAAK6E,YAAY+E,MAC7CC,GAAeA,aAAuB5N,aAAe4N,EAAY1G,UAAUiB,SAAS,UAExF5U,EAAKwG,aAAa,gBAAiBX,OAAOsU,IAG9CpM,KAAK/N,GACD,OAAOA,EAAK4H,cAA2B,kBAG3CmS,YAAY/Z,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1Cgd,YAAYvb,GACR,OAAOA,EAAKuG,aAAa,iBAG7B4N,SAASnU,GACL,OAAO,GAAArB,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,aAAe,GAG5CC,SAASrU,EAAmBzB,GACxB,GAAAI,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,YAAc7V,EAGpCgc,eAAeva,GACX,OAAOA,EAAK2G,aAAa,qBAG7BkT,eAAe7Z,EAAmBzB,GAChB,OAAVA,EACAyB,EAAKwG,aAAa,oBAAqBjI,GAGvCyB,EAAKyG,gBAAgB,qBAI7B6G,OAAOtN,EAAmBuN,GACtB,MAAME,EAASF,IAAU5O,KAAK4c,YAAYvb,GAC1CrB,KAAKob,YAAY/Z,EAAMyN,GACnBA,GACA,GAAA9O,KAAI,WAAc,KAAlBA,KAAmBqB,GAI3ByN,OAAOzN,GACcrB,KAAK4c,YAAYvb,KAE9BrB,KAAKob,YAAY/Z,GAAM,GACvB,GAAArB,KAAI,WAAc,KAAlBA,KAAmBqB,IAI3B8N,SAAS9N,GACYrB,KAAK4c,YAAYvb,IAE9BrB,KAAKob,YAAY/Z,GAAM,GAI/B2a,QAAQ3a,GACJ,MAAM4a,EAAQ,GAAAjc,KAAI,SACZ,UAACgV,GAAa3T,EACpB,IAAK,IAAI6a,KAAUD,EACf,GAAIjH,EAAUiB,SAAS,eAAeiG,KAClC,OAAOA,EAGf,OAAO,KAGXb,QAAQha,EAAmBI,GACvB,MAAM6a,EAAUtc,KAAKgc,QAAQ3a,GAC7B,GAAII,IAAS6a,EAAS,CAClB,MAAM,UAACtH,GAAa3T,EAChBib,GACAtH,EAAUvP,OAAO,eAAe6W,KAEpCtH,EAAUG,IAAI,eAAe1T,MAIrCgb,SAASpb,GACL,OAAOA,EAAK2G,aAAa,UAAY,GAGzCuT,SAASla,EAAmBzB,GACxByB,EAAKwG,aAAa,QAASjI,GAG/BqmB,SAAS5kB,GACL,OAAOA,EAAK2G,aAAa,UAAY,GAGzCke,SAAS7kB,EAAmBzB,GACxByB,EAAKwG,aAAa,QAASjI,GAG/B8c,QAAQrb,GACJ,OAAOA,EAAK2G,aAAa,SAAW,GAGxCsT,QAAQja,EAAmBzB,GACvByB,EAAKwG,aAAa,OAAQjI,GAG9BumB,WAAW9kB,GACP,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,iBAAmBd,QAAO,IAGlE8e,WAAW3kB,EAAmBzB,GAC1ByB,EAAKwG,aAAa,eAAgBX,OAAOtH,IAG7CwW,YAAY/U,GACR,OAAOA,EAAKuG,aAAa,iBAG7BwN,YAAY/T,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1CmW,UAAU1U,EAAmBzB,GACzB,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,UAGdH,EAAUvP,OAAO,UAIzBuQ,UAAU3U,GACN,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,Y,yDAGTrU,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCib,EAA0Bhb,GACPgb,EAAW5G,SAAe0D,IAE/C3Z,KAAKmP,SAAS0N,I,YAIJjb,GACd,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1Bib,EAAwC5c,EAAQ4Q,QAAQ,gBAC9D,GAAIgM,GAAchb,EAEd,OADa7B,KAAKgc,QAAQa,IAEtB,IAAK,WACD7c,KAAKgmB,WAAWnJ,GAAa7c,KAAKmmB,WAAWtJ,IAC7C,MAEJ,IAAK,QACD7c,KAAKgmB,WAAWnJ,GAAY,GAC5B,MAEJ,IAAK,aAAc,CACf,MAAMzN,EAAOpP,KAAKoP,KAAKyN,GACnBzN,IAASA,EAAK6G,SAAehW,KAC7BD,KAAK2O,OAAOkO,GACK7c,KAAK4c,YAAYC,IAE9BzN,GAAMyK,MAAM,CAACU,eAAe,KAGpC,S,YAMFlZ,GAEV,GAAY,cADCrB,KAAKgc,QAAQ3a,GACA,CACtB,MAAM+N,EAAOpP,KAAKoP,KAAK/N,GACvB,GAAa,OAAT+N,EAAe,CACf,MAAOC,MAAOC,GAAaF,GACpBG,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAazO,EAAK0O,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAcf,EAAKW,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpH,SAASqH,KACvCC,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,OAAQ,GAC1BsM,EAAY,EACZL,EAAUT,EAAWK,EACrBI,EAAUT,OAEdN,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZP,EAAUZ,EAAUW,EACpBC,EAAUV,U,YAMnBrO,GACH,OAAOA,EAAK4H,cAA2B,oB,4pBCzS3Cmd,GAAgB,IACpBzR,GAAO,CACHnM,KAAM,WAFc,EAGtB,GAAC,cAAuCgL,GAItC1T,cACIkD,Q,aAJJ,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,UACP1G,KAAM,UACN2D,UAAW,KAEjB,KACF,GAAA9R,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAClE,KAGLyT,OAAO3N,GAKH,MAAMugB,EAAuB,GAAArmB,KAAI,QAAWqO,WAAU,GAMtD,GALAgY,EAAQ/jB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC9DqmB,EAAQ/jB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAClEqmB,EAAQ/jB,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACpEqmB,EAAQ/jB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAClEqmB,EAAQ/jB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,YAC3CK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,GAAYpJ,OACvBzF,IAAP0U,IACAsR,EAAQtR,GAAKA,QAEC1U,IAAd2U,GACAqR,EAAQrR,UAAUG,OAAOH,QAEZ3U,IAAb6O,IACAmX,EAAQnX,SAAWA,GAG3B,OAAOmX,EAGXxU,KAAKwU,GACD,OAAOA,EASXnlB,MAAMmlB,GACF,OAAO7e,MAAM2C,KAAKkc,EAAQ5P,iBACtB,2DAIR6P,eAAeD,EAAsBzmB,GACjCymB,EAAQxe,aAAa,mBAAoBjI,GAG7C2mB,eAAeF,GACX,OAA2BA,EAAQre,aAAa,qBAAuB,e,yDAjB5Dqe,GACX,OAAOA,EAAQpd,cACX,kE,YAkBUnF,GACd,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,iBAAmB6P,GAAkB1P,YAAYtS,GACpE,OAAO+S,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,oBACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGXsO,GACP,MAAMG,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcqN,EACMG,EAAOja,c,YAG5B8Z,GACN,MAAMG,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcqN,EACMG,EAAOvN,a,YAGxB5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EACoBmlB,EAAOC,mB,YAI1CplB,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACMmlB,EAAOE,e,YAGtBrlB,GACZ,MAAM+N,EAAO0W,GAAkB1W,KAAK/N,GACpC,GAAI+N,EAAM,CACN,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACMoX,EAAOja,aAEtC,OAAO,M,YAGIgX,EAAmBliB,GAC9B,MAAMwhB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBujB,GACpB,OAAfV,GAAuBA,IAAexhB,IACtCykB,GAAkB/P,UAAU8M,GAAY,GACxCA,EAAW3T,UAAY,GAEd,OAAT7N,IACAykB,GAAkB/P,UAAU1U,GAAM,GAClCA,EAAK6N,SAAW,I,YAINtN,GACd,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1BykB,EAAuBxkB,EACvBgb,EAAwC5c,EAAQ4Q,QAAQ,gBAC9D,GAAIgM,EAAY,CACZ,MAAMpb,EAAOqkB,GAAkB9J,QAAQa,GACjCrU,EAAOsd,GAAkBpJ,QAAQG,GACjCjd,EAAQkmB,GAAkB9J,QAAQa,GAC5B,SAARpb,GACA4kB,EAAQ5P,iBACJ,2EAA2EjO,MAC7EpG,SAASukB,IACPb,GAAkBE,WAAWW,EAASb,GAAkBrJ,SAASkK,IAAY/mB,MAGrFgC,EAAM6Y,oB,YAII7Y,GACd,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCglB,EAA6B/kB,EAEnC,IADoB+kB,EAAc3Q,SAAe0D,GAC/B,CACd,MAAMkJ,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB4mB,GACnC/D,EACAA,EAAWhJ,QAGO,GAAA7Z,KAAI,WAAW,KAAfA,KAAgB4mB,IACvB/M,U,YAKHjY,GAChB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1BglB,EAA6B/kB,EAC7Bgb,EAA+C5c,EAAQ4Q,QAAQ,gBACjEgM,IACA,GAAA7c,KAAI,WAAe,KAAnBA,KAAoB4mB,EAAe/J,GACnC+J,EAAc1X,UAAY,I,YAIbtN,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCglB,EAA6B/kB,GACV+kB,EAAc3Q,SAAe0D,KAElD,GAAA3Z,KAAI,WAAe,KAAnBA,KAAoB4mB,EAAe,MACnCA,EAAc1X,SAAW,I,YAIbtN,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvBglB,EAA6B/kB,EAC7BghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB4mB,GACvC,OAAQ7nB,GACJ,IAAK,QACL,IAAK,IACD,GAAI8jB,EAAY,CAEZ,OADaiD,GAAkB9J,QAAQ6G,IAEnC,IAAK,aACDiD,GAAkBhX,OAAO+T,GACF,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IACtC3Y,EAAM0Y,iBAId1Y,EAAM6Y,kBAEV,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACpCgE,GACAA,EAAahN,MAAM,CAACU,eAAe,QAGtC,CACD,MAAMuM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB4mB,GAC9BE,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAC5BkE,GACAA,EAASlN,MAAM,CAACU,eAAe,QAGlC,CACD,MAAMiK,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe4mB,GAC5BpC,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB4mB,GAC9BE,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe4mB,GAC5BpC,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,SACGoI,EACAA,EAAWhJ,MAAM,CAACU,eAAe,IAGjCqM,EAAc/M,MAAM,CAACU,eAAe,IAExC3Y,EAAM6Y,oB,6UCrRtB,MAAMuM,WAAuB7E,GAGzBriB,YAAYoB,GACR8B,MAAM9B,GAGV,YACI,OAAOlB,KAAKkB,MAAME,OAGtB6lB,OACIjnB,KAAKkB,MAAMkB,SAAQoC,GAAUA,EAAOyiB,SAGxCC,OACIlnB,KAAKkB,MAAMkB,SAAQoC,GAAUA,EAAO0iB,SAGxCC,UACI,MAAMC,EAASpnB,KAAKkB,MAAMqf,QACtB,CAAC6G,EAAQ5iB,IAAW,GAAG4iB,KAAU5iB,EAAOmN,SAAS,IAErDyO,QAAQC,IAAI+G,IAIpB,MAAMC,WAAwBhF,GAQ1BviB,YAAYC,GACRiD,MAAMjD,G,aACNC,KAAKsnB,WAAatnB,KAAKihB,WAAW7f,OAClCpB,KAAKunB,YAAa,EAClBvnB,KAAKsC,iBAAiB,c,uSAAe,CAAAtC,KAAI,WAAyB0G,KAAK1G,OAG3EinB,OACIjnB,KAAKunB,YAAa,EAGtBL,OACIlnB,KAAKunB,YAAa,EAGtBJ,UACI/G,QAAQC,IAAIrgB,KAAK2R,Q,2BAGG/P,GACpB,MAAM,OAAC3B,GAAU2B,GACX,WAACqf,GAAcjhB,KACjBC,GAAUghB,IACVjhB,KAAKsnB,WAAarG,EAAW7f,SA5BrC,IADC6C,K,kCAID,IADCA,K,sCCrCAujB,GAmCAC,GAMAC,G,uUCfL,MAAMC,WAA+B7Z,YAmBjC8D,UACI,IAAK5R,KAAKiV,SAAU,CAChB,OAAQjV,KAAKyB,MACT,IAAK,WACDzB,KAAKsR,SAAWtR,KAAKsR,QACrB,MACJ,IAAK,QACDtR,KAAKsR,SAAU,EAGvBtR,KAAK+C,cAAc,IAAIgM,MAAM,UAAW,CACpCC,SAAS,MAKrB4Y,SACI5nB,KAAKiV,UAAW,EAGpB4S,UACI7nB,KAAKiV,UAAW,GAtCpB,IADChO,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,6BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,8BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,Y,4BAIhD,IADCH,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,+BD1C9B,SAAK6f,GACD,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,gBACA,wBACA,yBACA,yBACA,2BACA,qBACA,gBAhCJ,CAAKA,KAAAA,GAAG,KAmCR,SAAKC,GACD,YACA,oBACA,gBAHJ,CAAKA,KAAAA,GAAW,KAMhB,SAAKC,GACD,mBACA,qBACA,qBACA,yBACA,mBALJ,CAAKA,KAAAA,GAAW,K,gBEnBZ,G,uUAKJ,IAAMI,GAAN,cAAuCha,YAgCnChO,cACIkD,QACmBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAIzCC,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,WACDxI,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,SAjBzD,GAAiB,EAAQ,aACVZ,QAAQ/I,OACnB,EAAQ,SAvBhB,IADC4B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,+BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAM2G,U,gCAI1B,IADCnB,EAAkB,CAACxF,KAAMkG,W,kCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,8BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAtB3CygB,GAAwB,IAH7Bxf,EAAc,CACXE,KAAM,gBAEJsf,IAkDN,I,MC9DI,GD8DAC,GAAwDD,GCzD5D,IAAME,GAAN,cAA2Cla,YAsBvChO,cACIkD,Q,aACA,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBAAiB,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,S,2BAGxD4B,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB+D,KAE5B3lB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,OAlCtB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,oPASf,EAAQ,SAlBdue,G,mUAA4B,EAHjC1f,EAAc,CACXE,KAAM,oBAEJwf,IA4CN,I,MC7CI,GD6CAE,GAAgEF,G,uUCxCpE,IAAMG,GAAN,cAA4Cra,YA2BxChO,cACIkD,Q,aACA,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBACP,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,OAgBvDsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,QACD,MAAMmJ,EAAQ3R,KAAKgJ,WAAWC,cAAc,gBACxC0I,IACAA,EAAM8D,YAAcnV,M,2BAjBbsB,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqBxS,KAE5BpP,SAAQ,CAACoC,EAAQO,WAlC/B,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,yLAQf,EAAQ,SApBhB,IADCxC,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAL1C8gB,GAA6B,IAHlC7f,EAAc,CACXE,KAAM,qBAEJ2f,IA8DN,I,+DC/DI,GACAC,GD8DAC,GAAkEF,G,IAWtBlpB,OAAOyS,QACzC,SAAS3R,GAIf,MAAM,KAACyI,EAAI,MAAEtH,GAASnB,EACtB,OAAO,EAAQ,kBAAmB,CAC9BwJ,WAAY,CACRf,KAAMA,GAEViB,SAAUvI,MAEf,CACC3B,UAAW8oB,GAA0B9oB,UACrC+oB,OAASvoB,IAOL,MAAM,KAACyI,EAAI,MAAEtH,GAASnB,EACtB,OAAO,EAAQ,kBAAmB,CAC9BwJ,WAAY,CACRf,KAAMA,GAEViB,SAAUvI,EAAM4D,KACZ,EAAE6M,MAAAA,EAAO/R,MAAAA,KAAW,IAAI6R,GAAU,CAACjJ,KAAAA,EAAMmJ,MAAAA,EAAOlQ,KAAM,QAAS7B,MAAAA,W,29BC/FnF,IAAM2oB,GAAoB,GAA1B,cAAmCza,YAsC/BhO,cACIkD,Q,aAZJ,oBACA,oBAYI,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5C,GAAAhO,KAAI,IAAiB,EAAC,KACtBgJ,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErC,GAAArO,KAAI,GAAWoJ,SAASwN,iBACpB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAC9D,KACDA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAjDnEkB,QACI,OAAOsG,MAAM2C,KAAKnK,KAAKyW,iBACnB,uDAIR,kBACI,OAAO,GAAAzW,KAAI,QAGf,iBACI,MAAM,YAACwoB,GAAexoB,KACtB,OAAOA,KAAKiJ,cACR,oEACCuf,GAAe,EAAIxoB,KAAKkB,QAAQsnB,IAAgB,KAAO,KAsChEvZ,oBACI,MAAM,SAACC,GAAYlP,KACnBA,KAAKkP,SAAWA,EAGpBwR,mBAAmB+H,EAAWC,GAC1B,MAAM,MAACrZ,GAASrP,MACTgQ,MAAOC,EAAWC,OAAQC,GAAcnQ,KAAK+P,yBAC9C,QAACM,EAAO,QAAED,GAAWE,OACrBX,EAAO8Y,EAAIpY,EACXd,EAAMmZ,EAAItY,GACV,YAACG,EAAW,aAAEC,GAAgBpH,SAASqH,KACvCC,EAAYf,EAAOM,EAAYM,EAC/BI,EAAYpB,EAAMY,EAAaK,EACrCnB,EAAMjL,YAAY,OAAQ,GAAGsM,EAAY,EAAIf,EAAOM,EAAYN,OAChEN,EAAMjL,YAAY,MAAO,GAAGuM,EAAY,EAAIpB,EAAMY,EAAaZ,OAgCnEuX,YACI,MAAMN,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACQnC,EAAOja,e,2DA/B3CvM,KAAKyW,iBACD,gEAEHrU,SAASoC,IACNA,EAAO2K,eAEd,YAEclP,GACX,OAAOA,EAAO4Q,QAAQ,gBAAkB7Q,MAC3C,YAEYC,GACT,OAAOuH,MAAM2C,KAAKnK,KAAKyW,iBACnB,uDACD0G,MAAK3Y,GAAUA,EAAOyR,SAAShW,MAAY,MACjD,YAEiB6D,GACd,OAAIA,aAAgB0N,GACTqF,WAAWgB,cAElB/T,aAAgBukB,GACTxR,WAAWiB,YAEfjB,WAAWkB,eACrB,cASG,MAAMyO,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACQnC,EAAOvN,aAC9C,YAEa5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACemlB,EAAOtN,gBAC9C,YAES7X,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACemlB,EAAOrN,YAC9C,YAEe9X,GACZ,MAAM,KAAC+N,GAAQ/N,EACf,OAAO+N,aAAgB,GACnBA,EAAK0X,YACL,MACP,YAEczlB,GACE,OAATA,GACA,GAAArB,KAAI,GAAgBA,KAAKkB,QAAQwD,QAAQrD,GAAK,MAErD,GAEDunB,eAAsBvnB,EAA4BwnB,GAC9C,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAUC,YAAW,KACvBH,OAAQ1oB,KACTwoB,GAAS,GACZT,GAAe3lB,IAAIpB,EAAM,CACrBqE,MAAO,KACHyjB,aAAaF,GACbD,UAGTI,MAAK,KACJhB,GAAetlB,OAAOzB,OAE7B,YAEiBA,GACd,MAAM4nB,EAAUb,GAAehpB,IAAIiC,QACZ,IAAZ4nB,IACPb,GAAetlB,OAAOzB,GACtB4nB,EAAQvjB,UAEf,YAEiB9D,GACd,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkBuR,GAAsB,CACxC,MAAM,WAAC0O,GAAclgB,KACrB,GAAIkgB,EACA,IACIlgB,KAAKyF,SAET,MAAO4jB,SAIP,GADsB,GAAArpB,KAAI,WAAe,KAAnBA,KAAoBC,GACvB,CACf,MAAM,KAACwB,EAAI,KAAE+G,EAAI,MAAE5I,GAASK,EAChB,SAARwB,GACAzB,KAAKyW,iBACD,uEAAuEjO,MAE1EpG,SAASukB,IACNA,EAAQrV,QAAUqV,EAAQ/mB,OAASA,QAM1D,YAEmBgC,GAChB,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkBuR,GAAsB,CACxC,MAAM8X,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBC,GAClCqpB,GACA,GAAAtpB,KAAI,WAAe,KAAnBA,KAAoBspB,KAG/B,YAEoB1nB,GACjB,MAAM,cAAC+X,GAAiB/X,EAExB,IADyB5B,KAAKiW,SAAe0D,GACxB,CACjB,MAAM,WAACuG,GAAclgB,KACrB,GAAIkgB,EACA,IACIlgB,KAAKyF,SAET,MAAO4jB,QAEN,CACD,MAAM,WAACxG,GAAc7iB,KACjB6iB,GAAYhU,UACZgU,EAAW1T,WAEf,GAAAnP,KAAI,WAAe,KAAnBA,KAAoB,SAG/B,YAEmB4B,GAChB,MAAM,IAAC7C,GAAO6C,GACR,WAACihB,GAAc7iB,KACrB,OAAQjB,GACJ,IAAK,WACoB8jB,EACjB,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,IAAe,GAAA7iB,KAAI,WAAU,KAAdA,MAClCA,KAAK8mB,cACKjN,MAAM,CAACU,eAAe,IACpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACgBoI,EACb,GAAA7iB,KAAI,WAAU,KAAdA,KAAe6iB,IAAe7iB,KAAK8mB,YACnC9mB,KAAK8mB,cACCjN,MAAM,CAACU,eAAe,IAChC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OACiBza,KAAK8mB,aACZjN,MAAM,CAACU,eAAe,IACjC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MACgB,GAAAza,KAAI,WAAU,KAAdA,OACP6Z,MAAM,CAACU,eAAe,IAChC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACL,IAAK,IACD,GAAIoI,EAAY,CACZ,MAAM,KAACphB,GAAQohB,EACf,OAAQphB,GACJ,IAAK,OACL,IAAK,UACDohB,EAAW/T,SACP+T,EAAWhU,UACY,GAAA7O,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAE1C,MAEJ,QACIsI,EAAWjI,QAInBhZ,EAAM6Y,kBAEV,MAEJ,IAAK,SAaL,IAAK,YACGoI,IAC4BjhB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoBC,MAC/BzpB,OAED6iB,EAAW1T,WACX0T,EAAWhJ,MAAM,CAACU,eAAe,IACjC3Y,EAAM6Y,oBAGd,MAEJ,IAAK,aACD,GAAIoI,EAAY,CACZ,MAAM,KAACphB,GAAQohB,EACf,OAAQphB,GACJ,IAAK,UACIohB,EAAWhU,WACZgU,EAAW/T,SACY,GAAA9O,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IACtC3Y,EAAM6Y,uBASjC,YAEoB7Y,GACjB,MAAM,OAAC3B,EAAM,cAAE0Z,GAAiB/X,EAChC,GAAI3B,aAAkBuR,GAAsB,CACxC,MAAM8X,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBC,GACtC,GAAoB,OAAhBqpB,IACwB,WAApBA,EAAY7nB,MACX6nB,EAAYza,UACb,GAAA7O,KAAI,WAAkB,KAAtBA,KAAuBspB,GAEC1nB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoBC,MAC/BzpB,MACoB,CACrB,MAAM,WAAC6iB,GAAc7iB,KACG,WAApB6iB,GAAYphB,MACZohB,EAAWhU,WACX,GAAA7O,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvB,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,EAAY,KAC5BuG,MAAK,KACFvG,EAAW1T,cAEdua,OAAM,UAEf,MAAM,QAAC7J,EAAO,QAAEC,GAAWle,GACrB,KAAC+N,EAAI,MAAEE,EAAK,IAAEN,EAAG,OAAEE,GAAUzP,KAAK+P,wBAClC4Z,IACFha,EAAOkQ,GAAWhQ,EAAQgQ,GAAWtQ,EAAMuQ,GAAWrQ,EAASqQ,GAE7D8J,EAAwB5pB,KAAKiW,SAAe0D,GAC9CgQ,GAAuBC,IACnBjQ,aAAyB8P,IAAoB9P,IAAkB3Z,KAC/D2Z,EAAcE,MAAM,CAACU,eAAe,KAGpCva,KAAK6Z,MAAM,CAACU,eAAe,IAC3B,GAAAva,KAAI,WAAe,KAAnBA,KAAoB,QAGvB2pB,IACD3pB,KAAK6Z,MAAM,CAACU,eAAe,IAC3B,GAAAva,KAAI,WAAe,KAAnBA,KAAoB,UAKvC,YAEqB4B,GAClB,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkBuR,GAAsB,CACxC,MAAM8X,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBC,GACtC,GAAoB,OAAhBqpB,IACwB,WAApBA,EAAY7nB,MAAqB6nB,EAAYza,UAC7C,GAAA7O,KAAI,WAAkB,KAAtBA,KAAuBspB,GAEC1nB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoBC,MAC/BzpB,MACoB,CACrB,MAAM,WAAC6iB,GAAc7iB,KACG,WAApB6iB,GAAYphB,MACZohB,EAAWhU,WACVgU,EAAW5M,SAAehW,KAC3B,GAAAD,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvB,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,EAAY,KAC5BuG,MAAK,KACFvG,EAAW1T,cAEdua,OAAM,UAEf,GAAA1pB,KAAI,WAAe,KAAnBA,KAAoBspB,GACpBA,EAAYzP,MAAM,CAACU,eAAe,IACV,WAApB+O,EAAY7nB,OACP6nB,EAAYza,SAebya,EAAYla,MAAMyK,MAAM,CAACU,eAAe,KAdxC,GAAAva,KAAI,WAAkB,KAAtBA,KAAuBspB,GACvB,GAAAtpB,KAAI,WAAgB,KAApBA,KAAqBspB,EAAa,KAC7BF,MAAK,KACF,MAAM,WAACvG,GAAc7iB,KACrB,GAAAA,KAAI,WAAkB,KAAtBA,MACI6iB,IACA,GAAA7iB,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvBA,EAAW/T,SACX+T,EAAWzT,MAAMyK,MAAM,CAACU,eAAe,QAG9CmP,OAAM,eAzX/B,GAAiB,EAAQ,aACVtb,QAAQ/I,OACnB,EAAQ,SAEZ+iB,GAAiB,IAAI9hB,QAbzB,IADCW,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,kCAxBxB4gB,GAAoB,OAHzBjgB,EAAc,CACXE,KAAM,YAEJ+f,IAoaN,I,SC1aI,GD0aAkB,GAAgDlB,G,IAUtBtpB,OAAOyS,QACvB,SAAS3R,GAIf,MAAM,KAACyI,EAAI,SAAEiB,GAAY1J,EACzB,OAAO,EAAQ,SAAU,CACrBwJ,WAAY,CACRf,KAAMA,EACNsJ,UAAW,GAEfrI,SAAUA,MAEf,CACClK,UAAWkqB,GAAiBlqB,Y,29BC7bpC,IAAMsqB,GAAN,cAAsC/b,YA+DlChO,cACIkD,Q,aA3CJ,oBA4CI,GAAAhD,KAAI,GAAS,KAAI,KACjBA,KAAKwW,MAAQ,IAAIsT,GAAwB9pB,MACzC,MAAMgJ,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBACP,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OAnEvD,WACI,OAAO,GAAAA,KAAI,QAsEfsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,WACDxI,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,Q,0CAMtCpN,GACnB,MAAM,OAAC3B,GAAU2B,GACV4G,KAAMwL,GAA6B/T,EAC1C,OAAQ+T,GACJ,IAAK,OAAQ,CACT,MAAMrK,EAA4B1J,EAAQgoB,mBAAmB,GAC7D,GAAAjoB,KAAI,GAAS2J,aAAmB8f,GAAmB9f,EAAU,KAAI,KACjE,MAEJ,QACoE1J,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB+D,KAE5B3lB,SAAQ,CAACsW,EAAQ3T,KAC3B2T,EAAO+M,SAAW1gB,QA7E9B,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,+3BA0Bf,EAAQ,QACR,EAAQ,OAAQ,CACZF,WAAY,CACRf,KAAM,WA/CtB,IADCvB,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,8BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAM2G,U,gCAlBxByhB,GAAuB,IAH5BvhB,EAAc,CACXE,KAAM,eAEJqhB,IA4GN,I,SAAIE,GAAsDF,G,qVCxG1C/lB,GACR,OAAIA,aAAgBikB,GACTlR,WAAWgB,cAElB/T,aAAgBkmB,IAGhBlmB,aAAgBokB,IAGhBpkB,aAAgBimB,GALTlT,WAAWiB,YAQfjB,WAAWkB,eA0C1B,I,SAAI+R,GAxEJ,MAWIhqB,YAAY6oB,G,aAVZ,oB,+VAWI,CAAA3oB,KAAI,GAAWoJ,SAASwN,iBACpB+R,EAAM9R,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OACxD,KAXL,aACI,MAAMwmB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAIvnB,EAAS,EACb,KAA6B,OAAtBolB,EAAOrN,YAAqB/X,IACnC,OAAOA,EAyBXC,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMklB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAAcwN,EAAOrN,WACrBpU,EAAI,EACR,KAAOA,EAAIzD,GAAyB,OAAhB0X,GAChBA,EAAcwN,EAAOrN,WACrBpU,IAEJ,OAAoCiU,EAGxCiR,UAAUzhB,GACN,IAAKA,EACD,OAAO,KAEX,MAAMge,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAA2CwN,EAAOrN,WACtD,KAAuB,OAAhBH,GAA0BA,EAAYxQ,MAAQA,GACjDwQ,EAA2CwN,EAAOrN,WAEtD,OAAoCH,EAGxC,UACI,MAAMwN,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAAcwN,EAAOrN,WACzB,KAAuB,OAAhBH,SACyBA,EAC5BA,EAAcwN,EAAOrN,a,qVCpDjBrV,GACR,OAAIA,aAAgBimB,GACTlT,WAAWgB,cAElB/T,aAAgBkmB,IAAwBlmB,aAAgBokB,GACjDrR,WAAWiB,YAEfjB,WAAWkB,eA0C1B,I,MC5DI,GD4DAmS,GAlEJ,MAWIpqB,YAAY6oB,G,aAVZ,oB,+VAWI,CAAA3oB,KAAI,GAAWoJ,SAASwN,iBACpB+R,EAAM9R,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OACxD,KAXL,aACI,MAAMwmB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAIvnB,EAAS,EACb,KAA6B,OAAtBolB,EAAOrN,YAAqB/X,IACnC,OAAOA,EAmBXC,KAAKC,GACD,GAAIA,EAAQ,EACR,OAAO,KAEX,MAAMklB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAAcwN,EAAOrN,WACrBpU,EAAI,EACR,KAAOA,EAAIzD,GAAyB,OAAhB0X,GAChBA,EAAcwN,EAAOrN,WACrBpU,IAEJ,OAAmCiU,EAGvCiR,UAAUzhB,GACN,IAAKA,EACD,OAAO,KAEX,MAAMge,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAA0CwN,EAAOrN,WACrD,KAAuB,OAAhBH,GAA0BA,EAAYxQ,MAAQA,GACjDwQ,EAA0CwN,EAAOrN,WAErD,OAAmCH,EAGvC,UACI,MAAMwN,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAI3P,EAAcwN,EAAOrN,WACzB,KAAuB,OAAhBH,SACwBA,EAC3BA,EAAcwN,EAAOrN,aClDjC,IAAMgR,GAAN,cAAuCrc,YAsBnChO,cACIkD,Q,aACAhD,KAAKwW,MAAQ,IAAIsT,GAAwB9pB,MACzCA,KAAKgX,KAAO,IAAIkT,GAAuBlqB,MACvC,MAAMgJ,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBAAiB,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,S,2BAGxD4B,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB+D,KAE5B3lB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,OAlCtB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,+IAOf,EAAQ,SAlBd0gB,G,mUAAwB,EAH7B7hB,EAAc,CACXE,KAAM,gBAEJ2hB,IA8CN,I,4GCnCI,GDmCAH,GAAwDG,G,69BC9B5D,IAAMC,GAAN,cAAmCtc,YA2C/BhO,cACIkD,Q,aANJ,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAgBoJ,SAASwN,iBACzB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAwB0G,KAAK1G,OACnE,KACD,GAAAA,KAAI,GAAeoJ,SAASwN,iBACxB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAuB0G,KAAK1G,OAClE,KACD,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAKwW,MAAQ,IAAIsT,GAAwB9pB,MACzCA,KAAKgX,KAAO,IAAIkT,GAAuBlqB,MACvC,MAAMgJ,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,OAC7DgJ,EAAW1G,iBAAiB,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OAnD/E,iBACI,OAAOA,KAAKiJ,cAAoC,sBAGpD,gBACI,OAAOjJ,KAAKiJ,cAAmC,qBAGnD,WACI,OAAOjJ,KAAKiJ,cAAoC,uBAGpD,WACI,OAAOjJ,KAAKiJ,cAAoC,uBAyCpDsO,iBACI,GAAAvX,KAAI,IAAgB,EAAI,KAG5BwX,eACI,GAAAxX,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,IAAwB,EAAK,MAIzCyX,iBACI,GAAAzX,KAAI,WAAqB,KAAzBA,MACA,GAAAA,KAAI,WAAoB,KAAxBA,MAGJ0X,gBACI,OAAOlQ,MAAM2C,KAAKnK,KAAKyW,iBAAiB,yBAG5CkB,eACI,OAAOnQ,MAAM2C,KAAKnK,KAAKyW,iBAAiB,0B,uFAGrB3S,GACnB,OAAIA,aAAgBikB,KAAyBjkB,EAAK8T,OACvCf,WAAWgB,cAElB/T,aAAgBkmB,IAAwBlmB,aAAgBokB,IAGxDpkB,aAAgBimB,GAFTlT,WAAWiB,YAKfjB,WAAWkB,eACrB,YAEqBjU,GAClB,OAAIA,aAAgBimB,KAAwBjmB,EAAK8T,OACtCf,WAAWgB,cAElB/T,aAAgBkmB,IAAwBlmB,aAAgBokB,GACjDrR,WAAWiB,YAEfjB,WAAWkB,eACrB,YAEc5N,EAA4B6N,GACvC,MAAMxB,EAAQhP,MAAM2C,KAAKnK,KAAKwW,MAAMjV,UAC9BkD,EAAY+R,EAAM9R,QAAQyF,GAC1BkgB,EAAU7T,EAAM9R,QAAQsT,GAC9B,OAAIvT,GAAa,GAAK4lB,GAAW,EACzBlgB,GAAQ6N,EACD,CAAC7N,GAELqM,EAAMrV,MACToE,KAAKkU,IAAIhV,EAAW4lB,GACpB9kB,KAAKib,IAAI/b,EAAW4lB,GAAW,GAGhC,IACV,YAEalgB,EAA2B6N,GACrC,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAImgB,EAAiB,GAAAtqB,KAAI,WAAS,KAAbA,KAAcmK,GACnC,KAAOmgB,GAAkBA,IAAmBtS,GACxChM,EAAMxJ,KAAK8nB,GACXA,EAAiB,GAAAtqB,KAAI,WAAS,KAAbA,KAAcsqB,GAGnC,OADAte,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAIogB,EAAqB,GAAAvqB,KAAI,WAAa,KAAjBA,KAAkBmK,GAC3C,KAAOogB,GAAsBA,IAAuBvS,GAChDhM,EAAMxJ,KAAK+nB,GACXA,EAAqB,GAAAvqB,KAAI,WAAa,KAAjBA,KAAkBuqB,GAG3C,OADAve,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,IACV,eAEqBwK,GAClBxW,KAAKuX,iBACiBvX,KAAK0X,gBACbtV,SAASqW,IACdjC,EAAMpQ,SAASqS,KAChBA,EAAekN,UAAW,MAGlCnP,EAAMpU,SAASsW,IACNA,EAAOiN,WACRjN,EAAOiN,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEoBR,GACjBhX,KAAKuX,iBACgBvX,KAAK2X,eACbvV,SAASuW,IACb3B,EAAK5Q,SAASuS,KACfA,EAAcgN,UAAW,MAGjC3O,EAAK5U,SAASwW,IACLA,EAAM+M,WACP/M,EAAM+M,UAAW,MAGzB3lB,KAAKwX,gBACR,eAEuBhB,GACpBxW,KAAKuX,iBACLf,EAAMpU,SAASsW,IACNA,EAAOiN,WACRjN,EAAOiN,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEsBR,GACnBhX,KAAKuX,iBACLP,EAAK5U,SAASwW,IACLA,EAAM+M,WACP/M,EAAM+M,UAAW,MAGzB3lB,KAAKwX,gBACR,eAE4BhB,GACzBxW,KAAKuX,iBACL,MAAMG,EAAgB1X,KAAK0X,gBAC3BlB,EAAMpU,SAASsW,IACPhB,EAActR,SAASsS,KACvBA,EAAOiN,UAAW,MAG1B3lB,KAAKwX,gBACR,eAE2BR,GACxBhX,KAAKuX,iBACL,MAAMI,EAAe3X,KAAK2X,eAC1BX,EAAK5U,SAASwW,IACNjB,EAAavR,SAASwS,KACtBA,EAAM+M,UAAW,MAGzB3lB,KAAKwX,gBACR,cAGGxX,KAAKuX,iBACiBvX,KAAK0X,gBACbtV,SAASsW,IACfA,EAAOiN,WACPjN,EAAOiN,UAAW,MAG1B3lB,KAAKwX,gBACR,cAGGxX,KAAKuX,iBACgBvX,KAAK2X,eACbvV,SAASwW,IACdA,EAAM+M,WACN/M,EAAM+M,UAAW,MAGzB3lB,KAAKwX,gBACR,YAEc1C,GACX,MAAM,WAAC+D,GAAc7Y,KACF,OAAf6Y,GAAuBA,IAAe/D,IACtC+D,EAAW2R,QAAS,EACpB3R,EAAW3J,UAAY,GAEd,OAAT4F,IACoB,GAAA9U,KAAI,QACZgZ,YAAclE,EAC1BA,EAAK0V,QAAS,EACd1V,EAAK5F,SAAW,IAEvB,YAEaqH,GACV,MAAM,UAACuC,GAAa9Y,KACF,OAAd8Y,GAAsBA,IAAcvC,IACpCuC,EAAU0R,QAAS,EACnB1R,EAAU5J,UAAY,GAEd,OAARqH,IACmB,GAAAvW,KAAI,QACZgZ,YAAczC,EACzBA,EAAIiU,QAAS,EACbjU,EAAIrH,SAAW,IAEtB,YAEUqH,GACP,MAAMwC,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAczC,EACUwC,EAAYxM,cACnD,YAESgK,GACN,MAAMwC,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAczC,EACUwC,EAAYE,aACnD,YAEanE,GACV,MAAMiE,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAclE,EACUiE,EAAYG,gBACnD,YAESpE,GACN,MAAMiE,EAAc,GAAA/Y,KAAI,QAExB,OADA+Y,EAAYC,YAAclE,EACUiE,EAAYI,YACnD,YAEWrE,GACR,MAAMsE,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAclE,EACUsE,EAAWlW,cACjD,cAGG,MAAMkW,EAAa,GAAApZ,KAAI,SACjB,KAAC2oB,GAAQvP,EAEf,OADAA,EAAWJ,YAAc2P,EACUvP,EAAW7M,cACjD,cAGG,MAAM6M,EAAa,GAAApZ,KAAI,SACjB,KAAC2oB,GAAQvP,EAEf,OADAA,EAAWJ,YAAc2P,EACUvP,EAAWH,aACjD,YAEY1C,GACT,MAAM6C,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAczC,EACU6C,EAAWF,gBACjD,YAEQ3C,GACL,MAAM6C,EAAa,GAAApZ,KAAI,QAEvB,OADAoZ,EAAWJ,YAAczC,EACU6C,EAAWD,YACjD,YAEQrE,GACL,MAAMuE,EAAa,GAAArZ,KAAI,WAAY,KAAhBA,KAAiB8U,GACpC,GAAIuE,EAAY,CACZ,MAAO7C,MAAO8C,GAAmBD,EAC3BE,EAAY/R,MAAM2C,KAAKmP,EAAgB/X,UAAUmD,QAAQoQ,GACzD0D,EAAc,GAAAxY,KAAI,WAAa,KAAjBA,KAAkBqZ,GACtC,GAAIb,EAAa,CACb,MAAOhC,MAAOgD,GAAoBhB,EAClC,OAAOgB,EAAiBnY,KACpBkE,KAAKkU,IAAIF,EAAWC,EAAiBpY,UAIjD,OAAO,MACV,YAEW0T,GACR,MAAMuE,EAAa,GAAArZ,KAAI,WAAY,KAAhBA,KAAiB8U,GACpC,GAAIuE,EAAY,CACZ,MAAO7C,MAAO8C,GAAmBD,EAC3BE,EAAY/R,MAAM2C,KAAKmP,EAAgB/X,UAAUmD,QAAQoQ,GACzDyD,EAAU,GAAAvY,KAAI,WAAS,KAAbA,KAAcqZ,GAC9B,GAAId,EAAS,CACT,MAAO/B,MAAOkD,GAAgBnB,EAC9B,OAAOmB,EAAarY,KAChBkE,KAAKkU,IAAIF,EAAWG,EAAatY,UAI7C,OAAO,MACV,YAEiBQ,GACd,MAAM,QAACqY,EAAO,SAAEO,GAAY5Y,GACtB,SAACqV,GAAYjX,KACnB,OAAQiX,GACJ,IAAK,OAAQ,CACT,MAAMsS,EAAe3nB,EAAM2nB,eACrBzP,EAAayP,EAAapM,MAC5BqM,GAAYA,aAAoBQ,KAChCT,EAAapM,MACbqM,GAAYA,aAAoBzB,KAChC,KACErQ,EAAgB1X,KAAK0X,gBAC3B,GAAIoC,aAAsBiO,GACtB,GAAKvN,GAAaP,GAGb,GAAIA,EACJH,EAAW6L,SAER,GAAA3lB,KAAI,WAA0B,KAA9BA,KAA+B8Z,GAD/B,GAAA9Z,KAAI,WAAqB,KAAzBA,KAA0B8Z,GAE9BlY,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAMiQ,EAAmB/S,EAAcA,EAActW,OAAS,GAC9D,GAAIqpB,EAAkB,CAClB,MAAMze,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACVyqB,EACA3Q,GAEA9N,IACA0L,EAActR,SAAS0T,GACnB,GAAA9Z,KAAI,WAA0B,KAA9BA,QAAkCgM,GAClC,GAAAhM,KAAI,WAAqB,KAAzBA,QAA6BgM,SAIrC,GAAAhM,KAAI,WAAmB,KAAvBA,KAAwB8Z,GAE5BlY,EAAM6Y,wBAxBN,GAAAza,KAAI,WAAmB,KAAvBA,KAAwB8Z,GA2BhC,MAEJ,IAAK,MAAO,CACR,MAAMnC,EAAe3X,KAAK2X,eACpB4R,EAAe3nB,EAAM2nB,eACrBxP,EAAYwP,EAAapM,MAC3BqM,GAAYA,aAAoBQ,KAChCT,EAAapM,MACbqM,GAAYA,aAAoBO,KAChC,KACJ,GAAIhQ,aAAqBgQ,GACrB,GAAKvP,GAAaP,GAGb,GAAIA,EACJF,EAAU4L,SAEP,GAAA3lB,KAAI,WAAyB,KAA7BA,KAA8B+Z,GAD9B,GAAA/Z,KAAI,WAAoB,KAAxBA,KAAyB+Z,GAE7BnY,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAMkQ,EAAkB/S,EAAaA,EAAavW,OAAS,GAC3D,GAAIspB,EAAiB,CACjB,MAAM1e,EAAQ,GAAAhM,KAAI,WAAc,KAAlBA,KACV0qB,EACA3Q,GAEA/N,IACA2L,EAAavR,SAAS2T,GAClB,GAAA/Z,KAAI,WAAyB,KAA7BA,QAAiCgM,GACjC,GAAAhM,KAAI,WAAoB,KAAxBA,QAA4BgM,SAIpC,GAAAhM,KAAI,WAAkB,KAAtBA,KAAuB+Z,GAE3BnY,EAAM6Y,wBAxBN,GAAAza,KAAI,WAAkB,KAAtBA,KAAuB+Z,GA2B/B,SAGX,YAEmBnY,GAChB,MAAM,IAAC7C,GAAO6C,GACR,SAACqV,EAAQ,WAAE4B,EAAU,UAAEC,GAAa9Y,KAC1C,OAAQjB,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,EACA,OAAQhD,GACJ,IAAK,OAAQ,CACT,MAAMiD,EAAW,GAAAla,KAAI,WAAU,KAAdA,MACXma,EAAYD,EAAW,GAAAla,KAAI,WAAW,KAAfA,KAAgBka,GAAY,KACnDE,EAAU,GAAApa,KAAI,WAAS,KAAbA,MACVqa,EAAWD,EAAU,GAAApa,KAAI,WAAU,KAAdA,KAAeoa,GAAW,KACrD,GAAID,GAAaE,EAAU,CACvB,MAAMrO,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KAAoBma,EAAWE,GACzCrO,GACA,GAAAhM,KAAI,WAAmB,KAAvBA,QAA2BgM,GAGnC,MAEJ,IAAK,MAAO,CACR,MAAMkO,EAAW,GAAAla,KAAI,WAAU,KAAdA,MACXoa,EAAU,GAAApa,KAAI,WAAS,KAAbA,MAChB,GAAIka,GAAYE,EAAS,CACrB,MAAMpO,EAAQ,GAAAhM,KAAI,WAAc,KAAlBA,KAAmBka,EAAUE,GACvCpO,GACA,GAAAhM,KAAI,WAAkB,KAAtBA,QAA0BgM,GAGlC,OAIZpK,EAAM0Y,iBACN,MAEJ,IAAK,YACD,GAAgB,QAAZrD,GACI4B,EAAY,CACZ,MAAMP,EAAe,GAAAtY,KAAI,WAAc,KAAlBA,KAAmB6Y,GACxC,GAAIP,EAAc,CACdA,EAAauB,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,IACAlC,EAAaqN,SACT,GAAA3lB,KAAI,WAA0B,KAA9BA,KAA+BsY,GAC/B,GAAAtY,KAAI,WAAqB,KAAzBA,KAA0BsY,KAK9C1W,EAAM6Y,kBACN,MAEJ,IAAK,aACD,GAAgB,QAAZxD,GACI4B,EAAY,CACZ,MAAMT,EAAW,GAAApY,KAAI,WAAU,KAAdA,KAAe6Y,GAChC,GAAIT,EAAU,CACVA,EAASyB,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,IACApC,EAASuN,SACL,GAAA3lB,KAAI,WAA0B,KAA9BA,KAA+BoY,GAC/B,GAAApY,KAAI,WAAqB,KAAzBA,KAA0BoY,KAK9CxW,EAAM6Y,kBACN,MAEJ,IAAK,UACD,OAAQxD,GACJ,IAAK,OAAQ,CACT,MAAMiD,EAAWpB,GAAa,GAAA9Y,KAAI,WAAU,KAAdA,MACxB0a,EAAU7B,EACZ,GAAA7Y,KAAI,WAAS,KAAbA,KAAc6Y,GACdqB,EACA,GAAAla,KAAI,WAAW,KAAfA,KAAgBka,GAChB,KACJ,GAAIQ,EAAS,CACTA,EAAQb,MAAM,CAACU,eAAe,IAC9B,MAAM,SAACC,GAAY5Y,EACf4Y,IACAE,EAAQiL,SACJ,GAAA3lB,KAAI,WAA0B,KAA9BA,KAA+B0a,GAC/B,GAAA1a,KAAI,WAAqB,KAAzBA,KAA0B0a,IAGtC,MAEJ,IAAK,MAAO,CACR,MAAMlC,EAAcM,EAChB,GAAA9Y,KAAI,WAAa,KAAjBA,KAAkB8Y,GAClB,GAAA9Y,KAAI,WAAU,KAAdA,MACJ,GAAIwY,EAAa,CACbA,EAAYqB,MAAM,CAACU,eAAe,IAClC,MAAM,SAACC,GAAY5Y,EACf4Y,IACAhC,EAAYmN,SACR,GAAA3lB,KAAI,WAAyB,KAA7BA,KAA8BwY,GAC9B,GAAAxY,KAAI,WAAoB,KAAxBA,KAAyBwY,IAGrC,OAGR5W,EAAM6Y,kBACN,MAEJ,IAAK,YACD,OAAQxD,GACJ,IAAK,OAAQ,CACT,MAAMmD,EAAUtB,GAAa,GAAA9Y,KAAI,WAAS,KAAbA,MACvB2a,EAAa9B,EACf,GAAA7Y,KAAI,WAAY,KAAhBA,KAAiB6Y,GACjBuB,EACA,GAAApa,KAAI,WAAU,KAAdA,KAAeoa,GACf,KACA,GAAIO,EAAY,CACZA,EAAWd,MAAM,CAACU,eAAe,IACjC,MAAM,SAACC,GAAY5Y,EACf4Y,IACAG,EAAWgL,SACP,GAAA3lB,KAAI,WAA0B,KAA9BA,KAA+B2a,GAC/B,GAAA3a,KAAI,WAAqB,KAAzBA,KAA0B2a,KAI1C,MACJ,IAAK,MAAO,CACR,MAAMpC,EAAUO,EACZ,GAAA9Y,KAAI,WAAS,KAAbA,KAAc8Y,GACd,GAAA9Y,KAAI,WAAS,KAAbA,MACJ,GAAIuY,EAAS,CACTA,EAAQsB,MAAM,CAACU,eAAe,IAC9B,MAAM,SAACC,GAAY5Y,EACf4Y,IACAjC,EAAQoN,SACJ,GAAA3lB,KAAI,WAAyB,KAA7BA,KAA8BuY,GAC9B,GAAAvY,KAAI,WAAoB,KAAxBA,KAAyBuY,IAGrC,OAGR3W,EAAM6Y,kBACN,MAEJ,IAAK,OACD,OAAQxD,GACJ,IAAK,OACD,GAAI6B,EAAW,CACX,MAAMqB,EAAY,GAAAna,KAAI,WAAW,KAAfA,KAAgB8Y,GAC9BqB,GACAA,EAAUN,MAAM,CAACU,eAAe,IAGxC,MAEJ,IAAK,MAAO,CACR,MAAML,EAAW,GAAAla,KAAI,WAAU,KAAdA,MACbka,GACAA,EAASL,MAAM,CAACU,eAAe,IAEnC,OAGR3Y,EAAM6Y,kBACN,MAEJ,IAAK,MACD,OAAQxD,GACJ,IAAK,OACD,GAAI6B,EAAW,CACX,MAAMuB,EAAW,GAAAra,KAAI,WAAU,KAAdA,KAAe8Y,GAC5BuB,GACAA,EAASR,MAAM,CAACU,eAAe,IAGvC,MAEJ,IAAK,MAAO,CACR,MAAMH,EAAU,GAAApa,KAAI,WAAS,KAAbA,MACZoa,GACAA,EAAQP,MAAM,CAACU,eAAe,IAElC,OAGR3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACD,OAAQxD,GACJ,IAAK,OACG4B,IACA,GAAA7Y,KAAI,WAAmB,KAAvBA,KAAwB6Y,GACxBA,EAAW+B,SAEf,MAEJ,IAAK,MACG9B,IACA,GAAA9Y,KAAI,WAAkB,KAAtBA,KAAuB8Y,GACvBA,EAAU8B,SAKtBhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,OAAQxD,GACJ,IAAK,OACD,GAAAjX,KAAI,WAAqB,KAAzBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpB,MAEJ,IAAK,MACD,GAAAA,KAAI,WAAoB,KAAxBA,MACA,GAAAA,KAAI,WAAc,KAAlBA,KAAmB,MAI3BA,KAAK6Z,QACLjY,EAAM6Y,oBAIjB,YAEiB7Y,GACd,MAAM,cAAC+X,GAAiB/X,GAClB,SAACqV,GAAYjX,KACnB,OAAQiX,GACJ,IAAK,OAAQ,CACT,MAAM,WAAC4B,GAAc7Y,KACjB6Y,GAAcc,IAAkBd,GAChCA,EAAWgB,QAEf,MAEJ,IAAK,MAAO,CACR,MAAM,UAACf,GAAa9Y,KAChB8Y,GAAaa,IAAkBb,GAC/BA,EAAUe,QAEd,SAGX,YAEmBjY,GAChB,MAAM,OAAC3B,GAAU2B,GACX,SAACqV,GAAYjX,KACnB,OAAQiX,GACJ,IAAK,OAAQ,CACT,MAAM6C,EAA2B7Z,EAAQ4Q,QAA8B,cACnEiJ,GACA,GAAA9Z,KAAI,WAAe,KAAnBA,KAAoB8Z,GAExB,MAEJ,IAAK,MAAO,CACR,MAAMC,EAA0B9Z,EAAQ4Q,QAA6B,aACjEkJ,GACA,GAAA/Z,KAAI,WAAc,KAAlBA,KAAmB+Z,GAEvB,SAGX,cAGO,GAAA/Z,KAAI,QACJ,GAAAA,KAAI,IAAwB,EAAI,KAGhCA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBpN,GACnB,MAAM,OAAC3B,GAAU2B,EAC6C3B,EACzDgoB,mBACA/hB,QACG8d,GAAaA,aAAqB+F,KAEzB3nB,SAAQ,CAACwW,EAAO7T,KACzB6T,EAAM6M,SAAW1gB,OA3uBzB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,SAyBhB,IADC4B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,U,gCAIhD,IADCH,EAAkB,CAACxF,KAAMkG,W,uCAnCxByiB,GAAoB,IAHzB9hB,EAAc,CACXE,KAAM,YAEJ4hB,IAmvBN,I,MCxwBI,GAKJ,IAAMO,GAAN,cAAuC7c,YAsBnChO,cACIkD,Q,aACAhD,KAAKwW,MAAQ,IAAIsT,GAAwB9pB,MACzCA,KAAKgX,KAAO,IAAIkT,GAAuBlqB,MACvC,MAAMgJ,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBAAiB,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,S,2BAGxD4B,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB+D,KAE5B3lB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,OAlCtB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,+IAOf,EAAQ,SAlBdkhB,G,mUAAwB,EAH7BriB,EAAc,CACXE,KAAM,gBAEJmiB,IA8CN,I,sDCjDI,G,69BAKJ,IAAMC,GAAN,cAAsC9c,YAoBlChO,cACIkD,Q,aAXJ,oBACA,oBAWI,GAAAhD,KAAI,GAAWoJ,SAASwN,iBACpB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAC9D,KACD,GAAAA,KAAI,IAAiB,EAAC,KACHA,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAGnEkB,QACI,OAAOsG,MAAM2C,KAAKnK,KAAKyW,iBACnB,uDAIR,kBACI,OAAO,GAAAzW,KAAI,QAGf,iBACI,MAAM,YAACwoB,GAAexoB,KACtB,OAAOA,KAAKiJ,cACR,oEACCuf,GAAe,EAAIxoB,KAAKkB,QAAQsnB,IAAgB,KAAO,O,yDAG9C1kB,GACd,OAAIA,aAAgB0N,GACTqF,WAAWgB,cAElB/T,aAAgBukB,GACTxR,WAAWiB,YAEfjB,WAAWkB,eACrB,cAGG,MAAMyO,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACQnC,EAAOja,cAC9C,cAGG,MAAMia,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACQnC,EAAOvN,aAC9C,YAEa5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACemlB,EAAOC,mBAC9C,YAESplB,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACemlB,EAAOE,eAC9C,YAEerlB,GACZ,MAAM,KAAC+N,GAAQ/N,EACf,GAAI+N,EAAM,CACN,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACeoX,EAAOja,aAE/C,OAAO,MACV,YAEclL,GACX,MAAM,WAACwhB,EAAU,SAAEhU,GAAY7O,KACZ,OAAf6iB,GAAuBA,IAAexhB,GACtCwhB,EAAW1T,WAEF,OAAT9N,GACIwN,GACAxN,EAAKyN,SAET,GAAA9O,KAAI,GAAgBA,KAAKkB,QAAQwD,QAAQrD,GAAK,MAG9C,GAAArB,KAAI,IAAiB,EAAC,MAE7B,cAGG,OAAOwH,MAAM2C,KACTnK,KAAKyW,iBAAiB,wDAE7B,YAEcxW,GACX,OAAOA,EAAO4Q,QAAQ,2BAA6B7Q,MACtD,YAEYC,GACT,OAAO,GAAAD,KAAI,WAAQmd,MAAK3Y,GAAUA,EAAOyR,SAAShW,MAAY,MACjE,YAEmB2B,GAChB,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkB4qB,QAAS,CAC3B,MAAMvB,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBC,GACtC,GAAAD,KAAI,WAAe,KAAnBA,KAAoBspB,KAE3B,YAEoB1nB,GACjB,MAAM,OAAC3B,EAAM,cAAE0Z,GAAiB/X,EAChC,GAAI3B,aAAkB6N,cAAgB7N,EAAOgW,SAAkB0D,GAAgB,CAC3E,MAAM2P,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBC,GAClCqpB,GACAA,EAAYna,YAGKnP,KAAKiW,SAAe0D,KAEzC3Z,KAAK6O,UAAW,IAEvB,YAEqBjN,GAClB,MAAM,OAAC3B,GAAU2B,GACX,SAACiN,EAAQ,WAAEgU,GAAc7iB,KAC/B,GAAIC,aAAkBuR,IACI,GAAAxR,KAAI,WAAe,KAAnBA,KAAoBC,IACrBA,IAAW4iB,GAAchU,EAAU,CACpD,MAAM,KAACO,GAAQnP,EACXmP,IACAnP,EAAO6O,SACPM,EAAKyK,MAAM,CAACU,eAAe,OAI1C,YAEiB3Y,GACd,MAAM,OAAC3B,GAAU2B,GACX,SAACiN,EAAQ,WAAEgU,GAAc7iB,KAC/B,GAAIC,aAAkBuR,IACI,GAAAxR,KAAI,WAAe,KAAnBA,KAAoBC,GACvB,CACf,MAAM6qB,GAAcjc,EAEpB,GADA7O,KAAK6O,SAAWic,EACZA,EAAY,CACRjI,IAAeA,EAAWhU,UAC1BgU,EAAW/T,SAEf,MAAM,KAACM,GAAQnP,EACfmP,GAAMyK,MAAM,CAACU,eAAe,SAG5Bva,KAAK6Z,MAAM,CAACU,eAAe,MAI1C,YAEmB3Y,GAChB,MAAM,IAAC7C,GAAO6C,GACR,SAACiN,GAAY7O,KACnB,IAAI,WAAC6iB,GAAc7iB,KACnB,OAAQjB,GACJ,IAAK,aACoB8jB,EACjB,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,IAAe,GAAA7iB,KAAI,WAAU,KAAdA,MAClC,GAAAA,KAAI,WAAW,KAAfA,QACU6Z,MAAM,CAACU,eAAe,MAClCsI,WAAAA,GAAc7iB,MACZ6O,GAAYgU,GACW,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAE1C,MAEJ,IAAK,cACgBsI,EACb,GAAA7iB,KAAI,WAAU,KAAdA,KAAe6iB,IAAe,GAAA7iB,KAAI,WAAW,KAAfA,MAC9B,GAAAA,KAAI,WAAU,KAAdA,QACM6Z,MAAM,CAACU,eAAe,MAC9BsI,WAAAA,GAAc7iB,MACZ6O,GAAYgU,GACW,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAE1C,MAEJ,IAAK,QACL,IAAK,IACGsI,IACA7iB,KAAK6O,UAAYA,GACZA,IACsB,GAAA7O,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAG9C,MAEJ,IAAK,SACG1L,GACA7O,KAAK6O,UAAW,EACZgU,IACAA,EAAW1T,WACX0T,EAAWhJ,MAAM,CAACU,eAAe,MAIrCva,KAAK6Z,MAAM,CAACU,eAAe,IAE/B3Y,EAAM6Y,qBAhOd,GAAiB,EAAQ,aACVrM,QAAQ/I,OACnB,EAAQ,SAbhB,IADC4B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,gCALxBijB,GAAuB,IAH5BtiB,EAAc,CACXE,KAAM,eAEJoiB,IA8PN,I,ioBClQA,IAAMG,GAAN,cAAyCjd,YAmBrChO,cACIkD,Q,aACmBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,EAAQ,OAAQ,CACZkE,WAAY,CACRf,KAAM,WAIlBxI,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OAIrE2O,OAAOC,GACH,MAAM,SAACC,GAAY7O,KACJ4O,IAAUC,EAChB7O,KAAK8O,SAAW9O,KAAKmP,WAGlCL,SACI,MAAM,SAACD,GAAY7O,KACd6O,IACD7O,KAAK6O,UAAW,EAChB,GAAA7O,KAAI,WAAc,KAAlBA,OAIRmP,WACI,MAAM,SAACN,GAAY7O,KACf6O,IACA7O,KAAK6O,UAAW,K,6BAKpB,MAAM,KAACO,GAAQpP,KACf,GAAa,OAAToP,EAAe,CACf,MAAOC,MAAOC,GAAaF,GACpBG,IAAKC,EAASC,OAAQC,EAAYC,KAAMC,EAAUC,MAAOC,GAAa9P,KAAK+P,yBAC3EC,MAAOC,EAAWC,OAAQC,GAAcf,EAAKW,yBAC9C,QAACK,EAAO,QAAEC,GAAWC,QACrB,YAACC,EAAW,aAAEC,GAAgBpH,SAASqH,KACvCC,EAAYZ,EAAYG,EAAYM,EACpCI,EAAYnB,EAAUW,EAAaK,EACzClB,EAAUlL,YAAY,OAAQ,GAC1BsM,EAAY,EACZL,EAAUP,EAAYG,EACtBI,EAAUT,OAEdN,EAAUlL,YAAY,MAAO,GACzBuM,EAAY,EACZP,EAAUZ,EAAUW,EACpBC,EAAUV,SAGrB,YAEiB9N,GACd,MAAM,OAAC3B,GAAU2B,GACX,KAACwN,GAAQpP,KACf,GAAIoP,IAASA,EAAK6G,SAAehW,GAAS,CACtCD,KAAK2O,SACL,MAAM,SAACE,GAAY7O,KACf6O,GACAO,GAAMyK,MAAM,CAACU,eAAe,MAGvC,YAEoB3Y,GACjB,MAAM,cAAC+X,GAAiB/X,GACC5B,KAAKiW,SAAe0D,IAEzC3Z,KAAKmP,YAEZ,YAEmBvN,GAChB,MAAM,IAAC7C,GAAO6C,GACR,SAACiN,GAAY7O,KACnB,OAAQjB,GACJ,IAAK,YACL,IAAK,QACI8P,IACD7O,KAAK8O,SACL9O,KAAK8mB,WAAWjN,MAAM,CAACU,eAAe,IACtC3Y,EAAM6Y,mBAEV,MACJ,IAAK,SACG5L,GACA7O,KAAKmP,WAETnP,KAAK6Z,MAAM,CAACU,eAAe,IAC3B3Y,EAAM6Y,oBA/GlB,IADC9R,EAAc,CAACE,SAAU,gC,4BAI1B,IADCF,EAAc,CAACE,SAAU,2C,iCAI1B,IADC5B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,gCAhBxBojB,GAA0B,IAH/BziB,EAAc,CACXE,KAAM,kBAEJuiB,IA0HN,I,eCvHI,GDuHAC,GAA4DD,G,IAStB9rB,OAAOyS,QACnC,SAAS3R,GAGf,MAAM,KAACqP,GAAQrP,EAEf,OADAqP,EAAKyC,KAAO,OACL,EAAQ,eAAgB,CAC3BtI,WAAY,CACRuI,UAAW,GAEfrI,SAAU,CAAC2F,OAEhB,CACC7P,UAAWyrB,GAAuBzrB,Y,29BCxI1C,IAAM0rB,GAAN,cAA0Cnd,YAuDtChO,cACIkD,Q,aAzBJ,oBA0BuBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OAGvEsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,QAAS,CACV,MAAM,WAACQ,GAAchJ,KACf8b,EAAY9S,EAAWC,cAA+B,gBACxD6S,IACAA,EAAUrG,YAAcnV,GAE5B,MAEJ,IAAK,QAAS,CACV,MAAM,KAACmB,GAAQzB,KACH,UAARyB,GACA,GAAAzB,KAAI,WAAmB,KAAvBA,MAEJ,U,4CAMR,MAAM,OAACkrB,GAAUlrB,KACjB,GAAIkrB,EAAQ,CACR,MAAM,MAACtrB,GAASI,MACTJ,MAAOurB,GAAeD,EACzBC,IAAgBvrB,IAChBsrB,EAAOtrB,MAAQA,KAG1B,YAEiBgC,GACd,MAAM,OAAC3B,GAAU2B,EAEjB,GADwC3B,EAAQ4Q,QAAQ,mBAC9B7Q,KAAM,CAC5B,MAAM,KAACyB,GAAQzB,KACf,OAAQyB,GACJ,IAAK,WACDzB,KAAK+lB,SAAW/lB,KAAK+lB,QACrB,MAEJ,IAAK,QACD/lB,KAAK+lB,SAAU,EACf,MAEJ,IAAK,aAAc,CACf,MAAM,WAACqF,GAAcprB,KACrB,GAAIorB,IAAeA,EAAWnV,SAAehW,GAAS,CAClD,MAAM2O,GAAS,GAAA5O,KAAI,UAA4B,EAC/CorB,EAAWzc,OAAOC,GACdA,GACAwc,EAAWtE,WAAWjN,MAAM,CAACU,eAAe,IAGpD,MAEJ,IAAK,SAAU,CACX,MAAM,OAAC2Q,GAAUlrB,KACjB,GAAIkrB,IAAWA,EAAOjV,SAAehW,GAAS,CAC1C,MAAM2O,GAAS,GAAA5O,KAAI,UAA4B,EAC/CkrB,EAAOvc,OAAOC,GAElB,UAIf,YAEqBhN,GAClB,MAAM,OAAC3B,GAAU2B,EAEjB,GADwC3B,EAAQ4Q,QAAQ,mBAC9B7Q,KAAM,CAC5B,MAAM,KAACyB,GAAQzB,KACf,OAAQyB,GACJ,IAAK,aAAc,CACf,MAAM,WAAC2pB,GAAcprB,KACjBorB,IAAeA,EAAWnV,SAAehW,IACzC,GAAAD,KAAI,GAA2BorB,EAAWvc,SAAQ,KAEtD,MAEJ,IAAK,SAAU,CACX,MAAM,OAACqc,GAAUlrB,KACbkrB,IAAWA,EAAOjV,SAAehW,IACjC,GAAAD,KAAI,GAA2BkrB,EAAOrc,SAAQ,KAElD,WArHZ,GAAiB,EAAQ,aACVT,QAAQ/I,OACnB,EAAQ,OAAQ,CACZkE,WAAY,CACRgI,KAAM,UAGd,EAAQ,QACR,EAAQ,OAAQ,CACZhI,WAAY,CACRf,KAAM,YAGd,EAAQ,OAAQ,CACZe,WAAY,CACRf,KAAM,iBA5CtB,IADCG,EAAc,CAACE,SAAU,4C,kCAI1B,IADCF,EAAc,CAACE,SAAU,oC,8BAI1B,IADC5B,EAAkB,CAACxF,KAAMkG,W,8BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,+BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,U,4BA5BxB+jB,GAA2B,IAHhC3iB,EAAc,CACXE,KAAM,mBAEJyiB,IA8JN,ICzKI,GDyKAI,GAA8DJ,GA2C9DK,GAAwCrsB,OAAOyS,QACrC,SAAS3R,GASf,MAAM,MAAC4R,EAAK,KAAEnJ,EAAI,KAAE/G,EAAI,MAAE7B,EAAK,QAAEgS,EAAO,WAAEwZ,EAAU,OAAEF,GAAUnrB,EAOhE,OANIqrB,IACAA,EAAWvZ,KAAO,cAElBqZ,IACAA,EAAOrZ,KAAO,UAEX,EAAQ,gBAAiB,CAC5BtI,WAAY,CACRuI,UAAW,EACXC,MAAOJ,EACPnJ,KAAMA,EACN5I,MAAOA,EACP6B,KAAMA,GAEVgI,SAAU2hB,EAAa,CAACA,GAAcF,EAAS,CAACA,QAAU7qB,EAC1DqJ,UAAW,CACPkI,QAASA,OAGlB,CACCrS,UAAW8rB,GAAwB9rB,UACnCyS,OAAOjS,GAMI,IAAIurB,GAAa,IACjBvrB,EAAM0B,KAAM,WAGvBwQ,SAASlS,GAME,IAAIurB,GAAa,IACjBvrB,EAAM0B,KAAM,aAGvByQ,MAAMnS,GAMK,IAAIurB,GAAa,IACjBvrB,EAAM0B,KAAM,UAGvB2pB,WAAWrrB,GAKA,IAAIurB,GAAa,IACjBvrB,EAAM0B,KAAM,eAGvBypB,OAAOnrB,GAKI,IAAIurB,GAAa,IACjBvrB,EAAM0B,KAAM,a,uUC5R/B,IAAM8pB,GAAN,cAA+Czd,YAuC3ChO,cACIkD,QACmBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAIzCC,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,QAAS,CACV,MAAMmJ,EAAQ3R,KAAKgJ,WAAWC,cAAgC,kBAC1D0I,IACAA,EAAM8D,YAAcnV,GAExB,WAxCR,GAAiB,EAAQ,aACV8N,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,ogBAiBf,EAAQ,SA9BhB,IADCxC,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAV3CkkB,GAAgC,IAHrCjjB,EAAc,CACXE,KAAM,wBAEJ+iB,IAkEN,I,oCCnEI,GDmEAC,GAAwED,G,69BC9D5E,IAAME,GAAN,cAAsC3d,YAoClChO,cACIkD,Q,aAXJ,oBACA,oBAWI,GAAAhD,KAAI,IAAiB,EAAC,KACtB,GAAAA,KAAI,GAAWoJ,SAASwN,iBACpB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OACxD,KACkBA,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OA5CnE,iBACI,OAAOA,KAAKiJ,cACR,yBAIR/H,QACI,OAAOsG,MAAM2C,KAAKnK,KAAKyW,iBACnB,6DAIR,kBACI,OAAO,GAAAzW,KAAI,U,yDAkCH8D,GACR,OAAIA,aAAgBunB,GACTxU,WAAWgB,cAElB/T,aAAgB0nB,GACT3U,WAAWiB,YAEfjB,WAAWkB,eACrB,cAGG,MAAMyO,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACWnC,EAAOja,cACjD,cAGG,MAAMia,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwN,EAAOmC,KACWnC,EAAOvN,aACjD,YAEa5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EACgCmlB,EAAOC,mBAE/D,YAESplB,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACkBmlB,EAAOE,eACjD,YAEcrlB,GACX,MAAM,WAACwhB,GAAc7iB,KACF,OAAf6iB,GAAuBA,IAAexhB,IACtCwhB,EAAW2H,QAAS,GAEX,OAATnpB,GACAA,EAAKmpB,QAAS,EACd,GAAAxqB,KAAI,GAAgBA,KAAKkB,QAAQwD,QAAQrD,GAAK,MAG9C,GAAArB,KAAI,IAAiB,EAAC,MAE7B,YAmDmB4B,GAChB,MAAM,OAAC3B,GAAU2B,EACXib,EAA2D5c,EAAQ4Q,QAAQ,iBAC7EgM,IACA,GAAA7c,KAAI,WAAe,KAAnBA,KAAoB6c,GACpB7c,KAAKkP,UAAY,IAExB,YAEoBtN,GACjB,MAAM,cAAC+X,GAAiB/X,GACC5B,KAAKiW,SAAe0D,KAEzC,GAAA3Z,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAKkP,SAAW,IAEvB,YAEmBtN,GAChB,MAAM,IAAC7C,GAAO6C,GACR,WAACihB,GAAc7iB,KACrB,OAAQjB,GACJ,IAAK,QACD,GAAI8jB,EAAY,CACZ,MAAM,KAACphB,GAAQohB,EACf,OAAQphB,GACJ,IAAK,aAAc,CACf,MAAM,WAAC2pB,GAAcvI,EACjBuI,IACAA,EAAWtc,SACXsc,EAAWtE,WAAWjN,MAAM,CAACU,eAAe,KAEhD,MAEJ,IAAK,SAAU,CACX,MAAM,OAAC2Q,GAAUrI,EACbqI,GACAA,EAAOpc,SAEX,MAEJ,QACI+T,EAAWjI,QAInBhZ,EAAM6Y,kBAEV,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACpCgE,GACAA,EAAahN,MAAM,CAACU,eAAe,QAGtC,CACD,MAAMuM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAC5BkE,GACAA,EAASlN,MAAM,CAACU,eAAe,QAGlC,CACD,MAAMiK,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAM,KAACphB,GAAQohB,EACf,OAAQphB,GACJ,IAAK,SACDohB,EAAWqI,QAAQpc,SACnBlN,EAAM6Y,mBAKlB,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,SACGoI,EACAA,EAAWhJ,MAAM,CAACU,eAAe,IAGjCva,KAAK6Z,MAAM,CAACU,eAAe,IAE/B3Y,EAAM6Y,qBA7Od,GAAiB,EAAQ,aACVrM,QAAQ/I,OACnB,EAAQ,SAXhB,IADC4B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,mCAvBxBukB,GAAuB,IAH5BnjB,EAAc,CACXE,KAAM,eAEJijB,IAkRN,IAAIC,GAAsDD,G,uUCnS1D,IAAME,GAAN,cAAuC7d,YAKnChO,cACIkD,QAEAhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,iQAWf,EAAQ,WAnBhB,IADCxC,EAAkB,CAACxF,KAAMyF,U,4BAFxBykB,GAAwB,IAH7BrjB,EAAc,CACXE,KAAM,gBAEJmjB,IA2BN,I,GAAIC,GAAwDD,G,69BCL5D,IAAME,GAAN,cAAkC/d,YAgB9BhO,cACIkD,QAHJ,oBAKIhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,yrBAsBf,EAAQ,SAEZ,GAAAzJ,KAAI,GAAU,KAAI,KAGtB,YACI,OAAO,GAAAA,KAAI,QAGfiP,oBACI,MAAM6c,EAAQ1iB,SAAS2iB,eAAe/rB,KAAK2f,UACvCmM,IAAU,GAAA9rB,KAAI,SAAW8rB,aAAiBF,IAC1C,GAAA5rB,KAAI,GAAU8rB,EAAK,KAEnBA,IACAA,EAAMlU,QAAU5X,KAAKwqB,QAI7Blc,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,SACGxI,KAAKwqB,QACLxqB,KAAK+C,cAAc,IAAIipB,YAAY,cAAe,CAACC,OAAQ,CAACC,IAAKlsB,MAAOgP,SAAS,KAErF,MAAM8c,EAAQ1iB,SAAS2iB,eAAe/rB,KAAK2f,UACvCmM,IAAU9rB,KAAK8rB,OAASA,aAAiBF,IACzC,GAAA5rB,KAAI,GAAU8rB,EAAK,KAEnBA,IACAA,EAAMlU,QAAU5X,KAAKwqB,W,eAvErC,IADCvjB,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,8BAI7C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,gCAX1CwkB,GAAmB,IAHxBvjB,EAAc,CACXE,KAAM,WAEJqjB,IAiFN,I,GAAIM,GAA8CN,G,spBC/FlD,IAAMO,GAAN,cAAsCte,YAMlChO,cACIkD,QAHJ,oBAKIhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,sLAQf,EAAQ,SAGZzJ,KAAKqsB,KAAO,GACZ,GAAArsB,KAAI,GAAgB,EAAC,KAGzB,kBACI,OAAO,GAAAA,KAAI,QAGf,gBACI,OAAOA,KAAKqsB,KAAK,GAAArsB,KAAI,UAAkB,KAG3CiP,oBACIjP,KAAKkP,SAAWlP,KAAKkP,SACrB,MAAM2C,EAAO7R,KAAKgJ,WAAYC,cAAc,QACxC4I,GACAA,EAAKvP,iBAAiB,cAAeV,IAEjC,MAAMyqB,EAA4CzqB,EAAM3B,OACnDgoB,mBACA/hB,QAAOgmB,GAAOA,aAAeC,KAClCnsB,KAAKqsB,KAAOA,EACZ,GAAArsB,KAAI,GAAgBA,KAAKqsB,KAAKzpB,WAAUspB,GAAOA,EAAI1B,SAAO,QAIlExqB,KAAKsC,iBAAiB,WAAYV,IAC9B,OAAQA,EAAM7C,KACV,IAAK,UACDiB,KAAKssB,WAAYtsB,KAAKwoB,aAAe,EAAKxoB,KAAKqsB,KAAKjrB,OAAS,EAAIpB,KAAKwoB,YAAc,GACpF5mB,EAAM6Y,kBACN,MACJ,IAAK,YACDza,KAAKssB,WAAYtsB,KAAKwoB,aAAexoB,KAAKqsB,KAAKjrB,OAAS,EAAK,EAAIpB,KAAKwoB,YAAc,GACpF5mB,EAAM6Y,kBACN,MACJ,IAAK,QACGza,KAAKusB,WACLvsB,KAAKwsB,YAAYxsB,KAAKusB,eAMtCvsB,KAAKsC,iBAAiB,SAAUV,IAC5B,MAAM3B,EAAS2B,EAAM3B,OACjBA,aAAkBksB,KAClBlsB,EAAOuqB,QAAS,MAIxBxqB,KAAKsC,iBAAiB,eAAgBV,IAClC,MAAM6qB,EAAczsB,KAAKqsB,KAAK3nB,QAAQ9C,EAAMqqB,OAAOC,KACnD,GAAAlsB,KAAI,GAAgBysB,EAAW,KAC/BzsB,KAAKqsB,KAAKjqB,SAAQ,CAACsqB,EAASC,KACpBA,IAAiBF,IACjBC,EAAQlC,QAAS,SAMjC8B,WAAWhrB,GACP,MAAM4qB,EAAMlsB,KAAKqsB,KAAK/qB,GAClB4qB,IACA,GAAAlsB,KAAI,GAAgBsB,EAAK,KACzB4qB,EAAIrS,SAIZ2S,YAAYN,GACJlsB,KAAKqsB,KAAKjmB,SAAS8lB,KACnBA,EAAI1B,QAAS,K,eA/FnB4B,G,mUAAuB,EAH5B9jB,EAAc,CACXE,KAAM,eAEJ4jB,IAoGN,I,MCvGI,GAKJ,IAAMQ,GAAN,cAA4C9e,YAoBxChO,cACIkD,Q,aACA,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBACP,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,S,2BAIhC4B,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB6I,KAE5BzqB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,EAClBP,EAAOsoB,MAAQ,MACX,IAAIA,GAAS,EACTC,EAA2CvoB,EAC/C,KAAuB,OAAhBuoB,GAAwBA,EAAYnM,QAAQ,kBAC/CmM,EAAcA,EAAYC,eAAenc,QAAQ,eAAiB,KAClEic,IAEJ,OAAOA,GAPI,QAnCnB,GAAiB,EAAQ,aACV1e,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,qIAOf,EAAQ,SAhBdmjB,G,mUAA6B,EAHlCtkB,EAAc,CACXE,KAAM,qBAEJokB,IAqDN,I,YC/CI,GD+CAK,GAAkEL,G,69BC1CtE,IAAMM,GAAN,cAAuCpf,YA6DnChO,cACIkD,Q,aA3BJ,oBA4BI,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBAAiB,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OAC3EA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3D,GAAAA,KAAI,GAAU,KAAI,KAjEtB,YACI,OAAO,GAAAA,KAAI,QAmEfsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,WACDxI,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,WACDhP,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,QAAS,CACV,MAAM8M,EAAY9b,KAAKgJ,WAAWC,cAAc,gBAC5C6S,IACAA,EAAUrG,YAAcnV,GAE5B,MAEJ,IAAK,QACDN,KAAKqP,MAAMjL,YAAY,UAAW,GAAGpE,KAAK8sB,UAMtDne,OAAOC,GACH5O,KAAK6O,SAAWD,IAAU5O,KAAK6O,W,0CAGjBjN,GACd,MAAM,OAAC3B,EAAM,SAAEua,EAAQ,QAAEP,GAAWrY,GAC9B,KAACH,GAAQzB,KACXA,MAAQC,GAAkB,UAARwB,GAAsB+Y,GAAYP,GACpDja,KAAK2O,UAEZ,YAEsB/M,GACnB,MAAM,OAAC3B,GAAU2B,GACV4G,KAAMwL,GAA6B/T,EAC1C,OAAQ+T,GACJ,IAAK,QAAS,CACV,MAAMrK,EAA4B1J,EAAQgoB,mBAAmB,GAC7D,GAAAjoB,KAAI,GAAU2J,aAAmBsjB,GAA4BtjB,EAAU,KAAI,KAC3E,UA7ER,GAAiB,EAAQ,aACVyE,QAAQ/I,OACnB,EAAQ,MAAO,CACXkE,WAAY,CACRgI,KAAM,WAEV9H,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRgI,KAAM,WAGd,EAAQ,WAGhB,EAAQ,OAAQ,CACZhI,WAAY,CACRf,KAAM,YA9CtB,IADCvB,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAM2G,U,gCAI1B,IADCnB,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAI7C,IADCJ,EAAkB,CAACxF,KAAMkG,W,kCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,8BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAI7C,IADCJ,EAAkB,CAACxF,KAAM2G,OAAQf,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,U,4BAhC9C8lB,GAAwB,IAH7B5kB,EAAc,CACXE,KAAM,gBAEJ0kB,IAyHN,I,uFCjII,GDiIAL,GAAwDK,G,69BC5H5D,IAAMC,GAAN,cAAmCrf,YAkC/BhO,cACIkD,Q,aAZJ,oBACA,oBACA,oBAWI,GAAAhD,KAAI,GAAWoJ,SAASwN,iBACpB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OACxD,KACD,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAKkB,MAAQlB,KAAKotB,qBAAqB,cACvC,MAAMpkB,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,OAAQ,GAAAtC,KAAI,WAAkB0G,KAAK1G,OACzDA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,OAC7DgJ,EAAW1G,iBAAiB,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OApD/E,iBACI,OAAOA,KAAKiJ,cACR,sBAIR,qBACI,OAAOjJ,KAAKiJ,cACR,0BA+CR6Z,gBACI,MAAMA,EAAgB,GAChB0D,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAItnB,EAAO,GAAArB,KAAI,WAAW,KAAfA,MACX,KAAgB,OAATqB,GACCA,EAAKskB,UACL7C,EAActgB,KAAKnB,GAEvBA,EAAO,GAAArB,KAAI,WAAU,KAAdA,KAAeqB,GAE1B,OAAOyhB,EAGXvL,iBACI,GAAAvX,KAAI,IAAgB,EAAI,KAG5BwX,eACI,GAAAxX,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,IAAwB,EAAK,Q,wEAI7B8D,GACR,OAAIA,aAAgB+oB,GACThW,WAAWgB,cAElB/T,aAAgBmpB,GACTpW,WAAWiB,YAEfjB,WAAWkB,eACrB,YAEc5N,EAA4B6N,GACvC,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAIkjB,EAAkB,GAAArtB,KAAI,WAAU,KAAdA,KAAemK,GACrC,KAAOkjB,GAAmBA,IAAoBrV,GAC1ChM,EAAMxJ,KAAK6qB,GACXA,EAAkB,GAAArtB,KAAI,WAAU,KAAdA,KAAeqtB,GAGrC,OADArhB,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAImjB,EAAsB,GAAAttB,KAAI,WAAc,KAAlBA,KAAmBmK,GAC7C,KAAOmjB,GAAuBA,IAAwBtV,GAClDhM,EAAMxJ,KAAK8qB,GACXA,EAAsB,GAAAttB,KAAI,WAAc,KAAlBA,KAAmBstB,GAG7C,OADAthB,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,IACV,eAEgB9K,GACb,MAAM4hB,EAAgB9iB,KAAK8iB,gBAC3B9iB,KAAKuX,iBACLuL,EAAc1gB,SAASmrB,IACdrsB,EAAMkF,SAASmnB,KAChBA,EAAe5H,UAAW,MAGlCzkB,EAAMkB,SAASoC,IACPxE,KAAKiW,SAASzR,KAAYA,EAAOmhB,WACjCnhB,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEkBtW,GACflB,KAAKuX,iBACLrW,EAAMkB,SAASoC,IACNA,EAAOmhB,WACRnhB,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEuBtW,GACpB,MAAM4hB,EAAgB9iB,KAAK8iB,gBAC3B9iB,KAAKuX,iBACLrW,EAAMkB,SAASoC,IACPse,EAAc1c,SAAS5B,KACvBA,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,cAGG,MAAMsL,EAAgB9iB,KAAK8iB,gBAC3B9iB,KAAKuX,iBACLuL,EAAc1gB,SAASoC,IACnBA,EAAOmhB,UAAW,KAEtB3lB,KAAKwX,gBACR,YAEcnW,GACX,MAAM,WAACwhB,GAAc7iB,KACF,OAAf6iB,GAAuBA,IAAexhB,IACtCwhB,EAAW2H,QAAS,EACpB3H,EAAW3T,UAAY,GAEd,OAAT7N,IACe,GAAArB,KAAI,QACZgZ,YAAc3X,EACrBA,EAAKmpB,QAAS,EACdnpB,EAAK6N,SAAW,IAEvB,YAEkB7N,GACf,MAAM,eAACmsB,GAAkBxtB,KACF,OAAnBwtB,GAA2BA,IAAmBnsB,IAC9CmsB,EAAeC,YAAa,GAEnB,OAATpsB,GACArB,KAAKytB,YAAa,EAClBpsB,EAAKosB,YAAa,GAGlBztB,KAAKytB,YAAa,GAEzB,cAGG,MAAMjH,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EAEf,OADAA,EAAOxN,YAAc2P,EACenC,EAAOja,cAC9C,cAGG,MAAMia,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EAEf,OADAA,EAAOxN,YAAc2P,EACenC,EAAOvN,aAC9C,YAEa5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc3X,EACrB,MAAMolB,EAA+CD,EAAOC,kBAC5D,OAAOA,EACH,GAAAzmB,KAAI,WAAa,KAAjBA,KAAkBymB,GACWD,EAAOtjB,cAC3C,YAES7B,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc3X,EACrB,MAAM,KAACI,EAAI,SAAEoN,GAAYxN,EACzB,MACa,SAATI,GAEIoN,EADA2X,EAAOrN,WAGHqN,EAAOE,gBACNF,EAAOtjB,aAAcsjB,EAAOE,gBAE5C,cAEYrlB,GACT,GAAIA,EAAKwN,SAAU,CACf,MACM2V,EADS,GAAAxkB,KAAI,QAC2BiZ,YAC9C,GAAIuL,EACA,OAAO,GAAAxkB,KAAI,UAAa,KAAjBA,KAAkBwkB,GAGjC,OAAOnjB,GACV,YAEqBO,GAClB,MAAM,OAAC3B,EAAM,QAAEga,EAAO,SAAEO,EAAQ,OAAExI,GAAUpQ,EAC5C,GAAI3B,aAAkB4sB,GAAsB,CACxC,MAAM,SAAClH,GAAY1lB,EACnB,OAAQ+R,GACJ,KAAK,EACD,GAAKwI,GAAaP,GAGb,GAAIA,EACD0L,GACA1lB,EAAOytB,OAET/H,EAEE,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0BC,GAD1B,GAAAD,KAAI,WAAgB,KAApBA,KAAqBC,GAEzB2B,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAM,WAACqI,GAAc7iB,KACrB,GAAI6iB,EAAY,CACZ,MAAM7W,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV6iB,EACA5iB,GAEA+L,GACA,GAAAhM,KAAI,WAAc,KAAlBA,QAAsBgM,GAG9BpK,EAAM6Y,wBAtBN,GAAAza,KAAI,WAAc,KAAlBA,KAAmBC,GAyB3B,MACA,KAAK,EACI0lB,GACD,GAAA3lB,KAAI,WAAc,KAAlBA,KAAmBC,MAMtC,cAGG,GAAAD,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEqB4B,GAClB,MAAM,OAAC3B,GAAU2B,EACjB,GAAI3B,aAAkB4sB,GAAsB,CACxC,MAAM,KAACprB,GAAQxB,EACH,UAARwB,GACAxB,EAAO0O,QAAO,GAElB,GAAA3O,KAAI,WAAmB,KAAvBA,KAAwBC,GAE5B2B,EAAM0Y,kBACT,YAEoB1Y,GACjBA,EAAM0Y,kBACT,YAEqB1Y,GAClB,MAAM,cAAC+X,GAAiB/X,EACxB,GAAI+X,EAAe,CACf,MAAMgU,EAA2BhU,EAAeiU,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBpU,EACC3Z,KAAKiW,SAAe4X,IACrB,GAAA7tB,KAAI,WAAmB,KAAvBA,KAAwB,QAGnC,cAGG,GAAAA,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEmB4B,GAChB,MAAM,IAAC7C,GAAO6C,GACR,WAACihB,GAAc7iB,KACrB,OAAQjB,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,GACI4I,EAAY,CACZ,MAAM2D,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EACfA,EAAOxN,YAAc6J,EACrB,MAAMiE,GACFN,EAAOxN,YAAcwN,EAAOtjB,cAAgBylB,EAAMnC,EAAOja,cAEvDiY,GACFgC,EAAOxN,YAAcwN,EAAOtjB,cAAgBylB,EAAMnC,EAAOvN,aAE7D,GAAI6N,GAAatC,EAAU,CACvB,MAAMxY,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV8mB,EACA,GAAA9mB,KAAI,WAAa,KAAjBA,KAAkBwkB,IAElBxY,GACA,GAAAhM,KAAI,WAAc,KAAlBA,QAAsBgM,IAKtCpK,EAAM0Y,iBACN,MAEJ,IAAK,YACD,GAAIuI,EACA,GAAIA,EAAWhU,SACXgU,EAAWlU,aAEV,CACD,MACMyW,EADS,GAAAplB,KAAI,QAC6BkD,aAC5CkiB,GACAA,EAAWvL,MAAM,CAACU,eAAe,IAI7C3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACGoI,IACKA,EAAWhU,UACZgU,EAAWlU,UAGnB/M,EAAM6Y,kBACN,MAEJ,IAAK,UACD,GAAIoI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACxC,GAAIgE,EAAc,CACdA,EAAahN,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,IACAqM,EAAalB,SACT,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0B6mB,GAC1B,GAAA7mB,KAAI,WAAgB,KAApBA,KAAqB6mB,SAIhC,CACD,MAAMC,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAChC,GAAIkE,EAAU,CACVA,EAASlN,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,IACAuM,EAASpB,SACL,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0B+mB,GAC1B,GAAA/mB,KAAI,WAAgB,KAApBA,KAAqB+mB,SAIhC,CACD,MAAMvC,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACGoI,IACA,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACnBA,EAAWjI,SAEfhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,GAAAza,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAK6Z,QACLjY,EAAM6Y,oBAIjB,YAEiB7Y,GACd,MAAM,cAAC+X,GAAiB/X,GAClB,WAACihB,GAAc7iB,KACjB6iB,GAAclJ,IAAkBkJ,GAChCA,EAAWhJ,SAElB,YAEmBjY,GAChB,MAAM,OAAC3B,GAAU2B,EACb3B,aAAkB4sB,KAClB,GAAA7sB,KAAI,WAAe,KAAnBA,KAAoBC,GACpBD,KAAKkP,UAAY,IAExB,YAEoBtN,GACjB,MAAM,cAAC+X,GAAiB/X,GACC5B,KAAKiW,SAAe0D,KAEzC3Z,KAAKkP,SAAW,IAEvB,cAGO,GAAAlP,KAAI,QACJ,GAAAA,KAAI,IAAwB,EAAI,KAGhCA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBpN,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqB6I,KAE5BzqB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,EAClBP,EAAOsoB,MAAQ,OA3dnB,GAAiB,EAAQ,aACV1e,QAAQ/I,OACnB,EAAQ,SAZhB,IADC4B,EAAkB,CAACxF,KAAMkG,W,kCAI1B,IADCV,EAAkB,CAACxF,KAAMyF,U,4BApBxBimB,GAAoB,IAHzB7kB,EAAc,CACXE,KAAM,YAEJ2kB,IA4fN,I,eC/fI,G,69BAKJ,IAAMa,GAAN,cAAuClgB,YA6CnChO,cACIkD,Q,aAZJ,oBACA,oBACA,oBAWI,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErC,GAAArO,KAAI,GAAU,KAAI,KAClB,GAAAA,KAAI,GAAS,KAAI,KACjB,GAAAA,KAAI,GAAY,KAAI,KACpBgJ,EAAW1G,iBAAiB,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OAlD/E,YACI,OAAO,GAAAA,KAAI,QAGf,cACI,OAAO,GAAAA,KAAI,QAGf,WACI,OAAO,GAAAA,KAAI,QA4CfsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,WACDxI,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KACjD,MAEJ,IAAK,QAAS,CACV,MAAM,WAAChG,GAAchJ,KACf8b,EAAY9S,EAAWC,cAAc,gBACvC6S,IACAA,EAAUrG,YAAcnV,GAE5B,U,wEAKWsB,GACnB,MAAM,OAAC3B,GAAU2B,GACV4G,KAAMwL,GAA6B/T,EAC1C,OAAQ+T,GACJ,IAAK,UAAW,CACZ,MAAMrK,EAA4B1J,EAAQgoB,mBAAmB,GAC7D,GAAAjoB,KAAI,GAAY2J,aAAmB+hB,GAAsB/hB,EAAU,KAAI,KACvE,MAEJ,IAAK,QAAS,CACV,MAAMA,EAA4B1J,EAAQgoB,mBAAmB,GAC7D,GAAAjoB,KAAI,GAAU2J,aAAmBskB,gBAAkBtkB,EAAU,KAAI,KACjE,MAEJ,IAAK,OAAQ,CACT,MAAMA,EAA4B1J,EAAQgoB,mBAAmB,GAC7D,GAAAjoB,KAAI,GAAS2J,aAAmB8f,GAAmB9f,EAAU,KAAI,KACjE,UApDR,GAAiB,EAAQ,aACVyE,QAAQ/I,OACnB,EAAQ,SAxBhB,IADC4B,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAM2G,U,gCAI1B,IADCnB,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMkG,W,kCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,8BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCA/B3C2mB,GAAwB,IAH7B1lB,EAAc,CACXE,KAAM,gBAEJwlB,IAiGN,I,MCjHI,GDiHAE,GAAwDF,GC5G5D,IAAMG,GAAN,cAA4CrgB,YAWxChO,cACIkD,Q,aACA,MAAMgG,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrF,EAAW1G,iBACP,a,uSAAc,CAAAtC,KAAI,WAAwB0G,KAAK1G,S,2BAIhC4B,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqBkK,KAE5B9rB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,OAzBtB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,SAPd8oB,G,mUAA6B,EAHlC7lB,EAAc,CACXE,KAAM,qBAEJ2lB,IAmCN,I,6FC/BI,GD+BAC,GAAkED,G,69BC1BtE,IAAME,GAAN,cAAmCvgB,YAuC/BhO,cACIkD,Q,aAzBJ,oBACA,oBACA,oBACA,oBACA,oBAsBI,GAAAhD,KAAI,GAAWoJ,SAASwN,iBACpB5W,KAAM6W,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAC9D,KACD,GAAAA,KAAI,IAAiB,EAAC,KACtB,GAAAA,KAAI,IAAqB,EAAC,KAC1B,GAAAA,KAAI,IAAgB,EAAK,KACzB,GAAAA,KAAI,IAAwB,EAAK,KACjCA,KAAKkB,MAAQlB,KAAKotB,qBAAqB,cACvC,MAAMpkB,EAAahJ,KAAK+N,aAAa,CAACC,KAAM,SAC5ChF,EAAW3D,OACP,GAAe+I,QAAQC,WAAU,IAErCrO,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,OAAQ,GAAAtC,KAAI,WAAkB0G,KAAK1G,OACzDA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,OAC7DgJ,EAAW1G,iBAAiB,aAAc,GAAAtC,KAAI,WAAwB0G,KAAK1G,OA5D/E,qBACI,OAAOA,KAAKkB,MAAM,GAAAlB,KAAI,UAAsB,KA8DhD,kBACI,OAAO,GAAAA,KAAI,QAGf,iBACI,OAAOA,KAAKkB,MAAMlB,KAAKwoB,cAAgB,KAG3CjR,iBACI,GAAAvX,KAAI,IAAgB,EAAI,KAG5BwX,eACI,GAAAxX,KAAI,IAAgB,EAAK,KACrB,GAAAA,KAAI,UACJA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,IAAwB,EAAK,MAIzC8iB,gBACI,MAAMA,EAAgB,GAChB0D,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAcwN,EAAOmC,KAC5B,IAAItnB,EAAO,GAAArB,KAAI,WAAW,KAAfA,MACX,KAAgB,OAATqB,GACCA,EAAKskB,UACL7C,EAActgB,KAAKnB,GAEvBA,EAAO,GAAArB,KAAI,WAAU,KAAdA,KAAeqB,GAE1B,OAAOyhB,I,sGAGOhf,GACd,OAAIA,aAAgBoqB,GACTrX,WAAWgB,cAElB/T,aAAgBsqB,GACTvX,WAAWiB,YAEfjB,WAAWkB,eACrB,YAEc5N,EAA4B6N,GACvC,MAAM9W,EAAQsG,MAAM2C,KAAKnK,KAAKkB,OACxBuD,EAAYvD,EAAMwD,QAAQyF,GAC1BkgB,EAAUnpB,EAAMwD,QAAQsT,GAC9B,OAAIvT,GAAa,GAAK4lB,GAAW,EACzBlgB,GAAQ6N,EACD,CAAC7N,GAELjJ,EAAMC,MACToE,KAAKkU,IAAIhV,EAAW4lB,GACpB9kB,KAAKib,IAAI/b,EAAW4lB,GAAW,GAGhC,IACV,eAEgBnpB,GACblB,KAAKuX,iBACiBvX,KAAK8iB,gBACb1gB,SAASmrB,IACdrsB,EAAMkF,SAASmnB,KAChBA,EAAe5H,UAAW,MAGlCzkB,EAAMkB,SAASoC,IACPxE,KAAKiW,SAASzR,KAAYA,EAAOmhB,WACjCnhB,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEkBtW,GACflB,KAAKuX,iBACLrW,EAAMkB,SAASoC,IACNA,EAAOmhB,WACRnhB,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,eAEuBtW,GACpBlB,KAAKuX,iBACL,MAAMuL,EAAgB9iB,KAAK8iB,gBAC3B5hB,EAAMkB,SAASoC,IACPse,EAAc1c,SAAS5B,KACvBA,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,cAGGxX,KAAKuX,iBACiBvX,KAAK8iB,gBACb1gB,SAASoC,IACfA,EAAOmhB,WACPnhB,EAAOmhB,UAAW,MAG1B3lB,KAAKwX,gBACR,YAEcnW,GACX,MAAM,WAACwhB,EAAU,MAAE3hB,GAASlB,KACT,OAAf6iB,GAAuBA,IAAexhB,IACtCwhB,EAAW2H,QAAS,EACpB3H,EAAW3T,UAAY,GAEd,OAAT7N,IACAA,EAAKmpB,QAAS,EACdnpB,EAAK6N,SAAW,EAChB,GAAAlP,KAAI,GAAgBwH,MAAM2C,KAAKjJ,GAAOwD,QAAQrD,GAAK,OAE1D,YAEkBA,GACf,MAAM,eAACmsB,EAAc,MAAEtsB,GAASlB,KACT,OAAnBwtB,GAA2BA,IAAmBnsB,IAC9CmsB,EAAeC,YAAa,GAEnB,OAATpsB,GACArB,KAAKytB,YAAa,EAClBpsB,EAAKosB,YAAa,EAClB,GAAAztB,KAAI,GAAoBwH,MAAM2C,KAAKjJ,GAAOwD,QAAQrD,GAAK,OAGvDrB,KAAKytB,YAAa,EAClB,GAAAztB,KAAI,IAAqB,EAAC,OAEjC,cAGG,MAAMwmB,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EAEf,OADAA,EAAOxN,YAAc2P,EACenC,EAAOja,cAC9C,cAGG,MAAMia,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EAEf,OADAA,EAAOxN,YAAc2P,EACenC,EAAOvN,aAC9C,YAEa5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EAC6BmlB,EAAOtN,gBAE5D,YAES7X,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EACyBmlB,EAAOrN,YAExD,YAEuBvX,GACpB,MAAM,OAAC3B,GAAU2B,EACb3B,aAAkBiuB,KACIluB,KAAK8iB,gBACR1c,SAASnG,IACxB,GAAAD,KAAI,WAAc,KAAlBA,KAAmBC,GAEvBA,EAAO4Z,MAAM,CAACU,eAAe,IAC7B3Y,EAAM0Y,mBAEb,YAEiB1Y,GACd,MAAM,OAAC3B,EAAM,QAAEga,EAAO,SAAEO,GAAY5Y,EAC9BkhB,EAAgB9iB,KAAK8iB,gBAC3B,GAAI7iB,aAAkBiuB,GAClB,GAAK1T,GAAaP,GAGb,GAAIA,EACHha,EAAO0lB,SAEL,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0BC,GAD1B,GAAAD,KAAI,WAAgB,KAApBA,KAAqBC,GAEzB2B,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAM8T,EAAmBxL,EAAcA,EAAc1hB,OAAS,GAC9D,GAAIktB,EAAkB,CAClB,MAAMtiB,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACVsuB,EACAruB,GAEA+L,IACI8W,EAAc1c,SAASnG,GACvB,GAAAD,KAAI,WAAqB,KAAzBA,QAA6BgM,GAG7B,GAAAhM,KAAI,WAAgB,KAApBA,QAAwBgM,SAKhC,GAAAhM,KAAI,WAAc,KAAlBA,KAAmBC,GAEvB2B,EAAM6Y,wBA3BN,GAAAza,KAAI,WAAc,KAAlBA,KAAmBC,IA8B9B,cAGG,GAAAD,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEqB4B,GAClB,MAAM,OAAC3B,GAAU2B,EACb3B,aAAkBiuB,IAClB,GAAAluB,KAAI,WAAmB,KAAvBA,KAAwBC,GAE5B2B,EAAM0Y,kBACT,YAEoB1Y,GACjBA,EAAM0Y,kBACT,YAEqB1Y,GAClB,MAAM,cAAC+X,GAAiB/X,EAClB+rB,EAA2BhU,EAAeiU,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBpU,EACC3Z,KAAKiW,SAAe4X,IACrB,GAAA7tB,KAAI,WAAmB,KAAvBA,KAAwB,OAE/B,YAEqB4B,GAClB,MAAM,OAAC3B,GAAU2B,EACb3B,aAAkBiuB,KACIluB,KAAK8iB,gBACR1c,SAASnG,IACxB,GAAAD,KAAI,WAAc,KAAlBA,KAAmBC,KAG9B,cAGG,GAAAD,KAAI,WAAmB,KAAvBA,KAAwB,OAC3B,YAEmB4B,GAChB,MAAM,IAAC7C,GAAO6C,GACR,WAACihB,GAAc7iB,KACrB,OAAQjB,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,EAAS,CACT,MAAMuM,EAAS,GAAAxmB,KAAI,SACb,KAAC2oB,GAAQnC,EACTM,GACFN,EAAOxN,YAAcwN,EAAOtjB,cAAgBylB,EAAMnC,EAAOja,cAEvDiY,GACFgC,EAAOxN,YAAcwN,EAAOtjB,cAAgBylB,EAAMnC,EAAOvN,aAEvDjN,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV8mB,EACAtC,GAEAxY,GACA,GAAAhM,KAAI,WAAc,KAAlBA,QAAsBgM,GAG9BpK,EAAM0Y,iBACN,MAEJ,IAAK,UACD,GAAIuI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACxC,GAAIgE,EAAc,CACdA,EAAahN,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,IACAqM,EAAalB,SACT,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0B6mB,GAC1B,GAAA7mB,KAAI,WAAgB,KAApBA,KAAqB6mB,SAIhC,CACD,MAAMC,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAChC,GAAIkE,EAAU,CACVA,EAASlN,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,IACAuM,EAASpB,SACL,GAAA3lB,KAAI,WAAqB,KAAzBA,KAA0B+mB,GAC1B,GAAA/mB,KAAI,WAAgB,KAApBA,KAAqB+mB,SAIhC,CACD,MAAMvC,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,MACd8mB,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,MACbwkB,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QAAS,CACV,MAAM,WAACoI,GAAc7iB,KACjB6iB,IACA,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACnBA,EAAWjI,SAEfhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,GAAAza,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,WAAe,KAAnBA,KAAoB,MACpBA,KAAK6Z,QACLjY,EAAM6Y,oBAIjB,YAEiB7Y,GACd,MAAM,cAAC+X,GAAiB/X,GAClB,WAACihB,GAAc7iB,KACjB6iB,GAAclJ,IAAkBkJ,GAChCA,EAAWhJ,SAElB,YAEmBjY,GAChB,MAAM,OAAC3B,GAAU2B,EACb3B,aAAkBiuB,IAClB,GAAAluB,KAAI,WAAe,KAAnBA,KAAoBC,IAE3B,cAGQ,GAAAD,KAAI,SACLA,KAAK+C,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,MAEjE,YAEsBpN,GACnB,MAAM,OAAC3B,GAAU2B,EAC+C3B,EAC3DgoB,mBACA/hB,QACG8d,GAAaA,aAAqBkK,KAE5B9rB,SAAQ,CAACoC,EAAQO,KAC3BP,EAAOihB,SAAW1gB,OApbtB,GAAiB,EAAQ,aACVqJ,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,8BAKf,EAAQ,OAAQ,CACZA,SAAU,CACN,EAAQ,YAvBxB,IADCxC,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMkG,W,kCAZxB0mB,GAAoB,IAHzB/lB,EAAc,CACXE,KAAM,YAEJ6lB,IA+cN,I,qrBCndA,IAAME,GAAN,cAAwCzgB,YAiBpChO,cACIkD,QAJJ,oBAMIhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,+1CAsCf,EAAQ,MAAO,CACXF,WAAY,CACRgI,KAAM,aAEV9H,SAAU,CACN,EAAQ,OAAQ,CACZA,SAAU,CACN,gBAOpBzJ,KAAKwG,WAAa,GAClB,GAAAxG,KAAI,GAAY,KAAI,KAGxB,cACI,O,uSAAO,CAAAA,KAAI,QAGfiP,oBACIjP,KAAKkP,SAAWlP,KAAKkP,SACrBlP,KAAKwjB,WAAY,EAGrBgL,uBACI,GAAIxuB,KAAKyuB,QAAS,CACd,MAAMC,EAAe1uB,KAAKyuB,QAAQjoB,WAAW9B,QAAQ1E,MACjD0uB,GAAgB,GAChB1uB,KAAKyuB,QAAQjoB,WAAW3D,OAAO6rB,EAAc,IAKzDC,eACI,MAAM/oB,EAAkB5F,KAAKqO,WAAU,GAEvC,OADA,GAAAzI,EAAS,GAAY5F,KAAI,KAClB4F,I,eAjGX,IADCqB,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,kCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,+BAI1B,IADCV,EAAkB,CAACxF,KAAMkG,W,gCAXxB4mB,GAAyB,IAH9BjmB,EAAc,CACXE,KAAM,iBAEJ+lB,IAwGN,I,MAAIK,GAA0DL,G,69BCzG9D,IAAMM,GAAN,cAAuC/gB,YAQnChO,cACIkD,QAJJ,oBACA,oBAKIhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,4vBAwBf,EAAQ,MAAO,CACXF,WAAY,CACRgI,KAAM,aAEV9H,SAAU,CACN,EAAQ,YAIpB,GAAAzJ,KAAI,GAAe,GAAE,KACrB,GAAAA,KAAI,GAAuB,GAAE,KAGjC,iBACI,OAAO,GAAAA,KAAI,QAGf,yBACI,OAAO,GAAAA,KAAI,QAGf8uB,gBAAgBtL,GACPxjB,KAAK+uB,mBAAmB3oB,SAASod,IAClCxjB,KAAK+uB,mBAAmBvsB,KAAKghB,GAE5BA,EAAUmC,WACXnC,EAAUmC,UAAW,GAI7BqJ,kBAAkBxL,GACd,MAAMliB,EAAQtB,KAAK+uB,mBAAmBrqB,QAAQ8e,GAC1CliB,GAAS,IACLkiB,EAAUmC,WACVnC,EAAUmC,UAAW,GAEzB3lB,KAAK+uB,mBAAmBlsB,OAAOvB,EAAO,IAI9CmW,iBACIzX,KAAK+uB,mBAAmB3sB,SAASohB,IAC7BA,EAAUmC,UAAW,KAEzB,GAAA3lB,KAAI,GAAuB,GAAE,KAGjCiP,oBACIjP,KAAKkP,SAAWlP,KAAKkP,SAErB,MAAM2C,EAAO7R,KAAKgJ,YAAYC,cAAc,QACxC4I,GACAA,EAAKvP,iBAAiB,cAAc,KAChC,MAAM2sB,EAAapd,EAAKoW,mBAAmB/hB,QACvCgpB,GAAQA,aAAgBN,KAE5B,GAAA5uB,KAAI,GAAeivB,EAAU,KAC7BjvB,KAAKivB,WAAW7sB,SAASohB,IACrBA,EAAUA,WAAY,QAKlCxjB,KAAKsC,iBAAiB,WAAYV,IAC9B,OAAQA,EAAM7C,KACV,IAAK,SACDiB,KAAKyX,iBACLzX,KAAK6Z,YAKjB7Z,KAAKsC,iBAAiB,aAAcV,IAChC,MAAM3B,EAAS2B,EAAM3B,OACrB,GAAID,KAAKivB,WAAW7oB,SAASnG,GAAS,CAClCD,KAAK+uB,mBAAmB3sB,SAAS+sB,IAC7BA,EAAsBC,SAAU,KAEpC,MAAMxL,EAAehiB,EAAMgiB,aACvBA,IACAA,EAAaa,WAAa,OAC1Bb,EAAac,QAAQ,aAAc1kB,KAAK+U,SAKpD/U,KAAKsC,iBAAiB,aAAcV,IAChC,MAAMgiB,EAAehiB,EAAMgiB,aACvBA,IACAA,EAAaa,WAAa,WAIlCzkB,KAAKsC,iBAAiB,WAAYV,IAC9B,MAAM3B,EAAS2B,EAAM3B,OACjBD,KAAKivB,WAAW7oB,SAASnG,IACKD,KAAKivB,WAAW/oB,QAAOsd,GAAaA,EAAU4L,UACtDhtB,SAASitB,IAC3BA,EAAqBD,SAAU,QAK3CpvB,KAAKsC,iBAAiB,YAAaV,IAC/B,MAAM+X,EAAgB/X,EAAM+X,cACvB3Z,KAAKiW,SAAS0D,IACf3Z,KAAKyX,oBAIbzX,KAAKsC,iBAAiB,aAAcV,IAChC,MAAM3B,EAAS2B,EAAM3B,OACrB,GAAoB,GAAhB2B,EAAMoQ,OACN,GAAIhS,KAAKivB,WAAW7oB,SAASnG,GACzB,GAAK2B,EAAM4Y,UAAa5Y,EAAMqY,SAMzB,GAAIrY,EAAMqY,QACTha,EAAO0lB,SAEL3lB,KAAKgvB,kBAAkB/uB,GADvBD,KAAK8uB,gBAAgB7uB,QAGxB,GAAI2B,EAAM4Y,SACX,GAAIxa,KAAK+uB,mBAAmB3tB,OAAS,EAAG,CACpC,MAAMqrB,EAAczsB,KAAKivB,WAAWvqB,QAAQzE,GACtCqvB,EAAatvB,KAAKivB,WAAWvqB,QAAQ1E,KAAK+uB,mBAAmB,IAC7DQ,EAAYhqB,KAAKyY,KAAKyO,EAAc6C,GACpC7qB,EAAa8qB,EAAY,EAAK,EAAIvvB,KAAKivB,WAAW7tB,OAAS,EAC3DipB,EAAWkF,EAAY,EAAKvvB,KAAKivB,WAAW7tB,OAAS,EAAI,EACzDouB,EAAmBD,EAAY,EAAKD,EAAa7C,EACjDgD,EAAiBF,EAAY,EAAK9C,EAAc6C,EACtD,IAAK,IAAIhuB,EAAQmD,EAAWnD,IAAW+oB,EAAUkF,EAAYjuB,GAASiuB,EACjEjuB,GAASkuB,GAAmBluB,GAASmuB,EAClCzvB,KAAK8uB,gBAAgB9uB,KAAKivB,WAAW3tB,IACrCtB,KAAKgvB,kBAAkBhvB,KAAKivB,WAAW3tB,SAI/CtB,KAAK8uB,gBAAgB7uB,QA1BpBA,EAAO0lB,WACR3lB,KAAKyX,iBACLzX,KAAK8uB,gBAAgB7uB,SA6B7BD,KAAKyX,oBAKjBzX,KAAKsC,iBAAiB,WAAYV,IAC9B,MAAM3B,EAAS2B,EAAM3B,OACD,GAAhB2B,EAAMoQ,QACFhS,KAAKivB,WAAW7oB,SAASnG,KACpB2B,EAAM4Y,UAAa5Y,EAAMqY,SAC1Bja,KAAKivB,WAAW7sB,SAASstB,IACjBA,IAAkBzvB,GAClBD,KAAKgvB,kBAAkBU,Y,8BAjMnD,IADCzoB,EAAkB,CAACxF,KAAMkG,W,gCAFxBknB,GAAwB,IAH7BvmB,EAAc,CACXE,KAAM,gBAEJqmB,IA8MN,IAAIc,GAAwDd,G,uUC1L5D,IAAMe,GAAN,cAAuCD,GAiBnC7vB,cACIkD,QAEAhD,KAAKgJ,WAAYC,cAAc,SAAU5D,OAAc,m0BA6BvDrF,KAAKgJ,WAAW3D,OACZ,EAAQ,MAAO,CACXkE,WAAY,CACRgI,KAAM,cAEV9H,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRgI,KAAM,eAEV9H,SAAU,CACN,gBAOpBzJ,KAAK6vB,SAAW,KAGpB5gB,oBACIjM,MAAMiM,oBACN,MAAM6gB,EAAiB9vB,KAAKgJ,WAAYC,cAA8B,uBAEtEjJ,KAAKsC,iBAAiB,WAAYV,IAC9B,OAAQA,EAAM7C,KACV,IAAK,SACGiB,MAAQ4B,EAAM3B,OACdD,KAAK+vB,mBAGL/vB,KAAK+vB,kBAAiBvM,GAAaA,EAAUmC,WAEjD/jB,EAAM6Y,sBAKlBza,KAAKsC,iBAAiB,YAAaV,IAC/BA,EAAM0Y,oBAGVta,KAAKgJ,WAAY1G,iBAAiB,YAAaV,IAC3CA,EAAM0Y,oBAGVta,KAAKsC,iBAAiB,aAAcV,IAChC,MAAM3B,EAAS2B,EAAM3B,OACjBD,KAAKivB,WAAW7oB,SAASnG,IACzBA,EAAO+vB,YAAa,EACpBhwB,KAAKgwB,WAAa,aAGlBhwB,KAAKgwB,WAAa,OAEtBpuB,EAAM0Y,oBAGVta,KAAKgJ,WAAY1G,iBAAiB,aAAcV,IAC7BA,EAAM3B,QACP6vB,IACV9vB,KAAKgwB,WAAa,cAEtBpuB,EAAM0Y,oBAGVta,KAAKsC,iBAAiB,aAAcV,IAChC,MAAM+X,EAAgB/X,EAAM+X,cACtB1Z,EAAS2B,EAAM3B,QACjBA,GAAUD,MAAQA,KAAKivB,WAAW7oB,SAASnG,MACvCA,GAAUD,MACN8vB,IACA9vB,KAAKgwB,WAAa,QAEjBhwB,KAAKivB,WAAW7oB,SAASuT,KAC1B3Z,KAAKgwB,WAAa,OAItB/vB,EAAO+vB,YAAa,GAG5BpuB,EAAM0Y,oBAGVta,KAAKgJ,WAAY1G,iBAAiB,aAAcV,IAC7BA,EAAM3B,QACP6vB,IACV9vB,KAAKgwB,WAAa,QAEtBpuB,EAAM0Y,oBAGVta,KAAKsC,iBAAiB,QAASV,IAC3B,MAAM3B,EAAS2B,EAAM3B,OACrB,GAAIA,GAAUD,MAAQA,KAAKivB,WAAW7oB,SAASnG,GAAS,CACpD,IAAIgwB,EAAYjwB,KAAKivB,WAAW7tB,OAC5BnB,GAAUD,KACVA,KAAKgwB,WAAa,MAGlB/vB,EAAO+vB,YAAa,EACpBC,EAAYjwB,KAAKivB,WAAWvqB,QAAQzE,IAGxC,MAAM2jB,EAAehiB,EAAMgiB,aAC3B,GAAIA,EAAc,CACd,MAAMsM,EAAatM,EAAaoB,QAAQ,cAClCmL,EAAW/mB,SAAS2iB,eAAemE,GACzC,GAAIC,aAAoBR,GAAsB,CAC1C,MAAMZ,EAAqBoB,EAASpB,mBAChCA,IACAA,EAAmB3sB,SAASguB,IACxBA,EAAkBhB,SAAU,KAE5Be,aAAoBE,IACpBF,EAASJ,kBAAkBvM,GAAcuL,EAAmB3oB,SAASod,KAEzE2M,EAAS1Y,iBACTzX,KAAKswB,cAAcvB,EAAoBkB,MAKvDjwB,KAAKgwB,WAAa,KAClBpuB,EAAM0Y,oBAIdhM,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,cAAe,CAChB,MAAM+nB,EAAkBvwB,KAAKgJ,WAAWC,cAAc,wBAClDsnB,IACAA,EAAgB9a,YAAcnV,GAElC,QAKZgwB,cAAcrB,EAAqChX,GAC/C,GAAIgX,EAAW7tB,OAAS,EAAG,CACvB,IAAIovB,GAAsB,EACtBxwB,KAAK6vB,WACLW,EAAsBxwB,KAAK6vB,SAAS7vB,KAAMivB,IAG9C,IAAIwB,EAAyC,GACzCC,GAAqB,EACzB,GAAIF,EACA,GAAIxwB,KAAK2wB,SACL1B,EAAW7sB,SAASohB,IAChB,IAAIoN,EAAepN,EAAUmL,eACzB1W,GAAY,GAAKA,EAAWjY,KAAKivB,WAAW7tB,QAC5CpB,KAAKivB,WAAWhX,GAAU4Y,sBAAsB,cAAeD,GAC/DF,EAAqBA,EAAoB,EAAKzY,EAAWyY,IAGzD1wB,KAAK8wB,YAAYF,GACjBF,EAAqBA,EAAoB,EAAK1wB,KAAKivB,WAAW7tB,OAAS,EAAIsvB,GAE/ED,EAAcjuB,KAAKouB,UAGtB,CACD,IAAIA,EAAe3B,EAAW,GAAGN,eAC7B3uB,KAAKivB,WAAW7tB,OAAS,EACzBpB,KAAK+wB,aAAaH,EAAc5wB,KAAKivB,WAAW,IAGhDjvB,KAAK8wB,YAAYF,GAErBH,EAAcjuB,KAAKouB,GACnBF,EAAoB,EAI5B,MAAM7e,EAAO7R,KAAKgJ,YAAYC,cAAc,QAa5C,OAZI4I,GACAA,EAAKvP,iBAAiB,cAAc,KAChCtC,KAAK+C,cAAc,IAAIipB,YAAY,eAAgB,CAC/Chd,SAAS,EACTid,OAAQ,CACJ+E,OAAQ,SACR/B,WAAYwB,EACZxY,SAAUyY,QAGnB,CAACO,MAAM,IAEPR,EAEX,OAAO,KAGXV,iBAAiBmB,EAA0E,MAAM,IAC7F,IAAIC,EAAWnxB,KAAKivB,WAAW/oB,QAC3B,CAACtG,EAA8B0B,IACpB4vB,EAAUtxB,EAAO0B,KAG5B8vB,EAAapxB,KAAKivB,WAAWvqB,QAAQysB,EAAS,IAClDA,EAAS/uB,SAASohB,IACdA,EAAU/d,YAEd,MAAMoM,EAAO7R,KAAKgJ,YAAYC,cAAc,QACxC4I,GACAA,EAAKvP,iBAAiB,cAAc,KAChCtC,KAAK+C,cAAc,IAAIipB,YAAY,eAAgB,CAC/Chd,SAAS,EACTid,OAAQ,CACJ+E,OAAQ,SACR/B,WAAYkC,EACZlZ,SAAUmZ,QAGnB,CAACH,MAAM,MAzQlB,IADChqB,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,kCAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,mCAI5C,IADCJ,EAAkB,CAACxF,KAAMkG,W,gCAVxBioB,GAAwB,IAH7BtnB,EAAc,CACXE,KAAM,gBAEJonB,IAgRN,IAAIS,GAAwDT,G,uUC5R5D,IAAMyB,GAAN,cAAqCvjB,YASjChO,cACIkD,QAEAhD,KAAK+N,aAAa,CAACC,KAAM,SAAS3I,OAC9B,EAAQ,QAAS,CACboE,SAAU,CACC,imDA2Cf,EAAQ,MAAO,CACXF,WAAY,CACRgI,KAAM,UAEV9H,SAAU,CACN,EAAQ,SAAU,CACdF,WAAY,CACRgI,KAAM,sBACN9P,KAAM,SACNqQ,SAAU,GAEdrI,SAAU,CACN,UAKhB,EAAQ,KAAM,CACVF,WAAY,CACRgI,KAAM,eAGd,EAAQ,MAAO,CACXhI,WAAY,CACRgI,KAAM,QAEV9H,SAAU,CACN,EAAQ,WAGhB,EAAQ,KAAM,CACVF,WAAY,CACRgI,KAAM,eAGd,EAAQ,MAAO,CACXhI,WAAY,CACRgI,KAAM,WAEV9H,SAAU,CACN,EAAQ,SAAU,CACdF,WAAY,CACRgI,KAAM,uBACN9P,KAAM,SACNqQ,SAAU,GAEdrI,SAAU,CACN,YAGR,EAAQ,SAAU,CACdF,WAAY,CACRgI,KAAM,wBACN9P,KAAM,SACNqQ,SAAU,GAEdrI,SAAU,CACN,aAGR,EAAQ,SAAU,CACdF,WAAY,CACRgI,KAAM,mBACN9P,KAAM,SACNqQ,SAAU,GAEdrI,SAAU,CACN,YAQxBwF,oBACIjP,KAAKgJ,WAAW1G,iBAAiB,QAAStC,MAG9CsxB,YAAY1vB,GACR,MAAM,KAACH,EAAI,OAAExB,GAAU2B,EACvB,OAAQH,GACJ,IAAK,QACD,MAAM,KAAC8P,GAAiBtR,EACpBsR,EAAK0E,SAAS,iBAAmB1E,EAAK0E,SAAS,iBAC/CjW,KAAKuxB,UAEAhgB,EAAK0E,SAAS,mBAAqB1E,EAAK0E,SAAS,eACtDjW,KAAKijB,WAMrBuO,OACIxxB,KAAK+C,cAAc,IAAIipB,YAAY,OAAQ,CAAChd,SAAS,KAGzD4W,QACI5lB,KAAK+C,cAAc,IAAIipB,YAAY,QAAS,CAAChd,SAAS,KAG1DuiB,SACIvxB,KAAK+C,cAAc,IAAIipB,YAAY,SAAU,CAAChd,SAAS,KACvDhP,KAAK4lB,QAGT3C,UACIjjB,KAAK+C,cAAc,IAAIipB,YAAY,UAAW,CAAChd,SAAS,KACxDhP,KAAK4lB,UAhKT,IADC3e,EAAkB,CAACxF,KAAMyF,U,4BANxBmqB,GAAsB,IAH3B/oB,EAAc,CACXE,KAAM,cAEJ6oB,IA2KN,ICvLI,G,uUAKJ,IAAMI,GAAN,cAAqC3jB,YA8BjChO,cACIkD,QACmBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAIzCC,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,QAAS,CACV,MAAM,WAACQ,GAAchJ,KACf8b,EAAY9S,EAAWC,cAA2B,gBACpD6S,IACAA,EAAUrG,YAAcnV,GAE5B,MAEJ,IAAK,WACDN,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,SA7BzD,GAAiB,EAAQ,aACVZ,QAAQ/I,OACnB,EAAQ,OAAQ,CACZkE,WAAY,CACRgI,KAAM,YAnBtB,IADCtK,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,U,6BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMkG,W,gCAI1B,IADCV,EAAkB,CAACxF,KAAMkG,QAASN,UAAU,K,gCAhB3CoqB,GAAsB,IAH3BnpB,EAAc,CACXE,KAAM,cAEJipB,IAwDN,ICnEI,GDmEAC,GAAoDD,GC9DxD,IAAME,GAAN,cAA0C7jB,YAWtChO,cACIkD,QACmBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,OAVrC,GAAiB,EAAQ,aACVD,QAAQ/I,OACnB,EAAQ,SAPdssB,G,mUAA2B,EAHhCrpB,EAAc,CACXE,KAAM,mBAEJmpB,IAoBN,I,mDCbI,GDaAC,GAA8DD,G,knBCRlE,IAAME,GAAN,cAAqC/jB,YAgEjChO,cACIkD,Q,aAhCJ,oBAiCuBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,I,+VAErC,CAAArO,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAClE,KACDA,KAAKsC,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEA,KAAKsC,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DA,KAAKsC,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEA,KAAKsC,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,OAzEjE,cACI,OAAOwH,MAAM2C,KAAKnK,KAAKyW,iBACnB,aAIR,mBACI,OAAOzW,KAAKiJ,cAAc,0BAA4B,KAG1D,qBACI,OAAOjJ,KAAKiJ,cAAc,uBAAyB,KAiEvDqF,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,QAAS,CACV,MAAM,WAACQ,GAAchJ,KACf8b,EAAY9S,EAAWC,cAA2B,gBACpD6S,IACAA,EAAUrG,YAAcnV,GAE5B,QAKZwO,SACI,MAAM,SAACD,GAAY7O,KACnB,IAAK6O,EAAU,CACX7O,KAAK6O,UAAW,EAChB,GAAA7O,KAAI,WAAa,KAAjBA,MACA,MAAM,eAAC8xB,GAAkB9xB,KACrB8xB,GACAA,EAAejY,MAAM,CAACU,eAAe,KAKjDpL,WACI,MAAM,SAACN,GAAY7O,KACf6O,IACA7O,KAAK6O,UAAW,EAChB7O,KAAK6Z,SAIblL,OAAOC,GACH,MAAM,SAACC,GAAY7O,KACJ4O,IAAUC,EAChB7O,KAAK8O,SAAW9O,KAAKmP,a,4CAI9B,OAAOnP,KAAKgJ,WAAWC,cAA2B,iBACrD,cAGG,OAAOjJ,KAAKgJ,WAAWC,cAA2B,eACrD,YAEiBnF,GACd,OAAIA,aAAgB4tB,KAAuB5tB,EAAKmR,WAAanR,EAAK8T,OACvDf,WAAWgB,cAEb/T,aAAgB8tB,GACd/a,WAAWiB,YAEfjB,WAAWkB,eACrB,cAGG,MAAMyO,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAchZ,KACawmB,EAAOja,cAC5C,cAGG,MAAMia,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAchZ,KACawmB,EAAOvN,aAC5C,YAEe8Y,GACZ,MAAMvL,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc+Y,EACavL,EAAOtN,gBAC5C,YAEW6Y,GACR,MAAMvL,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc+Y,EACavL,EAAOrN,YAC5C,YAEa4Y,GACV,MAAM,eAACD,GAAkB9xB,KACrB+xB,IAAWD,IACXC,EAAOpM,UAAW,EAClB3lB,KAAK+C,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,OAExD,YAEkB+iB,GACf,GAAA/xB,KAAI,WAAO,KAAXA,MAAcyV,YAAcsc,EAAOpgB,OACtC,cAGG,MAAMqgB,EAAM,GAAAhyB,KAAI,WAAK,KAATA,OACLqP,MAAO4iB,GAAgBD,GACxB,OAACviB,EAAM,KAAEE,GAAQ3P,KAAK+P,yBACtB,QAACM,EAAO,QAAED,GAAWE,OAC3B2hB,EAAa7tB,YAAY,MAAO,GAAGqL,EAASW,OAC5C6hB,EAAa7tB,YAAY,OAAQ,GAAGuL,EAAOU,QAC9C,YAEiBzO,GACd,MAAM,OAAC3B,GAAU2B,EACjB5B,KAAK2O,SACL,MAAM,SAACE,GAAY7O,KACnB,GAAI6O,EAAU,CACV,MAAM,eAACijB,GAAkB9xB,MACxB8xB,GAAkB9xB,KAAK6F,QAAQ,KAAKgU,MAAM,CAACU,eAAe,QAE1D,CACD,MAAM2X,EAA6BjyB,EAAQ4Q,QAA4B,YACnEqhB,GACA,GAAAlyB,KAAI,WAAc,KAAlBA,KAAmBkyB,KAG9B,YAEoBtwB,GACjB,MAAM,cAAC+X,GAAiB/X,GACC5B,KAAKiW,SAAe0D,IAEzC3Z,KAAKmP,YAEZ,YAEmBvN,GAChB,MAAM,IAAC7C,GAAO6C,GACR,SAACiN,EAAQ,aAAEsjB,EAAY,eAAEL,GAAkB9xB,KACjD,OAAQjB,GACJ,IAAK,UACD,GAAI8P,EAAU,CACV,MAAMujB,EAAiBD,EACnB,GAAAnyB,KAAI,WAAgB,KAApBA,KAAqBmyB,GACrB,GAAAnyB,KAAI,WAAa,KAAjBA,MACAoyB,GACAA,EAAevY,MAAM,CAACU,eAAe,QAGxC,CACD,MAAM6X,EAAiBN,EACnB,GAAA9xB,KAAI,WAAgB,KAApBA,KAAqB8xB,GACrB,GAAA9xB,KAAI,WAAa,KAAjBA,MACAoyB,GACA,GAAApyB,KAAI,WAAc,KAAlBA,KAAmBoyB,GAG3BxwB,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAI5L,EAAU,CACV,MAAMwjB,EAAaF,EACf,GAAAnyB,KAAI,WAAY,KAAhBA,KAAiBmyB,GACjB,GAAAnyB,KAAI,WAAY,KAAhBA,MACAqyB,GACAA,EAAWxY,MAAM,CAACU,eAAe,QAGpC,CACD,MAAM8X,EAAaP,EACf,GAAA9xB,KAAI,WAAY,KAAhBA,KAAiB8xB,GACjB,GAAA9xB,KAAI,WAAY,KAAhBA,MACAqyB,GACA,GAAAryB,KAAI,WAAc,KAAlBA,KAAmBqyB,GAG3BzwB,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAM6X,EAAc,GAAAtyB,KAAI,WAAa,KAAjBA,MAChBsyB,IACIzjB,EACAyjB,EAAYzY,MAAM,CAACU,eAAe,IAGlC,GAAAva,KAAI,WAAc,KAAlBA,KAAmBsyB,IAG3B1wB,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM8X,EAAa,GAAAvyB,KAAI,WAAY,KAAhBA,MACfuyB,IACI1jB,EACA0jB,EAAW1Y,MAAM,CAACU,eAAe,IAGjC,GAAAva,KAAI,WAAc,KAAlBA,KAAmBuyB,IAG3B3wB,EAAM6Y,kBACN,MAEJ,IAAK,QACG5L,GACA7O,KAAKmP,WACDgjB,GACA,GAAAnyB,KAAI,WAAc,KAAlBA,KAAmBmyB,KAIvBnyB,KAAK8O,SACLgjB,GAAgBjY,MAAM,CAACU,eAAe,KAE1C3Y,EAAM6Y,kBACN,MAEJ,IAAK,SACG5L,GACA7O,KAAKmP,WAETvN,EAAM6Y,kBACN,MAEJ,QAAS,CACL,MAAOrZ,OAAQoxB,GAAazzB,EAC5B,GAAiB,GAAbyzB,EAAgB,CAChB,MAAMC,EAAU1zB,EAAI2zB,WAAW,IACzB,QAAC7sB,GAAW7F,KACZwoB,EAAc2J,EAAetsB,EAAQnB,QAAQytB,IAAiB,EAC9DQ,EAAiB9sB,EAAQsX,MAC3B,CAACyV,EAAU7tB,IAAM6tB,EAASjhB,MAAM3K,cAAc0rB,WAAW,IAAMD,GAAW1tB,EAAIyjB,KAC7E3iB,EAAQsX,MACRyV,GAAaA,EAASjhB,MAAM3K,cAAc0rB,WAAW,IAAMD,IAE5DE,GACAA,EAAe9Y,MAAM,CAACU,eAAe,IAEzC3Y,EAAM6Y,kBAEV,SAGX,YAEqB7Y,GAClB,MAAM,OAAC3B,GAAU2B,EACXswB,EAAyBjyB,EAAQ4Q,QAA4B,YAC/DqhB,GACAA,EAAarY,MAAM,CAACU,eAAe,KAE1C,YAEkB3Y,GACf,MAAM,OAAC3B,GAAU2B,EACXswB,EAAmCjyB,EACzC,GAAIiyB,EAAavM,SAAU,CACvB,MAAM,QAAC9f,GAAW7F,KAClB6F,EAAQzD,SAASwwB,IACTA,IAAaV,GAAgBU,EAASjN,WACtCiN,EAASjN,UAAW,MAG5B,GAAA3lB,KAAI,WAAmB,KAAvBA,KAAwBkyB,MA5S5B,GAAiB,EAAQ,aACV9jB,QAAQ/I,OACnB,EAAQ,MAAO,CACXkE,WAAY,CACRgI,KAAM,WAEV9H,SAAU,CACN,EAAQ,QAAS,CACbF,WAAY,CACRgI,KAAM,WAGd,EAAQ,SAAU,CACdhI,WAAY,CACRgI,KAAM,cAKtB,EAAQ,MAAO,CACXhI,WAAY,CACRgI,KAAM,OAEV9H,SAAU,EAAQ,WAxC9B,IADCxC,EAAkB,CAACxF,KAAMyF,U,4BAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,6BAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,SAAUC,UAAU,K,4BAIpE,IADCJ,EAAkB,CAACxF,KAAMkG,W,gCA9BxBkqB,GAAsB,IAH3BvpB,EAAc,CACXE,KAAM,cAEJqpB,IAqVN,I,kBCjWI,G,69BAKJ,IAAMgB,GAAN,cAAqC/kB,YAqCjChO,cACIkD,Q,aA/BJ,oBACA,oBA+BuBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErC,GAAArO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OAGvEsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,WAAY,CACb,MAAM,SAACmX,GAAY3f,KACnB,GAAAA,KAAI,GAAWoJ,SAAS2iB,eAAepM,GAAS,KAChD,U,yDAKU/d,GAClB,MAAM,UAACkxB,GAAalxB,EACpB5B,KAAK+yB,sBAAsBD,GAC3B,GAAA9yB,KAAI,IAAc,EAAK,MAC1B,YAEuB4B,GACpB,MAAM,UAACkxB,GAAalxB,GACd,SAAC+d,GAAY3f,KACnB,GAAAA,KAAI,GAAWoJ,SAAS2iB,eAAepM,GAAS,KAChD3f,KAAKgzB,kBAAkBF,GACvB,GAAA9yB,KAAI,IAAc,EAAI,MACzB,YAEuB4B,GACpB,GAAI,GAAA5B,KAAI,QAAa,CACjB,MAAMC,EAAS,GAAAD,KAAI,QACnB,GAAe,OAAXC,EAAiB,CACjB,MAAMgzB,EAAsB3iB,OAAOW,iBAAiBhR,IAC9C,UAACizB,EAAS,UAAEC,GAAavxB,GACxBoO,MAAOojB,EAAWljB,OAAQmjB,GAAcpzB,EAAO8P,wBAChDujB,EAAerzB,EAAO+sB,eAAiB5jB,SAASqH,MAElDd,KAAM4jB,EAAe1jB,MAAO2jB,EAC5BjkB,IAAKkkB,EAAchkB,OAAQikB,GAC3BJ,EAAavjB,wBACXJ,EAAOtH,WAAW4qB,EAAoBU,iBAAiB,SACvDC,EAAUruB,KAAKib,IAAI+S,EAAehuB,KAAKkU,IAAIlU,KAAKsuB,MAAMlkB,EAAOujB,GAAYM,EAAiBJ,IAC1F7jB,EAAMlH,WAAW4qB,EAAoBU,iBAAiB,QACtDG,EAASvuB,KAAKib,IAAIiT,EAAcluB,KAAKkU,IAAIlU,KAAKsuB,MAAMtkB,EAAM4jB,GAAYO,EAAkBL,IAC9FpzB,EAAOoP,MAAMjL,YAAY,OAAQ,GAAGwvB,OACpC3zB,EAAOoP,MAAMjL,YAAY,MAAO,GAAG0vB,OACnC9zB,KAAK+C,cAAc,IAAIipB,YAAY,aAjF3C,GAAiB,EAAQ,aACV5d,QAAQ/I,OACnB,EAAQ,QAAS,CACboE,SAAU,CACC,6nBAVvB,IADCxC,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,gCAJ1CwrB,GAAsB,IAH3BvqB,EAAc,CACXE,KAAM,cAEJqqB,IAkGN,I,2BCtGI,G,69BAKJ,IAAMkB,GAAN,cAAyCjmB,YAuBrChO,cACIkD,Q,aAVJ,oBACA,oBACA,oBACA,oBAQuBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErC,GAAArO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,GAA0B,KAAI,KAClC,GAAAA,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OA/BvE,aACI,OAAO,GAAAA,KAAI,U,uFAiCO4B,GAClB,MAAM,UAACkxB,GAAalxB,EACpB5B,KAAK+yB,sBAAsBD,GAC3B,GAAA9yB,KAAI,IAAc,EAAK,MAC1B,YAEuB4B,GACpB,MAAM,UAACkxB,GAAalxB,GACd,SAAC+d,GAAY3f,KACbg0B,EAAkCh0B,KAAK4tB,cAC7C,GAAA5tB,KAAI,GAAWg0B,EAASjI,eAAepM,GAAS,KAChD3f,KAAKgzB,kBAAkBF,GACvB,GAAA9yB,KAAI,IAAc,EAAI,MACzB,YAEuB4B,GAChB,GAAA5B,KAAI,UAC+B,MAA/B,GAAAA,KAAI,SACJ,GAAAA,KAAI,GAAoB4B,EAAMuxB,UAAS,KACvC,GAAAnzB,KAAI,GAA0B,GAAAA,KAAI,WAAsB0G,KAAK1G,MAAK,KAClEi0B,sBAAsB,GAAAj0B,KAAI,UAG1B,GAAAA,KAAA,MAAAA,KAAA,QAAyB4B,EAAMuxB,UAAS,OAGnD,cAGG,MAAMlzB,EAAS,GAAAD,KAAI,QACnB,GAAe,OAAXC,EAAiB,CACjB,MAAMgzB,EAAsB3iB,OAAOW,iBAAiBhR,IAC9C,QAACi0B,GAAWl0B,KACZmzB,EAAY,GAAAnzB,KAAI,QAChBkQ,EAAS7H,WAAW4qB,EAAoBU,iBAAiB,WACzDQ,EAAY5uB,KAAKsuB,MAAM3jB,GAAqB,OAAXgkB,GAAoB,EAAI,GAAKf,GACpElzB,EAAOoP,MAAMjL,YAAY,SAAU,GAAG+vB,OACtC,MAAMC,EAAoB/rB,WAAW4qB,EAAoBU,iBAAiB,WAC1E1zB,EAAOoP,MAAMjL,YAAY,SAAU,GAAGgwB,OACtCp0B,KAAK+C,cAAc,IAAIgM,MAAM,WAEjC,GAAA/O,KAAI,GAA0B,KAAI,MA3DlC,GAAiB,EAAQ,YAX7B,IADCiH,EAAkB,CAACxF,KAAMyF,U,gCAI1B,IADCD,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,S,+BAX9C2sB,GAA0B,IAH/BzrB,EAAc,CACXE,KAAM,aAEJurB,IAmFN,I,6UCxFA,IAAMM,GAAN,cAAqCvmB,YAArC,c,iCAKImB,oBACI,MAAM,IAACqlB,GAAOt0B,KACVs0B,G,uSACA,CAAAt0B,KAAI,WAAe,KAAnBA,KAAoBs0B,K,kBAI5B1L,eAAqB0L,GACjBt0B,KAAKu0B,gBAAkBC,MAAMF,GAAKlL,MAAMqL,IACpC,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIrgB,MAAMmgB,EAASG,eAGjC50B,KAAK+C,cAAc,IAAIgM,MAAM,OAAQ,CAACC,SAAS,MAlBnD,IADC/H,EAAkB,CAACxF,KAAMyF,U,2BAFxBmtB,GAAsB,IAH3B/rB,EAAc,CACXE,KAAM,cAEJ6rB,IAyBN,I,SC7BIQ,GACAC,G,69BAKJ,IAAMC,GAAN,cAAqCjnB,YA8KjChO,cACIkD,Q,aAxKJ,oBAyKIhD,KAAK+N,aAAa,CAACC,KAAM,SACzB,GAAAhO,KAAI,WAAgB,KAApBA,MACA,GAAAA,KAAI,GAAY,KAAI,KAGxBsO,yBAAyB9F,EAAcpI,EAAyBE,GAC5D,OAAQkI,GACJ,IAAK,OACD,GAAAxI,KAAI,WAAgB,KAApBA,OAMZ,YAAYg1B,GACJA,GACAA,EAAQC,SAAQ,KACZj1B,KAAKyF,YAGb,GAAAzF,KAAI,GAAYg1B,EAAO,KAG3B,cACI,OAAO,GAAAh1B,KAAI,U,4CAIX,MAAM,KAACyB,EAAI,WAAEuH,GAAchJ,KAC3B,OAAQyB,GACJ,IAAK,SACDuH,EAAW0J,gBACPoiB,GAAqB1mB,QAAQC,WAAU,IAE3C,MAEJ,IAAK,MACDrF,EAAW0J,gBACPmiB,GAAkBzmB,QAAQC,WAAU,MA7MpD,MACI,MAAM6mB,EAAc,EAAQ,QAAS,CACjCzrB,SAAU,CACC,0PAST0rB,EAAWD,EAAY7mB,WAAU,GACjC+mB,EAAcF,EAAY7mB,WAAU,GAC1C8mB,EAAS1f,aAAsB,iqFAyF/B2f,EAAY3f,aAAsB,y6BA4BlCof,GAAoB,EAAQ,aACVzmB,QAAQ/I,OACtB8vB,EACA,EAAQ,MAAO,CACX5rB,WAAY,CACRgI,KAAM,OAEV9H,SAAU,CACN,EAAQ,MAAO,CACXF,WAAY,CACRgI,KAAM,UAEV9H,SAAU,CACN,EAAQ,MAAO,CACXF,WAAY,CACRgI,KAAM,oBAQlCujB,GAAuB,EAAQ,aACV1mB,QAAQ/I,OACzB+vB,EACA,EAAQ,MAAO,CACX7rB,WAAY,CACRgI,KAAM,cA/JtB,GAJA,IADCtK,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,MAAOC,UAAU,K,4BAJ/D0tB,GAAsB,IAH3BzsB,EAAc,CACXE,KAAM,cAEJusB,IA8NN,I,2BC9NI,G,69BAKJ,IAAMM,GAAN,cAAwCvnB,YA0BpChO,cACIkD,Q,aAVJ,oBACA,oBACA,oBACA,oBAQuBhD,KAAK+N,aAAa,CAACC,KAAM,SACjC3I,OACP,GAAe+I,QAAQC,WAAU,IAErC,GAAArO,KAAI,GAAW,KAAI,KACnB,GAAAA,KAAI,GAA0B,KAAI,KAClC,GAAAA,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,IAAc,EAAK,KACvBA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEA,KAAKsC,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OAlCvE,aACI,OAAO,GAAAA,KAAI,QAoCfs1B,SAAStlB,GACL,MAAM/P,EAAS,GAAAD,KAAI,QACnB,GAAe,OAAXC,EAAiB,CACjB,MAAM,IAACugB,GAAOxgB,KACdC,EAAOoP,MAAMjL,YAAY,QAAS,GAAG4L,OACjCwQ,GACAvgB,EAAOoP,MAAMjL,YAAY,YAAa,GAAG4L,U,uFAK/BpO,GAClB,MAAM,UAACkxB,GAAalxB,EACpB5B,KAAK+yB,sBAAsBD,GAC3B,GAAA9yB,KAAI,IAAc,EAAK,MAC1B,YAEuB4B,GACpB,MAAM,UAACkxB,GAAalxB,GACd,SAAC+d,GAAY3f,KACbg0B,EAAkCh0B,KAAK4tB,cAC7C,GAAA5tB,KAAI,GAAWg0B,EAASjI,eAAepM,GAAS,KAChD3f,KAAKgzB,kBAAkBF,GACvB,GAAA9yB,KAAI,IAAc,EAAI,MACzB,YAEuB4B,GAChB,GAAA5B,KAAI,UAC+B,MAA/B,GAAAA,KAAI,UACJ,GAAAA,KAAI,GAA0B,GAAAA,KAAI,WAAsB0G,KAAK1G,MAAK,KAClEi0B,sBAAsB,GAAAj0B,KAAI,UAE9B,GAAAA,KAAA,MAAAA,KAAA,QAAyB4B,EAAMsxB,UAAS,OAE/C,cAGG,MAAMjzB,EAAS,GAAAD,KAAI,QACnB,GAAe,OAAXC,EAAiB,CACjB,MAAMgzB,EAAsB3iB,OAAOW,iBAAiBhR,IAC9C,QAACi0B,GAAWl0B,KACZkzB,EAAY,GAAAlzB,KAAI,QAEhBu1B,EADQltB,WAAW4qB,EAAoBU,iBAAiB,WACzB,SAAXO,EAAqB,GAAK,GAAKhB,EACzDlzB,KAAKs1B,SAASC,GACdv1B,KAAK+C,cAAc,IAAIgM,MAAM,WAEjC,GAAA/O,KAAI,GAAoB,EAAC,KACzB,GAAAA,KAAI,GAA0B,KAAI,MAlElC,GAAiB,EAAQ,YAd7B,IADCiH,EAAkB,CAACxF,KAAMyF,OAAQG,UAAU,K,gCAI5C,IADCJ,EAAkB,CAACxF,KAAMyF,OAAQE,aAAc,W,+BAIhD,IADCH,EAAkB,CAACxF,KAAMkG,W,2BAdxB0tB,GAAyB,IAH9B/sB,EAAc,CACXE,KAAM,aAEJ6sB,IA6FN,I,2VCHA,I,6hBC3GsB,IACtB1gB,GAAO,CACHnM,KAAM,aAFgB,EAGxB,GAAC,cAAqCgL,GAGpC1T,cACIkD,QAHJ,oB,+VAII,CAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,YACP1G,KAAM,eAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,K,6qBCfjC,IACpBsG,GAAO,CACHnM,KAAM,WAFc,EAGtB,GAAC,cAAuCgL,GAItC1T,cACIkD,Q,aAJJ,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,UACP1G,KAAM,UACN2D,SAAU,KAEhB,KACF,GAAA9R,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAClE,KAGLyT,SACI,MAAM+hB,EAAuB,GAAAx1B,KAAI,QAAWqO,WAAU,GAMtD,OALAmnB,EAAQlzB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC9Dw1B,EAAQlzB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAClEw1B,EAAQlzB,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACpEw1B,EAAQlzB,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACtEw1B,EAAQlzB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC3Dw1B,EAGX3jB,KAAK2jB,GACD,OAAOA,EAGXpa,YAAYoa,EAAsB51B,GAC9B41B,EAAQzrB,gBAAgB,gBAAiBnK,GAG7Cgd,YAAY4Y,GACR,OAAOA,EAAQ5tB,aAAa,mB,yDAGd9D,GACd,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,cAAgB6E,GAAe1E,YAAYtS,GAC9D,OAAO+S,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,iBACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGPyd,GACX,OAAOA,EAAQvsB,cACX,kE,YAIGusB,GACP,MAAMhP,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwc,EACMhP,EAAOja,c,YAG5BipB,GACN,MAAMhP,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcwc,EACMhP,EAAOvN,a,YAGxB5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACMmlB,EAAOC,mB,YAG5BplB,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACMmlB,EAAOE,e,YAGtBrlB,GACZ,MAAM+N,EAAO0L,GAAea,QAAQta,GACpC,GAAI+N,EAAM,CACN,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACMoX,EAAOja,aAEtC,OAAO,M,YAGIipB,EAAsBv1B,GACjC,OAAOA,EAAO4Q,QAAQ,yBAA2B2kB,G,YAGxCA,EAAsBv1B,GAC/B,OAAOuH,MAAM2C,KAAKqrB,EAAQ/e,iBACtB,qDACD0G,MAAK3Y,GAAUA,EAAOyR,SAAShW,MAAY,M,YAGhC2B,GACd,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1B4zB,EAAuB3zB,EACvBgb,EAAwC5c,EAAQ4Q,QAAQ,aAC9D,GAAIgM,EAAY,CACZ,MAAMhO,EAAW7O,KAAK4c,YAAY4Y,GAElC,GADsB,GAAAx1B,KAAI,WAAe,KAAnBA,KAAoBw1B,EAAS3Y,GAChC,CACf,MAAMiO,GAAcjc,EACpB7O,KAAKob,YAAYoa,EAAS1K,GACtBA,GACmB,OAAfjO,GAAwB/B,GAAe8B,YAAYC,IACnD/B,GAAehM,OAAO+N,GAEb/B,GAAea,QAAQkB,IAC9BhD,MAAM,CAACU,eAAe,KAG5Bib,EAAQ3b,MAAM,CAACU,eAAe,O,YAM1B3Y,GAChB,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1B4zB,EAAuB3zB,EAC7B,GAAI5B,aAAkB6N,aAAe9N,KAAK4c,YAAY4Y,GAAU,CAC5D,MAAMlM,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBw1B,EAASv1B,GAC3CqpB,GACAxO,GAAehM,OAAOwa,K,YAKb1nB,GACjB,MAAM,OAAC3B,EAAM,cAAE4B,EAAa,cAAE8X,GAAiB/X,EACzC4zB,EAAuB3zB,EAC7B,GAAI5B,aAAkB6N,cAAgB7N,EAAOgW,SAAkB0D,GAAgB,CAC3E,MAAM2P,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkBw1B,EAASv1B,GAC3CqpB,GACAxO,GAAe3L,SAASma,IAGPkM,EAAQvf,SAAe0D,IAE5C3Z,KAAKob,YAAYoa,GAAS,I,YAIZ5zB,GAClB,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1B4zB,EAAuB3zB,EAC7B,GAAI5B,aAAkB6N,aAAe7N,EAAO+U,UAAUiB,SAAS,YAAa,CACxE,MAAM4M,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBw1B,GACjC3mB,EAAW7O,KAAK4c,YAAY4Y,GAElC,GADsB,GAAAx1B,KAAI,WAAe,KAAnBA,KAAoBw1B,EAASv1B,IAC9BA,IAAW4iB,GAAchU,EAAU,CACpD,MAAMO,EAAO0L,GAAea,QAAQ1b,GAChCmP,EACAA,EAAKyK,MAAM,CAACU,eAAe,IAG3Bta,EAAO4Z,MAAM,CAACU,eAAe,O,YAMzB3Y,GAChB,MAAM,IAAC7C,EAAG,cAAE8C,GAAiBD,EACvB4zB,EAAuB3zB,EAC7B,IAAIghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBw1B,GACrC,MAAM3mB,EAAW7O,KAAK4c,YAAY4Y,GAClC,OAAQz2B,GACJ,IAAK,aACoB8jB,EACjB,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,IAAe,GAAA7iB,KAAI,WAAU,KAAdA,KAAew1B,GACjD,GAAAx1B,KAAI,WAAW,KAAfA,KAAgBw1B,KACN3b,MAAM,CAACU,eAAe,IACpCsI,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBw1B,GAC7B3mB,GAAYgU,GACW,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAE1C,MAEJ,IAAK,cACgBsI,EACb,GAAA7iB,KAAI,WAAU,KAAdA,KAAe6iB,IAAe,GAAA7iB,KAAI,WAAW,KAAfA,KAAgBw1B,GAC9C,GAAAx1B,KAAI,WAAU,KAAdA,KAAew1B,KACT3b,MAAM,CAACU,eAAe,IAChCsI,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBw1B,GAC7B3mB,GAAYgU,GACW,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IAE1C,MAEJ,IAAK,QACL,IAAK,IACGsI,IACA7iB,KAAKob,YAAYoa,GAAU3mB,GACJ,GAAA7O,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IACtC3Y,EAAM0Y,kBAEV,MAEJ,IAAK,SACGzL,GACA7O,KAAKob,YAAYoa,GAAS,GACtB3S,IACA/H,GAAe3L,SAAS0T,GACxBA,EAAWhJ,MAAM,CAACU,eAAe,MAIrCib,EAAQ3b,MAAM,CAACU,eAAe,M,8pBCpNjC,IACjB5F,GAAO,CACHnM,KAAM,QAFW,EAGnB,GAAC,cAAoCgL,GAMnC1T,cACIkD,Q,aALJ,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,OACP1G,KAAM,OACN2D,UAAW,KAEjB,KACF,GAAA9R,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAClE,KACD,GAAAA,KAAI,GAAmB,IAAIsG,QAAS,KAGxCmN,OAAO3N,GAOH,MAAMsJ,EAAoB,GAAApP,KAAI,QAAWqO,WAAU,GAMnD,GALAe,EAAK9M,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DoP,EAAK9M,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEoP,EAAK9M,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEoP,EAAK9M,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEoP,EAAK9M,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,YAC5CK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,WAAEgR,EAAU,SAAEjI,GAAYnS,EAaxD,QAZWzF,IAAP0U,IACA3F,EAAK2F,GAAKA,QAEI1U,IAAd2U,GACA5F,EAAK4F,UAAUG,OAAOH,QAET3U,IAAb6O,IACAE,EAAKF,SAAWA,QAED7O,IAAf6f,GACAlgB,KAAKy1B,cAAcrmB,EAAM8Q,QAEZ7f,IAAb4X,EAAwB,CACxB,MAAM,EAACwQ,EAAC,EAAEC,GAAKzQ,EACfjY,KAAK01B,YAAYtmB,EAAMqZ,EAAGC,IAGlC,OAAOtZ,EAGXyC,KAAKzC,GACD,OAAOA,EAGXsmB,YAAYtmB,EAAmBqZ,EAAWC,GACtC,MAAM,MAACrZ,GAASD,GACTY,MAAOC,EAAWC,OAAQC,GAAcf,EAAKW,yBAC9C,QAACM,EAAO,QAAED,GAAWE,OACrBX,EAAO8Y,EAAIpY,EACXd,EAAMmZ,EAAItY,GACV,YAACG,EAAW,aAAEC,GAAgBpH,SAASqH,KACvCC,EAAYf,EAAOM,EAAYM,EAC/BI,EAAYpB,EAAMY,EAAaK,EACrCnB,EAAMjL,YAAY,OAAQ,GAAGsM,EAAY,EAAIf,EAAOM,EAAYN,OAChEN,EAAMjL,YAAY,MAAO,GAAGuM,EAAY,EAAIpB,EAAMY,EAAaZ,OAGnEomB,cAAcvmB,GACV,MAAM,UAAC4F,GAAa5F,EACpB,OAAO4F,EAAUiB,SAAS,mBAG9Bwf,cAAcrmB,EAAmBxP,GAC7B,MAAM,UAACoV,GAAa5F,EAChBxP,EACAoV,EAAUG,IAAI,mBAGdH,EAAUvP,OAAO,mBAIzBvE,MAAMkO,GACF,OAAO5H,MAAM2C,KAAKiF,EAAKqH,iBACnB,uD,wEAIU3S,GACd,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,cAAgB6E,GAAe1E,YAAYtS,GAC9D,OAAO+S,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,iBACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGJ3I,GACdA,EAAKqH,iBAA8B,mEAC9BrU,SAAQwzB,GAAc9a,GAAe3L,SAASymB,M,YAGxCxmB,EAAmBnP,GAC9B,OAAOA,EAAO4Q,QAAQ,UAAYzB,G,YAGzBA,EAAmBnP,GAC5B,OAAOuH,MAAM2C,KAAKiF,EAAKqH,iBACnB,qDACD0G,MAAK3Y,GAAUA,EAAOyR,SAAShW,MAAY,M,YAGvCmP,GACP,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACMoX,EAAOja,c,YAG5B6C,GACN,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACMoX,EAAOvN,a,YAGxB5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACMmlB,EAAOC,mB,YAG5BplB,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc3X,EACMmlB,EAAOE,e,YAGtBrlB,GACZ,MAAM+N,EAAO0L,GAAea,QAAQta,GACpC,GAAI+N,EAAM,CACN,MAAMoX,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc5J,EACMoX,EAAOja,aAEtC,OAAO,M,YAGI6C,GACX,OAAOA,EAAKnG,cACR,kE,GAIR2f,eAAsBvnB,EAAmBwnB,GACrC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAUC,YAAW,KACvBH,OAAQ1oB,KACTwoB,GAAS,GACZ,GAAA7oB,KAAI,QAAiByC,IAAIpB,EAAM,CAC3BqE,MAAO,KACHyjB,aAAaF,GACbD,UAGTI,MAAK,KACJ,GAAAppB,KAAI,QAAiB8C,OAAOzB,O,YAIlBA,GACd,MAAM4nB,EAAU,GAAAjpB,KAAI,QAAiBZ,IAAIiC,QAClB,IAAZ4nB,IACP,GAAAjpB,KAAI,QAAiB8C,OAAOzB,GAC5B4nB,EAAQvjB,U,YAIE9D,GACd,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1Bi0B,EAA0Bh0B,EAC1Bgb,EAAwC5c,EAAQ4Q,QAAQ,aAC9D,GAAIgM,EAAY,CAEZ,GADmB7c,KAAK21B,cAAcE,GAElC,IACIA,EAAWpwB,SAEf,MAAO4jB,SAIP,GADsB,GAAArpB,KAAI,WAAe,KAAnBA,KAAoB61B,EAAYhZ,GACnC,CACf,MAAMpb,EAAOqZ,GAAekB,QAAQa,GAC9BrU,EAAOsS,GAAe4B,QAAQG,GAC9Bjd,EAAQkb,GAAe2B,SAASI,GAC1B,SAARpb,GACAo0B,EAAWpf,iBACP,+DAA+DjO,MAElEpG,SAASukB,IACN7L,GAAeK,WAAWwL,EAAS7L,GAAe2B,SAASkK,IAAY/mB,MAKvFgC,EAAM6Y,oB,YAIO7Y,GACjB,MAAM,OAAC3B,EAAM,cAAE4B,EAAa,cAAE8X,GAAiB/X,EACzCi0B,EAA0Bh0B,EAEhC,IADyBg0B,EAAW5f,SAAe0D,GAG/C,GADmB3Z,KAAK21B,cAAcE,GAElC,IACIA,EAAWpwB,SACb,MAAO4jB,QAIR,CACD,MAAMC,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkB61B,EAAyB51B,GAC3DqpB,GACAxO,GAAe3L,SAASma,K,YAMpB1nB,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvBi0B,EAA0Bh0B,EAC1BghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB61B,GACvC,OAAQ92B,GACJ,IAAK,WACoB8jB,EACjB,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6iB,IAAe,GAAA7iB,KAAI,WAAU,KAAdA,KAAe61B,GACjD,GAAA71B,KAAI,WAAW,KAAfA,KAAgB61B,KACNhc,MAAM,CAACU,eAAe,IACpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACgBoI,EACb,GAAA7iB,KAAI,WAAU,KAAdA,KAAe6iB,IAAe,GAAA7iB,KAAI,WAAW,KAAfA,KAAgB61B,GAC9C,GAAA71B,KAAI,WAAW,KAAfA,KAAgB61B,KACVhc,MAAM,CAACU,eAAe,IAChC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OACiB,GAAAza,KAAI,WAAW,KAAfA,KAAgB61B,IACvBhc,MAAM,CAACU,eAAe,IACjC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MACgB,GAAAza,KAAI,WAAU,KAAdA,KAAe61B,IACtBhc,MAAM,CAACU,eAAe,IAChC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACL,IAAK,IACD,GAAIoI,EAAY,CAEZ,OADa/H,GAAekB,QAAQ6G,IAEhC,IAAK,UACD/H,GAAehM,OAAO+T,GACC,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IACtC3Y,EAAM0Y,iBAId1Y,EAAM6Y,kBAEV,MAEJ,IAAK,SAaL,IAAK,YACGoI,IAC4BjhB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoB1b,aAAe0b,EAASxU,UAAUiB,SAAS,WAC1E4f,IAED/a,GAAe3L,SAAS0T,GACxBA,EAAWhJ,MAAM,CAACU,eAAe,IACjC3Y,EAAM6Y,oBAGd,MAEJ,IAAK,aACD,GAAIoI,EAEA,OADa/H,GAAekB,QAAQ6G,IAEhC,IAAK,UACgB/H,GAAe8B,YAAYiG,KAExC/H,GAAehM,OAAO+T,GACC,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,IAC5BhJ,MAAM,CAACU,eAAe,IACtC3Y,EAAM6Y,sB,YAWb7Y,GACjB,MAAM,OAAC3B,EAAM,cAAE4B,EAAa,cAAE8X,GAAiB/X,EACzCi0B,EAA0Bh0B,EAChC,GAAI5B,aAAkB6N,aAAe7N,EAAO+U,UAAUiB,SAAS,YAAa,CACxE,MAAMqT,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkB61B,EAAY51B,GAClD,GAAoB,OAAhBqpB,IAC2C,WAAvCxO,GAAekB,QAAQsN,IACtBxO,GAAe8B,YAAY0M,IAC5B,GAAAtpB,KAAI,WAAkB,KAAtBA,KAAuBspB,GAEC1nB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoB1b,aAAe0b,EAASxU,UAAUiB,SAAS,WAC1E4f,GACoB,CACrB,MAAMhT,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB61B,GACpB,OAAfhT,GACsC,WAAtC/H,GAAekB,QAAQ6G,IACvB/H,GAAe8B,YAAYiG,KAC3B,GAAA7iB,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvB,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,EAzWjB,KA0WCuG,MAAK,KACFtO,GAAe3L,SAAS0T,MAE3B6G,OAAM,UAEf,MAAM,QAAC7J,EAAO,QAAEC,GAAWle,GACrB,KAAC+N,EAAI,MAAEE,EAAK,IAAEN,EAAG,OAAEE,GAAUomB,EAAW9lB,wBACxC4Z,IACFha,EAAOkQ,GAAWhQ,EAAQgQ,GAAWtQ,EAAMuQ,GAAWrQ,EAASqQ,GAE7D8J,EAAwBiM,EAAW5f,SAAe0D,GACpDgQ,GAAuBC,IACnBjQ,aAAyB7L,aAAe6L,EAAc3E,UAAUiB,SAAS,SAAW0D,IAAkBkc,EACtGlc,EAAcE,MAAM,CAACU,eAAe,IAGpCsb,EAAWhc,MAAM,CAACU,eAAe,KAGpCoP,GACDkM,EAAWhc,MAAM,CAACU,eAAe,O,YAO/B3Y,GAClB,MAAM,OAAC3B,EAAM,cAAE4B,GAAiBD,EAC1Bi0B,EAA0Bh0B,EAChC,GAAI5B,aAAkB6N,aAAe7N,EAAO+U,UAAUiB,SAAS,YAAa,CACxE,MAAMqT,EAAc,GAAAtpB,KAAI,WAAa,KAAjBA,KAAkB61B,EAAY51B,GAClD,GAAoB,OAAhBqpB,IAC2C,WAAvCxO,GAAekB,QAAQsN,IACvBxO,GAAe8B,YAAY0M,IAC3B,GAAAtpB,KAAI,WAAkB,KAAtBA,KAAuBspB,GAEC1nB,EAAM2nB,eAAepM,MAC7CqM,GAAYA,aAAoB1b,aAAe0b,EAASxU,UAAUiB,SAAS,WAC1E4f,GACoB,CACrB,MAAMhT,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB61B,GACpB,OAAfhT,GAC0C,WAAtC/H,GAAekB,QAAQ6G,IACvB/H,GAAe8B,YAAYiG,KAC1BA,EAAW5M,SAAsBhW,KAClC,GAAAD,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvB,GAAA7iB,KAAI,WAAgB,KAApBA,KAAqB6iB,EAzZrB,KA0ZKuG,MAAK,KACFtO,GAAe3L,SAAS0T,MAE3B6G,OAAM,UAGnBJ,EAAYzP,MAAM,CAACU,eAAe,IACS,WAAvCO,GAAekB,QAAQsN,KAClBxO,GAAe8B,YAAY0M,GAe5BxO,GAAea,QAAQ2N,IAAczP,MAAM,CAACU,eAAe,KAd3D,GAAAva,KAAI,WAAkB,KAAtBA,KAAuBspB,GACvB,GAAAtpB,KAAI,WAAgB,KAApBA,KAAqBspB,EAratB,KAsaMF,MAAK,KACF,MAAMvG,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB61B,GACvC,GAAA71B,KAAI,WAAkB,KAAtBA,KAAuB61B,GACnBhT,IACA,GAAA7iB,KAAI,WAAkB,KAAtBA,KAAuB6iB,GACvB/H,GAAehM,OAAO+T,GACtB/H,GAAea,QAAQkH,IAAahJ,MAAM,CAACU,eAAe,QAGjEmP,OAAM,c,mXC1bb,IAC1B/U,GAAO,CACHnM,KAAM,iBAFoB,EAG5B,GAAC,cAA6CgL,GAG5C1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,gBACP1G,KAAM,WAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKyQ,GACD,OAAOA,I,yqBCUXwT,GAAiB,IACrBnhB,GAAO,CACHnM,KAAM,YAFe,EAGvB,GAAC,cAAwCgL,GAIvC1T,cACIkD,Q,aAJJ,oBACA,oBAII,GAAAhD,KAAI,GAAU,CAAC,SAAU,QAAO,KAChC,GAAAA,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,WACN2D,UAAW,GAEfrI,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,WAEXpL,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,iBAM7B,KAGNyN,MAAMjhB,GACF,OAAOA,EAAK4H,cAA2B,2BAG3CwK,OAAO3N,GAUH,MAAMzE,EAAoB,GAAArB,KAAI,QAAWqO,WAAU,GAEnD,GADAhN,EAAKiB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,YACxCK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,MAAEyC,EAAK,MAAEI,EAAK,KAAEtQ,EAAO,OAAM,SAAEwT,EAAQ,UAAEuO,GAAa1d,OACzEzF,IAAP0U,IACA1T,EAAK0T,GAAKA,QAEI1U,IAAd2U,GACA3T,EAAK2T,UAAUG,OAAOH,QAET3U,IAAb6O,IACA7N,EAAK6N,SAAWA,QAEN7O,IAAVsR,GACA3R,KAAK0V,SAASrU,EAAMsQ,QAEVtR,IAAV0R,GACA/R,KAAKkmB,SAAS7kB,EAAM0Q,GAExB/R,KAAKqb,QAAQha,EAAMI,GACN,WAATA,GACAzB,KAAKob,YAAY/Z,GAAM,QAEVhB,IAAb4U,GACAjV,KAAKoV,YAAY/T,EAAM4T,QAET5U,IAAdmjB,GACAxjB,KAAK+1B,aAAa10B,EAAMmiB,GAE5BxjB,KAAKsV,YAAYjU,GAAM,GAE3B,OAAOA,EAGX,oBACI,MAAO,CAAC,UAAW,SAGvBwQ,KAAKxQ,EAAmBmH,GACpB,OAAQA,GACJ,IAAK,UACD,OAAO,GAAAxI,KAAI,WAAS,KAAbA,KAAcqB,GACzB,IAAK,QACD,OAAOA,EAEf,OAAO,KASXmU,SAASnU,GACL,OAAOA,EAAK2G,aAAa,eAAiB,GAG9C0N,SAASrU,EAAmBzB,GACxByB,EAAKwG,aAAa,aAAcjI,GAGpCqmB,SAAS5kB,GACL,OAAOA,EAAK0Q,MAGhBmU,SAAS7kB,EAAmBzB,GACxByB,EAAK0Q,MAAQnS,EAGjB+V,YAAYtU,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAG9CgW,YAAYvU,GACR,MAAMwU,EAAWxU,EAAK2G,aAAa,iBACnC,OAAO6N,EAAWzN,OAAOyN,IAAa,EAG1CmG,QAAQ3a,GACJ,MAAM4a,EAAQ,GAAAjc,KAAI,SACZ,UAACgV,GAAa3T,EACpB,IAAK,IAAI6a,KAAUD,EACf,GAAIjH,EAAUiB,SAAS,YAAYiG,KAC/B,OAAOA,EAGf,MAAM,IAAI5H,MAAM,iBAGpB+G,QAAQha,EAAmBI,GACvB,MAAM,UAACuT,GAAa3T,EACpB,IACI,MAAMib,EAAUtc,KAAKgc,QAAQ3a,GAC7B2T,EAAUvP,OAAO,YAAY6W,KAEjC,MAAO0Z,IACPhhB,EAAUG,IAAI,YAAY1T,KAG9B2Z,YAAY/Z,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAG9Cgd,YAAYvb,GACR,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,kBAAoBd,QAAO,IAGnE6O,UAAU1U,EAAmBzB,GACzB,MAAM,UAACoV,GAAa3T,EAChBzB,EACKoV,EAAUiB,SAAS,WACpBjB,EAAUG,IAAI,UAIlBH,EAAUvP,OAAO,UAIzBuQ,UAAU3U,GACN,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,UAG9BC,cAAc7U,EAAmBzB,GAC7B,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,cAGdH,EAAUvP,OAAO,cAIzB0Q,cAAc9U,GACV,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,cAG9Bb,YAAY/T,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1CwW,YAAY/U,GACR,OAAOA,EAAKuG,aAAa,iBAG7BmuB,aAAa10B,EAAmBzB,GAC5ByB,EAAKwG,aAAa,YAAaX,OAAOtH,IAG1Cq2B,aAAa50B,GACT,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,cAAgBd,QAAO,IAG/DoO,YAAYjU,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAC1CyB,EAAK0B,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KAGrDqH,YAAYhV,GACR,OAAO4G,KAAKC,MAAM7G,EAAK2G,aAAa,kBAAoBd,QAAO,IAGnEgvB,SAAS70B,EAAmBzB,GACxByB,EAAKgO,MAAMjL,YAAY,UAAW8C,OAAOtH,IAG7Cu2B,SAAS90B,GACL,OAAOyU,SAASzU,EAAKgO,MAAMskB,iBAAiB,YAGhDhlB,OAAOtN,EAAmBuN,GACtB5O,KAAKob,YAAY/Z,EAAMuN,IAAU5O,KAAK4c,YAAYvb,M,yDA9H7CA,GACL,MAAM+M,EAAU/M,EAAK4H,cAA2B,qBAChD,IAAKmF,EAAS,MAAM,IAAIkG,MAAM,0BAC9B,OAAOlG,G,YA8HOxM,GACd,MAAM,OAAC3B,EAAM,cAAE4B,EAAa,SAAE2Y,EAAQ,QAAEP,GAAWrY,EAC7Cib,EAAwC5c,EAAQ4Q,QAAQ,aAC1DgM,GAAchb,IAEF,UADC7B,KAAKgc,QAAQa,IACArC,GAAYP,GAClCja,KAAK2O,OAAOkO,K,gqBC3PX,IACjBlI,GAAO,CACHnM,KAAM,QAFW,EAGnB,GAAC,cAAoCgL,GAOnC1T,cACIkD,Q,aANJ,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,OACP1G,KAAM,OACN2D,SAAU,KAEhB,KACF,GAAA9R,KAAI,GAAgB,IAAIsG,QAAS,KACjC,GAAAtG,KAAI,GAAwB,IAAIsG,QAAS,KACzC,GAAAtG,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OAC5D,KAGLyT,OAAO3N,GAMH,MAAMyd,EAAoB,GAAAvjB,KAAI,QAAWqO,WAAU,GAcnD,GAbAkV,EAAKjhB,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEujB,EAAKjhB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DujB,EAAKjhB,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEujB,EAAKjhB,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnEujB,EAAKjhB,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEujB,EAAKjhB,iBAAiB,OAAQ,GAAAtC,KAAI,WAAkB0G,KAAK1G,OACzDujB,EAAKjhB,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3DujB,EAAKjhB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DujB,EAAKjhB,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjEujB,EAAKjhB,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/DujB,EAAKjhB,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,OAC7D,GAAAA,KAAI,QAAcyC,IAAI8gB,GAAM,GAC5B,GAAAvjB,KAAI,QAAsByC,IAAI8gB,GAAM,QACjBljB,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,cAAEgI,GAAiBpR,OACtCzF,IAAP0U,IACAwO,EAAKxO,GAAKA,QAEI1U,IAAd2U,GACAuO,EAAKvO,UAAUG,OAAOH,QAET3U,IAAb6O,IACAqU,EAAKrU,SAAWA,QAEE7O,IAAlB6W,GACAlX,KAAKoX,mBAAmBmM,EAAMrM,GAGtC,OAAOqM,EAGX1R,KAAK0R,GACD,OAAOA,EAGXlQ,gBAAgBkQ,EAAmB1R,GAC/B,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACjC0d,aAAmB3U,aAAe2U,EAAQzN,UAAUiB,SAAS,cAC7D6f,GAAengB,YAAY8M,EAAS1d,GACpC+wB,GAAeI,SAASzT,EAAS,OAK7CvhB,MAAMqiB,GACF,OAAO/b,MAAM2C,KAAKoZ,EAAK9M,iBACnB,qDAIRqM,cAAcS,GACV,MAAMT,EAAgB,GACP,GAAA9iB,KAAI,QACZgZ,YAAcuK,EACrB,IAAIliB,EAAO,GAAArB,KAAI,WAAW,KAAfA,KAAgBujB,GAC3B,KAAgB,OAATliB,GACcy0B,GAAezf,YAAYhV,IAExCyhB,EAActgB,KAAKnB,GAEvBA,EAAO,GAAArB,KAAI,WAAU,KAAdA,KAAeqB,GAE1B,OAAOyhB,EAGXvL,eAAegM,GACX,GAAAvjB,KAAI,QAAcyC,IAAI8gB,GAAM,GAGhC/L,aAAa+L,GACT,GAAAvjB,KAAI,QAAcyC,IAAI8gB,GAAM,GACxB,GAAAvjB,KAAI,QAAsBZ,IAAImkB,KAC9BA,EAAKxgB,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,QAAsByC,IAAI8gB,GAAM,IAI5CnM,mBAAmBmM,EAAmB3jB,GAClC2jB,EAAK1b,aAAa,uBAAwBX,OAAOtH,IAGrDyX,mBAAmBkM,GACf,OAAOtb,KAAKC,MAAMqb,EAAKvb,aAAa,yBAA2Bd,QAAO,M,uFAG3Dqc,GACX,OAAOA,EAAKta,cAA2B,qB,YAGxBsa,GACf,OAAOA,EAAKta,cAA2B,yB,YAGxBsa,EAAmBliB,GAClC,MAAM,UAAC2T,GAAauO,EACdiK,EAAiB,GAAAxtB,KAAI,WAAmB,KAAvBA,KAAwBujB,GACxB,OAAnBiK,GAA2BA,IAAmBnsB,GAC9Cy0B,GAAe5f,cAAcsX,GAAgB,GAEpC,OAATnsB,GACAy0B,GAAe5f,cAAc7U,GAAM,GACnC2T,EAAUG,IAAI,eAGdH,EAAUvP,OAAO,e,YAIb3B,GACR,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,cAAgB6f,GAAe1f,YAAYtS,GAC9D,OAAO+S,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,iBACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGP5N,EAAmB6N,GAC9B,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAI4c,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAemK,GAC9B,KAAO4c,GAAYA,IAAa/O,GAC5BhM,EAAMxJ,KAAKukB,GACXA,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe+mB,GAG9B,OADA/a,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAI0c,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmBmK,GACtC,KAAO0c,GAAgBA,IAAiB7O,GACpChM,EAAMxJ,KAAKqkB,GACXA,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6mB,GAGtC,OADA7a,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,I,YAGGuX,KAAsBriB,GAChC,MAAM4hB,EAAgB9iB,KAAK8iB,cAAcS,GACzCvjB,KAAKuX,eAAegM,GACpBT,EAAc1gB,SAASoC,IACdtD,EAAMkF,SAAS5B,IAChBsxB,GAAexgB,YAAY9Q,GAAQ,MAG3CtD,EAAMkB,SAASoC,IACX,MAAMmhB,EAAWmQ,GAAezf,YAAY7R,GACxC+e,EAAKtN,SAASzR,KAAYmhB,GAC1BmQ,GAAexgB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa+L,I,YAGNA,KAAsBriB,GAClClB,KAAKuX,eAAegM,GACpBriB,EAAMkB,SAASoC,IACNsxB,GAAezf,YAAY7R,IAC5BsxB,GAAexgB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa+L,I,YAGDA,KAAsBriB,GACvC,MAAM4hB,EAAgB9iB,KAAK8iB,cAAcS,GACzCvjB,KAAKuX,eAAegM,GACpBriB,EAAMkB,SAASoC,IACPse,EAAc1c,SAAS5B,IACvBsxB,GAAexgB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa+L,I,YAGNA,GACZ,MAAMT,EAAgB9iB,KAAK8iB,cAAcS,GACzCvjB,KAAKuX,eAAegM,GACpBT,EAAc1gB,SAASoC,IACnBsxB,GAAexgB,YAAY9Q,GAAQ,MAEvCxE,KAAKwX,aAAa+L,I,YAGPA,EAAmBliB,GAC9B,MAAMwhB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoBujB,GACpB,OAAfV,GAAuBA,IAAexhB,IACtCy0B,GAAe/f,UAAU8M,GAAY,GACrCA,EAAW3T,UAAY,GAEd,OAAT7N,IACAy0B,GAAe/f,UAAU1U,GAAM,GAC/BA,EAAK6N,SAAW,I,YAIbqU,GACP,MAAMiD,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcuK,EACMiD,EAAOja,c,YAG5BgX,GACN,MAAMiD,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcuK,EACMiD,EAAOvN,a,YAGxB5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc3X,EACrB,MAAMolB,EAAsCD,EAAOC,kBACnD,OAAOA,EACH,GAAAzmB,KAAI,WAAa,KAAjBA,KAAkBymB,GACED,EAAOtjB,c,YAGzB7B,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc3X,EACrB,MAAMI,EAAOq0B,GAAe9Z,QAAQ3a,GAC9BwN,EAAWinB,GAAelZ,YAAYvb,GAC5C,MACa,SAATI,GAEIoN,EADA2X,EAAOrN,WAGHqN,EAAOE,gBACNF,EAAOtjB,aAAcsjB,EAAOE,gB,cAIhCrlB,GAET,GADiBy0B,GAAelZ,YAAYvb,GAC9B,CACV,MACMmjB,EADS,GAAAxkB,KAAI,QACkBiZ,YACrC,GAAIuL,EACA,OAAO,GAAAxkB,KAAI,UAAa,KAAjBA,KAAkBwkB,GAGjC,OAAOnjB,G,YAGWO,GAClB,MAAM,cAACC,EAAa,OAAE5B,EAAM,QAAEga,EAAO,SAAEO,EAAQ,OAAExI,GAAUpQ,EACrD+hB,EAA0B9hB,EAC1Bgb,EAA+C5c,EAAQ4Q,QAAQ,aACrE,GAAIgM,EAAY,CACZ,MAAM8I,EAAWmQ,GAAezf,YAAYwG,GAC5C,OAAQ7K,GACJ,KAAK,EACD,GAAKwI,GAAaP,GAGb,GAAIA,EACD0L,GACA9I,EAAW6Q,OACX,GAAA1tB,KAAI,WAAqB,KAAzBA,KAA0B2jB,EAAY9G,IAGtC,GAAA7c,KAAI,WAAgB,KAApBA,KAAqB2jB,EAAY9G,GAErCjb,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAMqI,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB2jB,GACvC,GAAId,EAAY,CACZ,MAAM7W,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV6iB,EACAhG,GAEA7Q,GACA,GAAAhM,KAAI,WAAc,KAAlBA,KAAmB2jB,KAAe3X,GAG1CpK,EAAM6Y,wBAvBN,GAAAza,KAAI,WAAc,KAAlBA,KAAmB2jB,EAAY9G,GAyBnC,MAEJ,KAAK,EACI8I,GACD,GAAA3lB,KAAI,WAAc,KAAlBA,KAAmB2jB,EAAY9G,M,YAQ/Bjb,GAChB,MAAM,cAACC,GAAiBD,EAClB+hB,EAA0B9hB,EAChC,GAAA7B,KAAI,WAAmB,KAAvBA,KAAwB2jB,EAAY,O,YAGlB/hB,GAClB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1Bib,EAA+C5c,EAAQ4Q,QAAQ,aAC/D8S,EAA0B9hB,EAC5Bgb,IAEY,UADCiZ,GAAe9Z,QAAQa,IAEhCiZ,GAAennB,OAAOkO,GAAY,GAEtC,GAAA7c,KAAI,WAAmB,KAAvBA,KAAwB2jB,EAAY9G,IAExCjb,EAAM0Y,kB,YAGW1Y,GACjBA,EAAM0Y,kB,YAGY1Y,GAClB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjC+hB,EAA0B9hB,EAC3B8hB,EAAW1N,SAAe0D,IAC3B,GAAA3Z,KAAI,WAAmB,KAAvBA,KAAwB2jB,EAAY,O,YAI3B/hB,GACb,MAAM,cAACC,GAAiBD,EAClB+hB,EAA0B9hB,EAChC,GAAA7B,KAAI,WAAmB,KAAvBA,KAAwB2jB,EAAY,O,YAGtB/hB,GACd,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjC+hB,EAA0B9hB,EAEhC,IADoB8hB,EAAW1N,SAAe0D,GAC5B,CACd,MAAMkJ,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB2jB,GACnCd,GACAA,EAAWhJ,U,YAKHjY,GAChB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1Bib,EAA+C5c,EAAQ4Q,QAAQ,aAC/D8S,EAA0B9hB,EAC5Bgb,IACA,GAAA7c,KAAI,WAAe,KAAnBA,KAAoB2jB,EAAY9G,GAChC8G,EAAWzU,UAAY,I,YAIVtN,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjC+hB,EAA0B9hB,GACP8hB,EAAW1N,SAAe0D,KAE/CgK,EAAWzU,SAAW,I,YAIVtN,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvB+hB,EAA0B9hB,EAC1BghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB2jB,GACvC,OAAQ5kB,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,GACI4I,EAAY,CACZ,MAAM2D,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc6J,EACrB,MAAMiE,GACFN,EAAOxN,YAAcwN,EAAOtjB,cAAgBygB,EAAY6C,EAAOja,cAE7DiY,GACFgC,EAAOxN,YAAcwN,EAAOtjB,cAAgBygB,EAAY6C,EAAOvN,aAEnE,GAAI6N,GAAatC,EAAU,CACvB,MAAMxY,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV8mB,EACA,GAAA9mB,KAAI,WAAa,KAAjBA,KAAkBwkB,IAElBxY,GACA,GAAAhM,KAAI,WAAc,KAAlBA,KAAmB2jB,KAAe3X,IAKlDpK,EAAM0Y,iBACN,MAEJ,IAAK,YACD,GAAIuI,EAEA,GADiBiT,GAAelZ,YAAYiG,GAExCiT,GAAennB,OAAOkU,OAErB,CACD,MACMuC,EADS,GAAAplB,KAAI,QACoBkD,aACnCkiB,GACAA,EAAWvL,MAAM,CAACU,eAAe,IAI7C3Y,EAAM6Y,kBACN,MAEJ,IAAK,aACGoI,IACiBiT,GAAelZ,YAAYiG,IAExCiT,GAAennB,OAAOkU,IAG9BjhB,EAAM6Y,kBACN,MAEJ,IAAK,UACD,GAAIoI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACxC,GAAIgE,EAAc,CACdA,EAAahN,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,IACiBsb,GAAezf,YAAYwQ,GAExC,GAAA7mB,KAAI,WAAqB,KAAzBA,KAA0B2jB,EAAYkD,GACtC,GAAA7mB,KAAI,WAAgB,KAApBA,KAAqB2jB,EAAYkD,SAI5C,CACD,MAAMC,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB2jB,GAC9BmD,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAChC,GAAIkE,EAAU,CACVA,EAASlN,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,IACiBsb,GAAezf,YAAY0Q,GAExC,GAAA/mB,KAAI,WAAqB,KAAzBA,KAA0B2jB,EAAYoD,GACtC,GAAA/mB,KAAI,WAAgB,KAApBA,KAAqB2jB,EAAYoD,SAI5C,CACD,MAAMvC,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe2jB,GAC5Ba,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB2jB,GAC9BmD,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe2jB,GAC5Ba,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACGoI,IACA,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB2jB,EAAYd,GAC/BA,EAAWjI,SAEfhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,GAAAza,KAAI,WAAgB,KAApBA,KAAqB2jB,GACrB,GAAA3jB,KAAI,WAAe,KAAnBA,KAAoB2jB,EAAY,MAChCA,EAAW9J,QACXjY,EAAM6Y,oB,YAMC7Y,GACf,MAAM,OAAC3B,GAAU2B,EACX+hB,EAA0B1jB,EAC5BA,aAAkB6N,aAAe7N,EAAO+U,UAAUiB,SAAS,cACvD,GAAAjW,KAAI,QAAcZ,IAAIukB,GACtB,GAAA3jB,KAAI,QAAsByC,IAAIxC,GAAQ,GAGtC0jB,EAAW5gB,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,O,mXChjBtD,IAC1B2F,GAAO,CACHnM,KAAM,iBAFoB,EAG5B,GAAC,cAA6CgL,GAG5C1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,gBACP1G,KAAM,WAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKyQ,GACD,OAAOA,EAGXjP,gBAAgBiP,EAAoBzQ,GAChC,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACjC0d,aAAmB3U,aAAe2U,EAAQzN,UAAUiB,SAAS,cAC7D6f,GAAengB,YAAY8M,EAAS1d,GACpC+wB,GAAeI,SAASzT,EAAS,MAC7B,IAAIqK,GAAS,EACTC,EAAkCtK,EACtC,KAAuB,OAAhBsK,GAAwBA,EAAYnM,QAAQ,iBAC/CmM,EAAcA,EAAYC,eAAenc,QAAQ,cAAgB,KACjEic,IAEJ,OAAOA,GAPsB,U,yqBCf7CsJ,GAAiB,IACrBzhB,GAAO,CACHnM,KAAM,YAFe,EAGvB,GAAC,cAAwCgL,GAGvC1T,cACIkD,Q,aAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,WACN2D,UAAW,GAEfrI,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,cAIrB,KAGNpB,OAAO1T,GAIH,MAAMsB,EAAoB,GAAArB,KAAI,QAAWqO,WAAU,GACnD,QAAahO,IAATN,EAAoB,CACpB,MAAM,MAAC4R,EAAK,SAAEsD,GAAYlV,OACZM,IAAVsR,GACA3R,KAAK0V,SAASrU,EAAMsQ,QAEPtR,IAAb4U,GACAjV,KAAKoV,YAAY/T,EAAM4T,GAE3BjV,KAAKsV,YAAYjU,GAAM,GAE3B,OAAOA,EAGXwQ,KAAK8W,GACD,OAAOA,EAGXrG,MAAMjhB,GACF,OAAOA,EAAK4H,cAA2B,2BAG3CuM,SAASnU,GACL,OAAO,GAAArB,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,aAAe,GAG5CC,SAASrU,EAAmBzB,GACxB,GAAAI,KAAI,WAAO,KAAXA,KAAYqB,GAAMoU,YAAc7V,EAGpC+V,YAAYtU,EAAmBzB,GAC3ByB,EAAKwG,aAAa,gBAAiBX,OAAOtH,IAG9CgW,YAAYvU,GACR,MAAMwU,EAAWxU,EAAK2G,aAAa,iBACnC,OAAO6N,EAAWC,SAASD,IAAa,EAG5CE,UAAU1U,EAAmBzB,GACzB,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,UAGdH,EAAUvP,OAAO,UAIzBuQ,UAAU3U,GACN,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,UAG9BC,cAAc7U,EAAmBzB,GAC7B,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,cAGdH,EAAUvP,OAAO,cAIzB0Q,cAAc9U,GACV,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,cAG9Bb,YAAY/T,EAAmBzB,GAC3ByB,EAAK0I,gBAAgB,gBAAiBnK,GAG1CwW,YAAY/U,GACR,OAAOA,EAAKuG,aAAa,iBAG7B0N,YAAYiB,EAAkB3W,GAC1B2W,EAAI1O,aAAa,gBAAiBX,OAAOtH,IACzC2W,EAAIxT,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,KAGpDqH,YAAYE,GACR,OAAOtO,KAAKC,MAAMqO,EAAIvO,aAAa,kBAAoBd,QAAO,M,0CAG3D7F,GACH,OAAOA,EAAK4H,cAA2B,oB,gqBCxH9B,IACjB0L,GAAO,CACHnM,KAAM,QAFW,EAGnB,GAAC,cAAoCgL,GAMnC1T,cACIkD,Q,aANJ,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,OACP1G,KAAM,OACN2D,SAAU,KAEhB,KACF,GAAA9R,KAAI,GAAgB,IAAIsG,QAAS,KACjC,GAAAtG,KAAI,GAAwB,IAAIsG,QAAS,KACzC,GAAAtG,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAa0G,KAAK1G,OAC5D,KAGLyT,OAAO3N,GAMH,MAAM6F,EAAoB,GAAA3L,KAAI,QAAWqO,WAAU,GAanD,GAZA1C,EAAKrJ,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/D2L,EAAKrJ,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnE2L,EAAKrJ,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnE2L,EAAKrJ,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjE2L,EAAKrJ,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnE2L,EAAKrJ,iBAAiB,OAAQ,GAAAtC,KAAI,WAAkB0G,KAAK1G,OACzD2L,EAAKrJ,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC3D2L,EAAKrJ,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/D2L,EAAKrJ,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACjE2L,EAAKrJ,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OAC/D2L,EAAKrJ,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACnE2L,EAAKrJ,iBAAiB,SAAU,GAAAtC,KAAI,WAAoB0G,KAAK1G,YAC1CK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,cAAEgI,GAAiBpR,OACtCzF,IAAP0U,IACApJ,EAAKoJ,GAAKA,QAEI1U,IAAd2U,GACArJ,EAAKqJ,UAAUG,OAAOH,QAET3U,IAAb6O,IACAvD,EAAKuD,SAAWA,QAEE7O,IAAlB6W,GACAlX,KAAKoX,mBAAmBzL,EAAMuL,GAKtC,OAFA,GAAAlX,KAAI,QAAcyC,IAAIkJ,GAAM,GAC5B,GAAA3L,KAAI,QAAsByC,IAAIkJ,GAAM,GAC7BA,EAGXkG,KAAKlG,GACD,OAAOA,EAGX0H,gBAAgB1H,EAAmBkG,GAC/B,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACjC0d,aAAmB3U,aAAe2U,EAAQzN,UAAUiB,SAAS,aAC7DmgB,GAAezgB,YAAY8M,EAAS1d,MAKhDqS,mBAAmBmM,EAAmB3jB,GAClC2jB,EAAK1b,aAAa,uBAAwBX,OAAOtH,IAGrDyX,mBAAmBkM,GACf,OAAOtb,KAAKC,MAAMqb,EAAKvb,aAAa,yBAA2Bd,QAAO,IAW1EhG,MAAMyK,GACF,OAAOnE,MAAM2C,KAAKwB,EAAK8K,iBACnB,qDAIRqM,cAAcnX,GACV,MAAMmX,EAAgB,GACP,GAAA9iB,KAAI,QACZgZ,YAAcrN,EACrB,IAAItK,EAAO,GAAArB,KAAI,WAAW,KAAfA,KAAgB2L,GAC3B,KAAgB,OAATtK,GACc+0B,GAAe/f,YAAYhV,IAExCyhB,EAActgB,KAAKnB,GAEvBA,EAAO,GAAArB,KAAI,WAAU,KAAdA,KAAeqB,GAE1B,OAAOyhB,EAGXvL,eAAe5L,GACX,GAAA3L,KAAI,QAAcyC,IAAIkJ,GAAM,GAGhC6L,aAAa7L,GACT,GAAA3L,KAAI,QAAcyC,IAAIkJ,GAAM,GACxB,GAAA3L,KAAI,QAAsBZ,IAAIuM,KAC9BA,EAAK5I,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,KAC1D,GAAAhP,KAAI,QAAsByC,IAAIkJ,GAAM,M,uFArC7B4X,GACX,OAAOA,EAAKta,cAA2B,qB,YAGxBsa,GACf,OAAOA,EAAKta,cAA2B,yB,YAoC/BnF,GACR,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,cAAgBmgB,GAAehgB,YAAYtS,KAAUA,EAAK8T,OAC7E,OAAOf,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,iBACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGP5N,EAAmB6N,GAC9B,GAAI7N,GAAQ6N,EACR,MAAO,CAAC7N,GAEZ,MAAM8N,EAAW9N,EAAK+N,wBAAwBF,GAC9C,GAAIC,EAAWvD,KAAKyD,4BAA6B,CAC7C,MAAMnM,EAAQ,CAAC7B,GACf,IAAI4c,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAemK,GAC9B,KAAO4c,GAAYA,IAAa/O,GAC5BhM,EAAMxJ,KAAKukB,GACXA,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe+mB,GAG9B,OADA/a,EAAMxJ,KAAKwV,GACJhM,EAEN,GAAIiM,EAAWvD,KAAK2D,4BAA6B,CAClD,MAAMrM,EAAQ,CAAC7B,GACf,IAAI0c,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmBmK,GACtC,KAAO0c,GAAgBA,IAAiB7O,GACpChM,EAAMxJ,KAAKqkB,GACXA,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6mB,GAGtC,OADA7a,EAAMxJ,KAAKwV,GACJhM,EAEX,MAAO,I,YAGGL,KAAsBzK,GAChC,MAAM4hB,EAAgB9iB,KAAK8iB,cAAcnX,GACzC3L,KAAKuX,eAAe5L,GACpBmX,EAAc1gB,SAASoC,IACdtD,EAAMkF,SAAS5B,IAChB4xB,GAAe9gB,YAAY9Q,GAAQ,MAG3CtD,EAAMkB,SAASoC,IACX,MAAMmhB,EAAWyQ,GAAe/f,YAAY7R,GACxCmH,EAAKsK,SAASzR,KAAYmhB,GAC1ByQ,GAAe9gB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa7L,I,YAGNA,KAAsBzK,GAClClB,KAAKuX,eAAe5L,GACpBzK,EAAMkB,SAASoC,IACN4xB,GAAe/f,YAAY7R,IAC5B4xB,GAAe9gB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa7L,I,YAGDA,KAAsBzK,GACvC,MAAM4hB,EAAgB9iB,KAAK8iB,cAAcnX,GACzC3L,KAAKuX,eAAe5L,GACpBzK,EAAMkB,SAASoC,IACPse,EAAc1c,SAAS5B,IACvB4xB,GAAe9gB,YAAY9Q,GAAQ,MAG3CxE,KAAKwX,aAAa7L,I,YAGNA,GACZ,MAAMmX,EAAgB9iB,KAAK8iB,cAAcnX,GACzC3L,KAAKuX,eAAe5L,GACpBmX,EAAc1gB,SAASoC,IACnB4xB,GAAe9gB,YAAY9Q,GAAQ,MAEvCxE,KAAKwX,aAAa7L,I,YAGPA,EAAmBtK,GAC9B,MAAMwhB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB2L,GACpB,OAAfkX,GAAuBA,IAAexhB,IACtC+0B,GAAergB,UAAU8M,GAAY,GACrCA,EAAW3T,UAAY,GAEd,OAAT7N,IACA+0B,GAAergB,UAAU1U,GAAM,GAC/BA,EAAK6N,SAAW,I,YAILvD,EAAmBtK,GAClC,MAAM,UAAC2T,GAAarJ,EACd6hB,EAAiB,GAAAxtB,KAAI,WAAmB,KAAvBA,KAAwB2L,GACxB,OAAnB6hB,GAA2BA,IAAmBnsB,GAC9C+0B,GAAelgB,cAAcsX,GAAgB,GAEpC,OAATnsB,GACA+0B,GAAelgB,cAAc7U,GAAM,GACnC2T,EAAUG,IAAI,eAGdH,EAAUvP,OAAO,e,YAIdkG,GACP,MAAM6a,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcrN,EACM6a,EAAOja,c,YAG5BZ,GACN,MAAM6a,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAcrN,EACM6a,EAAOvN,a,YAGxB5X,GACV,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EACoBmlB,EAAOtN,gB,YAI1C7X,GACN,MAAMmlB,EAAS,GAAAxmB,KAAI,QAGnB,OAFAwmB,EAAOxN,YAAc3X,EACgBmlB,EAAOrN,Y,YAI5BvX,GAChB,MAAM,cAACC,GAAiBD,EAClBiZ,EAA0BhZ,EAChC,GAAA7B,KAAI,WAAmB,KAAvBA,KAAwB6a,EAAY,O,YAGlBjZ,GAClB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1Bib,EAA+C5c,EAAQ4Q,QAAQ,aAC/DgK,EAA0BhZ,EAC5Bgb,GACA,GAAA7c,KAAI,WAAmB,KAAvBA,KAAwB6a,EAAYgC,GAExCjb,EAAM0Y,kB,YAGW1Y,GACjBA,EAAM0Y,kB,YAGY1Y,GAClB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCiZ,EAA0BhZ,EAChC,GAAI8X,EAAe,CACf,MAAMgU,EAA2BhU,EAAeiU,cAC1CC,EACFF,aAA6BG,WAC7BH,EAAkBI,KAClBpU,EACCkB,EAAW5E,SAAe4X,IAC3B,GAAA7tB,KAAI,WAAmB,KAAvBA,KAAwB6a,EAAY,Q,YAK1BjZ,GAClB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1B+hB,EAA0B9hB,EAC1Bgb,EAA+C5c,EAAQ4Q,QAAQ,aACjEgM,IACsB7c,KAAK8iB,cAAca,GACtBvd,SAASyW,IACxB,GAAA7c,KAAI,WAAc,KAAlBA,KAAmB2jB,EAAY9G,K,YAK1Bjb,GACb,MAAM,cAACC,GAAiBD,EAClB+hB,EAA0B9hB,EAChC,GAAA7B,KAAI,WAAmB,KAAvBA,KAAwB2jB,EAAY,O,YAGtB/hB,GACd,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjC+hB,EAA0B9hB,EAC1BghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB2jB,GACnCd,GAAclJ,IAAkBkJ,GAChCA,EAAWhJ,S,YAICjY,GAChB,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1B+hB,EAA0B9hB,EAC1Bgb,EAA+C5c,EAAQ4Q,QAAQ,aACjEgM,IACA,GAAA7c,KAAI,WAAe,KAAnBA,KAAoB2jB,EAAY9G,GAChC8G,EAAWzU,UAAY,I,YAIXtN,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvBiZ,EAA0BhZ,EAC1BghB,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB6a,GACvC,OAAQ9b,GACJ,IAAK,IAAK,CACN,MAAM,QAACkb,GAAWrY,EAClB,GAAIqY,GACI4I,EAAY,CACZ,MAAM2D,EAAS,GAAAxmB,KAAI,QACnBwmB,EAAOxN,YAAc6J,EACrB,MAAMiE,GACFN,EAAOxN,YAAcwN,EAAOtjB,cAAgB2X,EAAY2L,EAAOja,cAE7DiY,GACFgC,EAAOxN,YAAcwN,EAAOtjB,cAAgB2X,EAAY2L,EAAOvN,aAEnE,GAAI6N,GAAatC,EAAU,CACvB,MAAMxY,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KAAoB8mB,EAAWtC,GACzCxY,GACA,GAAAhM,KAAI,WAAc,KAAlBA,KAAmB6a,KAAe7O,IAKlDpK,EAAM0Y,iBACN,MAEJ,IAAK,UACD,GAAIuI,EAAY,CACZ,MAAMgE,EAAe,GAAA7mB,KAAI,WAAc,KAAlBA,KAAmB6iB,GACxC,GAAIgE,EAAc,CACdA,EAAahN,MAAM,CAACU,eAAe,IACnC,MAAM,SAACC,GAAY5Y,EACf4Y,IACiB4b,GAAe/f,YAAYwQ,GAExC,GAAA7mB,KAAI,WAAqB,KAAzBA,KAA0B6a,EAAYgM,GACtC,GAAA7mB,KAAI,WAAgB,KAApBA,KAAqB6a,EAAYgM,SAI5C,CACD,MAAMC,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB6a,GAC9BiM,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAGxC3Y,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAIoI,EAAY,CACZ,MAAMkE,EAAW,GAAA/mB,KAAI,WAAU,KAAdA,KAAe6iB,GAChC,GAAIkE,EAAU,CACVA,EAASlN,MAAM,CAACU,eAAe,IAC/B,MAAM,SAACC,GAAY5Y,EACf4Y,IACiB4b,GAAe/f,YAAY0Q,GAExC,GAAA/mB,KAAI,WAAqB,KAAzBA,KAA0B6a,EAAYkM,GACtC,GAAA/mB,KAAI,WAAgB,KAApBA,KAAqB6a,EAAYkM,SAI5C,CACD,MAAMvC,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe6a,GAC5B2J,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAGvC3Y,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAMqM,EAAY,GAAA9mB,KAAI,WAAW,KAAfA,KAAgB6a,GAC9BiM,GACAA,EAAUjN,MAAM,CAACU,eAAe,IAEpC3Y,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM+J,EAAW,GAAAxkB,KAAI,WAAU,KAAdA,KAAe6a,GAC5B2J,GACAA,EAAS3K,MAAM,CAACU,eAAe,IAEnC3Y,EAAM6Y,kBACN,MAEJ,IAAK,QACGoI,IACA,GAAA7iB,KAAI,WAAc,KAAlBA,KAAmB6a,EAAYgI,GAC/BA,EAAWjI,SAEfhZ,EAAM6Y,kBACN,MAEJ,IAAK,SACD,GAAAza,KAAI,WAAgB,KAApBA,KAAqB6a,GACrB,GAAA7a,KAAI,WAAe,KAAnBA,KAAoB6a,EAAY,MAChCA,EAAWhB,QACXjY,EAAM6Y,oB,YAMI7Y,GAClB,MAAM,cAACC,EAAa,OAAE5B,EAAM,QAAEga,EAAO,SAAEO,EAAQ,OAAExI,GAAUpQ,EACrDiZ,EAA0BhZ,EAC1Bgb,EAA+C5c,EAAQ4Q,QAAQ,aACrE,GAAIgM,EAAY,CACZ,MAAM8I,EAAWyQ,GAAe/f,YAAYwG,GAC5C,OAAQ7K,GACJ,KAAK,EACD,GAAKwI,GAAaP,GAGb,GAAIA,EACD0L,GACA9I,EAAW6Q,OACX,GAAA1tB,KAAI,WAAqB,KAAzBA,KAA0B6a,EAAYgC,IAGtC,GAAA7c,KAAI,WAAgB,KAApBA,KAAqB6a,EAAYgC,GAErCjb,EAAM6Y,uBAEL,GAAID,EAAU,CACf,MAAMqI,EAAa,GAAA7iB,KAAI,WAAe,KAAnBA,KAAoB6a,GACvC,GAAIgI,EAAY,CACZ,MAAM7W,EAAQ,GAAAhM,KAAI,WAAe,KAAnBA,KACV6iB,EACAhG,GAEA7Q,GACA,GAAAhM,KAAI,WAAc,KAAlBA,KAAmB6a,KAAe7O,GAG1CpK,EAAM6Y,wBAvBN,GAAAza,KAAI,WAAc,KAAlBA,KAAmB6a,EAAYgC,GAyBnC,MAEJ,KAAK,EACI8I,GACD,GAAA3lB,KAAI,WAAc,KAAlBA,KAAmB6a,EAAYgC,M,YAQ9Bjb,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjCiZ,EAA0BhZ,GACPgZ,EAAW5E,SAAe0D,KAE/CkB,EAAW3L,SAAW,I,YAIXtN,GACf,MAAM,cAACC,GAAiBD,EAClBiZ,EAA0BhZ,EAC5BgZ,IACI,GAAA7a,KAAI,QAAcZ,IAAIyb,GACtB,GAAA7a,KAAI,QAAsByC,IAAIoY,GAAY,GAG1CA,EAAW9X,cAAc,IAAIgM,MAAM,kBAAmB,CAACC,SAAS,O,mXCvgBtD,IAC1B2F,GAAO,CACHnM,KAAM,iBAFoB,EAG5B,GAAC,cAA6CgL,GAG5C1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,gBACP1G,KAAM,WAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKyQ,GACD,OAAOA,EAGXjP,gBAAgBiP,EAAoBzQ,GAChC,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACjC0d,aAAmB3U,aAAe2U,EAAQzN,UAAUiB,SAAS,aAC7DmgB,GAAezgB,YAAY8M,EAAS1d,Q,kYC7BvB,IAC7B4P,GAAO,CACHnM,KAAM,oBAFuB,EAG/B,GAAC,cAA6CgL,GAG5C1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,mBACP1G,KAAM,WAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKyQ,GACD,OAAOA,I,6qBCfO,IACtB3N,GAAO,CACHnM,KAAM,aAFgB,EAGxB,GAAC,cAAqCgL,GAQpC1T,cACIkD,Q,aARJ,oBAEA,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,eAEb,KACF,GAAA7U,KAAI,GAAY,IAAIsG,QAAS,KAC7B,GAAAtG,KAAI,GAAmB,IAAIsG,QAAS,KACpC,GAAAtG,KAAI,GAA2B,IAAIsG,QAAS,KAC5C,GAAAtG,KAAI,GAAqB,IAAIsG,QAAS,KAG1CmN,OAAO3N,GAOH,MAAMuwB,EAAU,GAAAr2B,KAAI,QACds2B,EAAmB,GAAAt2B,KAAI,QACvBu2B,EAAiB,GAAAv2B,KAAI,QACrBw2B,EAAyB,GAAAx2B,KAAI,QAC7By2B,EAAoB,GAAAz2B,KAAI,QAAWqO,WAAU,GAInD,GAHAooB,EAAKn0B,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEy2B,EAAKn0B,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEy2B,EAAKn0B,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,YAChDK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,SAAEyQ,EAAQ,QAAE+W,GAAW5wB,OAC1CzF,IAAP0U,IACA0hB,EAAK1hB,GAAKA,QAEI1U,IAAd2U,GACAyhB,EAAKzhB,UAAUG,OAAOH,QAET3U,IAAb6O,IACAunB,EAAKvnB,SAAWA,QAEH7O,IAAbsf,GACA3f,KAAK22B,YAAYF,EAAM9W,QAEXtf,IAAZq2B,GACA12B,KAAK42B,WAAWH,EAAMC,GAO9B,OAJAL,EAAQ5zB,IAAIg0B,EAAM,MAClBD,EAAuB/zB,IAAIg0B,EAAM,MACjCH,EAAiB7zB,IAAIg0B,EAAM,GAC3BF,EAAe9zB,IAAIg0B,GAAM,GAClBA,EAGXI,WAAWJ,GACP,OAAyBA,EAAKzuB,aAAa,iBAAmB,QAGlE4uB,WAAWH,EAAmB72B,GAC1B62B,EAAK5uB,aAAa,eAAgBjI,GAGtCk3B,YAAYL,GACR,OAAOA,EAAKzuB,aAAa,iBAG7B2uB,YAAYF,EAAmB72B,GAC3B62B,EAAK5uB,aAAa,gBAAiBjI,GAGvC01B,SAASmB,EAAmBzmB,GACxB,MACM/P,EADU,GAAAD,KAAI,QACGZ,IAAIq3B,GACZ,OAAXx2B,GACAA,EAAOoP,MAAMjL,YAAY,QAAS,GAAG4L,S,sGAIvBpO,GAClB,MAAM,UAACkxB,EAAS,cAAEjxB,GAAiBD,EAC7Bm1B,EAA0Bl1B,EAC1B00B,EAAiB,GAAAv2B,KAAI,QAC3B+2B,EAAWhE,sBAAsBD,GACjCyD,EAAe9zB,IAAIs0B,GAAY,I,YAGXn1B,GACpB,MAAM,UAACkxB,EAAS,cAAEjxB,GAAiBD,EAC7Bm1B,EAA0Bl1B,EAC1B8d,EAAW3f,KAAK82B,YAAYC,GAClC,GAAIpX,EAAU,CACV,MAAM0W,EAAU,GAAAr2B,KAAI,QACdu2B,EAAiB,GAAAv2B,KAAI,QACrBg0B,EAAkC+C,EAAWnJ,cACnDyI,EAAQ5zB,IAAIs0B,EAAY/C,EAASjI,eAAepM,IAChD4W,EAAe9zB,IAAIs0B,GAAY,GAC/BA,EAAW/D,kBAAkBF,K,YAIblxB,GACpB,MAAM,cAACC,GAAiBD,EAClBm1B,EAA0Bl1B,EAC1By0B,EAAmB,GAAAt2B,KAAI,QACvBu2B,EAAiB,GAAAv2B,KAAI,QACrBw2B,EAAyB,GAAAx2B,KAAI,QAC7Bg3B,EAAsB,GAAAh3B,KAAI,WAEhC,GADsBu2B,EAAen3B,IAAI23B,GACtB,CACf,IAAIx0B,EAAWi0B,EAAuBp3B,IAAI23B,GAC1B,MAAZx0B,IACAA,EAAWy0B,EAAoBtwB,KAAK1G,KAAM+2B,GAC1CP,EAAuB/zB,IAAIs0B,EAAYx0B,GACvC0xB,sBAAsB1xB,IAE1B,MAAM00B,EAAkBX,EAAiBl3B,IAAI23B,GAAen1B,EAAMsxB,UAClEoD,EAAiB7zB,IAAIs0B,EAAYE,K,YAIpBR,GACjB,MAAMJ,EAAU,GAAAr2B,KAAI,QACds2B,EAAmB,GAAAt2B,KAAI,QACvBw2B,EAAyB,GAAAx2B,KAAI,QAC7BC,EAASo2B,EAAQj3B,IAAIq3B,GAC3B,GAAe,OAAXx2B,EAAiB,CACjB,MAAMgzB,EAAsB3iB,OAAOW,iBAAiBhR,GAC9Ci0B,EAAUl0B,KAAK62B,WAAWJ,GAC1BvD,EAAYoD,EAAiBl3B,IAAIq3B,GAEjClB,EADQltB,WAAW4qB,EAAoBU,iBAAiB,WACzB,SAAXO,EAAqB,GAAK,GAAKhB,EACzDlzB,KAAKs1B,SAASmB,EAAMlB,GACpBkB,EAAK1zB,cAAc,IAAIgM,MAAM,WAEjCunB,EAAiB7zB,IAAIg0B,EAAM,GAC3BD,EAAuB/zB,IAAIg0B,EAAM,O,8pBCjJlB,IACvB9hB,GAAO,CACHnM,KAAM,cAFiB,EAGzB,GAAC,cAAsCgL,GAQrC1T,cACIkD,Q,aARJ,oBAEA,oBACA,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,gBAEb,KACF,GAAA7U,KAAI,GAAY,IAAIsG,QAAS,KAC7B,GAAAtG,KAAI,GAAmB,IAAIsG,QAAS,KACpC,GAAAtG,KAAI,GAA2B,IAAIsG,QAAS,KAC5C,GAAAtG,KAAI,GAAqB,IAAIsG,QAAS,KAG1CmN,OAAO3N,GAOH,MAAMuwB,EAAU,GAAAr2B,KAAI,QACds2B,EAAmB,GAAAt2B,KAAI,QACvBu2B,EAAiB,GAAAv2B,KAAI,QACrBw2B,EAAyB,GAAAx2B,KAAI,QAC7By2B,EAAoB,GAAAz2B,KAAI,QAAWqO,WAAU,GAInD,GAHAooB,EAAKn0B,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEy2B,EAAKn0B,iBAAiB,cAAe,GAAAtC,KAAI,WAAyB0G,KAAK1G,OACvEy2B,EAAKn0B,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,YAChDK,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,SAAEyQ,EAAQ,QAAE+W,GAAW5wB,OAC1CzF,IAAP0U,IACA0hB,EAAK1hB,GAAKA,QAEI1U,IAAd2U,GACAyhB,EAAKzhB,UAAUG,OAAOH,QAET3U,IAAb6O,IACAunB,EAAKvnB,SAAWA,QAEH7O,IAAbsf,GACA3f,KAAK22B,YAAYF,EAAM9W,QAEXtf,IAAZq2B,GACA12B,KAAK42B,WAAWH,EAAMC,GAO9B,OAJAL,EAAQ5zB,IAAIg0B,EAAM,MAClBD,EAAuB/zB,IAAIg0B,EAAM,MACjCH,EAAiB7zB,IAAIg0B,EAAM,GAC3BF,EAAe9zB,IAAIg0B,GAAM,GAClBA,EAGXI,WAAWJ,GACP,OAAyBA,EAAKzuB,aAAa,iBAAmB,MAGlE4uB,WAAWH,EAAmB72B,GAC1B62B,EAAK5uB,aAAa,eAAgBjI,GAGtCk3B,YAAYL,GACR,OAAOA,EAAKzuB,aAAa,iBAG7B2uB,YAAYF,EAAmB72B,GAC3B62B,EAAK5uB,aAAa,gBAAiBjI,GAGvCs3B,UAAUT,EAAmBvmB,GACzB,MACMjQ,EADU,GAAAD,KAAI,QACGZ,IAAIq3B,GACZ,OAAXx2B,GACAA,EAAOoP,MAAMjL,YAAY,SAAU,GAAG8L,S,sGAIxBtO,GAClB,MAAM,UAACkxB,EAAS,cAAEjxB,GAAiBD,EAC7Bm1B,EAA0Bl1B,EAC1B00B,EAAiB,GAAAv2B,KAAI,QAC3B+2B,EAAWhE,sBAAsBD,GACjCyD,EAAe9zB,IAAIs0B,GAAY,I,YAGXn1B,GACpB,MAAM,UAACkxB,EAAS,cAAEjxB,GAAiBD,EAC7Bm1B,EAA0Bl1B,EAC1B8d,EAAW3f,KAAK82B,YAAYC,GAClC,GAAIpX,EAAU,CACV,MAAM0W,EAAU,GAAAr2B,KAAI,QACdu2B,EAAiB,GAAAv2B,KAAI,QACrBg0B,EAAkC+C,EAAWnJ,cACnDyI,EAAQ5zB,IAAIs0B,EAAY/C,EAASjI,eAAepM,IAChD4W,EAAe9zB,IAAIs0B,GAAY,GAC/BA,EAAW/D,kBAAkBF,K,YAIblxB,GACpB,MAAM,cAACC,GAAiBD,EAClBm1B,EAA0Bl1B,EAC1By0B,EAAmB,GAAAt2B,KAAI,QACvBu2B,EAAiB,GAAAv2B,KAAI,QACrBw2B,EAAyB,GAAAx2B,KAAI,QAEnC,GADsBu2B,EAAen3B,IAAI23B,GACtB,CACf,IAAIx0B,EAAWi0B,EAAuBp3B,IAAI23B,GAC1B,MAAZx0B,IACAA,EAAW,GAAAvC,KAAI,WAAsB0G,KAAK1G,KAAM+2B,GAChDP,EAAuB/zB,IAAIs0B,EAAYx0B,GACvC0xB,sBAAsB1xB,IAE1B,MAAM00B,EAAkBX,EAAiBl3B,IAAI23B,GAAen1B,EAAMsxB,UAClEoD,EAAiB7zB,IAAIs0B,EAAYE,K,YAIpBR,GACjB,MAAMJ,EAAU,GAAAr2B,KAAI,QACds2B,EAAmB,GAAAt2B,KAAI,QACvBw2B,EAAyB,GAAAx2B,KAAI,QAC7BC,EAASo2B,EAAQj3B,IAAIq3B,GAC3B,GAAe,OAAXx2B,EAAiB,CACjB,MAAMgzB,EAAsB3iB,OAAOW,iBAAiBhR,GAC9Ci0B,EAAUl0B,KAAK62B,WAAWJ,GAC1BvD,EAAYoD,EAAiBl3B,IAAIq3B,GAEjCtC,EADS9rB,WAAW4qB,EAAoBU,iBAAiB,YACxB,OAAXO,GAAoB,EAAI,GAAKhB,EACzDlzB,KAAKk3B,UAAUT,EAAMtC,GACrBsC,EAAK1zB,cAAc,IAAIgM,MAAM,WAEjCunB,EAAiB7zB,IAAIg0B,EAAM,GAC3BD,EAAuB/zB,IAAIg0B,EAAM,O,mXCrJpB,IACrB9hB,GAAO,CACHnM,KAAM,YAFe,EAGvB,GAAC,cAAwCgL,GAGvC1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,QAAS,CAC9BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,cAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKpB,GACD,OAAOA,EAGX4C,gBAAgB5C,EAAmBoB,GAC/B,MAAM,WAAC6E,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACjC0d,aAAmB3U,aAAe2U,EAAQzN,UAAUiB,SAAS,YAC7DK,GAAcX,YAAY8M,EAAS1d,Q,kYC7B9B,IACrB4P,GAAO,CACHnM,KAAM,YAFe,EAGvB,GAAC,cAAwCgL,GAGvC1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,QAAS,CAC9BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,cAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKslB,GACD,OAAOA,I,kYCfQ,IACvBxiB,GAAO,CACHnM,KAAM,cAFiB,EAGzB,GAAC,cAA0CgL,GAGzC1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,aACPuiB,MAAO,SACPjpB,KAAM,eACN2D,UAAW,KAEjB,KAGN2B,OAAO1T,GAKH,MAAMs3B,E,uSAAsB,CAAAr3B,KAAI,QAAWqO,WAAU,GACrD,QAAahO,IAATN,EAAoB,CACpB,MAAM,GAACgV,EAAE,UAAEC,EAAS,SAAE9F,GAAYnP,OACvBM,IAAP0U,IACAsiB,EAAOtiB,GAAKA,QAEE1U,IAAd2U,GACAqiB,EAAOriB,UAAUG,OAAOH,QAEX3U,IAAb6O,IACAmoB,EAAOnoB,SAAWA,GAG1B,OAAOmoB,EAGXxlB,KAAKwlB,GACD,OAAOA,EAGXthB,UAAU1U,EAAmBzB,GACzB,MAAM,UAACoV,GAAa3T,EAChBzB,EACAoV,EAAUG,IAAI,UAGdH,EAAUvP,OAAO,UAIzBuQ,UAAU3U,GACN,MAAM,UAAC2T,GAAa3T,EACpB,OAAO2T,EAAUiB,SAAS,Y,yqBC7C9BqhB,GAAe,IACnB3iB,GAAO,CACHnM,KAAM,UAFY,EAGpB,GACF,cAAsCgL,GAGlC1T,cACIkD,Q,aAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,OAAQ,CAC7BuJ,WAAY,CACRsL,MAAO,SACP1G,KAAM,SACN2D,UAAW,GAEfrI,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,cAIrB,KAGNpB,OAAO3N,GAOH,MAAMisB,EAAsB,GAAA/xB,KAAI,QAAWqO,WAAU,GACrD,QAAmBhO,IAAfyF,EAA0B,CAC1B,MAAM,MAAC6L,EAAK,KAAEnJ,EAAI,MAAE5I,EAAK,SAAEqV,GAAYnP,EACvC,IAAI,SAAC6f,GAAY7f,EACjB6f,EAAWA,IAAY,OACNtlB,IAAbslB,GACA3lB,KAAKsV,YAAYyc,EAAQpM,QAEftlB,IAAVsR,GACA3R,KAAK0V,SAASqc,EAAQpgB,QAEbtR,IAATmI,GACAxI,KAAKsb,QAAQyW,EAAQvpB,QAEXnI,IAAVT,GACAI,KAAKub,SAASwW,EAAQnyB,QAETS,IAAb4U,GACAjV,KAAKoV,YAAY2c,EAAQ9c,GAGjC,OAAO8c,EAGX,yBACI,MAAO,CAAC,iBAGZzjB,yBAAyByjB,EAAqBvpB,EAAcpI,EAAkBE,GAC1E,OAAQkI,GACJ,IAAK,iBAC4B,IAAzBP,KAAKC,MAAM5H,IACXyxB,EAAOhvB,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,MAUnEwG,SAASuc,GACL,OAAO,GAAA/xB,KAAI,WAAO,KAAXA,KAAY+xB,GAAQtc,aAAe,GAG9CC,SAASqc,EAAqBnyB,GAC1B,GAAAI,KAAI,WAAO,KAAXA,KAAY+xB,GAAQtc,YAAc7V,EAGtC6c,SAASsV,GACL,OAAOA,EAAO/pB,aAAa,UAAY,GAG3CuT,SAASwW,EAAqBnyB,GAC1BmyB,EAAOlqB,aAAa,QAASjI,GAGjC8c,QAAQqV,GACJ,OAAOA,EAAO/pB,aAAa,SAAW,GAG1CsT,QAAQyW,EAAqBnyB,GACzBmyB,EAAOlqB,aAAa,OAAQjI,GAGhCyW,YAAY0b,GACR,OAAO9pB,KAAKC,MAAM6pB,EAAO/pB,aAAa,kBAAoBd,QAAO,IAGrEoO,YAAYyc,EAAqBnyB,GAC7BmyB,EAAOlqB,aAAa,gBAAiBX,OAAOtH,IAGhDwW,YAAY2b,GACR,OAAOA,EAAOnqB,aAAa,iBAG/BwN,YAAY2c,EAAqBnyB,GAC7BmyB,EAAOhoB,gBAAgB,gBAAiBnK,K,0CAzCrCmyB,GACH,OAAOA,EAAO9oB,cAA2B,oB,gqBCrE5B,IACrB0L,GAAO,CACHnM,KAAM,YAFc,EAGtB,GACF,cAAwCgL,GAKpC1T,cACIkD,Q,aALJ,oBACA,oBACA,oBAII,GAAAhD,KAAI,GAAWoJ,SAASwN,iBACpBxN,SAAUyN,WAAWC,aAAc,GAAA9W,KAAI,WAAmB0G,KAAK1G,OAClE,KACD,GAAAA,KAAI,GAAoB,IAAI+S,iBACxB,GAAA/S,KAAI,WAA0B0G,KAAK1G,OACtC,KACD,GAAAA,KAAI,GAAa,EAAQ,MAAO,CAC5BuJ,WAAY,CACRsL,MAAO,WACP1G,KAAM,WACN2D,SAAU,GAEdrI,SAAU,CACN,EAAQ,MAAO,CACXF,WAAY,CACRsL,MAAO,WAEXpL,SAAU,CACN,EAAQ,OAAQ,CACZF,WAAY,CACRsL,MAAO,cAKvB,EAAQ,MAAO,CACXtL,WAAY,CACRsL,MAAO,YAIrB,KAGNpB,OAAO3N,GAQH,MAAMyxB,EAAwB,GAAAv3B,KAAI,QAAWqO,WAAU,GAUvD,GATA,GAAArO,KAAI,QAAkBuG,QAAQgxB,EAAU,CACpCvxB,WAAW,EACXC,SAAS,IAEbsxB,EAASj1B,iBAAiB,WAAY,GAAAtC,KAAI,WAAsB0G,KAAK1G,OACrEu3B,EAASj1B,iBAAiB,UAAW,GAAAtC,KAAI,WAAqB0G,KAAK1G,OACnEu3B,EAASj1B,iBAAiB,QAAS,GAAAtC,KAAI,WAAmB0G,KAAK1G,OAC/Du3B,EAASj1B,iBAAiB,YAAa,GAAAtC,KAAI,WAAuB0G,KAAK1G,OACvEA,KAAKob,YAAYmc,GAAU,QACRl3B,IAAfyF,EAA0B,CAC1B,MAAM,GAACiP,EAAE,UAAEC,EAAS,SAAE9F,EAAQ,KAAE1G,EAAI,SAAEyM,EAAQ,gBAAE+E,GAAmBlU,OACxDzF,IAAP0U,IACAwiB,EAASxiB,GAAKA,QAEA1U,IAAd2U,GACAuiB,EAASviB,UAAUG,OAAOH,QAEb3U,IAAb6O,IACAqoB,EAASroB,SAAWA,QAEX7O,IAATmI,GACAxI,KAAKsb,QAAQic,EAAU/uB,QAEVnI,IAAb4U,GACAjV,KAAKoV,YAAYmiB,EAAUtiB,QAEP5U,IAApB2Z,GACAha,KAAKoX,mBAAmBmgB,EAAUvd,GAG1C,OAAOud,EAGX1lB,KAAK0lB,GACD,OAAO,GAAAv3B,KAAI,WAAK,KAATA,KAAUu3B,GAGrBlkB,gBAAgBkkB,EAAuB1lB,EAAmBrJ,GACtD,MAAM,WAACkO,GAAc7E,EACrBrK,MAAM2C,KAAKuM,GAAYtU,SAAQ,CAACqgB,EAAS1d,KACd+I,eAU/BjI,QAAQ0xB,GACJ,OAAO/vB,MAAM2C,KAAKotB,EAAS9gB,iBACvB,sDAIRqb,eAAeyF,GACX,OAAOA,EAAStuB,cACZ,yEAcRyT,QAAQ6a,GACJ,OAAOA,EAASvvB,aAAa,SAAW,GAG5CsT,QAAQic,EAAuB33B,GAC3B23B,EAAS1vB,aAAa,OAAQjI,GAGlCwW,YAAYmhB,GACR,OAAOA,EAAS3vB,aAAa,iBAGjCwN,YAAYmiB,EAAuB33B,GAC/B23B,EAASxtB,gBAAgB,gBAAiBnK,GAG9Cwb,YAAYmc,EAAuB33B,GAC/B23B,EAAS1vB,aAAa,gBAAiBX,OAAOtH,IAGlDgd,YAAY2a,GACR,OAAOtvB,KAAKC,MAAMqvB,EAASvvB,aAAa,kBAAoBd,QAAO,IAGvEkQ,mBAAmBmgB,EAAuB33B,GACtC23B,EAAS1vB,aAAa,uBAAwBX,OAAOtH,IAGzDyX,mBAAmBkgB,GACf,OAAOtvB,KAAKC,MAAMqvB,EAASvvB,aAAa,yBAA2Bd,QAAO,IAG9E4H,OAAOyoB,GAEH,IADiBv3B,KAAK4c,YAAY2a,GACnB,CACXv3B,KAAKob,YAAYmc,GAAU,GAC3B,GAAAv3B,KAAI,WAAa,KAAjBA,KAAkBu3B,GAClB,MAAMzF,EAAiB9xB,KAAK8xB,eAAeyF,GACvCzF,GACAA,EAAejY,MAAM,CAACU,eAAe,KAKjDpL,SAASooB,GACYv3B,KAAK4c,YAAY2a,KAE9Bv3B,KAAKob,YAAYmc,GAAU,GAC3BA,EAAS1d,SAIjBlL,OAAO4oB,EAAuB3oB,GAC1B,MAAMC,EAAW7O,KAAK4c,YAAY2a,GACnB3oB,IAAUC,EAChB7O,KAAK8O,OAAOyoB,GAAYv3B,KAAKmP,SAASooB,K,wEAjF9CA,GACD,OAAOA,EAAStuB,cAA2B,kB,YAe9BsuB,GACb,OAAOA,EAAStuB,cACZ,mE,YAIDsuB,GACH,OAAOA,EAAStuB,cAA2B,+B,YA6DtB+J,GACrBA,EAAc5Q,SAAS6Q,IACnB,MAAM,OAAChT,EAAM,KAAEwB,GAAQwR,EACjBukB,EAA+Bv3B,EAAQ4Q,QAAqB,aAClE,GAAI2mB,aAA0B1pB,YAC1B,OAAQrM,GACJ,IAAK,YAAa,CACd,MAAM,WAACg2B,GAAcxkB,EACfpK,EAAW,8BACjB,IAAK,IAAI/E,KAAQ2zB,EACb,GAAI3zB,aAAgBgK,YAAa,CAC7B,MAAMgkB,EAAiBhuB,EAAK8c,QAAQ/X,GAAY/E,EAC5CA,EAAKmF,cAA2BJ,GACpC,GAAIipB,EAAgB,CAChB,GAAA9xB,KAAI,WAAmB,KAAvBA,KAAwBw3B,EAAgB1F,GACxC,OAIZ,Y,YAOFhuB,GACd,GAAIA,aAAgBgK,YAAa,CAC7B,MAAM,UAACkH,GAAalR,EACpB,GAAIkR,EAAUiB,SAAS,YAAcqhB,GAAalhB,YAAYtS,KAAUA,EAAK8T,OACzE,OAAOf,WAAWgB,cAEjB,GAAI7C,EAAUiB,SAAS,eACxB,OAAOY,WAAWiB,YAG1B,OAAOjB,WAAWkB,e,YAGTwf,GACT,MAAM/Q,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc,GAAAhZ,KAAI,WAAK,KAATA,KAAUu3B,GACJ/Q,EAAOja,c,YAG1BgrB,GACR,MAAM/Q,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc,GAAAhZ,KAAI,WAAK,KAATA,KAAUu3B,GACJ/Q,EAAOvN,a,YAGtB8Y,GACZ,MAAMvL,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc+Y,EACMvL,EAAOtN,gB,YAG1B6Y,GACR,MAAMvL,EAAS,GAAAxmB,KAAI,QAEnB,OADAwmB,EAAOxN,YAAc+Y,EACMvL,EAAOrN,Y,YAGxBoe,EAAuBxF,GACjC,MAAMD,EAAiB9xB,KAAK8xB,eAAeyF,GACvCzF,GACAwF,GAAahiB,YAAYwc,GAAgB,GAEzCC,IAAWD,IACXwF,GAAahiB,YAAYyc,GAAQ,GACjC,GAAA/xB,KAAI,WAAmB,KAAvBA,KAAwBu3B,EAAUxF,GAClCwF,EAASx0B,cAAc,IAAIgM,MAAM,SAAU,CAACC,SAAS,O,YAI1CuoB,EAAuBxF,GACtC,GAAA/xB,KAAI,WAAO,KAAXA,KAAYu3B,GAAU9hB,YAAc6hB,GAAa9hB,SAASuc,I,YAGjDwF,GACT,MAAMvF,EAAMuF,EAAStuB,cAA2B,kBACzCoG,MAAO4iB,GAAgBD,GACxB,OAACviB,EAAM,KAAEE,GAAQ4nB,EAASxnB,yBAC1B,QAACM,EAAO,QAAED,GAAWE,OAC3B2hB,EAAa7tB,YAAY,MAAO,GAAGqL,EAASW,OAC5C6hB,EAAa7tB,YAAY,OAAQ,GAAGuL,EAAOU,Q,YAG7BzO,GACd,MAAM,cAACC,EAAa,OAAE5B,GAAU2B,EAC1B41B,EAA8B31B,EAGpC,GAFA7B,KAAK2O,OAAO6oB,GACKx3B,KAAK4c,YAAY4a,IAEPx3B,KAAK8xB,eAAe0F,IACxBx3B,KAAK6F,QAAQ2xB,GAAgB,KAAK3d,MAAM,CAACU,eAAe,QAE1E,CACD,MAAM2X,EAA6BjyB,EAAQ4Q,QAAqB,WAC5DqhB,GACA,GAAAlyB,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBtF,K,YAK1BtwB,GACjB,MAAM,cAACC,EAAa,cAAE8X,GAAiB/X,EACjC41B,EAA8B31B,GACX21B,EAAevhB,SAAe0D,IAEnD3Z,KAAKmP,SAASqoB,I,YAIF51B,GAChB,MAAM,cAACC,EAAa,IAAE9C,GAAO6C,EACvB41B,EAA8B31B,EAC9BgN,EAAW7O,KAAK4c,YAAY4a,GAC5BrF,EAAe,GAAAnyB,KAAI,WAAiB,KAArBA,KAAsBw3B,GACrC1F,EAAiB9xB,KAAK8xB,eAAe0F,GAC3C,OAAQz4B,GACJ,IAAK,UACD,GAAI8P,EAAU,CACV,MAAMujB,EAAiBD,EACnB,GAAAnyB,KAAI,WAAgB,KAApBA,KAAqBmyB,GACrB,GAAAnyB,KAAI,WAAa,KAAjBA,KAAkBw3B,GAClBpF,GACAA,EAAevY,MAAM,CAACU,eAAe,QAGxC,CACD,MAAM6X,EAAiBN,EACnB,GAAA9xB,KAAI,WAAgB,KAApBA,KAAqB8xB,GACrB,GAAA9xB,KAAI,WAAa,KAAjBA,KAAkBw3B,GAClBpF,GACA,GAAApyB,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBpF,GAG3CxwB,EAAM6Y,kBACN,MAEJ,IAAK,YACD,GAAI5L,EAAU,CACV,MAAMwjB,EAAaF,EACf,GAAAnyB,KAAI,WAAY,KAAhBA,KAAiBmyB,GACjB,GAAAnyB,KAAI,WAAY,KAAhBA,KAAiBw3B,GACjBnF,GACAA,EAAWxY,MAAM,CAACU,eAAe,QAGpC,CACD,MAAM8X,EAAaP,EACf,GAAA9xB,KAAI,WAAY,KAAhBA,KAAiB8xB,GACjB,GAAA9xB,KAAI,WAAY,KAAhBA,KAAiBw3B,GACjBnF,GACA,GAAAryB,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBnF,GAG3CzwB,EAAM6Y,kBACN,MAEJ,IAAK,OAAQ,CACT,MAAM6X,EAAc,GAAAtyB,KAAI,WAAa,KAAjBA,KAAkBw3B,GAClClF,IACIzjB,EACAyjB,EAAYzY,MAAM,CAACU,eAAe,IAGlC,GAAAva,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBlF,IAG3C1wB,EAAM6Y,kBACN,MAEJ,IAAK,MAAO,CACR,MAAM8X,EAAa,GAAAvyB,KAAI,WAAY,KAAhBA,KAAiBw3B,GAChCjF,IACI1jB,EACA0jB,EAAW1Y,MAAM,CAACU,eAAe,IAGjC,GAAAva,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBjF,IAG3C3wB,EAAM6Y,kBACN,MAEJ,IAAK,QACG5L,GACA7O,KAAKmP,SAASqoB,GACVrF,GACA,GAAAnyB,KAAI,WAAc,KAAlBA,KAAmBw3B,EAAgBrF,KAIvCnyB,KAAK8O,OAAO0oB,GACZ1F,GAAgBjY,MAAM,CAACU,eAAe,KAE1C3Y,EAAM6Y,kBACN,MAEJ,IAAK,SACG5L,GACA7O,KAAKmP,SAASqoB,GAElB51B,EAAM6Y,kBACN,MAEJ,QAAS,CACL,MAAOrZ,OAAQoxB,GAAazzB,EAC5B,GAAiB,GAAbyzB,EAAgB,CAChB,MAAMC,EAAU1zB,EAAI2zB,WAAW,GACzB7sB,EAAU7F,KAAK6F,QAAQ2xB,GACvBhP,EAAc2J,EAAetsB,EAAQnB,QAAQytB,IAAiB,EAC9DQ,EAAiB9sB,EAAQsX,MAC3B,CAACyV,EAAU7tB,IAAMuyB,GAAa9hB,SAASod,GAAU5rB,cAAc0rB,WAAW,IAAMD,GAAW1tB,EAAIyjB,KAC9F3iB,EAAQsX,MACRyV,GAAa0E,GAAa9hB,SAASod,GAAU5rB,cAAc0rB,WAAW,IAAMD,IAE7EE,GACAA,EAAe9Y,MAAM,CAACU,eAAe,IAEzC3Y,EAAM6Y,kBAEV,S,YAKU7Y,GAClB,MAAM,OAAC3B,GAAU2B,EACXib,EAAuB5c,EAAQ4Q,QAAqB,WACtDgM,GACAA,EAAWhD,MAAM,CAACU,eAAe,K,+WCgatCqO,eAAe8O,M1DzxBf9O,iBACH,MAAM+O,EAAW,IAAI7W,GACrB6W,EAASjY,WAAY,EACrBiY,EAAStlB,SACL,IAAIyK,GAAU,CACVE,QAAS,CACL,IAAIiB,GAAgB,CAChBzV,KAAM,OACN/G,KAAMyF,OACNyK,MAAO,OACPkM,QAAUtH,GAAQA,EAAI/N,OAE1B,IAAIyV,GAAgB,CAChBzV,KAAM,MACN/G,KAAM2G,OACNuJ,MAAO,MACPkM,QAAUtH,GAAQA,EAAI6H,IACtBF,QAAS,CAAC,CACN1V,KAAM,SACNtC,OAASqQ,GAAQA,EAAI6H,IAAM,IAC7B,CACE5V,KAAM,SACNtC,OAASqQ,GAAQA,EAAI6H,KAAO,OAGpC,IAAIH,GAAgB,CAChBzV,KAAM,YACN/G,KAAMyF,OACNyK,MAAO,aACPkM,QAAUtH,IAAQ,IAAIqhB,MAAOC,cAAgBthB,EAAI6H,OAGzDpH,KAAM,CACF,IAAImH,GAAa,CACbpJ,GAAI,EACJvM,KAAM,QACN4V,IAAK,KAET,IAAID,GAAa,CACbpJ,GAAI,EACJvM,KAAM,eACN4V,IAAK,KAET,IAAID,GAAa,CACbpJ,GAAI,EACJvM,KAAM,UACN4V,IAAK,KAET,IAAID,GAAa,CACbpJ,GAAI,EACJvM,KAAM,aACN4V,IAAK,UAKrBhV,SAASqH,KAAKpL,OAAOsyB,GAErB,MAAMG,EAAY,IAAI/W,GAAU,CAC5B7f,MAAO,CACH,IAAImmB,GAAgB,CAChB1V,MAAO,OACPlQ,KAAM,SACNP,MAAO,CACH,IAAImmB,GAAgB,CAChB1V,MAAO,QACPlQ,KAAM,SACNP,MAAO,CACH,IAAImmB,GAAgB,CAChB5lB,KAAM,OACNkQ,MAAO,cAInB,IAAI0V,GAAgB,CAChB5lB,KAAM,SACNkQ,MAAO,aAInB,IAAI0V,GAAgB,CAChB1V,MAAO,OACPlQ,KAAM,SACNP,MAAO,CACH,IAAImmB,GAAgB,CAChB1V,MAAO,QACPlQ,KAAM,SACNP,MAAO,CACH,IAAImmB,GAAgB,CAChB5lB,KAAM,OACNkQ,MAAO,cAInB,IAAI0V,GAAgB,CAChB5lB,KAAM,SACNkQ,MAAO,aAInB,IAAI0V,GAAgB,CAChB5lB,KAAM,OACNkQ,MAAO,SAEX,IAAI0V,GAAgB,CAChB5lB,KAAM,OACNkQ,MAAO,UAGfqP,aAAc,CAACG,EAAuBC,KAClC,MAAOzP,MAAOomB,GAAU5W,GACjBxP,MAAOqmB,GAAU5W,EACxB,OAAO4W,EAAOja,cAAcga,MAG9BE,EAAW,IAAIpS,GAASiS,GAC9BG,EAAStV,oBACJthB,GACU6H,KACA,CACCyB,EACItJ,EACA,EAAQ,OAAQ,CACZkI,WAAY,CACRsL,MAAO,WAGf,CAAC,UACD,CAAClD,EAAOlO,EAAUrD,EAAUE,KACxBqR,EAAM8D,YAAcnV,MAG7BgL,OACe,UAAbjK,EAAKI,KAAoB,CACtBkJ,EACItJ,EACA,EAAQ,OAAQ,CACZkI,WAAY,CACRsL,MAAO,WAGf,CAAC,eACD,CAACqjB,EAAOz0B,EAAUrD,EAAUE,KACxB43B,EAAMziB,YAAc,IAAInV,SAGhC,IACNgL,OAAO,CACLX,EACItJ,EACA,EAAQ,YAAa,CACjBoI,SAAU,CACN,EAAQ,gBAAiB,CACrBF,WAAY,CACRf,KAAM,aACN/G,KAAM,WACNkQ,MAAO,cAEXjI,UAAW,CACPkR,MAAO,KACHvZ,EAAKkmB,WACDlmB,EAAK6lB,OACL7lB,EAAK4lB,cAM7B,CAAC,eACD,CAACZ,EAAS5iB,EAAUrD,EAAUE,KAC1B,OAAQmD,GACJ,IAAK,aAAc,CACf,MAAM00B,EAAiB/R,GAAcvU,KAAKwU,IACpCpd,cAAuC,kCAC7C,GAAIkvB,EAAgB,CAChB,MAAMxmB,EAAQrR,EAAW,OAAS,OAClC63B,EAAexmB,MAAQA,EACvBwmB,EAAepmB,MAAQJ,EACvBwmB,EAAepS,QAAUzlB,WAU7D23B,EAASrV,wBAAmE,CACvEC,EAA6BC,IACnB5Z,EACH,EAAQ,kBAAmB,CACvBO,SAAU,CACN,EAAQ,aAAc,CAClBF,WAAY,CACRoI,MAAO,WAEXlI,SAAU,UACVC,UAAW,CACPkR,MAAO,KACe,IAAIoM,GAAelE,GAC3BqE,cAItB,EAAQ,aAAc,CAClB5d,WAAY,CACRoI,MAAO,UAEXlI,SAAU,SACVC,UAAW,CACPkR,MAAO,KACH,MAAMmI,EAAY,IAAIiE,GAAelE,IAC/B,MAACE,GAASD,EACCE,QAAQ,UAAUD,aAE/BD,EAAUtd,SAEdwyB,EAAS/U,cAAcrJ,eAM3C,EAAQ,kBAAmB,CACvBpQ,SAAU,CACN,EAAQ,aAAc,CAClBF,WAAY,CACR9H,KAAM,WACNkQ,MAAOkR,EAAW0E,WAAa,OAAS,QAE5C9d,SAAUoZ,EAAW0E,WAAa,OAAS,OAC3C7d,UAAW,CACPkR,MAAO,KACH,MAAMmI,EAAY,IAAIiE,GAAelE,GACrCD,EAAW0E,WACPxE,EAAUmE,OACVnE,EAAUkE,eAS9CgR,EAASzlB,UACTpJ,SAASqH,KAAKpL,OAAO4yB,GAErB7uB,SAASqH,KAAKpL,OACV,EAAQ,YAAa,CACjBoE,SAAU,EAAQ,aAAc,CAC5BF,WAAY,CACR9H,KAAM,OACNkQ,MAAO,UAEXlI,SAAU,CACN,SACA,EAAQ,SAAU,CACdF,WAAY,CACRsI,KAAM,QAEVpI,SAAU,CACN,EAAQ,aAAc,CAClBF,WAAY,CACR9H,KAAM,YAEVgI,SAAU,QAEd,EAAQ,aAAc,CAClBF,WAAY,CACR9H,KAAM,WAEVgI,SAAU,CACN,YACA,EAAQ,SAAU,CACdF,WAAY,CACRsI,KAAM,QAEVpI,SAAU,CAON,IAAIgI,GAAU,CACVE,MAAO,sBAanD,MAAMymB,EAAWhlB,GAAO,UAAW,CAC/BoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPnJ,KAAM,aACN/G,KAAM,OACNwT,UAAU,GAEdT,QAAS,CACLpB,GAAO,OAAQ,CACXoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPnJ,KAAM,aACN/G,KAAM,oBAO9B2R,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPnJ,KAAM,aACN/G,KAAM,QAEV+S,QAAS,CACLpB,GAAO,OAAQ,CACXoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPnJ,KAAM,aACN/G,KAAM,oBAO9B2R,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPnJ,KAAM,aACN/G,KAAM,QAEV+S,QAAS,CACLpB,GAAO,OAAQ,CACXoB,QAAS,CACLpB,GAAO,gBAAiB,CACpBoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPlQ,KAAM,WACNwZ,YAAa,SACbhG,UAAU,EACV3D,SAAS,KAGjB8B,GAAO,WAAY,CACftN,WAAY,CACRrE,KAAM,SACNkQ,MAAO,aACPsJ,YAAa,eAK7B7H,GAAO,aACPA,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,UACPlQ,KAAM,WAEV+S,QAAS,CACLpB,GAAO,OAAQ,CACXoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPlQ,KAAM,QACN+G,KAAM,QACN5I,MAAO,OAGfwT,GAAO,WAAY,CACftN,WAAY,CACRrE,KAAM,QACNkQ,MAAO,aACPnJ,KAAM,QACN5I,MAAO,OAGfwT,GAAO,WAAY,CACftN,WAAY,CACRrE,KAAM,QACNkQ,MAAO,aACPnJ,KAAM,QACN5I,MAAO,sBAavDwJ,SAASqH,KAAKpL,OAAO+yB,GAErBhvB,SAASqH,KAAKpL,OACV+N,GAAO,WAAY,CACfoB,QAAS,CACLpB,GAAO,SAAW,CACdtN,WAAY,CACR6L,MAAO,kBAGfyB,GAAO,SAAW,CACdtN,WAAY,CACR6L,MAAO,mBAGfyB,GAAO,SAAW,CACdtN,WAAY,CACR6L,MAAO,eACPgU,UAAU,SAO9Bvc,SAASqH,KAAKpL,OACV+N,GAAO,UAAW,CACdoB,QAAS,CACLpB,GAAO,cAAgB,CACnBtN,WAAY,CACRrE,KAAM,cAEV+S,QAAS,CACL,MACApB,GAAO,OAAQ,CACXoB,QAAS,CACLpB,GAAO,WAAY,CACftN,WAAY,CACR6L,MAAO,aACPlQ,KAAM,QACN+G,KAAM,QACN5I,MAAO,OAGfwT,GAAO,WAAY,CACftN,WAAY,CACRrE,KAAM,QACNkQ,MAAO,aACPnJ,KAAM,QACN5I,MAAO,OAGfwT,GAAO,WAAY,CACftN,WAAY,CACRrE,KAAM,QACNkQ,MAAO,aACPnJ,KAAM,QACN5I,MAAO,iB0DkU3Cy4B,GCp1BoB,IACxB1jB,GAAO,CACHnM,KAAM,eAFkB,EAG1B,GAAC,cAA2CgL,GAG1C1T,cACIkD,QAHJ,oBAII,GAAAhD,KAAI,GAAa,EAAQ,KAAM,CAC3BuJ,WAAY,CACRsL,MAAO,cACP1G,KAAM,WAEZ,KAGNsF,SACI,O,uSAAoB,CAAAzT,KAAI,QAAWqO,WAAU,GAGjDwD,KAAKyQ,GACD,OAAOA,I","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(items: Model): number;\r\n    index(items: Model, fromIndex: number): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model, fromIndex?: number): number {\r\n        return this.#items.indexOf(item, fromIndex)\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetMenuItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetMenuItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { gridWidget } from \"./widgets/grid/GridWidget\";\r\nimport { menuWidget } from \"./widgets/menu/MenuWidget\";\r\nimport { menuItemWidget } from \"./widgets/menu/MenuItemWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLElement {\r\n        return this.getGridElement()!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getGridElement(): HTMLEGridElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid`);\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridWidget.clearSelection(gridElement);\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                widget(\"widthsash\", {\r\n                                    properties: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                console.log(column);\r\n                                console.log(columnHeaderElement);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    console.log(maxWidth);\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = <HTMLElement>target;\r\n                                        if (targetItem.classList.contains(\"menuitem\")) {\r\n                                            model.sortByColumn(column, Number(menuItemWidget.getValue(targetItem)));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLElement>currentTarget;\r\n                                                const checked = menuItemWidget.getChecked(targetItem);\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { treeItemWidget } from \"./widgets/tree/TreeItemWidget\";\r\nimport { treeWidget } from \"./widgets/tree/TreeWidget\";\r\nimport { widget } from \"./widgets/Widget\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items, sortFunction} = init ?? {};\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.label.localeCompare(item_b.label);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(this: TreeModel | TreeItemModel): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...TreeModel.prototype.flattenItems.call(treeItem_i))\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) == \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength == uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly label: string;\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.label}`;\r\n        }\r\n        return this.label;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {label, type, items} = init;\r\n        const childItems = new ModelList(items ?? []);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.label = label;\r\n        this.type = type;\r\n    }\r\n    \r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    treeElement(): HTMLElement;\r\n    treeItemElement(item: TreeItemModel): HTMLElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    treeElement(): HTMLETreeElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                //focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                //focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLETreeElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = tree.selectedItems();\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): Element {\r\n        const treeItemElement = /*widget(\"treeitem\", {\r\n            properties: {\r\n                type: item.type,\r\n                draggable: true\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            slotted: {\r\n                content: this.itemContentDelegate(item),\r\n                group:\r\n                    <Node[]>((item.type == \"parent\") ? [\r\n                    widget(\"treeitemgroup\", {\r\n                        slotted: reactiveChildElements(item.childItems,\r\n                            item => this.#renderTreeItem(item, model)\r\n                        )\r\n                    })\r\n                ] : [])\r\n            }\r\n        });*/\r\n        element(\"e-treeitem\", {\r\n            attributes: {\r\n                type: item.type,\r\n                draggable: String(true),\r\n                tabindex: -1\r\n            },\r\n            dataset: {\r\n                uri: item.uri\r\n            },\r\n            children: [\r\n                this.itemContentDelegate(item),\r\n                ].concat(\r\n                    (item.type == \"parent\") ? [\r\n                        element(\"e-treeitemgroup\", {\r\n                            attributes: {\r\n                                slot: \"group\"\r\n                            },\r\n                            children: reactiveChildElements(item.childItems,\r\n                                item => this.#renderTreeItem(item, model)\r\n                            )\r\n                        })\r\n                    ] : []\r\n                )\r\n        });\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            //const selectedElements = treeWidget.selectedItems(targetTree);\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map((element_i) =>\r\n                        element_i.dataset.uri!\r\n                    )\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} = targetType == \"parent\" ?\r\n                        targetItemModel :\r\n                        targetParentItem ?\r\n                        targetParentItem :\r\n                        model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.label == item_i.label);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.label}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(/*treeItemWidget.getPosInSet(targetItem)*/targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    \r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    //treeWidget.beginSelection(targetTree);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach((element_i) => {\r\n                        /*treeItemWidget.setSelected(element_i, true);*/\r\n                        element_i.selected = true;\r\n                    });\r\n                    targetTree.endSelection();\r\n                    //treeWidget.endSelection(targetTree);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        // const targetTree = <HTMLElement>currentTarget;\r\n        // const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const activeItem = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true,\r\n                    tabindex: -1\r\n                },\r\n                children: this.itemContextMenuDelegate(activeItem, this.selectedItems(targetTree)),\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    /*#handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement instanceof HTMLETreeItemElement) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetElement = <HTMLElement>target;\r\n        if (targetElement instanceof HTMLETreeItemElement) {\r\n            const targetItem = targetElement;\r\n            const toolbar = targetItem.querySelector<HTMLElement>(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = -1;\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.label}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {label: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.label);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                label: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                label: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        label: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                label: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        label: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                label: \"TI 3\"\r\n            })\r\n        ],\r\n        sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {label: aLabel} = item_a;\r\n            const {label: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }\r\n    });\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"label\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = newValue;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"e-toolbar\", {\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbarWidget.slot(toolbar)\r\n                                        ?.querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        visibilityItem.label = label;\r\n                                        visibilityItem.title = label;\r\n                                        visibilityItem.pressed = newValue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Display\"\r\n                            },\r\n                            children: \"Display\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            children: \"Delete\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    treeView.treeElement().focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    #wasExpandedOnMouseDown?: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.pressed = !this.pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = menubutton.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = select.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    /*#handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*#handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(null);\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETreeElement } from \"./Tree\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = (() => {\r\n                let level = -1;\r\n                let closestItem: HTMLETreeItemElement | null = item_i;\r\n                while (closestItem !== null && closestItem.matches(\"e-tree :scope\")) {\r\n                    closestItem = closestItem.parentElement?.closest(\"e-treeitem\") ?? null;\r\n                    level++;\r\n                }\r\n                return level;\r\n            })();\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            this.#setActiveItem(target);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLETreeItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLETreeItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n            item_i.level = 0;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n            this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        this.#value().textContent = option.label;\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        this.toggle();\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            const {selectedOption} = this;\r\n            (selectedOption ?? this.options[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand();\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetOption = <HTMLEOptionElement>target;\r\n        if (targetOption.selected) {\r\n            const {options} = this;\r\n            options.forEach((option_i) => {\r\n                if (option_i !== targetOption && option_i.selected) {\r\n                    option_i.selected = false;\r\n                }\r\n            });\r\n            this.#setSelectedOption(targetOption);\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","fromIndex","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","toggle","force","expanded","expand","Event","bubbles","connectedCallback","tabIndex","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","checked","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","Error","widgets","slotted","NodeList","Node","Widget","gridCellWidget","class","cell","id","classList","disabled","headers","add","setDisabled","setHeaders","setSelected","getHeaders","getLabel","textContent","setLabel","setPosInSet","getPosInSet","posInSet","parseInt","setActive","getActive","contains","setDropTarget","getDropTarget","getDisabled","getSelected","gridRowWidget","row","cells","querySelectorAll","childNodes","gridWidget","createTreeWalker","NodeFilter","SHOW_ELEMENT","grid","rows","selectby","multisectable","setSelectBy","setMultiSelectable","getMultiSelectable","getSelectBy","beginSelection","endSelection","clearSelection","selectedCells","selectedRows","hidden","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","to","position","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","nextCell","DOCUMENT_POSITION_PRECEDING","previousCell","nextRow","previousRow","selectedCell_i","cell_i","selectedRow_i","row_i","activeCell","activeRow","cellsWalker","currentNode","lastChild","previousNode","nextNode","rowsWalker","closestRow","closestRowCells","cellIndex","previousRowCells","min","nextRowCells","relatedTarget","targetGrid","focus","targetCell","targetRow","multiselectable","ctrlKey","firstRow","firstCell","lastRow","lastCell","preventDefault","preventScroll","shiftKey","stopPropagation","topCell","bottomCell","click","targetList","menuItemWidget","hasIcon","hasArrow","keyshortcut","setKeyShortcut","setChecked","setExpanded","setType","setName","setValue","hasChildMenu","some","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","labelPart","after","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getExpanded","targetItem","GridModel","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","age","GridViewBase","getGridElement","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","rel","href","input","contextmenu","setSearchFilter","gridElement","rowElement","addDisplayFilter","displayFilters","removeDisplayFilter","filterIndex","searchFilter","filter_i","resizable","controls","toString","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","console","log","maxWidth","reduce","max","removeProperty","positionContextual","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","TreeViewBase","itemContentDelegate","itemContextMenuDelegate","activeItem","selectedItems","itemsList","count","confirm","treeElement","treeItemElement","dragstart","drop","keydown","tree","draggable","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","parentItem","targetParentItem","sameLabelIndex","item_j","copyWithin","posinset","newElements","selected","close","TreeView","toolbarItemWidget","pressed","setPressed","getTitle","setTitle","getPressed","toolbarWidget","toolbar","setOrientation","getOrientation","walker","previousSibling","nextSibling","radio_i","targetToolbar","previousItem","firstItem","nextItem","MyTreeItemList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","activeIndex","x","y","root","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","error","nearestItem","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","HTMLEGridCellCollection","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","toIndex","nextVisibleRow","previousVisibleRow","active","lastSelectedCell","lastSelectedRow","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","select","selectValue","menubutton","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemElement","level","closestItem","parentElement","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","selectedOption","option","box","optionsStyle","targetOption","activeOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","option_i","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setDraggable","e","getDraggable","setLevel","getLevel","listItemWidget","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","head","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","aLabel","bLabel","treeView","badge","visibilityItem","menuView","TreeMain"],"sourceRoot":""}