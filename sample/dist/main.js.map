{"version":3,"file":"main.js","mappings":"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","sources":["webpack://main/webpack/bootstrap","webpack://main/webpack/runtime/define property getters","webpack://main/webpack/runtime/hasOwnProperty shorthand","webpack://main/webpack/runtime/make namespace object","webpack://main/./src/models/Model.ts","webpack://main/./src/elements/Snippets.ts","webpack://main/./src/elements/Element.ts","webpack://main/./src/elements/containers/menus/MenuItem.ts","webpack://main/./src/views/View.ts","webpack://main/./src/views/GridView.ts","webpack://main/./src/views/TreeView.ts","webpack://main/./src/views/widgets/Widget.ts","webpack://main/./TreeMain.ts","webpack://main/./src/Input.ts","webpack://main/./src/elements/containers/actions/Action.ts","webpack://main/./src/elements/containers/grid/GridCell.ts","webpack://main/./src/elements/containers/grid/GridRowGroup.ts","webpack://main/./src/elements/containers/menus/MenuItemGroup.ts","webpack://main/./src/elements/containers/menus/Menu.ts","webpack://main/./src/elements/containers/grid/GridRow.ts","webpack://main/./src/elements/containers/grid/GridCellCollection.ts","webpack://main/./src/elements/containers/grid/GridRowCollection.ts","webpack://main/./src/elements/containers/grid/GridBody.ts","webpack://main/./src/elements/containers/grid/Grid.ts","webpack://main/./src/elements/containers/grid/GridHead.ts","webpack://main/./src/elements/containers/menus/MenuBar.ts","webpack://main/./src/elements/containers/menus/MenuButton.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItem.ts","webpack://main/./src/elements/containers/toolbars/ToolBarItemGroup.ts","webpack://main/./src/elements/containers/toolbars/ToolBar.ts","webpack://main/./src/elements/containers/tabs/TabPanel.ts","webpack://main/./src/elements/containers/tabs/Tab.ts","webpack://main/./src/elements/containers/tabs/TabList.ts","webpack://main/./src/elements/containers/trees/TreeItemGroup.ts","webpack://main/./src/elements/containers/trees/TreeItem.ts","webpack://main/./src/elements/containers/trees/Tree.ts","webpack://main/./src/elements/containers/lists/ListItem.ts","webpack://main/./src/elements/containers/lists/ListItemGroup.ts","webpack://main/./src/elements/containers/lists/List.ts","webpack://main/./src/elements/controls/draggable/Draggable.ts","webpack://main/./src/elements/controls/draggable/Dragzone.ts","webpack://main/./src/elements/controls/draggable/Dropzone.ts","webpack://main/./src/elements/controls/dialogs/Dialog.ts","webpack://main/./src/elements/controls/forms/Option.ts","webpack://main/./src/elements/controls/forms/OptionGroup.ts","webpack://main/./src/elements/controls/forms/Select.ts","webpack://main/./src/elements/utils/Separator.ts","webpack://main/./src/elements/utils/Handle.ts","webpack://main/./src/elements/utils/HeightSash.ts","webpack://main/./src/elements/utils/Import.ts","webpack://main/./src/elements/utils/Loader.ts","webpack://main/./src/elements/utils/WidthSash.ts","webpack://main/./src/observers/AttributeMixinsObserver.ts","webpack://main/./src/views/widgets/SeparatorWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemWidget.ts","webpack://main/./src/views/widgets/menu/MenuBarWidget.ts","webpack://main/./src/views/widgets/menu/MenuWidget.ts","webpack://main/./src/views/widgets/menu/MenuItemGroupWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemWidget.ts","webpack://main/./src/views/widgets/tree/TreeWidget.ts","webpack://main/./src/views/widgets/tree/TreeItemGroupWidget.ts","webpack://main/./src/views/widgets/list/ListItemWidget.ts","webpack://main/./src/views/widgets/list/ListWidget.ts","webpack://main/./src/views/widgets/list/ListItemGroupWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarWidget.ts","webpack://main/./src/views/widgets/toolbar/ToolBarItemGroupWidget.ts","webpack://main/./src/views/widgets/WidthSashWidget.ts","webpack://main/./src/views/widgets/HeightSashWidget.ts","webpack://main/./src/views/widgets/grid/GridCellWidget.ts","webpack://main/./src/views/widgets/grid/GridRowWidget.ts","webpack://main/./src/views/widgets/grid/GridWidget.ts","webpack://main/./src/views/widgets/grid/GridBodyWidget.ts","webpack://main/./src/views/widgets/grid/GridHeadWidget.ts","webpack://main/./src/views/widgets/grid/GridHeaderWidget.ts","webpack://main/./src/views/widgets/combobox/OptionWidget.ts","webpack://main/./src/views/widgets/combobox/ComboBoxWidget.ts","webpack://main/./main.ts","webpack://main/./src/views/widgets/combobox/OptionGroupWidget.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export { ModelChangeRecord };\r\nexport { ModelEvent };\r\nexport { ModelNode };\r\nexport { ModelObject };\r\nexport { ModelProperty };\r\nexport { ModelList };\r\nexport { ModelChangeObserverOptions };\r\nexport { ModelChangeObserver };\r\n\r\ninterface ModelChangeRecordConstructor {\r\n    prototype: ModelChangeRecord;\r\n    new(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ): ModelChangeRecord;\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\ninterface ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly changeType: number;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n    readonly PROPERTY_CHANGE: number;\r\n    readonly LIST_REMOVE: number;\r\n    readonly LIST_INSERT: number;\r\n    readonly LIST_SORT: number;\r\n}\r\n\r\nclass ModelChangeRecordBase implements ModelChangeRecord {\r\n    readonly target: ModelNode | ModelList;\r\n    readonly changeType: number;\r\n    readonly propertyName: string | null;\r\n    readonly oldValue: any;\r\n    readonly newValue: any;\r\n    readonly removedIndex: number;\r\n    readonly removedItems: ModelNodesList;\r\n    readonly insertedIndex: number;\r\n    readonly insertedItems: ModelNodesList;\r\n    readonly sortedIndices: number[];\r\n\r\n    constructor(\r\n        init: {\r\n            target: ModelNode | ModelList;\r\n            changeType: number;\r\n            propertyName?: string;\r\n            oldValue?: any;\r\n            newValue?: any;\r\n            removedIndex?: number,\r\n            removedItems?: ModelNode[],\r\n            insertedIndex?: number,\r\n            insertedItems?: ModelNode[],\r\n            sortedIndices?: number[]\r\n        }\r\n    ) {\r\n        this.target = init.target;\r\n        this.changeType = init.changeType;\r\n        this.propertyName = init.propertyName ?? null;\r\n        this.oldValue = init.oldValue ?? undefined;\r\n        this.newValue = init.newValue ?? undefined;\r\n        this.removedIndex = init.removedIndex ?? 0;\r\n        this.removedItems = new ModelNodesList(init.removedItems ?? []);\r\n        this.insertedIndex = init.insertedIndex ?? 0;\r\n        this.insertedItems = new ModelNodesList(init.insertedItems ?? []);\r\n        this.sortedIndices = init.sortedIndices ?? [];\r\n    }\r\n\r\n    static get PROPERTY_CHANGE(): number {\r\n        return 1;\r\n    }\r\n\r\n    static get LIST_REMOVE(): number {\r\n        return 2;\r\n    }\r\n\r\n    static get LIST_INSERT(): number {\r\n        return 3;\r\n    }\r\n\r\n    static get LIST_SORT(): number {\r\n        return 4;\r\n    }\r\n\r\n    get PROPERTY_CHANGE(): number {\r\n        return ModelChangeRecordBase.PROPERTY_CHANGE;\r\n    }\r\n\r\n    get LIST_REMOVE(): number {\r\n        return ModelChangeRecordBase.LIST_REMOVE;\r\n    }\r\n\r\n    get LIST_INSERT(): number {\r\n        return ModelChangeRecordBase.LIST_INSERT;\r\n    }\r\n\r\n    get LIST_SORT(): number {\r\n        return ModelChangeRecordBase.LIST_SORT;\r\n    }\r\n}\r\n\r\nvar ModelChangeRecord: ModelChangeRecordConstructor = ModelChangeRecordBase;\r\n\r\ninterface ModelNodesListConstructor {\r\n    prototype: ModelNodesList;\r\n    new(items: any[]): ModelNodesList;\r\n}\r\n\r\ninterface ModelNodesList {\r\n    get length(): number;\r\n    item(index: number): ModelNode | null;\r\n    values(): IterableIterator<ModelNode>;\r\n}\r\n\r\nclass ModelNodesListBase implements ModelNodesList {\r\n    #items: ModelNode[];\r\n\r\n    constructor(items: ModelNode[]) {\r\n        this.#items = items.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    item(index: number): ModelNode | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    values(): IterableIterator<ModelNode> {\r\n        return this.#items.values();\r\n    }\r\n}\r\n\r\nvar ModelNodesList: ModelNodesListConstructor = ModelNodesListBase;\r\n\r\ninterface ModelEventConstructor {\r\n    prototype: ModelEvent;\r\n    new(type: string): ModelEvent;\r\n}\r\n\r\ninterface ModelEvent {\r\n    readonly type: string;\r\n    readonly currentTarget: ModelEventTarget | null;\r\n    readonly target: ModelEventTarget | null;\r\n}\r\n\r\nclass ModelEventBase implements ModelEvent {\r\n    readonly type: string;\r\n\r\n    #currentTarget: ModelEventTarget | null;\r\n    #target: ModelEventTarget | null;\r\n\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.#currentTarget = null;\r\n        this.#target = null;\r\n    }\r\n\r\n    get currentTarget(): ModelEventTarget | null {\r\n        return this.#currentTarget;\r\n    }\r\n\r\n    get target(): ModelEventTarget | null {\r\n        return this.#target;\r\n    }\r\n\r\n    static ModelEventTargetAccessor? = new class ModelEventTargetAccessor {\r\n        setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#currentTarget = currentTarget;\r\n            }\r\n        }\r\n\r\n        setTarget(event: ModelEvent, target: ModelEventTarget): void {\r\n            if (event instanceof ModelEventBase) {\r\n                event.#target = target;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ModelEventTargetAccessor {\r\n    setCurrentTarget(event: ModelEvent, currentTarget: ModelEventTarget): void;\r\n    setTarget(event: ModelEvent, target: ModelEventTarget): void;\r\n}\r\n\r\nvar ModelEventTargetAccessor: ModelEventTargetAccessor = ModelEventBase.ModelEventTargetAccessor!;\r\ndelete ModelEventBase.ModelEventTargetAccessor;\r\n\r\nvar ModelEvent: ModelEventConstructor = ModelEventBase;\r\n\r\ninterface ModelEventTargetConstructor {\r\n    prototype: ModelEventTarget;\r\n    new(): ModelEventTarget;\r\n}\r\n\r\ninterface ModelEventTarget {\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void;\r\n    dispatchEvent(event: ModelEvent): void;\r\n    receiveEvent(event: ModelEvent): void;\r\n}\r\n\r\nclass ModelEventTargetBase implements ModelEventTarget {\r\n    #callbacks: Map<string, ((event: ModelEvent) => void)[]>;\r\n\r\n    constructor() {\r\n        this.#callbacks = new Map();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        const {type} = event;\r\n        const callbacks = this.#callbacks.get(type);\r\n        ModelEventTargetAccessor.setCurrentTarget(event, this);\r\n        if (callbacks) {\r\n            callbacks.forEach((callback_i) => {\r\n                callback_i(event);\r\n            });\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        }\r\n        else {\r\n            this.#callbacks.set(type, [callback]);\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (event: ModelEvent) => void): void {\r\n        const callbacks = this.#callbacks.get(type);\r\n        if (callbacks) {\r\n            const callbackIndex = callbacks.findIndex(\r\n                callback_i => callback_i == callback\r\n            );\r\n            if (callbackIndex > -1) {\r\n                callbacks.splice(callbackIndex, 1);\r\n            }\r\n            if (callbacks.length == 0) {\r\n                this.#callbacks.delete(type);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(event: ModelEvent): void {\r\n        ModelEventTargetAccessor.setTarget(event, this);\r\n        this.receiveEvent(event);\r\n    }\r\n}\r\n\r\nvar ModelEventTarget: ModelEventTargetConstructor = ModelEventTargetBase;\r\n\r\ninterface ModelNodeConstructor {\r\n    prototype: ModelNode;\r\n    new(): ModelNode;\r\n}\r\n\r\ninterface ModelNode extends ModelEventTarget {\r\n    readonly parentNode: ModelNode | null;\r\n    setParent(parentNode: ModelNode | null): void;\r\n    getRecords(): ModelChangeRecord[];\r\n    beginChanges(): void;\r\n    endChanges(): void;\r\n}\r\n\r\ninterface ModelNodeRecordsAccessor {\r\n    triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void;\r\n    handleRecord(node: ModelNode, record: ModelChangeRecord): void;\r\n}\r\n\r\nclass ModelNodeBase extends ModelEventTargetBase implements ModelNode {\r\n    #parentNode: ModelNode | null;\r\n    #records: ModelChangeRecord[];\r\n    #isRecording: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#parentNode = null;\r\n        this.#records = [];\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    get parentNode(): ModelNode | null {\r\n        return this.#parentNode;\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        if (parentNode !== null) {\r\n            let isCyclicReference = parentNode == this;\r\n            let {parentNode: ancestorNode} = parentNode;\r\n            while (!isCyclicReference && ancestorNode !== null) {\r\n                ({parentNode: ancestorNode} = ancestorNode);\r\n                isCyclicReference = ancestorNode == this;\r\n            }\r\n            if (!isCyclicReference) {\r\n                this.#parentNode = parentNode;\r\n            }\r\n            else {\r\n                throw new TypeError(\"Failed to set parent on ModelNode: circular reference detected in the hierarchy.\");\r\n            }\r\n        }\r\n        else {\r\n            this.#parentNode = null;\r\n        }\r\n    }\r\n    \r\n    beginChanges(): void {\r\n        this.#isRecording = true;\r\n    }\r\n\r\n    endChanges(): void {\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        this.#records.splice(0);\r\n        this.#isRecording = false;\r\n    }\r\n\r\n    getRecords(): ModelChangeRecord[] {\r\n        return this.#records.slice();\r\n    }\r\n\r\n    receiveEvent(event: ModelEvent): void {\r\n        super.receiveEvent(event);\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            parentNode.receiveEvent(event);\r\n        }\r\n    }\r\n\r\n    #triggerChange(property: string, oldValue: any, newValue: any): void {\r\n        const records = this.#records;\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.PROPERTY_CHANGE,\r\n            propertyName: property,\r\n            oldValue, newValue\r\n        });\r\n        records.push(record);\r\n        this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n        records.splice(0);\r\n    }\r\n\r\n    #handleRecord(record: ModelChangeRecord): void {\r\n        this.#records.push(record);\r\n        if (!this.#isRecording) {\r\n            this.dispatchEvent(new ModelEvent(\"modelchange\"));\r\n            this.#records.splice(0);\r\n        }\r\n    }\r\n\r\n    static ModelNodeRecordsAccessor? = new class ModelNodeRecordsAccessor {\r\n        triggerChange(node: ModelNode, property: string, oldValue: any, newValue: any): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#triggerChange(property, oldValue, newValue);\r\n            }\r\n        }\r\n\r\n        handleRecord(node: ModelNode, record: ModelChangeRecord): void {\r\n            if (node instanceof ModelNodeBase) {\r\n                node.#handleRecord(record);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelNodeRecordsAccessor: ModelNodeRecordsAccessor = ModelNodeBase.ModelNodeRecordsAccessor!;\r\ndelete ModelNodeBase.ModelNodeRecordsAccessor;\r\n\r\nvar ModelNode: ModelNodeConstructor = ModelNodeBase;\r\n\r\ninterface ModelPropertyDecorator {\r\n    (\r\n        init?: {\r\n            type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n        }\r\n    ): <Model extends ModelObject>(target: Model, property: string) => void;\r\n}\r\n\r\nconst ModelProperty: ModelPropertyDecorator = function(\r\n    init?: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Date | typeof Object\r\n    }\r\n) {\r\n    return (\r\n        target: ModelObject, property: string\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        /*const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n        if (Array.isArray(observedAttributes)) {\r\n            observedAttributes.push(property);\r\n        }\r\n        else {\r\n            Object.defineProperty(\r\n                constructor, \"observedAttributes\", {\r\n                    value: [property],\r\n                    writable: false\r\n                }\r\n            );\r\n        }*/\r\n        const setter = function(this: ModelObject, value: any) {\r\n            const oldValue = ModelObjectPropertiesAccessor.getProperty(this, property);\r\n            ModelObjectPropertiesAccessor.setProperty(this, property, value);\r\n            if (value !== oldValue) {\r\n                ModelNodeRecordsAccessor.triggerChange(this, property, oldValue, value);\r\n            }\r\n            return true;\r\n        };\r\n        const getter = function(this: ModelObject) {\r\n            return ModelObjectPropertiesAccessor.getProperty(this, property);\r\n        };\r\n        Object.defineProperty(prototype, property, {\r\n            set: setter,\r\n            get: getter,\r\n            enumerable: true\r\n        });\r\n    }\r\n}\r\n\r\ninterface ModelObjectConstructor {\r\n    prototype: ModelObject;\r\n    new(): ModelObject;\r\n}\r\n\r\ninterface ModelObject extends ModelNode {}\r\n\r\ninterface ModelObjectPropertiesAccessor {\r\n    setProperty(node: ModelNode, property: string, value: any): void;\r\n    getProperty(node: ModelNode, property: string,): any;\r\n}\r\n\r\nclass ModelObjectBase extends ModelNodeBase implements ModelObject {\r\n    #properties: Map<string, any>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#properties = new Map();\r\n    }\r\n\r\n    static ModelObjectPropertiesAccessor? = new class ModelPropertiesAccessor {\r\n        setProperty(node: ModelObject, property: string, value: any): void {\r\n            if (node instanceof ModelObjectBase) {\r\n                node.#properties.set(property, value);\r\n            }\r\n        }\r\n\r\n        getProperty(node: ModelObject, property: string): any {\r\n            if (node instanceof ModelObjectBase) {\r\n                return node.#properties.get(property);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelObjectPropertiesAccessor: ModelObjectPropertiesAccessor = ModelObjectBase.ModelObjectPropertiesAccessor!;\r\ndelete ModelObjectBase.ModelObjectPropertiesAccessor;\r\n\r\nvar ModelObject: ModelObjectConstructor = ModelObjectBase;\r\n\r\ninterface ModelListConstructor {\r\n    prototype: ModelList;\r\n    new<Model extends ModelNode>(): ModelList<Model>;\r\n    new<Model extends ModelNode>(items: Model[]): ModelList<Model>;\r\n}\r\n\r\ninterface ModelList<Model extends ModelNode = ModelNode> extends ModelNode {\r\n    readonly parentNode: ModelNode | null;\r\n    readonly length: number;\r\n    index(item: Model): number;\r\n    get(index: number): Model | null;\r\n    values(): IterableIterator<Model>;\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void;\r\n    insert(index: number, ...items: Model[]): void;\r\n    prepend(...items: Model[]): void;\r\n    append(...items: Model[]): void;\r\n    remove(item: Model): void;\r\n    clear(): void;\r\n}\r\n\r\nclass ModelListBase<Model extends ModelNode = ModelNode> extends ModelNodeBase implements ModelList<Model> {\r\n    #items: Model[];\r\n\r\n    constructor()\r\n    constructor(items: Model[])\r\n    constructor(items?: Model[]) {\r\n        super();\r\n        this.#items = items?.slice() ?? [];\r\n    }\r\n\r\n    setParent(parentNode: ModelNode | null): void {\r\n        super.setParent(parentNode);\r\n        this.#items.forEach((item_i) => {\r\n            item_i.setParent(parentNode);\r\n        });\r\n    }\r\n\r\n    get length(): number {\r\n        return this.#items.length;\r\n    }\r\n\r\n    get(index: number): Model | null {\r\n        return this.#items[index] ?? null;\r\n    }\r\n\r\n    index(item: Model): number {\r\n        return this.#items.indexOf(item);\r\n    }\r\n\r\n    values(): IterableIterator<Model> {\r\n        return this.#items.values();\r\n    }\r\n\r\n    sort(compareFunction: (item_a: any, item_b: any) => number): void {\r\n        const items = this.#items;\r\n        const indexedItems = items.map(\r\n            (item_i, i) => {\r\n                return {\r\n                    item: item_i,\r\n                    index: i\r\n                };\r\n            }\r\n        );\r\n        indexedItems.sort(\r\n            (indexedItem_a, indexedItem_b) => {\r\n                return compareFunction(\r\n                    indexedItem_a.item, indexedItem_b.item\r\n                )\r\n            }\r\n        );\r\n        this.#items = indexedItems.map(indexedItem_i => indexedItem_i.item);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_SORT,\r\n            sortedIndices: indexedItems.map(indexedItem_i => indexedItem_i.index)\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    prepend(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.splice(0, 0, ...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: 0,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    append(...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const {parentNode} = this;\r\n        if (parentNode) {\r\n            items.forEach(item_i => {\r\n                item_i.setParent(parentNode);\r\n            });\r\n        }\r\n        _items.push(...items);\r\n        const record = new ModelChangeRecord({\r\n            target: this,\r\n            changeType: ModelChangeRecord.LIST_INSERT,\r\n            insertedIndex: length,\r\n            insertedItems: items\r\n        });\r\n        ModelNodeRecordsAccessor.handleRecord(this, record);\r\n    }\r\n\r\n    insert(index: number, ...items: Model[]): void {\r\n        const _items = this.#items;\r\n        const {length} = _items;\r\n        const positiveIndex = Math.abs(index);\r\n        if (positiveIndex <= length) {\r\n            if (index >= 0) {\r\n                const {parentNode} = this;\r\n                items.forEach(item_i => {\r\n                    item_i.setParent(parentNode);\r\n                });\r\n                if (index < length) {\r\n                    _items.splice(index, 0, ...items);\r\n                }\r\n                else {\r\n                    _items.push(...items);\r\n                }\r\n            }\r\n            else if (index < 0) {\r\n                index = length - index;\r\n                const {parentNode} = this;\r\n                if (parentNode) {\r\n                    items.forEach(item_i => {\r\n                        item_i.setParent(parentNode);\r\n                    });\r\n                }\r\n                _items.splice(index, 0, ...items);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_INSERT,\r\n                insertedIndex: index,\r\n                insertedItems: items.slice()\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    remove(item: Model): void {\r\n        const _items = this.#items;\r\n        const index = _items.indexOf(item);\r\n        if (index > -1) {\r\n            const item = _items.splice(index, 1)[0];\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                item.setParent(null);\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: index,\r\n                removedItems: [item]\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        const items = this.#items;\r\n        const {length} = items;\r\n        if (length > 0) {\r\n            const removedItems = items.splice(0);\r\n            const {parentNode} = this;\r\n            if (parentNode) {\r\n                removedItems.forEach((removedItem_i) => {\r\n                    removedItem_i.setParent(null);\r\n                });\r\n            }\r\n            const record = new ModelChangeRecord({\r\n                target: this,\r\n                changeType: ModelChangeRecord.LIST_REMOVE,\r\n                removedIndex: 0,\r\n                removedItems: removedItems\r\n            });\r\n            ModelNodeRecordsAccessor.handleRecord(this, record);\r\n        }\r\n    }\r\n};\r\n\r\nvar ModelList: ModelListConstructor = ModelListBase!;\r\n\r\ninterface ModelChangeObserverConstructor {\r\n    prototype: ModelChangeObserver;\r\n    new(callback: (records: ModelChangeRecord[]) => void): ModelChangeObserver;\r\n}\r\n\r\ninterface ModelChangeObserver {\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void;\r\n    unobserve(node: ModelNode): void;\r\n    disconnect(): void;\r\n}\r\n\r\ntype ModelChangeObserverOptions = {\r\n    properties?: boolean;\r\n    propertiesFilter?: string[];\r\n    childList?: boolean;\r\n    subtree?: boolean;\r\n}\r\n\r\nclass ModelChangeObserverBase implements ModelChangeObserver {\r\n    #callback: (records: ModelChangeRecord[]) => void;\r\n    #records: ModelChangeRecord[];\r\n    #disconnected: boolean;\r\n\r\n    #references: WeakMap<ModelNode, {\r\n        listener: (event: ModelEvent) => void,\r\n        options: ModelChangeObserverOptions\r\n    }>;\r\n\r\n    constructor(callback: (records: ModelChangeRecord[]) => void) {\r\n        this.#callback = callback;\r\n        this.#records = [];\r\n        this.#disconnected = false;\r\n        this.#references = new WeakMap();\r\n    }\r\n\r\n    observe(node: ModelNode, options: ModelChangeObserverOptions): void {\r\n        this.#disconnected = false;\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (!reference) {\r\n            const listener = this.#handleModelEvent.bind(this);\r\n            node.addEventListener(\"modelchange\", listener);\r\n            reference = {listener, options};\r\n            references.set(node, reference);\r\n        }\r\n        else {\r\n            references.set(node, reference);\r\n        }\r\n    }\r\n\r\n    unobserve(node: ModelNode): void {\r\n        const references = this.#references;\r\n        let reference = references.get(node);\r\n        if (reference) {\r\n            const {listener} = reference;\r\n            node.removeEventListener(\"modelchange\", listener);\r\n        }\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#records.splice(0);\r\n        this.#disconnected = true;\r\n    }\r\n\r\n    #trigger(): void {\r\n        const records = this.#records.splice(0);\r\n        if (records.length > 0) {\r\n            this.#callback(records);\r\n        }\r\n    }\r\n\r\n    #handleModelEvent(event: ModelEvent): void {\r\n        if (!this.#disconnected) {\r\n            const {target, currentTarget} = event;\r\n            const reference = this.#references.get(<ModelNode>currentTarget);\r\n            if (reference) {\r\n                const {options} = reference;\r\n                const {properties, propertiesFilter, childList, subtree} = options;\r\n                if (subtree) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n                else if (target == currentTarget) {\r\n                    if (properties && target instanceof ModelNode) {\r\n                        if (propertiesFilter) {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                                    .filter(record_i => {\r\n                                        const {propertyName} = record_i;\r\n                                        return propertiesFilter.includes(\r\n                                            propertyName!\r\n                                        )\r\n                                    })\r\n                            );\r\n                        }\r\n                        else {\r\n                            this.#records.push(\r\n                                ...target.getRecords()\r\n                            );\r\n                        }\r\n                        this.#trigger();\r\n                    }\r\n                    else if (childList && target instanceof ModelList) {\r\n                        this.#records.push(\r\n                            ...target.getRecords()\r\n                        );\r\n                        this.#trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar ModelChangeObserver: ModelChangeObserverConstructor = ModelChangeObserverBase;","export { getPropertyFromPath };\r\nexport { setPropertyFromPath };\r\nexport { snakeToCamel };\r\nexport { camelToSnake };\r\nexport { trainToCamel };\r\nexport { camelToTrain };\r\n\r\nfunction getPropertyFromPath(src: object, path: string): any {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} | undefined  = src;\r\n  props.forEach((prop) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (typeof obj == \"object\" && prop in obj && Array.isArray(obj[prop])) {\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else if (typeof obj == \"object\" && prop in obj) {\r\n      obj = obj[prop];\r\n    }\r\n    else {\r\n      obj = undefined;\r\n    }\r\n  });\r\n  return obj;\r\n}\r\n\r\nfunction setPropertyFromPath(src: object, path: string, value: any): object {\r\n  const props = path.split(\".\");\r\n  let obj: {[key: string]: any} = src;\r\n  if (src == null) {\r\n    console.error(\"Source data can't be null\");\r\n  }\r\n  props.forEach((prop, idx) => {\r\n    if (prop.includes(\"[\")) {\r\n      const index = parseInt(prop.substring(prop.indexOf(\"[\") + 1, prop.indexOf(\"]\")));\r\n      if (Number.isNaN(index)) {\r\n        console.error(`Wrong indexed path: ${prop}`);\r\n      }\r\n      prop = prop.substring(0, prop.indexOf(\"[\"));\r\n      if (!Array.isArray(obj[prop])) {\r\n        obj[prop] = [];\r\n      }\r\n      if (idx == props.length - 1) {\r\n        obj[prop][index] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop][index] !== \"object\") {\r\n          obj[prop][index] = {}\r\n        }\r\n        obj = obj[prop][index];\r\n      }\r\n    }\r\n    else {\r\n      if (idx == props.length - 1) {\r\n        obj[prop] = value;\r\n      }\r\n      else {\r\n        if (typeof obj[prop] !== \"object\") {\r\n          obj[prop] = {}\r\n        }\r\n        obj = obj[prop];\r\n      }\r\n    }\r\n  });\r\n  return src;\r\n}\r\n\r\nfunction snakeToCamel(str: string) {\r\n  return str.split('_').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToSnake(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '_').toLowerCase();\r\n}\r\n\r\nfunction trainToCamel(str: string) {\r\n  return str.split('-').map(str =>  str.charAt(0).toUpperCase() + str.substring(1).toLowerCase()).join(\"\");\r\n}\r\n\r\nfunction camelToTrain(str: string) {\r\n  return str.replace(/(?<!^)(?=[A-Z])/g, '-').toLowerCase();\r\n}","import { ModelList, ModelNode, ModelChangeRecord, ModelChangeObserver, ModelChangeObserverOptions } from \"../models/Model\";\r\nimport { camelToTrain } from \"./Snippets\";\r\n\r\nexport { subtreeNodes };\r\nexport { ancestorNodes };\r\nexport { CustomElement };\r\nexport { ReactiveChildElements };\r\nexport { QueryProperty };\r\nexport { QueryAllProperty };\r\nexport { AttributeProperty };\r\nexport { reactiveElement };\r\nexport { reactiveChildElements };\r\nexport { element };\r\nexport { fragment };\r\nexport { textNode };\r\nexport { AttributeMutationMixin };\r\nexport { AttributeType };\r\nexport { areAttributesMatching };\r\nexport { AttributeMutationMixinBase };\r\nexport { trimMultilineIndent };\r\nexport { Stylesheet };\r\n\r\ninterface AttributePropertyDecorator {\r\n    (\r\n        init: {\r\n            type: typeof String;\r\n            observed?: boolean;\r\n            defaultValue?: string | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Number;\r\n            observed?: boolean;\r\n            defaultValue?: number | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Boolean;\r\n            observed?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n    (\r\n        init: {\r\n            type: typeof Object;\r\n            observed?: boolean;\r\n            defaultValue?: any | null;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, property: keyof E) => void;\r\n}\r\n\r\nconst AttributeProperty: AttributePropertyDecorator = function(\r\n    init: {\r\n        type: typeof String | typeof Number | typeof Boolean | typeof Object;\r\n        observed?: boolean;\r\n        defaultValue?: string | number | any | null;\r\n    }\r\n) {\r\n    return <E extends HTMLElement>(\r\n        target: E, property: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(property);\r\n        const attributeName = camelToTrain(propertyName);\r\n        const defaultValue = init.defaultValue ?? null;\r\n        const observed = init.observed ?? false;\r\n        if (observed) {\r\n            const observedAttributes = Reflect.get(constructor, \"observedAttributes\", constructor);\r\n            if (Array.isArray(observedAttributes)) {\r\n                observedAttributes.push(attributeName);\r\n            }\r\n            else {\r\n                Object.defineProperty(\r\n                    constructor, \"observedAttributes\", {\r\n                        value: [attributeName],\r\n                        writable: false\r\n                    }\r\n                );\r\n            }\r\n        }\r\n        const {type} = init;\r\n        switch (type) {\r\n            case Boolean: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        return this.hasAttribute(attributeName);\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value) {\r\n                            this.setAttribute(attributeName, \"\");\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Object: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? JSON.parse(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, JSON.stringify(value));\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case Number: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? parseFloat(val) : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case String:\r\n            default: {\r\n                Object.defineProperty(prototype, propertyName, {\r\n                    get: function(this: HTMLElement) {\r\n                        const val = this.getAttribute(attributeName);\r\n                        return (val !== null) ? val : defaultValue;\r\n                    },\r\n                    set: function(this: HTMLElement, value) {\r\n                        if (value !== null) {\r\n                            this.setAttribute(attributeName, value);\r\n                        }\r\n                        else {\r\n                            this.removeAttribute(attributeName);\r\n                        }\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    \r\nfunction Stylesheet(text: string): CSSStyleSheet {\r\n    const stylesheet = new CSSStyleSheet();\r\n    (stylesheet as any).replaceSync(text);\r\n    return stylesheet;\r\n}\r\n\r\nfunction trimMultilineIndent(text: string): string {\r\n    const newlineIndex = text.indexOf(\"\\n\");\r\n    text = text.substring(newlineIndex + 1);\r\n    const indentMatch = text.match(/^[\\s]*/);\r\n    if (indentMatch) {\r\n        const indent = text.substring(0, indentMatch[0].length);\r\n        text = text.replaceAll(indent, \"\").trimEnd();\r\n    }\r\n    return text;\r\n}\r\n\r\ninterface CustomElementDecorator {\r\n    (init: {\r\n        name: string;\r\n        options?: ElementDefinitionOptions\r\n    }): <C extends CustomElementConstructor>(elementCtor: C) => C;\r\n}\r\n\r\nconst CustomElement: CustomElementDecorator = function(init: {\r\n    name: string;\r\n    options?: ElementDefinitionOptions\r\n}) {\r\n    return <C extends CustomElementConstructor>(\r\n        elementCtor: C\r\n    ) => {\r\n        const {name, options} = init;\r\n        if (!customElements.get(name)) {\r\n            customElements.define(\r\n                name,\r\n                elementCtor,\r\n                options\r\n            );\r\n        }\r\n        return elementCtor;\r\n    }\r\n}\r\n\r\nfunction *subtreeNodes(node: Node): Generator<Node> {\r\n    yield node;\r\n    const childNodes = node.childNodes;\r\n    const childNodesCount = childNodes.length;\r\n    let childIndex = 0;\r\n    while (childIndex < childNodesCount) {\r\n        const child = childNodes.item(childIndex);\r\n        if (child !== null) {\r\n            yield * subtreeNodes(child);\r\n        }\r\n        childIndex++;\r\n    }\r\n}\r\n\r\nfunction *ancestorNodes(node: Node): Generator<Node> {\r\n    const {parentNode} = node;\r\n    if (parentNode) {\r\n        yield parentNode;\r\n        yield *ancestorNodes(parentNode);\r\n    }\r\n}\r\n\r\ninterface QueryPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryProperty: QueryPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return this.shadowRoot!.querySelector(selector);\r\n        } : function(this: HTMLElement) {\r\n            return this.querySelector(selector);\r\n        }\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\ninterface QueryAllPropertyDecorator {\r\n    (\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ): <E extends HTMLElement>(target: E, propertyKey: keyof E) => void;\r\n}\r\n\r\nconst QueryAllProperty: QueryAllPropertyDecorator = function(\r\n        init: {\r\n            selector: string;\r\n            withinShadowRoot?: boolean;\r\n        }\r\n    ) {\r\n    return <E extends HTMLElement>(\r\n        target: E, propertyKey: keyof E\r\n    ) => {\r\n        const {constructor} = target;\r\n        const {prototype} = constructor;\r\n        const propertyName = String(propertyKey);\r\n        const {selector} = init;\r\n        const withinShadowRoot = init.withinShadowRoot ?? false;\r\n        const getter = withinShadowRoot ? function(this: HTMLElement) {\r\n            return Array.from(this.shadowRoot!.querySelectorAll(selector));\r\n        } : function(this: HTMLElement) {\r\n            return Array.from(this.querySelectorAll(selector));\r\n        };\r\n        Object.defineProperty(prototype, propertyName, {\r\n            get: getter\r\n        });\r\n    }\r\n}\r\n\r\nfunction fragment(...nodes: (Node | string)[]): DocumentFragment {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.append(...nodes);\r\n    return fragment;\r\n}\r\n\r\nfunction textNode(text: string): Node {\r\n    return document.createTextNode(text);\r\n}\r\n\r\ninterface HTMLElementInit {\r\n    options?: ElementCreationOptions,\r\n    attributes?: {\r\n        [name: string]: number | string | boolean | undefined\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    children?: Node | string | (Node | string)[] | NodeList | ReactiveChildElements,\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction element<E extends HTMLElementTagNameMap[K], K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): E;\r\nfunction element(\r\n    tagName: string, init?: HTMLElementInit): HTMLElement;\r\nfunction element<K extends keyof HTMLElementTagNameMap>(\r\n    tagName: K, init?: HTMLElementInit): HTMLElementTagNameMap[K] {\r\n    if (init) {\r\n        const {options, attributes, dataset, children, listeners} = init;\r\n        const element = document.createElement(tagName, options);\r\n        if (attributes) {\r\n            Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                if (attributeValue !== undefined) {\r\n                    if (typeof attributeValue === \"boolean\") {\r\n                        element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                    }\r\n                    else {\r\n                        element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (dataset) {\r\n            const {dataset: elementDataset} = element;\r\n            Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n            });\r\n        }\r\n        if (children) {\r\n            if (typeof children === \"function\") {\r\n                element.append(...children(element));\r\n            }\r\n            else if (typeof children === \"object\" && \"length\" in children) {\r\n                element.append(...Array.from(children));\r\n            }\r\n            else {\r\n                element.append(children);\r\n            }\r\n        }\r\n        if (listeners) {\r\n            Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                if (Array.isArray(listener_i)) {\r\n                    element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                }\r\n                else {\r\n                    element.addEventListener(name_i, listener_i);\r\n                }\r\n            });\r\n        }\r\n        return element;\r\n    }\r\n    return document.createElement(tagName);\r\n}\r\n\r\nconst reactiveElementsMap = new WeakMap<ModelNode, {\r\n    observerOptions: ModelChangeObserverOptions,\r\n    reactiveElementsArray: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }[]\r\n}>();\r\n\r\nconst reactiveElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    model: ModelNode,\r\n    reactiveElement: {\r\n        elementRef: WeakRef<Element>,\r\n        properties: string[],\r\n        react: (element: any, property: string, oldValue: any, newValue: any) => void;\r\n    }\r\n}) => {\r\n    const {model, reactiveElement} = heldValue;\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    if (reactiveElementsMapEntry !== undefined) {\r\n        const {reactiveElementsArray} = reactiveElementsMapEntry;\r\n        reactiveElementsArray.splice(reactiveElementsArray.indexOf(reactiveElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveElementsPropertyObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    records.forEach((record_i) => {\r\n        const {target, propertyName, oldValue, newValue} = record_i;\r\n        const {reactiveElementsArray} = reactiveElementsMap.get(target)!;\r\n        reactiveElementsArray.forEach(reactiveElement_i => {\r\n            const {elementRef, react, properties} = reactiveElement_i;\r\n            const element = elementRef.deref();\r\n            if (element) {\r\n                if (properties.includes(propertyName!)) {\r\n                    react(element, propertyName!, oldValue, newValue);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveElement<M extends ModelNode, E extends Element, K extends string>(\r\n    model: M,\r\n    element: E,\r\n    properties: K[],\r\n    react: (object: E, property: K, oldValue: any, newValue: any) => void\r\n): E;\r\nfunction reactiveElement<M extends ModelNode, E extends Element>(\r\n    model: M,\r\n    element: E,\r\n    properties: string[],\r\n    react: (element: E, property: string, oldValue: any, newValue: any) => void\r\n): E {\r\n    const elementRef = new WeakRef(element);\r\n    const reactiveElement = {elementRef, react, properties};\r\n    const reactiveElementsMapEntry = reactiveElementsMap.get(model);\r\n    reactiveElementsFinalizationRegistry.register(element, {model, reactiveElement});\r\n    if (!reactiveElementsMapEntry) {\r\n        const observerOptions = {\r\n            properties: true,\r\n            propertiesFilter: properties\r\n        };\r\n        const reactiveElementsArray = [reactiveElement];\r\n        reactiveElementsMap.set(model, {observerOptions, reactiveElementsArray});\r\n        reactiveElementsPropertyObserver.observe(model, observerOptions);\r\n    }\r\n    else {\r\n        const {reactiveElementsArray, observerOptions} = reactiveElementsMapEntry;\r\n        const {propertiesFilter} = observerOptions;\r\n        reactiveElementsArray.push(reactiveElement);\r\n        observerOptions.propertiesFilter = propertiesFilter ?\r\n            propertiesFilter.concat(properties.filter(\r\n                property_i => !propertiesFilter.includes(property_i)\r\n            )) : Array.from(new Set(properties));\r\n    }\r\n    properties.forEach((property_i) => {\r\n        if (property_i in model) {\r\n            const value = Reflect.get(model, property_i, model);\r\n            if (value !== undefined) {\r\n                react(element, <any>property_i, <any>undefined, value);\r\n            }\r\n        }\r\n    });\r\n    return element;\r\n}\r\n\r\ninterface ReactiveChildElements {\r\n    (parent: Node & ParentNode): (Node | string)[]\r\n}\r\n\r\nconst reactiveChildElementsMap = new WeakMap<ModelList, {\r\n    reactiveChildElementsArray: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }[]\r\n}>();\r\n\r\nconst reactiveChildElementsFinalizationRegistry = new FinalizationRegistry((heldValue: {\r\n    list: ModelList,\r\n    reactiveChildElement: {\r\n        parentRef: WeakRef<ParentNode>,\r\n        mapping: (item: any) => Element,\r\n        placeholder?: Element\r\n    }\r\n}) => {\r\n    const {list, reactiveChildElement} = heldValue;\r\n    const reactiveChildrenElementsMapEntry = reactiveChildElementsMap.get(list);\r\n    if (reactiveChildrenElementsMapEntry) {\r\n        const {reactiveChildElementsArray} = reactiveChildrenElementsMapEntry;\r\n        reactiveChildElementsArray.splice(reactiveChildElementsArray.indexOf(reactiveChildElement), 1);\r\n    }\r\n});\r\n\r\nconst reactiveChildElementsObserver = new ModelChangeObserver((records: ModelChangeRecord[]) => {\r\n    let range: null | Range = null;\r\n    Array.from(records.values()).forEach((record_i) => {\r\n        const {target} = record_i;\r\n        const list = <ModelList>target;\r\n        const {length: listLength} = list;\r\n        const {reactiveChildElementsArray} = reactiveChildElementsMap.get(list)!;\r\n        reactiveChildElementsArray.forEach((reactiveChildElements_i) => {\r\n            const {parentRef, mapping, placeholder} = reactiveChildElements_i;\r\n            const parent = parentRef.deref();\r\n            if (parent) {\r\n                const {firstChild, children} = parent;\r\n                const {length: childrenCount} = children;\r\n                if (placeholder && listLength > 0 && firstChild == placeholder) {\r\n                    parent.removeChild(placeholder);\r\n                }\r\n                const {changeType, LIST_INSERT, LIST_REMOVE, LIST_SORT} = record_i;\r\n                switch (changeType) {\r\n                    case LIST_INSERT: {\r\n                        const {insertedIndex, insertedItems} = record_i;\r\n                        const insertedItemsArray = Array.from(insertedItems.values()).map(mapping);\r\n                        const {length: childrenCount} = children;\r\n                        if (insertedIndex < childrenCount) {\r\n                            children[insertedIndex].before(...insertedItemsArray);\r\n                        }\r\n                        else {\r\n                            parent.append(...insertedItemsArray);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_REMOVE: {\r\n                        const {removedIndex, removedItems} = record_i;\r\n                        const {length: removedCount} = removedItems;\r\n                        range = range ?? document.createRange();\r\n                        const removeEndIndex = removedIndex + (removedCount - 1);\r\n                        if (removeEndIndex < childrenCount) {\r\n                            range.setStartBefore(children[removedIndex]);\r\n                            range.setEndAfter(children[removeEndIndex]);\r\n                            range.deleteContents();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case LIST_SORT: {\r\n                        const {sortedIndices} = record_i;\r\n                        const childrenArray = Array.from(children);\r\n                        parent.append(\r\n                            ...sortedIndices.filter(\r\n                                index_i => index_i < childrenCount\r\n                            ).map(\r\n                                index_i => childrenArray[index_i]\r\n                            )\r\n                        );\r\n                        break;\r\n                    }\r\n                }\r\n                if (listLength == 0 && placeholder) {\r\n                    parent.append(placeholder);\r\n                }\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\nfunction reactiveChildElements<Model extends ModelNode>(\r\n    list: ModelList<Model>,\r\n    mapping: (item: Model) => Element,\r\n    placeholder?: Element\r\n): ReactiveChildElements {\r\n    return (parent: Node & ParentNode) => {\r\n        const parentRef = new WeakRef(parent);\r\n        const reactiveChildElementsMapEntry = reactiveChildElementsMap.get(list);\r\n        const reactiveChildElement = {parentRef, mapping, placeholder};\r\n        reactiveChildElementsFinalizationRegistry.register(parent, {list, reactiveChildElement});\r\n        if (!reactiveChildElementsMapEntry) {\r\n            const reactiveChildElementsArray = [reactiveChildElement];\r\n            reactiveChildElementsMap.set(list, {reactiveChildElementsArray});\r\n            reactiveChildElementsObserver.observe(list, {\r\n                childList: true\r\n            });\r\n        }\r\n        else {\r\n            const {reactiveChildElementsArray} = reactiveChildElementsMapEntry;\r\n            reactiveChildElementsArray.push(reactiveChildElement);\r\n        }\r\n        return list.length == 0 && placeholder ?\r\n            [placeholder] : Array.from(list.values()).map(mapping);\r\n    }\r\n}\r\n\r\ninterface AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n    attach(element: Element): void;\r\n    detach(element: Element): void;\r\n}\r\n\r\ntype AttributeType = \"string\" | \"boolean\" | \"list\";\r\n\r\nfunction areAttributesMatching(\r\n    referenceAttributeType: AttributeType,\r\n    referenceAttributeName: string, referenceAttributeValue: string,\r\n    attributeName: string, attributeValue: string | null): boolean {\r\n    if (referenceAttributeName == attributeName) {\r\n        switch (referenceAttributeType) {\r\n            case \"boolean\":\r\n                return referenceAttributeValue == \"\" && attributeValue == \"\";\r\n            case \"string\":\r\n                return referenceAttributeValue !== \"\" && (referenceAttributeValue == attributeValue);\r\n            case \"list\":\r\n                return (referenceAttributeValue !== \"\" && attributeValue !== null) && new RegExp(`${referenceAttributeValue}\\s*?`, \"g\").test(attributeValue );\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nclass AttributeMutationMixinBase implements AttributeMutationMixin {\r\n    readonly attributeName: string;\r\n    readonly attributeValue: string;\r\n    readonly attributeType: AttributeType;\r\n\r\n    constructor(attributeName: string, attributeType: AttributeType = \"boolean\", attributeValue: string = \"\") {\r\n        this.attributeName = attributeName;\r\n        this.attributeType = attributeType;\r\n        this.attributeValue = attributeValue;\r\n    }\r\n\r\n    attach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n\r\n    detach(): void {\r\n        throw new TypeError(\"Not implemented method.\");\r\n    }\r\n}","import { CustomElement, AttributeProperty, QueryProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\n\r\nexport { HTMLEMenuItemElement };\r\nexport { EMenuItem };\r\n\r\ninterface HTMLEMenuItemElementConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(): HTMLEMenuItemElement;\r\n}\r\n\r\ninterface HTMLEMenuItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get menu(): HTMLEMenuElement | null;\r\n    name: string;\r\n    label: string | null;\r\n    value: string;\r\n    hotkey: string;\r\n    disabled: boolean;\r\n    checked: boolean;\r\n    expanded: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitem\": HTMLEMenuItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitem\"\r\n})\r\nclass HTMLEMenuItemElementBase extends HTMLElement implements HTMLEMenuItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly internals: ElementInternals;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    menu!: HTMLEMenuElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    checked!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\", observed: true})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n\r\n    attributeChangedCallback(attributeName: string, oldValue: string | null, newValue: string | null) {\r\n        const {internals} = this;\r\n        switch (attributeName) {\r\n            case \"type\": {\r\n                switch (newValue) {\r\n                    case \"checkbox\":\r\n                    case \"radio\": {\r\n                        internals.role = `menuitem${newValue}`;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        internals.role = \"menuitem\";\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"checked\": {\r\n                internals.ariaChecked = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                internals.ariaDisabled = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"expanded\": {\r\n                internals.ariaExpanded = String(newValue !== null);\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                internals.ariaLabel = newValue;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"arrow\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        const internals = this.attachInternals();\r\n        this.internals = internals;\r\n        internals.role = \"menuitem\";\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                const expand = force ?? !expanded;\r\n                this.expanded = expand;\r\n                if (expand) {\r\n                    this.#positionMenu();\r\n                }\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (!expanded) {\r\n                    this.expanded = true;\r\n                    this.#positionMenu();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {type, expanded} = this;\r\n        switch (type) {\r\n            case \"menu\":\r\n            case \"submenu\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const {type} = this;\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = this.closest(\"e-menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetMenuItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n        if (targetMenuItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.checked = true;\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemElement: HTMLEMenuItemElementConstructor = HTMLEMenuItemElementBase;\r\n\r\ninterface EMenuItemConstructor {\r\n    prototype: HTMLEMenuItemElement;\r\n    new(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    button(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    checkbox(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    radio(init: {\r\n        name?: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEMenuItemElement;\r\n    menu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n    submenu(init: {\r\n        name?: string;\r\n        label: string;\r\n        menu: HTMLEMenuElement;\r\n    }): HTMLEMenuItemElement;\r\n}\r\n\r\nvar EMenuItem = <EMenuItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        label: string;\r\n        type?: \"button\" | \"checkbox\" | \"radio\" | \"menu\" | \"submenu\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menu?: HTMLEMenuElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menu} = init;\r\n        if (menu) {\r\n            menu.slot = \"menu\";\r\n        }\r\n        return element(\"e-menuitem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menu ? [\r\n                label,\r\n                menu\r\n            ] : [\r\n                label\r\n            ],\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemElement.prototype,\r\n        button(init: {\r\n            name?: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name?: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"menu\"\r\n            });\r\n        },\r\n        submenu(init: {\r\n            name?: string;\r\n            label: string;\r\n            menu: HTMLEMenuElement;\r\n        }) {\r\n            return new EMenuItem({\r\n                ...init, type: \"submenu\"\r\n            });\r\n        }\r\n    }\r\n);","import { ModelObject } from \"../models/Model\";\r\n\r\nexport { View };\r\n\r\ninterface View extends HTMLElement {\r\n    readonly model: ModelObject | null;\r\n    setModel(model: ModelObject): void;\r\n    renderShadow(): Node | undefined;\r\n    renderLight(): Node | undefined;\r\n    refresh(): void;\r\n}\r\n\r\ninterface ViewConstructor {\r\n    prototype: View;\r\n    new(): View;\r\n}\r\n\r\nclass ViewBase extends HTMLElement implements View {\r\n    #model: ModelObject | null;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#model = null;\r\n    }\r\n\r\n    get model(): ModelObject | null {\r\n        return this.#model;\r\n    }\r\n    \r\n    setModel(model: ModelObject): void {\r\n        if (model !== this.#model) {\r\n            this.#model = model;\r\n            this.#render();\r\n        }\r\n    }\r\n\r\n    renderLight(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    renderShadow(): Node | undefined {\r\n        return;\r\n    }\r\n\r\n    refresh(): void {\r\n        this.#render();\r\n    }\r\n\r\n    #render(): void {\r\n        const {shadowRoot} = this;\r\n        if (shadowRoot !== null) {\r\n            const shadow = this.renderShadow();\r\n            if (shadow) {\r\n                shadowRoot.replaceChildren(shadow);\r\n            }\r\n        }\r\n        const light = this.renderLight();\r\n        if (light) {\r\n            this.replaceChildren(light);\r\n        }\r\n    }\r\n}\r\n\r\nvar View: ViewConstructor = ViewBase;","import { element, reactiveChildElements, CustomElement, fragment, AttributeProperty, reactiveElement } from \"../elements/Element\";\r\nimport { ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\nimport { HTMLEGridCellElement } from \"../elements/containers/grid/GridCell\";\r\nimport { HTMLEGridElement } from \"../elements/containers/grid/Grid\";\r\nimport { HTMLEGridRowElement } from \"../elements/containers/grid/GridRow\";\r\nimport { HTMLEMenuItemElement } from \"../elements/containers/menus/MenuItem\";\r\n\r\nexport { GridModel };\r\nexport { GridRowModel };\r\nexport { GridColumnModel };\r\nexport { GridView };\r\n\r\nclass GridModel extends ModelObject {\r\n    readonly rows: ModelList<GridRowModel>;\r\n    readonly columns: ModelList<GridColumnModel>;\r\n\r\n    constructor()\r\n    constructor(init: {rows: GridRowModel[], columns: GridColumnModel[]})\r\n    constructor(init?: {rows: GridRowModel[], columns: GridColumnModel[]}) {\r\n        super();\r\n        const {rows: initRows = [], columns: initColumns = []} = init ?? {};\r\n        const rows = new ModelList(initRows);\r\n        rows.setParent(this);\r\n        this.rows = rows;\r\n        const columns = new ModelList(initColumns);\r\n        columns.setParent(this);\r\n        this.columns = columns;\r\n    }\r\n\r\n    getColumnByName(name: string): GridColumnModel | null {\r\n        return Array.from(this.columns.values()).find(\r\n            column_i => column_i.name == name\r\n        ) ?? null;\r\n    }\r\n\r\n    sortByColumn(column: GridColumnModel, sortOrder: number) {\r\n        Array.from(this.columns.values()).forEach((column_i) => {\r\n            column_i.sortorder = column_i === column ? sortOrder : undefined;\r\n        });\r\n        const sortTest = (() => {\r\n            const {type} = column;\r\n            switch (type) {\r\n                case String: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = String(column.extract(row_1));\r\n                        const cell_2 = String(column.extract(row_2));\r\n                        return sortOrder * cell_1.localeCompare(cell_2);\r\n                    };\r\n                }\r\n                default: {\r\n                    return (row_1: GridRowModel, row_2: GridRowModel) => {\r\n                        const cell_1 = Number(column.extract(row_1));\r\n                        const cell_2 = Number(column.extract(row_2));\r\n                        return Math.sign(sortOrder * (cell_1 - cell_2));\r\n                    };\r\n                }\r\n            }\r\n        })();\r\n        this.rows.sort(sortTest);\r\n    }\r\n}\r\n\r\ntype Constructor = {\r\n    new(...args: any): any;\r\n    prototype: any;\r\n}\r\n\r\ntype GridRowFilter = {\r\n    filter: (row: GridRowModel) => boolean;\r\n}\r\n\r\nclass GridColumnModel<T extends Constructor = Constructor> extends ModelObject {\r\n    readonly name: string\r\n    readonly type: NumberConstructor | StringConstructor | DateConstructor;\r\n    readonly label: string;\r\n    readonly extract: (row: GridRowModel) => InstanceType<T>;\r\n    readonly filters: (GridRowFilter & {name: string})[];\r\n\r\n    @ModelProperty()\r\n    sortorder: number | undefined;\r\n\r\n    constructor(init: {\r\n        name: string,\r\n        type: NumberConstructor | StringConstructor | DateConstructor,\r\n        label: string,\r\n        extract: (row: GridRowModel) => InstanceType<T>,\r\n        filters?: (GridRowFilter & {name: string})[]\r\n    }) {\r\n        super();\r\n        const {name, type, label, extract, filters = []} = init;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.label = label;\r\n        this.extract = extract;\r\n        this.filters = filters;\r\n        this.sortorder = 1;\r\n    }\r\n}\r\n\r\nclass GridRowModel extends ModelObject {\r\n    id: number;\r\n\r\n    @ModelProperty()\r\n    name: string;\r\n\r\n    @ModelProperty()\r\n    age: number;\r\n    \r\n    constructor(init: {\r\n        id: number;\r\n        name: string,\r\n        age: number\r\n    }) {\r\n        super();\r\n        const {id, name, age} = init;\r\n        this.id = id;\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n}\r\n\r\ninterface GridViewConstructor {\r\n    prototype: GridView;\r\n    new(): GridView;\r\n    new(model: GridModel): GridView;\r\n}\r\n\r\ninterface GridView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    model: GridModel;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void;\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridview\": GridView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-gridview\"\r\n})\r\nclass GridViewBase extends View implements GridView {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: GridModel;\r\n\r\n    #columnDelegate: (column: GridColumnModel) => string | Node;\r\n    #cellDelegate: (row: GridRowModel, column: GridColumnModel) => string | Node;\r\n    \r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    resizable!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    sortable!: boolean;\r\n\r\n    #displayFilters: (GridRowFilter & {name: string})[];\r\n    #searchFilter: GridRowFilter | null;\r\n    \r\n    constructor()\r\n    constructor(model: GridModel)\r\n    constructor(model?: GridModel) {\r\n        super();\r\n        this.#displayFilters = [];\r\n        this.#searchFilter = null;\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#cellDelegate =\r\n            (row: GridRowModel, column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.extract(row)\r\n                });\r\n        this.#columnDelegate =\r\n            (column: GridColumnModel) =>\r\n                element(\"label\", {\r\n                    children: column.label\r\n                });\r\n        this.setModel(model ?? new GridModel());\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"resizable\":\r\n            case \"sortable\": {\r\n                this.refresh();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    get gridElement(): HTMLEGridElement {\r\n        return this.shadowRoot.querySelector(\"e-grid\")!;\r\n    }\r\n\r\n    setColumnDelegate(delegate: (column: GridColumnModel) => string | Node): void {\r\n        this.#columnDelegate = delegate;\r\n    }\r\n\r\n    setCellDelegate(delegate: (row: GridRowModel, column: GridColumnModel) => string | Node): void {\r\n        this.#cellDelegate = delegate;\r\n    }\r\n\r\n    getRowElement(row: GridRowModel): HTMLEGridRowElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridbody > e-gridrow[data-index='${row.id}']`);\r\n    }\r\n\r\n    getColumnHeaderElement(column: GridColumnModel): HTMLEGridCellElement | null {\r\n        return this.shadowRoot.querySelector(`e-grid > e-gridhead > e-gridcell[id=${column.name}]`);\r\n    }\r\n    \r\n    getColumnCellsElements(column: GridColumnModel): HTMLEGridCellElement[] {\r\n        return Array.from(this.shadowRoot.querySelectorAll(`e-grid > e-gridbody > e-gridrow > e-gridcell[headers~=${column.name}]`));\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                children: element(\"input\", {\r\n                    attributes: {\r\n                        type: \"search\"\r\n                    },\r\n                    listeners: {\r\n                        input: <EventListener>this.#handleSearchInputEvent.bind(this)\r\n                    }\r\n                })\r\n            }),\r\n            element(\"e-grid\", {\r\n                attributes: {\r\n                    tabindex: 0,\r\n                    selectby: \"row\",\r\n                    multisectable: true\r\n                },\r\n                children: [\r\n                    element(\"e-gridhead\", {\r\n                        children: reactiveChildElements(\r\n                            model.columns, column => this.#renderGridColumnHeaderCell(column)\r\n                        ),\r\n                        listeners: {\r\n                            contextmenu: <EventListener>this.#handleHeadContextMenuEvent.bind(this),\r\n                            click: <EventListener>this.#handleHeadClickEvent.bind(this)\r\n                        }\r\n                    }),\r\n                    element(\"e-gridbody\", {\r\n                        children: reactiveChildElements(\r\n                            model.rows, row => this.#renderGridBodyRow(row)\r\n                        )\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    #filter(row: GridRowModel): boolean {\r\n        const displayFilters = this.#displayFilters;\r\n        const searchFilter = this.#searchFilter;\r\n        return (displayFilters.length > 0 ? displayFilters.some(filter_i => filter_i.filter(row)) : true) &&\r\n        (searchFilter ? searchFilter.filter(row) : true);\r\n    }\r\n\r\n    setSearchFilter(filter: GridRowFilter | null): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        this.#searchFilter = filter;\r\n        Array.from(rows.values()).forEach((row_i) => {\r\n            const rowElement = this.getRowElement(row_i);\r\n            if (rowElement) {\r\n                rowElement.hidden = !this.#filter(row_i);\r\n            }\r\n        });\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    addDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        if (!displayFilters.includes(filter)) {\r\n            displayFilters.push(filter);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                console.log(rowElement);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    removeDisplayFilter(filter: (GridRowFilter & {name: string;})): void {\r\n        const {model, gridElement} = this;\r\n        const {rows} = model;\r\n        const displayFilters = this.#displayFilters;\r\n        const filterIndex = displayFilters.indexOf(filter);\r\n        if (filterIndex > -1) {\r\n            displayFilters.splice(filterIndex, 1);\r\n            Array.from(rows.values()).forEach((row_i) => {\r\n                const rowElement = this.getRowElement(row_i);\r\n                if (rowElement) {\r\n                    rowElement.hidden = !this.#filter(row_i);\r\n                }\r\n            });\r\n        }\r\n        gridElement.clearSelection();\r\n    }\r\n\r\n    #renderGridColumnHeaderCell(column: GridColumnModel): Element {\r\n        const gridColumnElement = reactiveElement(\r\n            column,\r\n            element(\"e-gridcell\", {\r\n                attributes: {\r\n                    type: \"columnheader\",\r\n                    id: column.name\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridheader-content\"\r\n                        },\r\n                        children: (<Node[]>[\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"gridheader-label\"\r\n                                },\r\n                                children: this.#columnDelegate(column)\r\n                            })\r\n                        ]).concat(\r\n                            this.resizable ? [\r\n                                element(\"e-wsash\", {\r\n                                    attributes: {\r\n                                        controls: column.name\r\n                                    }\r\n                                })\r\n                            ] : []\r\n                        )\r\n                    })\r\n                ]\r\n            }),\r\n            [\"sortorder\"],\r\n            (cell, property, oldValue, newValue) => {\r\n                switch (property) {\r\n                    case \"sortorder\":\r\n                        const {dataset} = cell;\r\n                        if (typeof newValue !== \"undefined\") {\r\n                            dataset.sortorder = newValue.toString();\r\n                        }\r\n                        else {\r\n                            delete dataset.sortorder;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        );\r\n        return gridColumnElement;\r\n    }\r\n\r\n    #renderGridBodyRow(row: GridRowModel): Element {\r\n        const {model} = this;\r\n        const gridRowElement = element(\"e-gridrow\", {\r\n            dataset: {\r\n                index: row.id\r\n            },\r\n            children: reactiveChildElements(\r\n                model.columns, column => this.#renderGridDataCell(row, column)\r\n            )\r\n        });\r\n        return gridRowElement;\r\n    }\r\n\r\n    #renderGridDataCell(row: GridRowModel, column: GridColumnModel): Element {\r\n        const gridCellElement = element(\"e-gridcell\", {\r\n            attributes: {\r\n                type: \"gridcell\",\r\n                headers: column.name\r\n            },\r\n            children: element(\"span\", {\r\n                attributes: {\r\n                    class: \"gridcell-content\"\r\n                },\r\n                children: (<Node[]>[\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            class: \"gridcell-label\"\r\n                        },\r\n                        children: this.#cellDelegate(row, column)\r\n                    })\r\n                ])\r\n            })\r\n        });\r\n        return gridCellElement;\r\n    }\r\n\r\n    #handleHeadContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetHead = <HTMLElement>currentTarget;\r\n        const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n        const {model} = this;\r\n        if (targetHeader) {\r\n            const column = model.getColumnByName(targetHeader.id)!;\r\n            const contextMenu = element(\"e-menu\",  {\r\n                attributes: {\r\n                    contextual: true,\r\n                },\r\n                children: [\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize Auto\"\r\n                        },\r\n                        children: \"Resize auto\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    const labels = this.getColumnCellsElements(column).map(\r\n                                        cell_i => cell_i.querySelector(\".gridcell-label\")!\r\n                                    );\r\n                                    const maxWidth = labels.reduce(\r\n                                        (maxWidth, label) => Math.max(maxWidth, label.getBoundingClientRect().width), 0\r\n                                    );\r\n                                    style.setProperty(\"width\", `${maxWidth}px`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            label: \"Resize To Default\"\r\n                        },\r\n                        children: \"Resize to Default\",\r\n                        listeners: {\r\n                            click: () => {\r\n                                const columnHeaderElement = this.getColumnHeaderElement(column);\r\n                                if (columnHeaderElement) {\r\n                                    const {style} = columnHeaderElement;\r\n                                    style.removeProperty(\"width\");\r\n                                }\r\n                            }\r\n                        }\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Sort\",\r\n                        },\r\n                        children: [\r\n                            \"Sort\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: [\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"1\",\r\n                                            label: \"Ascending\"\r\n                                        },\r\n                                        children: \"Ascending\"\r\n                                    }),\r\n                                    element(\"e-menuitem\",  {\r\n                                        attributes: {\r\n                                            type: \"radio\",\r\n                                            name: \"sort\",\r\n                                            value: \"-1\",\r\n                                            label: \"Descending\"\r\n                                        },\r\n                                        children: \"Descending\"\r\n                                    })\r\n                                ],\r\n                                listeners: {\r\n                                    click: (event) => {\r\n                                        const {target} = event;\r\n                                        const targetItem = (<HTMLElement>target).closest(\"e-menuitem\");\r\n                                        if (targetItem) {\r\n                                            model.sortByColumn(column, Number(targetItem.value));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }),\r\n                    element(\"e-menuitem\",  {\r\n                        attributes: {\r\n                            type: \"submenu\",\r\n                            label: \"Filter\"\r\n                        },\r\n                        children: [\r\n                            \"Filter\",\r\n                            element(\"e-menu\",  {\r\n                                attributes: {\r\n                                    slot: \"menu\"\r\n                                },\r\n                                children: column.filters.map((filter_i, i) =>\r\n                                    element(\"e-menuitem\", {\r\n                                        attributes: {\r\n                                            type: \"checkbox\",\r\n                                            checked: this.#displayFilters.includes(filter_i),\r\n                                            label: filter_i.name\r\n                                        },\r\n                                        children: filter_i.name,\r\n                                        listeners: {\r\n                                            click: (event) => {\r\n                                                const {currentTarget} = event;\r\n                                                const targetItem = <HTMLEMenuItemElement>currentTarget;\r\n                                                const {checked} = targetItem;\r\n                                                if (checked) {\r\n                                                    this.addDisplayFilter(filter_i);\r\n                                                }\r\n                                                else {\r\n                                                    this.removeDisplayFilter(filter_i);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })\r\n                                )\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            });\r\n            targetHead.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleSearchInputEvent(event: InputEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLInputElement) {\r\n            const {value} = target;\r\n            this.setSearchFilter(value !== \"\" ? {\r\n                filter: (row) => row.name.toLowerCase().includes(value.toLowerCase())\r\n            } : null);\r\n        }\r\n    }\r\n\r\n    #handleHeadClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetIsHeaderLabel = (<HTMLElement>target).matches(\":is(.gridheader-label, .gridheader-label :scope)\");\r\n        if (targetIsHeaderLabel) {\r\n            const targetHeader = <HTMLEGridCellElement>(<HTMLElement>target).closest(\"e-gridcell\");\r\n            const {model} = this;\r\n            const {columns} = model;\r\n            if (targetHeader) {\r\n                const targetColumn = Array.from(columns.values()).find(column_i => column_i.name == targetHeader.id);\r\n                if (targetColumn) {\r\n                    const sortorder = targetColumn.sortorder !== undefined ? -targetColumn.sortorder : 1;\r\n                    model.sortByColumn(targetColumn, sortorder);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar GridView: GridViewConstructor = GridViewBase;","import { HTMLETreeElement } from \"../elements/containers/trees/Tree\";\r\nimport { HTMLETreeItemElement } from \"../elements/containers/trees/TreeItem\";\r\nimport { CustomElement, element, fragment, reactiveChildElements, reactiveElement } from \"../elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"../models/Model\";\r\nimport { View } from \"./View\";\r\n\r\nexport { TreeItemList };\r\nexport { TreeModel };\r\nexport { TreeItemModel };\r\nexport { TreeView };\r\n\r\nclass TreeModel extends ModelObject {\r\n    readonly items: ModelList<TreeItemModel>;\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    sortFunction: ((item_a: TreeItemModel, item_b: TreeItemModel) => number) | null;\r\n\r\n    constructor()\r\n    constructor(init: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    })\r\n    constructor(init?: {\r\n        items: TreeItemModel[], sortFunction?: (item_a: TreeItemModel, item_b: TreeItemModel) => number;\r\n    }) {\r\n        super();\r\n        const {items = [], sortFunction} = init ?? {};\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.childItems = childItems;\r\n        this.items = new ModelList(this.flattenItems());\r\n        this.sortFunction = sortFunction ??\r\n            function(item_a: TreeItemModel, item_b: TreeItemModel) {\r\n                return item_a.name.localeCompare(item_b.name);\r\n            };\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n    \r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {items, sortFunction, flattenItems} = this;\r\n        if (target instanceof ModelList) {\r\n            const records = target.getRecords();\r\n            records.forEach((record_i) => {\r\n                const {insertedItems, removedItems} = record_i;\r\n                const flattenedInsertedItems = (<TreeItemModel[]>Array.from(insertedItems.values())).flatMap(\r\n                    insertedItem_i => Array.of(insertedItem_i, ...flattenItems.call(insertedItem_i))\r\n                );\r\n                const flattenedRemovedItems = (<TreeItemModel[]>Array.from(removedItems.values())).flatMap(\r\n                    removedItem_i => Array.of(removedItem_i, ...flattenItems.call(removedItem_i))\r\n                );\r\n                items.beginChanges();\r\n                items.append(...flattenedInsertedItems);\r\n                flattenedRemovedItems.forEach((removedItem_i) => items.remove(removedItem_i));\r\n                if (sortFunction) items.sort(sortFunction);\r\n                items.endChanges();\r\n            });\r\n            Array.from((<ModelList<TreeItemModel>>target).values()).forEach((item_i, i) => {\r\n                item_i.index = i;\r\n            });\r\n        }\r\n    }\r\n\r\n    flattenItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.flattenItems())\r\n        );\r\n    }\r\n\r\n    getItemByUri(this: TreeModel | TreeItemModel, uri: string): TreeItemModel | null {\r\n        const {childItems} = this;\r\n        const {length: itemsCount} = childItems;\r\n        const {length: uriLength} = uri;\r\n        for (let i = 0; i < itemsCount; i++) {\r\n            const item_i = childItems.get(i)!;\r\n            const {uri: itemUri} = item_i;\r\n            const {length: itemUriLength} = itemUri;\r\n            if (uri.startsWith(itemUri)) {\r\n                if (uri.charAt(itemUriLength) === \"/\") {\r\n                    return TreeModel.prototype.getItemByUri.call(item_i, uri);\r\n                }\r\n                else if (itemUriLength === uriLength) {\r\n                    return <TreeItemModel>item_i;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nclass TreeItemList {\r\n    readonly items: TreeItemModel[];\r\n\r\n    constructor(items: TreeItemModel[]) {\r\n        this.items = items;\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    remove(): void {\r\n        const {items} = this;\r\n        const removedItemsGroups = items.reduce((map, item_i) => {\r\n            const {parentNode} = item_i;\r\n            if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n                const {childItems} = parentNode;\r\n                const group = map.get(childItems);\r\n                if (group) group.push(item_i);\r\n                else map.set(childItems, [item_i]);\r\n            }\r\n            return map;\r\n        }, new Map<ModelList, TreeItemModel[]>());\r\n        Array.from(removedItemsGroups.entries()).forEach(\r\n            ([list_i, children_i]) => {\r\n                list_i.beginChanges();\r\n                children_i.forEach((child_i) => {\r\n                    list_i.remove(child_i);\r\n                });\r\n                list_i.endChanges();\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nclass TreeItemModel extends ModelObject {\r\n    readonly childItems: ModelList<TreeItemModel>;\r\n    readonly type: \"leaf\" | \"parent\";\r\n    readonly name: string;\r\n    \r\n    @ModelProperty()\r\n    index: number;\r\n\r\n    get level(): number {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode.level + 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get uri(): string {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return `${parentNode.uri}/${this.name}`;\r\n        }\r\n        return this.name;\r\n    }\r\n\r\n    get parentItem(): TreeItemModel | null {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel) {\r\n            return parentNode;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super();\r\n        const {name, type, items = []} = init;\r\n        items.forEach((item_i, i) => item_i.index = i);\r\n        const childItems = new ModelList(items);\r\n        childItems.setParent(this);\r\n        this.name = name;\r\n        this.childItems = childItems;\r\n        this.type = type;\r\n        this.index = -1;\r\n    }\r\n\r\n    flattenItems(): TreeItemModel[] {\r\n        const {childItems} = this;\r\n        return Array.from(childItems.values()).flatMap(\r\n            treeItem_i => Array.of(treeItem_i, ...treeItem_i.flattenItems())\r\n        );\r\n    }\r\n\r\n    remove(): void {\r\n        const {parentNode} = this;\r\n        if (parentNode instanceof TreeItemModel || parentNode instanceof TreeModel) {\r\n            const {childItems} = parentNode;\r\n            if (childItems) {\r\n                childItems.remove(this);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface TreeViewConstructor {\r\n    prototype: TreeView;\r\n    new(): TreeView;\r\n    new(model: TreeModel): TreeView;\r\n}\r\n\r\ninterface TreeView extends View {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly model: TreeModel;\r\n    treeElement(): HTMLElement;\r\n    treeItemElement(item: TreeItemModel): HTMLElement;\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeview\": TreeView,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeview\"\r\n})\r\nclass TreeViewBase extends View implements TreeView {\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly model!: TreeModel;\r\n\r\n    #dragImages: WeakMap<TreeItemModel, WeakRef<Element>>;\r\n\r\n    itemContentDelegate: <Item extends TreeItemModel>(item: Item) => string | Node;\r\n    itemContextMenuDelegate: <Item extends TreeItemModel>(activeItem: Item, selectedItems: Item[]) => string | Node;\r\n    \r\n    constructor()\r\n    constructor(model: TreeModel)\r\n    constructor(model?: TreeModel) {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#dragImages = new WeakMap();\r\n        this.itemContentDelegate = function(item: TreeItemModel) {\r\n            return reactiveElement(\r\n                item,\r\n                element(\"span\"),\r\n                [\"label\"],\r\n                (label, property, oldValue, newValue) => {\r\n                    label.textContent = newValue;\r\n                }\r\n            );\r\n        };\r\n        this.itemContextMenuDelegate = function(activeItem: TreeItemModel, selectedItems: TreeItemModel[]) {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new TreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            );\r\n        };\r\n        this.setModel(model ?? new TreeModel());\r\n    }\r\n\r\n    treeElement(): HTMLETreeElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeElement>(\"e-tree\")!;\r\n    }\r\n\r\n    treeItemElement(item: TreeItemModel): HTMLETreeItemElement {\r\n        return this.shadowRoot.querySelector<HTMLETreeItemElement>(`e-treeitem[uri=${item.uri}]`)!;\r\n    }\r\n\r\n    renderShadow(): Node {\r\n        const {model} = this;\r\n        const treeElement = element(\"e-tree\", {\r\n            attributes: {\r\n                tabindex: 0,\r\n            },\r\n            children: reactiveChildElements(\r\n                model.childItems, item => this.#renderTreeItem(item, model)\r\n            ),\r\n            listeners: {\r\n                dragstart: <EventListener>this.#handleDragStartEvent.bind(this),\r\n                drop: <EventListener>this.#handleDropEvent.bind(this),\r\n                contextmenu: <EventListener>this.#handleContextMenuEvent.bind(this),\r\n                keydown: <EventListener>this.#handleKeyDownEvent.bind(this),\r\n                focus: <EventListener>this.#handleFocusEvent.bind(this),\r\n                focusin: <EventListener>this.#handleFocusInEvent.bind(this),\r\n                focusout: <EventListener>this.#handleFocusOutEvent.bind(this),\r\n            }\r\n        });\r\n        return fragment(\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/main.css\"\r\n                }\r\n            }),\r\n            element(\"link\", {\r\n                attributes: {\r\n                    rel: \"stylesheet\",\r\n                    href: \"css/views/gridview.css\"\r\n                }\r\n            }),\r\n            treeElement,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    class: \"offscreen\",\r\n                    hidden: true\r\n                },\r\n                children: reactiveChildElements(model.items,\r\n                    item => this.#renderTreeItemDragImage(item)\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    selectedItems(tree: HTMLETreeElement): TreeItemModel[] {\r\n        const {model} = this;\r\n        const selectedElements = tree.selectedItems();\r\n        return selectedElements.map(\r\n            item_i => <TreeItemModel>model.getItemByUri(item_i.dataset.uri!)\r\n        );\r\n    }\r\n\r\n    #getDragImage(model: TreeItemModel): Element | null {\r\n        return this.#dragImages.get(model)?.deref() ?? null;\r\n    }\r\n\r\n    #renderTreeItem(item: TreeItemModel, model: TreeModel): HTMLETreeItemElement {\r\n        const treeItemElement = reactiveElement(\r\n            item,\r\n            element(\"e-treeitem\", {\r\n                attributes: {\r\n                    type: item.type,\r\n                    draggable: String(true),\r\n                    posinset: item.index,\r\n                    level: item.level\r\n                },\r\n                dataset: {\r\n                    uri: item.uri\r\n                },\r\n                children: [\r\n                    this.itemContentDelegate(item),\r\n                    ].concat(\r\n                        (item.type == \"parent\") ? [\r\n                            element(\"e-treeitemgroup\", {\r\n                                attributes: {\r\n                                    slot: \"group\"\r\n                                },\r\n                                children: reactiveChildElements(item.childItems,\r\n                                    item => this.#renderTreeItem(item, model)\r\n                                )\r\n                            })\r\n                        ] : []\r\n                    )\r\n            }),\r\n            [\"index\"],\r\n            (treeitem, propertyName, oldValue, newValue) => {\r\n                treeitem.posinset = newValue;\r\n            }\r\n        );\r\n        return treeItemElement;\r\n    }\r\n\r\n    #renderTreeItemDragImage(item: TreeItemModel): Element {\r\n        const dragImageElement = reactiveElement(\r\n            item,\r\n            element(\"span\", {\r\n                attributes: {\r\n                    class: \"dragimage\"\r\n                }\r\n            }),\r\n            [\"label\"],\r\n            (span, property, oldValue, newValue) => {\r\n                span.textContent = newValue;\r\n            }\r\n        );\r\n        this.#dragImages.set(item, new WeakRef(dragImageElement));\r\n        return dragImageElement;\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            const selectedElements = targetTree.selectedItems();\r\n            const {length: selectedCount} = selectedElements;\r\n            if (selectedCount > 0) {\r\n                const selectedUris = \r\n                    selectedElements\r\n                    .map(element_i => element_i.dataset.uri!)\r\n                    .filter(\r\n                        (uri_i, _, uris) => !uris.some(\r\n                            uri_j => uri_i.startsWith(`${uri_j}/`)\r\n                        )\r\n                    );\r\n                const selectedUrisString = selectedUris.join(\"\\n\");\r\n                const lastUri = selectedUris[selectedUris.length - 1];\r\n                const lastItem = model.getItemByUri(lastUri);\r\n                if (lastItem && dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", selectedUrisString);\r\n                    const dragImage = this.#getDragImage(lastItem);\r\n                    if (dragImage) {\r\n                        dataTransfer.setDragImage(dragImage, -16, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        const {sortFunction} = model;\r\n        if (targetItem) {\r\n            const {dataTransfer} = event;\r\n            if (dataTransfer) {\r\n                const targetUri = targetItem.dataset.uri!;\r\n                const targetItemModel = model.getItemByUri(targetUri)!;\r\n                const transferedUris = dataTransfer.getData(\"text/plain\").split(\"\\n\");\r\n                const targetIsWithin = transferedUris.some(uri_i => targetUri.startsWith(`${uri_i}/`) || uri_i == targetUri);\r\n                if (!targetIsWithin) {\r\n                    const transferedItems = <TreeItemModel[]>transferedUris.map(\r\n                        uri_i => model.getItemByUri(uri_i)\r\n                    ).filter(\r\n                        item_i => item_i !== null\r\n                    );\r\n                    const {type: targetType, parentItem: targetParentItem} = targetItemModel;\r\n                    const {childItems: targetList} =\r\n                        targetType == \"parent\" ? targetItemModel :\r\n                        targetParentItem ? targetParentItem : model;\r\n                    const targetItems = Array.from(targetList.values());\r\n                    targetItems.forEach((item_i) => {\r\n                        const sameLabelIndex = transferedItems.findIndex(item_j => item_j.name == item_i.name);\r\n                        if (sameLabelIndex > -1) {\r\n                            const doReplace = confirm(`Replace ${item_i.name}?`);\r\n                            if (doReplace) {\r\n                                targetList.remove(item_i);\r\n                            }\r\n                            else {\r\n                                transferedItems.copyWithin(sameLabelIndex, sameLabelIndex + 1);\r\n                                transferedItems.length--;\r\n                            }\r\n                        }\r\n                    });\r\n                    const itemsList = new TreeItemList(transferedItems);\r\n                    itemsList.remove();\r\n                    if (sortFunction) {\r\n                        targetList.beginChanges();\r\n                        targetList.append(...transferedItems);\r\n                        targetList.sort(sortFunction);\r\n                        targetList.endChanges();\r\n                    }\r\n                    else {\r\n                        targetList.insert(targetItem.posinset, ...transferedItems);\r\n                    }\r\n                    const newElements = targetTree.querySelectorAll<HTMLETreeItemElement>(`e-treeitem:is(${\r\n                        transferedItems.map(item_i => `[data-uri=\"${item_i.uri}\"]`).join(\",\")\r\n                    })`);\r\n                    targetTree.beginSelection();\r\n                    newElements.forEach(element_i => element_i.selected = true);\r\n                    targetTree.endSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent): void {\r\n        const {clientX, clientY, currentTarget, target} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        const {model} = this;\r\n        if (targetItem) {\r\n            const targetItemModel = model.getItemByUri(targetItem.dataset.uri!)!;\r\n            const contextMenu = element(\"e-menu\", {\r\n                attributes: {\r\n                    contextual: true\r\n                },\r\n                children: this.itemContextMenuDelegate(targetItemModel, this.selectedItems(targetTree)),\r\n                listeners: {\r\n                    close: () => {\r\n                        targetItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            });\r\n            targetTree.append(contextMenu);\r\n            contextMenu.positionContextual(clientX, clientY);\r\n            contextMenu.focus({preventScroll: true});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            const relatedPosition = (<Node>relatedTarget).compareDocumentPosition(targetTree);\r\n            if (relatedPosition & Node.DOCUMENT_POSITION_PRECEDING) {\r\n                const {activeItem} = targetTree;\r\n                if (activeItem) {\r\n                    const toolbar = activeItem.querySelector(\"e-toolbar\");\r\n                    if (toolbar) {\r\n                        toolbar.focus();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const toolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = toolbar.contains(<Node>target) ? -1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement>(<Element>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            const toolbar = targetItem.querySelector(\"e-toolbar\");\r\n            if (toolbar) {\r\n                toolbar.tabIndex = toolbar.contains(<Node>target) ? 0 : -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLETreeElement>currentTarget;\r\n        switch (key) {\r\n            case \"Delete\": {\r\n                const itemsList = new TreeItemList(this.selectedItems(targetTree));\r\n                const {count} = itemsList;\r\n                const doRemove = confirm(`Remove ${count} items?`);\r\n                if (doRemove) {\r\n                    itemsList.remove();\r\n                }\r\n                targetTree.focus();\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar TreeView: TreeViewConstructor = TreeViewBase;","import { ReactiveChildElements } from \"../../elements/Element\";\r\nimport { camelToTrain } from \"../../elements/Snippets\";\r\n\r\nexport { WidgetFactoryConstructor };\r\n\r\nexport { widget };\r\nexport { Widget };\r\nexport { WidgetFactory };\r\nexport { widgets };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {}\r\n}\r\n\r\ninterface WidgetFactoryConstructor {\r\n    prototype: WidgetFactory;\r\n    new(): WidgetFactory;\r\n}\r\n\r\ninterface WidgetFactory {\r\n    create(properties?: object): HTMLElement;\r\n    slot(root: HTMLElement, name: string | null): HTMLElement | null;\r\n}\r\n\r\nvar slotsMap: WeakMap<HTMLElement, {\r\n    widget: WidgetFactory,\r\n    element: WeakRef<HTMLElement>;\r\n    slot: string | null;\r\n}[]> = new WeakMap();\r\nvar slotsObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const slotReferences = slotsMap.get(target);\r\n                        if (slotReferences) {\r\n                            slotReferences.forEach(slotRef_i => {\r\n                                const {widget, element, slot} = slotRef_i;\r\n                                const slottedCallback = (widget as any)[\"slottedCallback\"];\r\n                                if (typeof slottedCallback == \"function\") {\r\n                                    slottedCallback(element.deref(), target, slot);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nvar widgetsMap: WeakMap<HTMLElement, WidgetFactory> = new WeakMap();\r\nvar attributesObserver = new MutationObserver(\r\n    (mutationsList: MutationRecord[]) => {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            if (target instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"attributes\": {\r\n                        const {attributeName, oldValue} = mutation;\r\n                        const widget = widgetsMap.get(target);\r\n                        if (widget) {\r\n                            const attributeChangedCallback = (widget as any)[\"attributeChangedCallback\"];\r\n                            if (typeof attributeChangedCallback == \"function\") {\r\n                                attributeChangedCallback(target, attributeName, oldValue, target.getAttribute(attributeName!));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\nclass WidgetFactoryBase implements WidgetFactory {\r\n\r\n    constructor() {\r\n        const widget = <WidgetFactory>this;\r\n        this.create = new Proxy(\r\n            this.create, {\r\n                apply: (target, thisArg, argumentsList: Parameters<WidgetFactory[\"create\"]>) => {\r\n                    const element = <HTMLElement>Reflect.apply(target, thisArg, argumentsList);\r\n                    const observedSlots = <(string | null)[]>(widget as any)[\"observedSlots\"];\r\n                    if (Array.isArray(observedSlots)) {\r\n                        const slots = observedSlots\r\n                            .map(slotName_i => {\r\n                                return {\r\n                                    slotName: slotName_i,\r\n                                    slotElement: widget.slot(element, slotName_i)\r\n                                };\r\n                            });\r\n                        slots.forEach(slot_i => {\r\n                            const {slotElement, slotName} = slot_i;\r\n                            if (slotElement) {\r\n                                slotsObserver.observe(slotElement, {\r\n                                    childList: true\r\n                                });\r\n                                const slotReferences = slotsMap.get(slotElement);\r\n                                const slotReference = {widget, element: new WeakRef(element), slot: slotName};\r\n                                if (Array.isArray(slotReferences)) {\r\n                                    slotReferences.push(slotReference);\r\n                                }\r\n                                else {\r\n                                    slotsMap.set(slotElement, new Array(slotReference));\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    const observedAttributes = (widget as any)[\"observedAttributes\"];\r\n                    if (Array.isArray(observedAttributes)) {\r\n                        widgetsMap.set(element, widget);\r\n                        attributesObserver.observe(element, {\r\n                            attributes: true,\r\n                            attributeFilter: observedAttributes,\r\n                            attributeOldValue: true\r\n                        });\r\n                    }\r\n                    return element;\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    create(): HTMLElement {\r\n        throw new Error(`create method is not implemented`);\r\n    }\r\n\r\n    slot(): HTMLElement | null {\r\n        return null;\r\n    }\r\n\r\n    get observedSlots(): string[] {\r\n        return [\"\"];\r\n    }\r\n}\r\n\r\nvar WidgetFactory: WidgetFactoryConstructor = WidgetFactoryBase;\r\nvar widgets: Map<string, WidgetFactory> = new Map();\r\n\r\ninterface WidgetInit<K extends keyof WidgetNameMap> {\r\n    properties?: Parameters<WidgetNameMap[K][\"create\"]>[0],\r\n    attributes?: {\r\n        [name: string]: number | string | boolean\r\n    },\r\n    dataset?: {\r\n        [property: string]: string | number | boolean\r\n    },\r\n    slotted?: {\r\n        [slot: string]: Node | string | (Node | string)[] | NodeList | ReactiveChildElements\r\n    } | (Node | string | (Node | string)[] | NodeList | ReactiveChildElements),\r\n    listeners?: {\r\n        [EventName in keyof HTMLElementEventMap]?: EventListenerOrEventListenerObject | [EventListenerOrEventListenerObject, boolean | AddEventListenerOptions | undefined]\r\n    }\r\n}\r\n\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): ReturnType<WidgetNameMap[K][\"create\"]>;\r\nfunction widget<K extends keyof WidgetNameMap>(\r\n    name: K, init?: WidgetInit<K>): HTMLElement {\r\n    const widget = widgets.get(name);\r\n    if (widget) {\r\n        if (init !== undefined) {\r\n            const {properties, attributes, dataset, slotted, listeners} = init;\r\n            const element = widget.create(properties);\r\n            if (attributes) {\r\n                Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\r\n                    if (attributeValue !== undefined) {\r\n                        if (typeof attributeValue === \"boolean\") {\r\n                            element.toggleAttribute(camelToTrain(attributeName), attributeValue);\r\n                        }\r\n                        else {\r\n                            element.setAttribute(camelToTrain(attributeName), String(attributeValue));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (dataset) {\r\n                const {dataset: elementDataset} = element;\r\n                Object.keys(dataset).forEach((datasetEntry_i) => {\r\n                    elementDataset[datasetEntry_i] = String(dataset[datasetEntry_i]);\r\n                });\r\n            }\r\n            if (slotted) {\r\n                if (typeof slotted === \"function\" || Array.isArray(slotted) || slotted instanceof NodeList || typeof slotted === \"string\" || slotted instanceof Node) {\r\n                    const slot = widget.slot(element, null);\r\n                    if (slot) {\r\n                        if (typeof slotted === \"function\") {\r\n                            slot.append(...slotted(slot));\r\n                        }\r\n                        else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                            slot.append(...Array.from(slotted));\r\n                        }\r\n                        else {\r\n                            slot.append(slotted);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    Object.entries(slotted).forEach(([slot_i, slotted]) => {\r\n                        const slot = widget.slot(element, slot_i);\r\n                        if (slot) {\r\n                            if (typeof slotted === \"function\") {\r\n                                slot.append(...slotted(slot));\r\n                            }\r\n                            else if (typeof slotted === \"object\" && \"length\" in slotted) {\r\n                                slot.append(...Array.from(slotted));\r\n                            }\r\n                            else {\r\n                                slot.append(slotted);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (listeners) {\r\n                Object.entries(listeners).forEach(([name_i, listener_i]) => {\r\n                    if (Array.isArray(listener_i)) {\r\n                        element.addEventListener(name_i, listener_i[0], listener_i[1]);\r\n                    }\r\n                    else {\r\n                        element.addEventListener(name_i, listener_i);\r\n                    }\r\n                });\r\n            }\r\n            return element;\r\n        }\r\n        else {\r\n            return widget.create();\r\n        }\r\n    }\r\n    throw new Error(`Unknown widget ${name}. The corresponding module might not be imported.`);\r\n}\r\n\r\ninterface WidgetDecorator {\r\n    (init: {\r\n        name: string;\r\n    }): <W extends WidgetFactoryConstructor>(widget: W) => W;\r\n}\r\n\r\nconst Widget: WidgetDecorator = function(init: {\r\n    name: string;\r\n}) {\r\n    return <W extends WidgetFactoryConstructor>(\r\n        widget: W\r\n    ) => {\r\n        const {name} = init;\r\n        widgets.set(\r\n            name,\r\n            new widget()\r\n        );\r\n        return widget;\r\n    }\r\n}","import { EMenuItem } from \"./src/elements/containers/menus/MenuItem\";\r\nimport { HTMLEToolBarItemElement } from \"./src/elements/containers/toolbars/ToolBarItem\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { ModelEvent, ModelList, ModelObject, ModelProperty } from \"./src/models/Model\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { TreeItemList, TreeItemModel, TreeModel, TreeView } from \"./src/views/TreeView\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\n\r\nclass MyTreeItemList extends TreeItemList {\r\n    readonly items!: MyTreeItemModel[];\r\n\r\n    constructor(items: MyTreeItemModel[]) {\r\n        super(items);\r\n    }\r\n\r\n    get count(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    show(): void {\r\n        this.items.forEach(item_i => item_i.show());\r\n    }\r\n\r\n    hide(): void {\r\n        this.items.forEach(item_i => item_i.hide());\r\n    }\r\n\r\n    display(): void {\r\n        const result = this.items.reduce(\r\n            (result, item_i) => `${result} ${item_i.name}`, \"\"\r\n        );\r\n        console.log(result);\r\n    }\r\n}\r\n\r\nclass MyTreeItemModel extends TreeItemModel {\r\n    \r\n    @ModelProperty()\r\n    childCount: number;\r\n\r\n    @ModelProperty()\r\n    visibility: boolean;\r\n\r\n    constructor(init: {name: string, type: \"leaf\" | \"parent\", items?: TreeItemModel[]}) {\r\n        super(init);\r\n        this.childCount = this.childItems.length;\r\n        this.visibility = true;\r\n        this.addEventListener(\"modelchange\", this.#handleModelChangeEvent.bind(this));\r\n    }\r\n\r\n    show(): void {\r\n        this.visibility = true;\r\n    }\r\n\r\n    hide(): void {\r\n        this.visibility = false;\r\n    }\r\n\r\n    display(): void {\r\n        console.log(this.name);\r\n    }\r\n\r\n    #handleModelChangeEvent(event: ModelEvent): void {\r\n        const {target} = event;\r\n        const {childItems} = this;\r\n        if (target == childItems) {\r\n            this.childCount = childItems.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function TreeMain() {\r\n    const gridView = new GridView();\r\n    gridView.resizable = true;\r\n    gridView.setModel(\r\n        new GridModel({\r\n            columns: [\r\n                new GridColumnModel({\r\n                    name: \"name\",\r\n                    type: String,\r\n                    label: \"Name\",\r\n                    extract: (row) => row.name\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"age\",\r\n                    type: Number,\r\n                    label: \"Age\",\r\n                    extract: (row) => row.age,\r\n                    filters: [{\r\n                        name: \"Minors\",\r\n                        filter: (row) => row.age < 18\r\n                    },{\r\n                        name: \"Majors\",\r\n                        filter: (row) => row.age >= 18\r\n                    }]\r\n                }),\r\n                new GridColumnModel({\r\n                    name: \"birthyear\",\r\n                    type: String,\r\n                    label: \"Brith Year\",\r\n                    extract: (row) => new Date().getFullYear() - row.age\r\n                }),\r\n            ],\r\n            rows: [\r\n                new GridRowModel({\r\n                    id: 1,\r\n                    name: \"Denis\",\r\n                    age: 13\r\n                }),\r\n                new GridRowModel({\r\n                    id: 2,\r\n                    name: \"Jean-Charles\",\r\n                    age: 32\r\n                }),\r\n                new GridRowModel({\r\n                    id: 3,\r\n                    name: \"Charles\",\r\n                    age: 25\r\n                }),\r\n                new GridRowModel({\r\n                    id: 4,\r\n                    name: \"Mamagubida\",\r\n                    age: 128\r\n                })\r\n            ]\r\n        })\r\n    );\r\n    document.body.append(gridView);\r\n\r\n    const treeModel = new TreeModel({\r\n        items: [\r\n            new MyTreeItemModel({\r\n                name: \"TI 0\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                name: \"TI 1\",\r\n                type: \"parent\",\r\n                items: [\r\n                    new MyTreeItemModel({\r\n                        name: \"TI 1A\",\r\n                        type: \"parent\",\r\n                        items: [\r\n                            new MyTreeItemModel({\r\n                                type: \"leaf\",\r\n                                name: \"TI 1AX\"\r\n                            }),\r\n                        ]\r\n                    }),\r\n                    new MyTreeItemModel({\r\n                        type: \"parent\",\r\n                        name: \"TI 1B\"\r\n                    })\r\n                ]\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 2\"\r\n            }),\r\n            new MyTreeItemModel({\r\n                type: \"leaf\",\r\n                name: \"TI 3\"\r\n            })\r\n        ],\r\n        /*sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n            const {name: aLabel} = item_a;\r\n            const {name: bLabel} = item_b;\r\n            return bLabel.localeCompare(aLabel);\r\n        }*/\r\n    });\r\n    (<any>window)[\"model\"] = treeModel;\r\n    const treeView = new TreeView(treeModel);\r\n    treeView.itemContentDelegate = <typeof treeView.itemContentDelegate>(\r\n        (item: MyTreeItemModel) => {\r\n            return fragment(\r\n                ...([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"label\"\r\n                            }\r\n                        }),\r\n                        [\"name\"],\r\n                        (label, property, oldValue, newValue) => {\r\n                            label.textContent = `${item.name}`;\r\n                        }\r\n                    )\r\n                ]).concat(\r\n                    (item.type == \"parent\") ? [\r\n                        reactiveElement(\r\n                            item,\r\n                            element(\"span\", {\r\n                                attributes: {\r\n                                    class: \"badge\"\r\n                                }\r\n                            }),\r\n                            [\"childCount\"],\r\n                            (badge, property, oldValue, newValue) => {\r\n                                badge.textContent = `(${newValue})`;\r\n                            }\r\n                        )\r\n                    ] : []\r\n                ).concat([\r\n                    reactiveElement(\r\n                        item,\r\n                        element(\"e-toolbar\", {\r\n                            children: [\r\n                                element(\"e-toolbaritem\", {\r\n                                    attributes: {\r\n                                        name: \"visibility\",\r\n                                        type: \"checkbox\",\r\n                                        label: \"Visibility\"\r\n                                    },\r\n                                    listeners: {\r\n                                        click: () => {\r\n                                            item.visibility ?\r\n                                                item.hide() :\r\n                                                item.show();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }),\r\n                        [\"visibility\"],\r\n                        (toolbar, property, oldValue, newValue) => {\r\n                            switch (property) {\r\n                                case \"visibility\": {\r\n                                    const visibilityItem = toolbar\r\n                                        .querySelector<HTMLEToolBarItemElement>(\"e-toolbaritem[name=visibility]\");\r\n                                    if (visibilityItem) {\r\n                                        const label = newValue ? \"Hide\" : \"Show\";\r\n                                        visibilityItem.label = label;\r\n                                        visibilityItem.title = label;\r\n                                        visibilityItem.pressed = newValue;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    )\r\n                ])\r\n            );\r\n        }\r\n    );\r\n    treeView.itemContextMenuDelegate = <typeof treeView.itemContextMenuDelegate>(\r\n        (activeItem: MyTreeItemModel, selectedItems: MyTreeItemModel[]) => {\r\n            return fragment(\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Display\"\r\n                            },\r\n                            children: \"Display\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    itemsList.display();\r\n                                }\r\n                            }\r\n                        }),\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                label: \"Delete\"\r\n                            },\r\n                            children: \"Delete\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    const {count} = itemsList;\r\n                                    const doRemove = confirm(`Remove ${count} items?`);\r\n                                    if (doRemove) {\r\n                                        itemsList.remove();\r\n                                    }\r\n                                    treeView.treeElement().focus();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"e-separator\"),\r\n                element(\"e-menuitemgroup\", {\r\n                    children: [\r\n                        element(\"e-menuitem\", {\r\n                            attributes: {\r\n                                type: \"checkbox\",\r\n                                label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n                            },\r\n                            children: activeItem.visibility ? \"Hide\" : \"Show\",\r\n                            listeners: {\r\n                                click: () => {\r\n                                    const itemsList = new MyTreeItemList(selectedItems);\r\n                                    activeItem.visibility ?\r\n                                        itemsList.hide() :\r\n                                        itemsList.show();\r\n                                }\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            )\r\n        }\r\n    );\r\n    treeView.refresh();\r\n    document.body.append(treeView);\r\n\r\n    document.body.append(\r\n        element(\"e-menubar\", {\r\n            children: element(\"e-menuitem\", {\r\n                attributes: {\r\n                    type: \"menu\",\r\n                    label: \"Menu 1\"\r\n                },\r\n                children: [\r\n                    \"Menu 1\",\r\n                    element(\"e-menu\", {\r\n                        attributes: {\r\n                            slot: \"menu\"\r\n                        },\r\n                        children: [\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"checkbox\"\r\n                                },\r\n                                children: \"Hey\"\r\n                            }),\r\n                            element(\"e-menuitem\", {\r\n                                attributes: {\r\n                                    type: \"submenu\"\r\n                                },\r\n                                children: [\r\n                                    \"Submenu 1\",\r\n                                    element(\"e-menu\", {\r\n                                        attributes: {\r\n                                            slot: \"menu\"\r\n                                        },\r\n                                        children: [\r\n                                            /*element(\"e-menuitem\", {\r\n                                                attributes: {\r\n                                                    type: \"checkbox\"\r\n                                                },\r\n                                                children: \"Yo\"\r\n                                            })*/\r\n                                            new EMenuItem({\r\n                                                label: \"Yo\"\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        })\r\n    );\r\n        \r\n    const menuView = widget(\"menubar\", {\r\n        slotted: [\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\",\r\n                    disabled: true\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 0\",\r\n                    name: \"MenuItem 0\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"MenuItem 1\",\r\n                                    name: \"MenuItem 1\",\r\n                                    type: \"checkbox\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            widget(\"menuitem\", {\r\n                properties: {\r\n                    label: \"MenuItem 1\",\r\n                    name: \"MenuItem 1\",\r\n                    type: \"menu\"\r\n                },\r\n                slotted: [\r\n                    widget(\"menu\", {\r\n                        slotted: [\r\n                            widget(\"menuitemgroup\", {\r\n                                slotted: [\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            label: \"MenuItem 1\",\r\n                                            type: \"checkbox\",\r\n                                            keyshortcut: \"Ctrl+B\",\r\n                                            disabled: true,\r\n                                            checked: true\r\n                                        }\r\n                                    }),\r\n                                    widget(\"menuitem\", {\r\n                                        properties: {\r\n                                            type: \"button\",\r\n                                            label: \"MenuItem 2\",\r\n                                            keyshortcut: \"Ctrl+A\"\r\n                                        }\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            widget(\"separator\"),\r\n                            widget(\"menuitem\", {\r\n                                properties: {\r\n                                    label: \"Submenu\",\r\n                                    type: \"submenu\"\r\n                                },\r\n                                slotted: [\r\n                                    widget(\"menu\", {\r\n                                        slotted: [\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    label: \"MenuItem 1\",\r\n                                                    type: \"radio\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"1\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 2\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"2\"\r\n                                                }\r\n                                            }),\r\n                                            widget(\"menuitem\", {\r\n                                                properties: {\r\n                                                    type: \"radio\",\r\n                                                    label: \"MenuItem 3\",\r\n                                                    name: \"radio\",\r\n                                                    value: \"3\"\r\n                                                }\r\n                                            })\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    })\r\n    document.body.append(menuView);\r\n\r\n    document.body.append(\r\n        widget(\"combobox\", {\r\n            slotted: [\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"First option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Second option\"\r\n                    }\r\n                }),\r\n                widget(\"option\",  {\r\n                    properties: {\r\n                        label: \"Third option\",\r\n                        selected: true\r\n                    }\r\n                })\r\n            ]\r\n        })\r\n    );\r\n\r\n    document.body.append(\r\n        widget(\"toolbar\", {\r\n            slotted: [\r\n                widget(\"toolbaritem\",  {\r\n                    properties: {\r\n                        type: \"menubutton\"\r\n                    },\r\n                    slotted: [\r\n                        \"Yo!\",\r\n                        widget(\"menu\", {\r\n                            slotted: [\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        label: \"MenuItem 1\",\r\n                                        type: \"radio\",\r\n                                        name: \"radio\",\r\n                                        value: \"1\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 2\",\r\n                                        name: \"radio\",\r\n                                        value: \"2\"\r\n                                    }\r\n                                }),\r\n                                widget(\"menuitem\", {\r\n                                    properties: {\r\n                                        type: \"radio\",\r\n                                        label: \"MenuItem 3\",\r\n                                        name: \"radio\",\r\n                                        value: \"3\"\r\n                                    }\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        })\r\n    );\r\n}","export { Key };\r\nexport { KeyModifier };\r\nexport { HotKey };\r\nexport { MouseButton };\r\n\r\nenum Key {\r\n    A = \"a\",\r\n    B = \"b\",\r\n    C = \"c\",\r\n    D = \"d\",\r\n    E = \"e\",\r\n    F = \"f\",\r\n    G = \"g\",\r\n    H = \"h\",\r\n    I = \"i\",\r\n    J = \"j\",\r\n    K = \"k\",\r\n    L = \"l\",\r\n    M = \"m\",\r\n    O = \"o\",\r\n    P = \"p\",\r\n    Q = \"q\",\r\n    R = \"r\",\r\n    S = \"s\",\r\n    T = \"t\",\r\n    U = \"u\",\r\n    V = \"v\",\r\n    W = \"w\",\r\n    X = \"x\",\r\n    Y = \"y\",\r\n    Z = \"z\",\r\n    ENTER = \"Enter\",\r\n    BACKSPACE = \"Backspace\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    SHIFT = \"Shift\"\r\n}\r\n\r\nenum KeyModifier {\r\n    Alt = \"Alt\",\r\n    Control = \"Control\",\r\n    Shift = \"Shift\"\r\n}\r\n\r\nenum MouseButton {\r\n    LEFT = 1,\r\n    WHEEL = 2,\r\n    RIGHT = 3,\r\n    FORWARD = 4,\r\n    BACK = 5\r\n}\r\n\r\nclass HotKey {\r\n    readonly key: Key;\r\n    readonly mod1?: KeyModifier;\r\n    readonly mod2?: KeyModifier;\r\n\r\n    constructor(key: Key, mod1?: KeyModifier, mod2?: KeyModifier) {\r\n        this.key = key;\r\n        this.mod1 = mod1;\r\n        this.mod2 = mod2;\r\n    }\r\n\r\n    toString(): string {\r\n        return `${this.mod1 ? `${this.#modifierString(this.mod1)}+` : \"\"}${this.mod2 ? `${this.#modifierString(this.mod2)}+` : \"\"}${(this.key.length == 1) ? this.key.toUpperCase() : this.key}`;\r\n    }\r\n\r\n    test(event: KeyboardEvent): boolean {\r\n        return (!this.mod1 || this.#testModifier(this.mod1, event)) && (!this.mod2 || this.#testModifier(this.mod2, event)) && event.key == this.key;\r\n    }\r\n\r\n    #modifierString(mod: KeyModifier): string {\r\n        switch (mod) {\r\n            case KeyModifier.Control:\r\n                return \"Ctrl\";\r\n            default:\r\n                return mod;\r\n        }\r\n    }\r\n\r\n    #testModifier(mod: KeyModifier, event: KeyboardEvent): boolean {\r\n        switch (mod) {\r\n            case \"Alt\":\r\n                return event.altKey;\r\n            case \"Control\":\r\n                return event.ctrlKey;\r\n            case \"Shift\":\r\n                return event.shiftKey;\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n}","import { AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEActionElement };\r\nexport { ActionType };\r\n\r\ninterface HTMLEActionElementConstructor {\r\n    prototype: HTMLEActionElement;\r\n    new(): HTMLEActionElement;\r\n}\r\n\r\ninterface HTMLEActionElement extends HTMLElement {\r\n    name: string;\r\n    value: string;\r\n    checked: boolean;\r\n    type: string;\r\n    disabled: boolean;\r\n    hotkey: string;\r\n\r\n    trigger(): void;\r\n    enable(): void;\r\n    disable(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"trigger\": Event;\r\n    }\r\n}\r\n\r\ntype ActionType = \"button\" | \"checkbox\" | \"radio\" | \"select\";\r\n\r\nclass HTMLEActionElementBase extends HTMLElement implements HTMLEActionElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    hotkey!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"button\"})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    checked!: boolean;\r\n\r\n    trigger(): void {\r\n        if (!this.disabled) {\r\n            switch (this.type) {\r\n                case \"checkbox\":\r\n                    this.checked = !this.checked;\r\n                    break;\r\n                case \"radio\":\r\n                    this.checked = true;\r\n                    break;\r\n            }\r\n            this.dispatchEvent(new Event(\"trigger\", {\r\n                bubbles: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    enable(): void {\r\n        this.disabled = false;\r\n    }\r\n\r\n    disable(): void {\r\n        this.disabled = true;\r\n    }\r\n}\r\n\r\nvar HTMLEActionElement: HTMLEActionElementConstructor = HTMLEActionElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEGridCellElement };\r\n\r\ninterface HTMLEGridCellElementConstructor {\r\n    prototype: HTMLEGridCellElement;\r\n    new(): HTMLEGridCellElement;\r\n}\r\n\r\ninterface HTMLEGridCellElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n    headers: string;\r\n    posinset: number;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridcell\": HTMLEGridCellElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridcell\"\r\n})\r\nclass HTMLEGridCellElementBase extends HTMLElement implements HTMLEGridCellElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    headers!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"rowheader\" | \"columnheader\" | \"gridcell\";\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellElement: HTMLEGridCellElementConstructor = HTMLEGridCellElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\n\r\nexport { HTMLEGridRowGroupElement };\r\n\r\ninterface HTMLEGridRowGroupElementConstructor {\r\n    prototype: HTMLEGridRowGroupElement;\r\n    new(): HTMLEGridRowGroupElement;\r\n}\r\n\r\ninterface HTMLEGridRowGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrowgroup\": HTMLEGridRowGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrowgroup\"\r\n})\r\nclass HTMLEGridRowGroupElementBase extends HTMLElement implements HTMLEGridRowGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                            /*display: flex;\r\n                            flex-direction: column;*/\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowGroupElement: HTMLEGridRowGroupElementConstructor = HTMLEGridRowGroupElementBase;","import { element, CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuItemElement, EMenuItem } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuItemGroupElement };\r\nexport { EMenuItemGroup };\r\n\r\ninterface HTMLEMenuItemGroupElementConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(): HTMLEMenuItemGroupElement;\r\n}\r\n\r\ninterface HTMLEMenuItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    label: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menuitemgroup\": HTMLEMenuItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menuitemgroup\"\r\n})\r\nclass HTMLEMenuItemGroupElementBase extends HTMLElement implements HTMLEMenuItemGroupElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEMenuItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEMenuItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            //item_i.index = i;\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\":\r\n                const label = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuItemGroupElement: HTMLEMenuItemGroupElementConstructor = HTMLEMenuItemGroupElementBase;\r\n\r\ninterface EMenuItemGroupConstructor {\r\n    prototype: HTMLEMenuItemGroupElement;\r\n    new(init: {\r\n        name?: string;\r\n        items: HTMLEMenuItemElement[];\r\n    }): HTMLEMenuItemGroupElement;\r\n    radios(init: {name: string, items: {label: string, value: string}[]}): HTMLEMenuItemGroupElement;\r\n}\r\n\r\nvar EMenuItemGroup = <EMenuItemGroupConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string,\r\n        items: HTMLEMenuItemElement[]\r\n    }) {\r\n        const {name, items} = init;\r\n        return element(\"e-menuitemgroup\", {\r\n            attributes: {\r\n                name: name\r\n            },\r\n            children: items\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuItemGroupElement.prototype,\r\n        radios: (init: {\r\n            name: string,\r\n            items: {\r\n                label: string,\r\n                value: string\r\n            }[]\r\n        }) => {\r\n            const {name, items} = init;\r\n            return element(\"e-menuitemgroup\", {\r\n                attributes: {\r\n                    name: name\r\n                },\r\n                children: items.map(\r\n                    ({label, value}) => new EMenuItem({name, label, type: \"radio\", value})\r\n                )\r\n            });\r\n        }\r\n    }\r\n);","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuElement };\r\nexport { EMenu };\r\n\r\ninterface HTMLEMenuElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    firstItem(): HTMLEMenuItemElement | null;\r\n    items(): HTMLEMenuItemElement[];\r\n    name: string;\r\n    contextual: boolean;\r\n    positionContextual(x: number, y: number): void;\r\n}\r\n\r\ninterface HTMLEMenuElementConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(): HTMLEMenuElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menu\": HTMLEMenuElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\nvar toggleTimeouts: WeakMap<HTMLEMenuItemElement, {clear(): void;}>;\r\n\r\n@CustomElement({\r\n    name: \"e-menu\"\r\n})\r\nclass HTMLEMenuElementBase extends HTMLElement implements HTMLEMenuElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    contextual!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n        toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        this.#activeIndex = -1;\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    positionContextual(x: number, y: number): void {\r\n        const {style} = this;\r\n        const {width: menuWidth, height: menuHeight} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    #collapseSubmenus(): void {\r\n        this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem[expanded]\"\r\n        )\r\n        .forEach((item_i) => {\r\n            item_i.collapse();\r\n        });\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextNode();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        return menu instanceof HTMLEMenuElementBase ?\r\n            menu.firstItem() :\r\n            null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        if (item !== null) {\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLEMenuItemElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLEMenuItemElement): void {\r\n        const timeout = toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(target);\r\n                if (isClosestMenu) {\r\n                    const {type, name, value} = target;\r\n                    if (type == \"radio\") {\r\n                        this.querySelectorAll<HTMLEMenuItemElement>(\r\n                            `:is(:scope, :scope > e-menuitemgroup) > e-menuitem[type=radio][name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            radio_i.checked = radio_i.value == value;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                this.#setActiveItem(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const {contextual} = this;\r\n            if (contextual) {\r\n                try {\r\n                    this.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const {activeItem} = this;\r\n                if (activeItem?.expanded) {\r\n                    activeItem.collapse();\r\n                }\r\n                this.#setActiveItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.firstItem() :\r\n                    this.firstItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menu\":\r\n                        case \"submenu\": {\r\n                            activeItem.expand();\r\n                            if (activeItem.expanded) {\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isClosestTargetMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLEMenuElement\r\n                    ) == this;\r\n                    if (!isClosestTargetMenu) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            if (!activeItem.expanded) {\r\n                                activeItem.expand();\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" &&\r\n                    !nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = this.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = this.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLEMenuElement && relatedTarget !== this) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            this.focus({preventScroll: true});\r\n                            this.#setActiveItem(null);\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        this.focus({preventScroll: true});\r\n                        this.#setActiveItem(null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem !== null) {\r\n                if (nearestItem.type == \"submenu\" && nearestItem.expanded) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLEMenuElement\r\n                ) == this;\r\n                if (isTargetClosestMenu) {\r\n                    const {activeItem} = this;\r\n                    if (activeItem?.type == \"submenu\" &&\r\n                        activeItem.expanded && \r\n                        !activeItem.contains(<Node>target)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, 400)\r\n                            .then(() => {\r\n                                activeItem.collapse();\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    this.#setActiveItem(nearestItem);\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (nearestItem.type == \"submenu\") {\r\n                        if (!nearestItem.expanded) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, 200)\r\n                                .then(() => {\r\n                                    const {activeItem} = this;\r\n                                    this.#collapseSubmenus();\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        activeItem.expand();\r\n                                        activeItem.menu?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            nearestItem.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuElement: HTMLEMenuElementConstructor = HTMLEMenuElementBase;\r\n\r\ninterface EMenuConstructor {\r\n    prototype: HTMLEMenuElement;\r\n    new(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }): HTMLEMenuElement;\r\n}\r\n\r\nvar EMenu = <EMenuConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name?: string;\r\n        children?: (HTMLEMenuItemElement | HTMLEMenuItemGroupElement | HTMLHRElement)[];\r\n    }) {\r\n        const {name, children} = init;\r\n        return element(\"e-menu\", {\r\n            attributes: {\r\n                name: name,\r\n                tabindex: -1,\r\n            },\r\n            children: children\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuElement.prototype,\r\n    }\r\n);","import { AttributeProperty, CustomElement, element } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\n\r\nexport { HTMLEGridRowElement };\r\n\r\ninterface HTMLEGridRowElementConstructor {\r\n    prototype: HTMLEGridRowElement;\r\n    new(): HTMLEGridRowElement;\r\n}\r\n\r\ninterface HTMLEGridRowElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    active: boolean;\r\n    selected: boolean;\r\n    posinset: number;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridrow\": HTMLEGridRowElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridrow\"\r\n})\r\nclass HTMLEGridRowElementBase extends HTMLElement implements HTMLEGridRowElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    #menu: HTMLEMenuElement | null;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row;\r\n                        }\r\n\r\n                        :host([droptarget]) {\r\n                            background-color: gainsboro;\r\n                        }\r\n                        \r\n                        :host(:hover) {\r\n                            background-color: rgba(135, 206, 250, 0.2);\r\n                        }\r\n\r\n                        :host([active]) {\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n\r\n                        :host([selected]) {\r\n                            background-color: rgba(135, 206, 250, 0.4);\r\n                            outline: 1px solid rgb(135, 206, 250);\r\n                            outline-offset: -1px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#menu = null;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n            default: {\r\n                const assignedCells = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n                    .assignedElements()\r\n                    .filter(\r\n                        element_i => element_i instanceof HTMLEGridCellElement\r\n                    );\r\n                assignedCells.forEach((cell_i, i) => {\r\n                    cell_i.posinset = i;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowElement: HTMLEGridRowElementConstructor = HTMLEGridRowElementBase;","import { HTMLEGridElement } from \"./Grid\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridCellCollection };\r\n\r\ninterface HTMLEGridCellCollectionConstructor {\r\n    prototype: HTMLEGridCellCollection;\r\n    new(root: HTMLElement): HTMLEGridCellCollection;\r\n}\r\n\r\ninterface HTMLEGridCellCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridCellElement | null;\r\n    namedItem(name: string): HTMLEGridCellElement | null;\r\n    values(): IterableIterator<HTMLEGridCellElement>;\r\n}\r\n\r\nclass HTMLEGridCellCollectionBase implements HTMLEGridCellCollection {\r\n    #walker: TreeWalker;\r\n\r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridCellElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridCellElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridCellElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridCellElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridCellElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridCellElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridCellCollection: HTMLEGridCellCollectionConstructor =  HTMLEGridCellCollectionBase;","import { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\n\r\nexport { HTMLEGridRowCollection };\r\n\r\ninterface HTMLEGridRowCollectionConstructor {\r\n    prototype: HTMLEGridRowCollection;\r\n    new(root: HTMLElement): HTMLEGridRowCollection;\r\n}\r\n\r\ninterface HTMLEGridRowCollection {\r\n    length: number;\r\n    item(index: number): HTMLEGridRowElement | null;\r\n    namedItem(name: string): HTMLEGridRowElement | null;\r\n    values(): IterableIterator<HTMLEGridRowElement>;\r\n}\r\n\r\nclass HTMLEGridRowCollectionBase implements HTMLEGridRowCollection {\r\n    #walker: TreeWalker;\r\n    \r\n    get length(): number {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let length = 0;\r\n        while (walker.nextNode() !== null) length++;\r\n        return length;\r\n    }\r\n\r\n    constructor(root: HTMLElement) {\r\n        this.#walker = document.createTreeWalker(\r\n            root, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    item(index: number): HTMLEGridRowElement | null {\r\n        if (index < 0) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        let i = 0;\r\n        while (i < index && currentNode !== null) {\r\n            currentNode = walker.nextNode();\r\n            i++;\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    namedItem(name: string): HTMLEGridRowElement | null {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        while (currentNode !== null && !(currentNode.name == name)) {\r\n            currentNode = <HTMLEGridRowElement | null>walker.nextNode();\r\n        }\r\n        return <HTMLEGridRowElement | null>currentNode;\r\n    }\r\n\r\n    *values(): IterableIterator<HTMLEGridRowElement> {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode !== null) {\r\n            yield <HTMLEGridRowElement>currentNode;\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEGridRowCollection: HTMLEGridRowCollectionConstructor =  HTMLEGridRowCollectionBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridBodyElement };\r\n\r\ninterface HTMLEGridBodyElementConstructor {\r\n    prototype: HTMLEGridBodyElement;\r\n    new(): HTMLEGridBodyElement;\r\n}\r\n\r\ninterface HTMLEGridBodyElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridbody\": HTMLEGridBodyElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridbody\"\r\n})\r\nclass HTMLEGridBodyElementBase extends HTMLElement implements HTMLEGridBodyElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridBodyElement: HTMLEGridBodyElementConstructor = HTMLEGridBodyElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEGridBodyElement } from \"./GridBody\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridHeadElement } from \"./GridHead\";\r\nimport { HTMLEGridRowElement } from \"./GridRow\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\nimport { HTMLEGridRowGroupElement } from \"./GridRowGroup\";\r\n\r\nexport { HTMLEGridElement };\r\n\r\ninterface HTMLEGridElementConstructor {\r\n    prototype: HTMLEGridElement;\r\n    new(): HTMLEGridElement;\r\n}\r\n\r\ninterface HTMLEGridElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly body: HTMLEGridBodyElement | null;\r\n    readonly head: HTMLEGridHeadElement | null\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n    readonly activeCell: HTMLEGridCellElement | null;\r\n    readonly activeRow: HTMLEGridRowElement | null;\r\n    selectby: \"cell\" | \"row\";\r\n    name: string;\r\n    multiselectable: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    clearSelection(): void;\r\n    selectedCells(): HTMLEGridCellElement[];\r\n    selectedRows(): HTMLEGridRowElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-grid\": HTMLEGridElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-grid\"\r\n})\r\nclass HTMLEGridElementBase extends HTMLElement implements HTMLEGridElement {\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    get activeCell(): HTMLEGridCellElement | null {\r\n        return this.querySelector<HTMLEGridCellElement>(\"e-gridcell[active]\");\r\n    }\r\n\r\n    get activeRow(): HTMLEGridRowElement | null {\r\n        return this.querySelector<HTMLEGridRowElement>(\"e-gridrow[active]\");\r\n    }\r\n\r\n    get body(): HTMLEGridBodyElement | null {\r\n        return this.querySelector<HTMLEGridBodyElement>(\":scope > e-gridbody\");\r\n    }\r\n\r\n    get head(): HTMLEGridHeadElement | null {\r\n        return this.querySelector<HTMLEGridHeadElement>(\":scope > e-gridhead\");\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"cell\"})\r\n    selectby!: \"cell\" | \"row\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiselectable!: boolean;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #cellsWalker: TreeWalker;\r\n    #rowsWalker: TreeWalker;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.#clearCellsSelection();\r\n        this.#clearRowsSelection();\r\n    }\r\n\r\n    selectedCells(): HTMLEGridCellElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridcell[selected]\"));\r\n    }\r\n\r\n    selectedRows(): HTMLEGridRowElement[] {\r\n        return Array.from(this.querySelectorAll(\"e-gridrow[selected]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridCellElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        if (node instanceof HTMLEGridRowElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEGridRowElement && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEGridBodyElement || node instanceof HTMLEGridRowGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLEGridCellElement, to: HTMLEGridCellElement): HTMLEGridCellElement[] {\r\n        const cells = Array.from(this.cells.values());\r\n        const fromIndex = cells.indexOf(from);\r\n        const toIndex = cells.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return cells.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLEGridRowElement, to: HTMLEGridRowElement): HTMLEGridRowElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleRow = this.#nextRow(from);\r\n            while (nextVisibleRow && nextVisibleRow !== to) {\r\n                range.push(nextVisibleRow);\r\n                nextVisibleRow = this.#nextRow(nextVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleRow = this.#previousRow(from);\r\n            while (previousVisibleRow && previousVisibleRow !== to) {\r\n                range.push(previousVisibleRow);\r\n                previousVisibleRow = this.#previousRow(previousVisibleRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                selectedCell_i.selected = false;\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setRowsSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                selectedRow_i.selected = false;\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addCellsToSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        cells.forEach((cell_i) => {\r\n            if (!cell_i.selected) {\r\n                cell_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addRowsToSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        rows.forEach((row_i) => {\r\n            if (!row_i.selected) {\r\n                row_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeCellsFromSelection(...cells: HTMLEGridCellElement[]): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeRowsFromSelection(...rows: HTMLEGridRowElement[]): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearCellsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedCells = this.selectedCells();\r\n        selectedCells.forEach((cell_i) => {\r\n            if (cell_i.selected) {\r\n                cell_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearRowsSelection(): void {\r\n        this.beginSelection();\r\n        const selectedRows = this.selectedRows();\r\n        selectedRows.forEach((row_i) => {\r\n            if (row_i.selected) {\r\n                row_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveCell(cell: HTMLEGridCellElement | null): void {\r\n        const {activeCell} = this;\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            activeCell.active = false;\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            const cellsWalker = this.#cellsWalker;\r\n            cellsWalker.currentNode = cell;\r\n            cell.active = true;\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(row: HTMLEGridRowElement | null): void {\r\n        const {activeRow} = this;\r\n        if (activeRow !== null && activeRow !== row) {\r\n            activeRow.active = false;\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            const rowsWalker = this.#rowsWalker;\r\n            rowsWalker.currentNode = row;\r\n            row.active = true;\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLEGridRowElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLEGridCellElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLEGridCellElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLEGridCellElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLEGridRowElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        const {root} = rowsWalker;\r\n        rowsWalker.currentNode = root;\r\n        return <HTMLEGridRowElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLEGridRowElement): HTMLEGridRowElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLEGridRowElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const {cells: previousRowCells} = previousRow;\r\n                return previousRowCells.item(\r\n                    Math.min(cellIndex, previousRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLEGridCellElement): HTMLEGridCellElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const {cells: closestRowCells} = closestRow;\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const {cells: nextRowCells} = nextRow;\r\n                return nextRowCells.item(\r\n                    Math.min(cellIndex, nextRowCells.length)\r\n                );\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {ctrlKey, shiftKey} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const composedPath = event.composedPath();\r\n                const targetCell = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridCellElement\r\n                ) : null;\r\n                const selectedCells = this.selectedCells();\r\n                if (targetCell instanceof HTMLEGridCellElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetCell.selected ?\r\n                            this.#addCellsToSelection(targetCell) :\r\n                            this.#removeCellsFromSelection(targetCell);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedCell = selectedCells[selectedCells.length - 1];\r\n                        if (lastSelectedCell) {\r\n                            const range = this.#getCellsRange(\r\n                                lastSelectedCell,\r\n                                targetCell\r\n                            );\r\n                            if (range) {\r\n                                selectedCells.includes(targetCell) ?\r\n                                    this.#removeCellsFromSelection(...range) :\r\n                                    this.#addCellsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setCellsSelection(targetCell);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const selectedRows = this.selectedRows();\r\n                const composedPath = event.composedPath();\r\n                const targetRow = composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridBodyElement\r\n                ) ? composedPath.find(\r\n                    target_i => target_i instanceof HTMLEGridRowElement\r\n                ) : null;\r\n                if (targetRow instanceof HTMLEGridRowElement) {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        !targetRow.selected ?\r\n                            this.#addRowsToSelection(targetRow) :\r\n                            this.#removeRowsFromSelection(targetRow);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const lastSelectedRow = selectedRows[selectedRows.length - 1];\r\n                        if (lastSelectedRow) {\r\n                            const range = this.#getRowsRange(\r\n                                lastSelectedRow,\r\n                                targetRow\r\n                            );\r\n                            if (range) {\r\n                                selectedRows.includes(targetRow) ?\r\n                                    this.#removeRowsFromSelection(...range) :\r\n                                    this.#addRowsToSelection(...range);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.#setRowsSelection(targetRow);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {selectby, activeCell, activeRow} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow();\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow();\r\n                            const lastRow = this.#lastRow();\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousCell.selected ?\r\n                                    this.#removeCellsFromSelection(previousCell) :\r\n                                    this.#addCellsToSelection(previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextCell.selected ?\r\n                                    this.#removeCellsFromSelection(nextCell) :\r\n                                    this.#addCellsToSelection(nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow();\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                topCell.selected ?\r\n                                    this.#removeCellsFromSelection(topCell) :\r\n                                    this.#addCellsToSelection(topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow();\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                previousRow.selected ?\r\n                                    this.#removeRowsFromSelection(previousRow) :\r\n                                    this.#addRowsToSelection(previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow();\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey) {\r\n                                    bottomCell.selected ?\r\n                                        this.#removeCellsFromSelection(bottomCell) :\r\n                                        this.#addCellsToSelection(bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow();\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey) {\r\n                                nextRow.selected ?\r\n                                    this.#removeRowsFromSelection(nextRow) :\r\n                                    this.#addRowsToSelection(nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow();\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow();\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection();\r\n                        this.#setActiveCell(null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection();\r\n                        this.#setActiveRow(null);\r\n                        break;\r\n                    }\r\n                }\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const {activeCell} = this;\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const {activeRow} = this;\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {selectby} = this;\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLEGridCellElement>(\"e-gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLEGridRowElement>(\"e-gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedRows = <HTMLEGridRowElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridRowElement\r\n            );\r\n            assignedRows.forEach((row_i, i) => {\r\n                row_i.posinset = i;\r\n            });\r\n    }\r\n}\r\n\r\nvar HTMLEGridElement: HTMLEGridElementConstructor = HTMLEGridElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEGridCellElement } from \"./GridCell\";\r\nimport { HTMLEGridCellCollection } from \"./GridCellCollection\";\r\nimport { HTMLEGridRowCollection } from \"./GridRowCollection\";\r\n\r\nexport { HTMLEGridHeadElement };\r\n\r\ninterface HTMLEGridHeadElementConstructor {\r\n    prototype: HTMLEGridHeadElement;\r\n    new(): HTMLEGridHeadElement;\r\n}\r\n\r\ninterface HTMLEGridHeadElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-gridhead\": HTMLEGridHeadElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-gridhead\"\r\n})\r\nclass HTMLEGridHeadElementBase extends HTMLElement implements HTMLEGridHeadElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly cells: HTMLEGridCellCollection;\r\n    readonly rows: HTMLEGridRowCollection;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: table-row-group;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.cells = new HTMLEGridCellCollection(this);\r\n        this.rows = new HTMLEGridRowCollection(this);\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEGridCellElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEGridCellElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEGridHeadElement: HTMLEGridHeadElementConstructor = HTMLEGridHeadElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\nimport { HTMLEMenuItemGroupElement } from \"./MenuItemGroup\";\r\n\r\nexport { HTMLEMenuBarElement };\r\n\r\ninterface HTMLEMenuBarElementConstructor {\r\n    prototype: HTMLEMenuBarElement;\r\n    new(): HTMLEMenuBarElement;\r\n}\r\n\r\ninterface HTMLEMenuBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEMenuItemElement[];\r\n    readonly activeItem: HTMLEMenuItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    expanded: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-menubar\": HTMLEMenuBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-menubar\"\r\n})\r\nclass HTMLEMenuBarElementBase extends HTMLElement implements HTMLEMenuBarElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    #activeIndex: number;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    items(): HTMLEMenuItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEMenuItemElement | null {\r\n        const {activeIndex} = this;\r\n        return this.querySelector<HTMLEMenuItemElement>(\r\n            \":is(:scope, :scope > e-menuitemgroup) > e-menuitem:focus-within\"\r\n        ) ?? activeIndex > -1 ? this.items()[activeIndex] ?? null : null;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEMenuItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEMenuItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEMenuItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEMenuItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLEMenuItemElement): HTMLEMenuItemElement | null {\r\n        const {menu} = item;\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLEMenuItemElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEMenuItemElement | null): void {\r\n        const {activeItem, expanded} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.collapse();\r\n        }\r\n        if (item !== null) {\r\n            if (expanded) {\r\n                item.expand();\r\n            }\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    get #items(): HTMLEMenuItemElement[] {\r\n        return Array.from(\r\n            this.querySelectorAll(\":is(:scope, :scope > e-menuitemgroup) > e-menuitem\")\r\n        );\r\n    }\r\n\r\n    #isClosestMenu(target: Element): boolean {\r\n        return target.closest(\":is(e-menubar, e-menu)\") == this;\r\n    }\r\n\r\n    #nearestItem(target: Element): HTMLEMenuItemElement | null {\r\n        return this.#items.find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n    \r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof Element) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            this.#setActiveItem(nearestItem);\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, relatedTarget} = event;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(target);\r\n            if (nearestItem) {\r\n                nearestItem.collapse();\r\n            }\r\n        }\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const {menu} = target;\r\n                if (menu) {\r\n                    target.expand();\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const {expanded, activeItem} = this;\r\n        if (target instanceof HTMLEMenuItemElement) {\r\n            const isClosestMenu = this.#isClosestMenu(target);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.expanded = isExpanded;\r\n                if (isExpanded) {\r\n                    if (activeItem && !activeItem.expanded) {\r\n                        activeItem.expand();\r\n                    }\r\n                    const {menu} = target;\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        let {activeItem} = this;\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem() :\r\n                    this.#firstItem();\r\n                previousItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem() : \r\n                    this.#lastItem();\r\n                nextItem?.focus({preventScroll: true});\r\n                ({activeItem} = this);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.expanded = !expanded;\r\n                    if (!expanded) {\r\n                        const firstChildItem = this.#firstChildItem(activeItem);\r\n                        firstChildItem?.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.expanded = false;\r\n                    if (activeItem) {\r\n                        activeItem.collapse();\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*#handleTriggerEvent(): void {\r\n        const {activeItem} = this;\r\n        if (activeItem?.expanded) {\r\n            activeItem.collapse();\r\n        }\r\n        this.expanded = false;\r\n        this.focus({preventScroll: true});\r\n    }*/\r\n}\r\n\r\nvar HTMLEMenuBarElement: HTMLEMenuBarElementConstructor = HTMLEMenuBarElementBase;","import { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"./Menu\";\r\nimport { HTMLEMenuItemElement } from \"./MenuItem\";\r\n\r\nexport { HTMLEMenuButtonElement };\r\nexport { EMenuButton };\r\n\r\ninterface HTMLEMenuButtonElementConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(): HTMLEMenuButtonElement;\r\n}\r\n\r\ninterface HTMLEMenuButtonElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    readonly firstItem: HTMLEMenuItemElement | null;\r\n    name: string;\r\n    disabled: boolean;\r\n    expanded: boolean;\r\n    toggle(force?: boolean): void;\r\n    expand(): void;\r\n    collapse(): void;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-menubutton\"\r\n})\r\nclass HTMLEMenuButtonElementBase extends HTMLElement implements HTMLEMenuButtonElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu]\"})\r\n    readonly menu!: HTMLEMenuElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-menu[slot=menu] e-menuitem\"})\r\n    readonly firstItem!: HTMLEMenuItemElement | null;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menu\"\r\n                }\r\n            })\r\n        );\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n    }\r\n\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionMenu();\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n\r\n    #positionMenu(): void {\r\n        const {menu} = this;\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = this.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const overflowX = itemRight + menuWidth - clientWidth;\r\n            const overflowY = itemTop + menuHeight - clientHeight;\r\n            menuStyle.setProperty(\"left\", `${\r\n                overflowX > 0 ?\r\n                scrollX + itemRight - menuWidth :\r\n                scrollX + itemLeft\r\n            }px`);\r\n            menuStyle.setProperty(\"top\", `${\r\n                overflowY > 0 ?\r\n                scrollY + itemTop - menuHeight :\r\n                scrollY + itemBottom\r\n            }px`);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const {menu} = this;\r\n        if (menu && !menu.contains(<Node>target)) {\r\n            this.toggle();\r\n            const {expanded} = this;\r\n            if (expanded) {\r\n                menu?.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded} = this;\r\n        switch (key) {\r\n            case \"ArrowDown\":\r\n            case \"Enter\":\r\n                if (!expanded) {\r\n                    this.expand();\r\n                    this.firstItem?.focus({preventScroll: true});\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            case \"Escape\":\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                this.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEMenuButtonElement: HTMLEMenuButtonElementConstructor = HTMLEMenuButtonElementBase;\r\n\r\ninterface EMenuButtonConstructor {\r\n    prototype: HTMLEMenuButtonElement;\r\n    new(init: {\r\n        menu: HTMLEMenuElement\r\n    }): HTMLEMenuButtonElement;\r\n}\r\n\r\nvar EMenuButton = <EMenuButtonConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        menu: HTMLEMenuElement\r\n    }) {\r\n        const {menu} = init;\r\n        menu.slot = \"menu\";\r\n        return element(\"e-menubutton\", {\r\n            attributes: {\r\n                tabindex: -1\r\n            },\r\n            children: [menu]\r\n        });\r\n    }, {\r\n        prototype: HTMLEMenuButtonElement.prototype,\r\n    }\r\n);","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element, QueryProperty } from \"../../Element\";\r\nimport { HTMLEMenuButtonElement } from \"../menus/MenuButton\";\r\n\r\nexport { HTMLEToolBarItemElement };\r\nexport { EToolBarItem };\r\n\r\ninterface HTMLEToolBarItemElementConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(): HTMLEToolBarItemElement;\r\n}\r\n\r\ninterface HTMLEToolBarItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly menubutton: HTMLEMenuButtonElement | null;\r\n    readonly select: HTMLESelectElement | null;\r\n    value: string;\r\n    name: string;\r\n    label: string;\r\n    active: boolean;\r\n    pressed: boolean;\r\n    type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritem\": HTMLEToolBarItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritem\"\r\n})\r\nclass HTMLEToolBarItemElementBase extends HTMLElement implements HTMLEToolBarItemElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @QueryProperty({selector: \":scope > e-menubutton[slot=menubutton]\"})\r\n    readonly menubutton!: HTMLEMenuButtonElement | null;\r\n    \r\n    @QueryProperty({selector: \":scope > e-select[slot=select]\"})\r\n    readonly select!: HTMLESelectElement | null;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    pressed!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n\r\n    #wasExpandedOnMouseDown?: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"icon\"\r\n                }\r\n            }),\r\n            element(\"slot\"),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"select\"\r\n                }\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"menubutton\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLSpanElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"value\": {\r\n                const {type} = this;\r\n                if (type == \"select\") {\r\n                    this.#updateSelectValue();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #updateSelectValue(): void {\r\n        const {select} = this;\r\n        if (select) {\r\n            const {value} = this;\r\n            const {value: selectValue} = select;\r\n            if (selectValue !== value) {\r\n                select.value = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.pressed = !this.pressed;\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.pressed = true;\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        menubutton.toggle(force);\r\n                        if (force) {\r\n                            menubutton.firstItem?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        const force = !this.#wasExpandedOnMouseDown ?? true;\r\n                        select.toggle(force);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetToolbarItem = (<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetToolbarItem === this) {\r\n            const {type} = this;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = this;\r\n                    if (menubutton && !menubutton.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = menubutton.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = this;\r\n                    if (select && !select.contains(<Node>target)) {\r\n                        this.#wasExpandedOnMouseDown = select.expanded;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemElement: HTMLEToolBarItemElementConstructor = HTMLEToolBarItemElementBase;\r\n\r\ninterface EToolBarItemConstructor {\r\n    prototype: HTMLEToolBarItemElement;\r\n    new(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n    button(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    checkbox(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    radio(init: {\r\n        name: string;\r\n        label: string;\r\n        value?: string;\r\n        trigger?: () => void;\r\n    }): HTMLEToolBarItemElement;\r\n    menubutton(init: {\r\n        name: string;\r\n        label: string;\r\n        menubutton: HTMLEMenuButtonElement;\r\n    }): HTMLEToolBarItemElement;\r\n    select(init: {\r\n        name: string;\r\n        label: string;\r\n        select: HTMLESelectElement;\r\n    }): HTMLEToolBarItemElement;\r\n}\r\n\r\nvar EToolBarItem = <EToolBarItemConstructor>Object.assign(\r\n    <Function>function(init: {\r\n        name: string;\r\n        label: string;\r\n        type: \"button\" | \"checkbox\" | \"radio\" | \"menubutton\" | \"select\";\r\n        value?: string;\r\n        trigger?: () => void;\r\n        menubutton?: HTMLEMenuButtonElement;\r\n        select?: HTMLESelectElement;\r\n    }) {\r\n        const {label, name, type, value, trigger, menubutton, select} = init;\r\n        if (menubutton) {\r\n            menubutton.slot = \"menubutton\";\r\n        }\r\n        if (select) {\r\n            select.slot = \"select\";\r\n        }\r\n        return element(\"e-toolbaritem\", {\r\n            attributes: {\r\n                tabindex: -1,\r\n                title: label,\r\n                name: name,\r\n                value: value,\r\n                type: type\r\n            },\r\n            children: menubutton ? [menubutton] : select ? [select] : undefined,\r\n            listeners: {\r\n                trigger: trigger\r\n            }\r\n        });\r\n    }, {\r\n        prototype: HTMLEToolBarItemElement.prototype,\r\n        button(init: {\r\n            name: string,\r\n            label: string,\r\n            value?: string,\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"button\"\r\n            });\r\n        },\r\n        checkbox(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"checkbox\"\r\n            });\r\n        },\r\n        radio(init: {\r\n            name: string;\r\n            label: string;\r\n            value?: string;\r\n            trigger?: () => void;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"radio\"\r\n            });\r\n        },\r\n        menubutton(init: {\r\n            name: string;\r\n            label: string;\r\n            menubutton: HTMLEMenuButtonElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"menubutton\"\r\n            });\r\n        },\r\n        select(init: {\r\n            name: string;\r\n            label: string;\r\n            select: HTMLESelectElement;\r\n        }) {\r\n            return new EToolBarItem({\r\n                ...init, type: \"select\"\r\n            });\r\n        },\r\n    }\r\n);","\r\nimport { element, CustomElement, AttributeProperty } from \"../../Element\";\r\n\r\nexport { HTMLEToolBarItemGroupElement };\r\n\r\ninterface HTMLEToolBarItemGroupElementConstructor {\r\n    prototype: HTMLEToolBarItemGroupElement;\r\n    new(): HTMLEToolBarItemGroupElement;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarItemGroupElement extends HTMLElement {\r\n    name: string;\r\n    label: string;\r\n    disabled: boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbaritemgroup\": HTMLEToolBarItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbaritemgroup\"\r\n})\r\nclass HTMLEToolBarItemGroupElementBase extends HTMLElement implements HTMLEToolBarItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    disabled!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: flex;\r\n                            width: max-content;\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        /*:host([orientation=\"vertical\"]) {\r\n                            flex-direction: column;\r\n                        }\r\n\r\n                        :host([orientation=\"horizontal\"]) {\r\n                            flex-direction: row;\r\n                        }*/\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const label = this.shadowRoot.querySelector<HTMLLabelElement>(\"[part='label']\");\r\n                if (label) {\r\n                    label.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"disabled\": {\r\n                /*this.items.forEach((item) => {\r\n                    item.disabled = newValue !== null;\r\n                });*/\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarItemGroupElement: HTMLEToolBarItemGroupElementConstructor = HTMLEToolBarItemGroupElementBase;","import { HTMLESelectElement } from \"../../controls/forms/Select\";\r\nimport { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEToolBarItemElement } from \"./ToolBarItem\";\r\nimport { HTMLEToolBarItemGroupElement } from \"./ToolBarItemGroup\";\r\n\r\nexport { HTMLEToolBarElement };\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\ninterface HTMLEToolBarElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    items(): HTMLEToolBarItemElement[];\r\n    firstItem(): HTMLEToolBarItemElement | null;\r\n    readonly activeItem: HTMLEToolBarItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n}\r\n\r\ninterface HTMLEToolbarElementConstructor {\r\n    prototype: HTMLEToolBarElement;\r\n    new(): HTMLEToolBarElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-toolbar\": HTMLEToolBarElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-toolbar\"\r\n})\r\nclass HTMLEToolBarElementBase extends HTMLElement implements HTMLEToolBarElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get activeItem(): HTMLEToolBarItemElement | null {\r\n        return this.querySelector<HTMLEToolBarItemElement>(\r\n            \"e-toolbaritem[active]\"\r\n        );\r\n    }\r\n\r\n    items(): HTMLEToolBarItemElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEToolBarItemElement>(\r\n            \":is(:scope, :scope > e-toolbaritemgroup) > e-toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    orientation!: ToolBarOrientation;\r\n\r\n    #walker: TreeWalker;\r\n    #activeIndex: number;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.#activeIndex = -1;\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEToolBarItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEToolBarItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    firstItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        return <HTMLEToolBarItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEToolBarItemElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEToolBarItemElement): HTMLEToolBarItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLEToolBarItemElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEToolBarItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            this.#activeIndex = this.items().indexOf(item);\r\n        }\r\n        else {\r\n            this.#activeIndex = -1;\r\n        }\r\n    }\r\n\r\n    /*#handleChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLESelectElement) {\r\n            const item = target.closest(\"e-toolbaritem\");\r\n            if (item !== null) {\r\n                const {select, type} = item;\r\n                if (target == select && select && type == \"select\") {\r\n                    const {value} = item;\r\n                    const {value: selectValue} = select;\r\n                    if (value !== selectValue) {\r\n                        item.value = selectValue;\r\n                        item.trigger();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*#handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEToolBarItemElement) {\r\n            const {type} = target;\r\n            switch (type) {\r\n                case \"menubutton\": {\r\n                    const {menubutton} = target;\r\n                    if (menubutton) {\r\n                        const {expanded} = menubutton;\r\n                        if (!expanded) {\r\n                            menubutton.expand();\r\n                            menubutton.menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"select\": {\r\n                    const {select} = target;\r\n                    if (select) {\r\n                        select.toggle();\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    target.trigger();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLEToolBarItemElement | null>(<HTMLElement>target).closest(\"e-toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            const {menubutton} = activeItem;\r\n                            if (menubutton) {\r\n                                menubutton.expand();\r\n                                menubutton.firstItem?.focus({preventScroll: true});\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"select\": {\r\n                            const {select} = activeItem;\r\n                            if (select) {\r\n                                select.expand();\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            activeItem.click();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const {type} = activeItem;\r\n                    switch (type) {\r\n                        case \"select\": {\r\n                            activeItem.select?.expand();\r\n                            event.stopPropagation();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    this.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEToolBarElement: HTMLEToolbarElementConstructor = HTMLEToolBarElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLETabPanelElement };\r\n\r\ninterface HTMLETabPanelElementConstructor {\r\n    prototype: HTMLETabPanelElement;\r\n    new(): HTMLETabPanelElement;\r\n}\r\n\r\ninterface HTMLETabPanelElement extends HTMLElement {\r\n    name: string;\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tabpanel\"\r\n})\r\nclass HTMLETabPanelElementBase extends HTMLElement implements HTMLETabPanelElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([hidden]) {\r\n                            display: none;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLETabPanelElement: HTMLETabPanelElementConstructor = HTMLETabPanelElementBase;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tabpanel\": HTMLETabPanelElement,\r\n    }\r\n}","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLETabPanelElement } from \"./TabPanel\";\r\n\r\nexport { ETabChangeEvent };\r\nexport { HTMLETabElement };\r\n\r\ninterface HTMLETabElementConstructor {\r\n    prototype: HTMLETabElement;\r\n    new(): HTMLETabElement;\r\n}\r\n\r\ninterface HTMLETabElement extends HTMLElement {\r\n    name: string;\r\n    active: boolean;\r\n    disabled: boolean;\r\n    controls: string;\r\n    panel: HTMLETabPanelElement | null;\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype ETabChangeEvent = CustomEvent<{\r\n    tab: HTMLETabElement;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementEventMap {\r\n        \"e_tabchange\": ETabChangeEvent,\r\n    }\r\n\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tab\": HTMLETabElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tab\"\r\n})\r\nclass HTMLETabElementBase extends HTMLElement implements HTMLETabElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #panel: HTMLETabPanelElement | null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            user-select: none;\r\n                            white-space: nowrap;\r\n\r\n                            padding: 2px 6px;\r\n                            cursor: pointer;\r\n                        }\r\n                        \r\n                        :host([disabled]) {\r\n                            color: lightgray;\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        :host([active]) {\r\n                            background-color: lightgray;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        this.#panel = null;\r\n    }\r\n\r\n    get panel(): HTMLETabPanelElement | null {\r\n        return this.#panel;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        const panel = document.getElementById(this.controls);\r\n        if (panel !== this.#panel && panel instanceof HTMLETabPanelElement) {\r\n            this.#panel = panel;\r\n        }\r\n        if (panel)  {\r\n            panel.hidden = !this.active;\r\n        }\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"active\":\r\n                if (this.active) {\r\n                    this.dispatchEvent(new CustomEvent(\"e_tabchange\", {detail: {tab: this}, bubbles: true}));\r\n                }\r\n                const panel = document.getElementById(this.controls);\r\n                if (panel !== this.panel && panel instanceof HTMLETabPanelElement) {\r\n                    this.#panel = panel;\r\n                }\r\n                if (panel)  {\r\n                    panel.hidden = !this.active;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabElement: HTMLETabElementConstructor = HTMLETabElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLETabElement } from \"./Tab\";\r\n\r\nexport { HTMLETabListElement };\r\n\r\ninterface HTMLETabListElementConstructor {\r\n    prototype: HTMLETabListElement;\r\n    new(): HTMLETabListElement;\r\n}\r\n\r\ninterface HTMLETabListElement extends HTMLElement {\r\n    readonly activeTab: HTMLETabElement | null;\r\n    tabs: HTMLETabElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tablist\": HTMLETabListElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tablist\"\r\n})\r\nclass HTMLETabListElementBase extends HTMLElement implements HTMLETabListElement {\r\n\r\n    tabs: HTMLETabElement[];\r\n\r\n    #activeIndex: number;\r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            position: relative;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\")\r\n        );\r\n        \r\n        this.tabs = [];\r\n        this.#activeIndex = 1;\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeTab(): HTMLETabElement | null {\r\n        return this.tabs[this.#activeIndex] || null;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        const slot = this.shadowRoot!.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", (event) => {\r\n\r\n                const tabs = <HTMLETabElement[]>(<HTMLSlotElement>event.target)\r\n                    .assignedElements()\r\n                    .filter(tab => tab instanceof HTMLETabElement);\r\n                this.tabs = tabs;\r\n                this.#activeIndex = this.tabs.findIndex(tab => tab.active);\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event) => {\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    this.focusTabAt((this.activeIndex <= 0) ? this.tabs.length - 1 : this.activeIndex - 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.focusTabAt((this.activeIndex >= this.tabs.length - 1) ? 0 : this.activeIndex + 1);\r\n                    event.stopPropagation();\r\n                    break;\r\n                case \"Enter\":\r\n                    if (this.activeTab) {\r\n                        this.activateTab(this.activeTab);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"click\", (event) => {\r\n            const target = event.target;\r\n            if (target instanceof HTMLETabElement) {\r\n                target.active = true;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"e_tabchange\", (event) => {\r\n            const targetIndex = this.tabs.indexOf(event.detail.tab);\r\n            this.#activeIndex = targetIndex;\r\n            this.tabs.forEach((thisTab, thisTabIndex) => {\r\n                if (thisTabIndex !== targetIndex) {\r\n                    thisTab.active = false;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    focusTabAt(index: number): void {\r\n        const tab = this.tabs[index];\r\n        if (tab) {\r\n            this.#activeIndex = index;\r\n            tab.focus();\r\n        }\r\n    }\r\n\r\n    activateTab(tab: HTMLETabElement) {\r\n        if (this.tabs.includes(tab)) {\r\n            tab.active = true;\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETabListElement: HTMLETabListElementConstructor = HTMLETabListElementBase;","import { CustomElement } from \"../../Element\";\r\n\r\nexport { HTMLETreeItemGroupElement };\r\n\r\ninterface HTMLETreeItemGroupElementConstructor {\r\n    prototype: HTMLETreeItemGroupElement;\r\n    new(): HTMLETreeItemGroupElement;\r\n}\r\n\r\ninterface HTMLETreeItemGroupElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitemgroup\": HTMLETreeItemGroupElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-treeitemgroup\"\r\n})\r\nclass HTMLETreeItemGroupElementBase extends HTMLElement implements HTMLETreeItemGroupElement {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemGroupElement: HTMLETreeItemGroupElementConstructor = HTMLETreeItemGroupElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeItemElement };\r\n\r\ninterface HTMLETreeItemElementConstructor {\r\n    prototype: HTMLETreeItemElement;\r\n    new(): HTMLETreeItemElement;\r\n}\r\n\r\ninterface HTMLETreeItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly group: HTMLETreeItemGroupElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    expanded: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    level: number;\r\n    type: \"leaf\" | \"parent\";\r\n    toggle(force?: boolean): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-treeitem\": HTMLETreeItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-treeitem\"\r\n})\r\nclass HTMLETreeItemElementBase extends HTMLElement implements HTMLETreeItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get group(): HTMLETreeItemGroupElement | null {\r\n        return this.#group;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    expanded!: boolean;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Number, observed: true})\r\n    level!: number;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"leaf\"})\r\n    type!: \"leaf\" | \"parent\";\r\n\r\n    #group: HTMLETreeItemGroupElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"arrow\"\r\n                        }\r\n                    }),\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                attributes: {\r\n                    name: \"group\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.#group = null;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n    \r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"expanded\": {\r\n                this.dispatchEvent(new Event(\"toggle\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const labelPart = this.shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"level\": {\r\n                this.style.setProperty(\"--level\", `${this.level}`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        this.expanded = force ?? !this.expanded;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, shiftKey, ctrlKey} = event;\r\n        const {type} = this;\r\n        if (this == target && type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target;\r\n        switch (slotName) {\r\n            case \"group\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#group = element instanceof HTMLETreeItemGroupElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeItemElement: HTMLETreeItemElementConstructor = HTMLETreeItemElementBase;","import { CustomElement, AttributeProperty } from \"../../Element\";\r\nimport { HTMLETreeItemElement } from \"./TreeItem\";\r\nimport { HTMLETreeItemGroupElement } from \"./TreeItemGroup\";\r\n\r\nexport { HTMLETreeElement };\r\n\r\ninterface HTMLETreeElementConstructor {\r\n    prototype: HTMLETreeElement;\r\n    new(): HTMLETreeElement;\r\n}\r\n\r\ninterface HTMLETreeElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n    readonly activeItem: HTMLETreeItemElement | null;\r\n    readonly dropTargetItem: HTMLETreeItemElement | null;\r\n    firstItem(): HTMLETreeItemElement | null;\r\n    droptarget: boolean;\r\n    name: string;\r\n    selectedItems(): HTMLETreeItemElement[];\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-tree\": HTMLETreeElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-tree\"\r\n})\r\nclass HTMLETreeElementBase extends HTMLElement implements HTMLETreeElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLETreeItemElement>;\r\n\r\n    get activeItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[active]\"\r\n        );\r\n    }\r\n\r\n    get dropTargetItem(): HTMLETreeItemElement | null {\r\n        return this.querySelector<HTMLETreeItemElement>(\r\n            \"e-treeitem[droptarget]\"\r\n        );\r\n    }\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-treeitem\");\r\n        this.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        const {tabIndex} = this;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    selectedItems(): HTMLETreeItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLETreeItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLETreeItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLETreeItemElement, to: HTMLETreeItemElement): HTMLETreeItemElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextVisibleItem = this.#nextItem(from);\r\n            while (nextVisibleItem && nextVisibleItem !== to) {\r\n                range.push(nextVisibleItem);\r\n                nextVisibleItem = this.#nextItem(nextVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousVisibleItem = this.#previousItem(from);\r\n            while (previousVisibleItem && previousVisibleItem !== to) {\r\n                range.push(previousVisibleItem);\r\n                previousVisibleItem = this.#previousItem(previousVisibleItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLETreeItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLETreeItemElement[]): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        const selectedItems = this.selectedItems();\r\n        this.beginSelection();\r\n        selectedItems.forEach((item_i) => {\r\n            item_i.selected = false;\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLETreeItemElement | null): void {\r\n        const {activeItem} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = item;\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(item: HTMLETreeItemElement | null): void {\r\n        const {dropTargetItem} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n        }\r\n    }\r\n\r\n    firstItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLETreeItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLETreeItemElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLETreeItemElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLETreeItemElement): HTMLETreeItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const {type, expanded} = item;\r\n        return <HTMLETreeItemElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLETreeItemElement): HTMLETreeItemElement {\r\n        if (item.expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLETreeItemElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey, button} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {selected} = target;\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            target.blur();\r\n                        }\r\n                        (!selected) ?\r\n                            this.#addToSelection(target) :\r\n                            this.#removeFromSelection(target);\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const {activeItem} = this\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                target\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(target);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLETreeItemElement) {\r\n            const {type} = target;\r\n            if (type == \"parent\") {\r\n                target.toggle(true);\r\n            }\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!this.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        const {root} = walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLETreeItemElement>(\r\n                            walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    if (activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLETreeItemElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    if (!activeItem.expanded) {\r\n                        activeItem.toggle();\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (!this.contains(<Node>relatedTarget)) {\r\n            (activeItem ?? this.firstItem())?.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        const targetItem = <HTMLETreeItemElement | null>(<HTMLElement>target).closest(\"e-treeitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetItem);\r\n            this.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (this.#onSelection) {\r\n            this.#hasSelectionChanged = true;\r\n        }\r\n        else {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLETreeElement: HTMLETreeElementConstructor = HTMLETreeElementBase;","import { CustomElement, element, AttributeProperty } from \"../../Element\";\r\nimport { HTMLEMenuElement } from \"../menus/Menu\";\r\nimport { HTMLEToolBarElement } from \"../toolbars/ToolBar\";\r\n\r\nexport { HTMLEListItemElement };\r\n\r\ninterface HTMLEListItemElementConstructor {\r\n    prototype: HTMLEListItemElement;\r\n    new(): HTMLEListItemElement;\r\n}\r\n\r\ninterface HTMLEListItemElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly badge: HTMLSpanElement | null;\r\n    readonly toolbar: HTMLEToolBarElement | null;\r\n    readonly menu: HTMLEMenuElement | null;\r\n    name: string;\r\n    posinset: number;\r\n    label: string;\r\n    droptarget: boolean;\r\n    selected: boolean;\r\n    active: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitem\": HTMLEListItemElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitem\"\r\n})\r\nclass HTMLEListItemElementBase extends HTMLElement implements HTMLEListItemElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    get badge(): HTMLElement | null {\r\n        return this.#badge;\r\n    }\r\n\r\n    get toolbar(): HTMLEToolBarElement | null {\r\n        return this.#toolbar;\r\n    }\r\n\r\n    get menu(): HTMLEMenuElement | null {\r\n        return this.#menu;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: Number})\r\n    posinset!: number;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    active!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    #badge: HTMLElement | null;\r\n    #toolbar: HTMLEToolBarElement | null;\r\n    #menu: HTMLEMenuElement | null;\r\n    \r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#badge = null;\r\n        this.#menu = null;\r\n        this.#toolbar = null;\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this))\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const {name: slotName} = <HTMLSlotElement>target ;\r\n        switch (slotName) {\r\n            case \"toolbar\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#toolbar = element instanceof HTMLEToolBarElement ? element : null;\r\n                break;\r\n            }\r\n            case \"badge\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#badge = element instanceof HTMLSpanElement ? element : null;\r\n                break;\r\n            }\r\n            case \"menu\": {\r\n                const element = (<HTMLSlotElement>target).assignedElements()[0];\r\n                this.#menu = element instanceof HTMLEMenuElement ? element : null;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEListItemElement: HTMLEListItemElementConstructor = HTMLEListItemElementBase;","import { CustomElement, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\n\r\nexport { HTMLEListItemGroupElement };\r\n\r\ninterface HTMLEListItemGroupElementConstructor {\r\n    prototype: HTMLEListItemGroupElement;\r\n    new(): HTMLEListItemGroupElement;\r\n}\r\n\r\ninterface HTMLEListItemGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-listitemgroup\": HTMLEListItemGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-listitemgroup\"\r\n})\r\nclass HTMLEListItemGroupElementBase extends HTMLElement implements HTMLEListItemGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        shadowRoot.addEventListener(\r\n            \"slotchange\", this.#handleSlotChangeEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListItemGroupElement: HTMLEListItemGroupElementConstructor = HTMLEListItemGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEListItemElement } from \"./ListItem\";\r\nimport { HTMLEListItemGroupElement } from \"./ListItemGroup\";\r\n\r\nexport { HTMLEListElement };\r\n\r\ninterface HTMLEListElementConstructor {\r\n    prototype: HTMLEListElement;\r\n    new(): HTMLEListElement;\r\n}\r\n\r\ninterface HTMLEListElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n    readonly activeItem: HTMLEListItemElement | null;\r\n    readonly activeIndex: number;\r\n    name: string;\r\n    droptarget: boolean;\r\n    beginSelection(): void;\r\n    endSelection(): void;\r\n    selectedItems(): HTMLEListItemElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-list\": HTMLEListElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-list\"\r\n})\r\nclass HTMLEListElementBase extends HTMLElement implements HTMLEListElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    readonly items: HTMLCollectionOf<HTMLEListItemElement>;\r\n\r\n    get dropTargetItem(): HTMLEListItemElement | null {\r\n        return this.items[this.#dropTargetIndex] ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    droptarget!: boolean;\r\n\r\n    #dropTargetIndex: number;\r\n    #activeIndex: number;\r\n    #onSelection: boolean;\r\n    #hasSelectionChanged: boolean;\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"slot\", {\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            this, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#activeIndex = -1;\r\n        this.#dropTargetIndex = -1;\r\n        this.#onSelection = false;\r\n        this.#hasSelectionChanged = false;\r\n        this.items = this.getElementsByTagName(\"e-listitem\");\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        this.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        this.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        this.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        this.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        this.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        this.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        this.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        shadowRoot.addEventListener(\"slotchange\", this.#handleSlotChangeEvent.bind(this));\r\n    }\r\n\r\n    get activeIndex(): number {\r\n        return this.#activeIndex;\r\n    }\r\n\r\n    get activeItem(): HTMLEListItemElement | null {\r\n        return this.items[this.activeIndex] ?? null;\r\n    }\r\n\r\n    beginSelection(): void {\r\n        this.#onSelection = true;\r\n    }\r\n\r\n    endSelection(): void {\r\n        this.#onSelection = false;\r\n        if (this.#hasSelectionChanged) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged = false;\r\n        }\r\n    }\r\n\r\n    selectedItems(): HTMLEListItemElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = walker.root;\r\n        let item = this.#firstItem();\r\n        while (item !== null) {\r\n            if (item.selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEListItemElement) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        if (node instanceof HTMLEListItemGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLEListItemElement, to: HTMLEListItemElement): HTMLEListItemElement[] {\r\n        const items = Array.from(this.items);\r\n        const fromIndex = items.indexOf(from);\r\n        const toIndex = items.indexOf(to);\r\n        if (fromIndex > -1 && toIndex > -1) {\r\n            if (from == to) {\r\n                return [from];\r\n            }\r\n            return items.slice(\r\n                Math.min(fromIndex, toIndex),\r\n                Math.max(fromIndex, toIndex) + 1\r\n            );\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((selectedItem_i) => {\r\n            if (!items.includes(selectedItem_i)) {\r\n                selectedItem_i.selected = false;\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            if (this.contains(item_i) && !item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #addToSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        items.forEach((item_i) => {\r\n            if (!item_i.selected) {\r\n                item_i.selected = true;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #removeFromSelection(...items: HTMLEListItemElement[]): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #clearSelection(): void {\r\n        this.beginSelection();\r\n        const selectedItems = this.selectedItems();\r\n        selectedItems.forEach((item_i) => {\r\n            if (item_i.selected) {\r\n                item_i.selected = false;\r\n            }\r\n        });\r\n        this.endSelection();\r\n    }\r\n\r\n    #setActiveItem(item: HTMLEListItemElement | null): void {\r\n        const {activeItem, items} = this;\r\n        if (activeItem !== null && activeItem !== item) {\r\n            activeItem.active = false;\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            item.active = true;\r\n            item.tabIndex = 0;\r\n            this.#activeIndex = Array.from(items).indexOf(item);\r\n        }\r\n    }\r\n\r\n    #setDropTargetItem(item: HTMLEListItemElement | null): void {\r\n        const {dropTargetItem, items} = this;\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            dropTargetItem.droptarget = false;\r\n        }\r\n        if (item !== null) {\r\n            this.droptarget = true;\r\n            item.droptarget = true;\r\n            this.#dropTargetIndex = Array.from(items).indexOf(item);\r\n        }\r\n        else {\r\n            this.droptarget = false;\r\n            this.#dropTargetIndex = -1;\r\n        }\r\n    }\r\n\r\n    #firstItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        const {root} = walker;\r\n        walker.currentNode = root;\r\n        return <HTMLEListItemElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLEListItemElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLEListItemElement): HTMLEListItemElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLEListItemElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleContextMenuEvent(event: MouseEvent) {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n            target.focus({preventScroll: true});\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, ctrlKey, shiftKey} = event;\r\n        const selectedItems = this.selectedItems();\r\n        if (target instanceof HTMLEListItemElement) {\r\n            if (!shiftKey && !ctrlKey) {\r\n                this.#setSelection(target);\r\n            }\r\n            else if (ctrlKey) {\r\n                (!target.selected) ?\r\n                    this.#addToSelection(target) :\r\n                    this.#removeFromSelection(target);\r\n                event.stopPropagation();\r\n            }\r\n            else if (shiftKey) {\r\n                const lastSelectedItem = selectedItems[selectedItems.length - 1];\r\n                if (lastSelectedItem) {\r\n                    const range = this.#getItemsRange(\r\n                        lastSelectedItem,\r\n                        target\r\n                    );\r\n                    if (range) {\r\n                        if (selectedItems.includes(target)) {\r\n                            this.#removeFromSelection(...range);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(...range);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.#setSelection(target);\r\n                }\r\n                event.stopPropagation();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setDropTargetItem(target);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n    \r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {relatedTarget} = event;\r\n        const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n        const relatedTargetHost =\r\n            relatedTargetRoot instanceof ShadowRoot ?\r\n            relatedTargetRoot.host :\r\n            relatedTarget;\r\n        if (!this.contains(<Node>relatedTargetHost)) {\r\n            this.#setDropTargetItem(null);\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            const selectedItems = this.selectedItems();\r\n            if (!selectedItems.includes(target)) {\r\n                this.#setSelection(target);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(): void {\r\n        this.#setDropTargetItem(null);\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {key} = event;\r\n        const {activeItem} = this;\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    const walker = this.#walker;\r\n                    const {root} = walker;\r\n                    const firstItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.firstChild()\r\n                    );\r\n                    const lastItem = <HTMLEListItemElement>(\r\n                        walker.currentNode = walker.parentNode() ?? root, walker.lastChild()\r\n                    );\r\n                    const range = this.#getItemsRange(\r\n                        firstItem,\r\n                        lastItem\r\n                    );\r\n                    if (range) {\r\n                        this.#setSelection(...range);\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            previousItem.selected ?\r\n                                this.#removeFromSelection(previousItem) :\r\n                                this.#addToSelection(previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem();\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            nextItem.selected ?\r\n                                this.#removeFromSelection(nextItem) :\r\n                                this.#addToSelection(nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem();\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem();\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem();\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const {activeItem} = this;\r\n                if (activeItem) {\r\n                    this.#setSelection(activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection();\r\n                this.#setActiveItem(null);\r\n                this.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const {activeItem} = this;\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target} = event;\r\n        if (target instanceof HTMLEListItemElement) {\r\n            this.#setActiveItem(target);\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(): void {\r\n        if (!this.#onSelection) {\r\n            this.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n        }\r\n    }\r\n\r\n    #handleSlotChangeEvent(event: Event): void {\r\n        const {target} = event;\r\n        const assignedItems = <HTMLEListItemElement[]>(<HTMLSlotElement>target)\r\n            .assignedElements()\r\n            .filter(\r\n                element_i => element_i instanceof HTMLEListItemElement\r\n            );\r\n        assignedItems.forEach((item_i, i) => {\r\n            item_i.posinset = i;\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEListElement: HTMLEListElementConstructor = HTMLEListElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDraggableElement };\r\n\r\ninterface HTMLEDraggableElementConstructor {\r\n    prototype: HTMLEDraggableElement;\r\n    new(): HTMLEDraggableElement;\r\n}\r\n\r\ninterface HTMLEDraggableElement extends HTMLElement {\r\n    readonly referee: this | null;\r\n    readonly references: this[];\r\n    selected: boolean;\r\n    dragged: boolean;\r\n    dragovered: boolean;\r\n\r\n    connectedCallback(): void;\r\n    disconnectedCallback(): void;\r\n    getReference(): this;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-draggable\": HTMLEDraggableElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-draggable\"\r\n})\r\nclass HTMLEDraggableElementBase extends HTMLElement implements HTMLEDraggableElement {\r\n    \r\n    @AttributeProperty({type: Boolean})\r\n    selected!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragovered!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    dragged!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #referee: this | null;\r\n    readonly references: this[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            padding: 3px 4px;\r\n                            cursor: pointer;\r\n                            white-space: nowrap;\r\n                            border-radius: 4px;\r\n                            border: 1px solid black;\r\n                            user-select: none;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                            color: lightgray;\r\n                            border-color: lightgray;\r\n                        }\r\n        \r\n                        :host([selected]:active) {\r\n                            cursor: grabbing;\r\n                        }\r\n                        \r\n                        :host([selected]) {\r\n                            cursor: grab;\r\n                            font-weight: bold;\r\n                            outline: 1px auto black;\r\n                        }\r\n        \r\n                        :host([dragovered]) {\r\n                            border-style: dotted;\r\n                        }\r\n                        \r\n                        [part=\"container\"] {\r\n                            display: flex;\r\n                            align-items: center;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\", {\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.references = [];\r\n        this.#referee = null;\r\n    }\r\n\r\n    get referee(): this | null {\r\n        return this.#referee;\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n        this.draggable = true;\r\n    }\r\n\r\n    disconnectedCallback(): void {\r\n        if (this.referee) {\r\n            const thisRefIndex = this.referee.references.indexOf(this);\r\n            if (thisRefIndex > -1) {\r\n                this.referee.references.splice(thisRefIndex, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    getReference(): this {\r\n        const reference = <this>this.cloneNode(true);\r\n        reference.#referee = this;\r\n        return reference;\r\n    }\r\n}\r\n\r\nvar HTMLEDraggableElement: HTMLEDraggableElementConstructor = HTMLEDraggableElementBase","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\n\r\nexport { HTMLEDragzoneElement };\r\n\r\ninterface HTMLEDragzoneElementConstructor {\r\n    prototype: HTMLEDragzoneElement;\r\n    new(): HTMLEDragzoneElement\r\n}\r\n\r\ninterface HTMLEDragzoneElement extends HTMLElement {\r\n    readonly draggables: HTMLEDraggableElement[];\r\n    readonly selectedDraggables: HTMLEDraggableElement[];\r\n    disabled: boolean;\r\n    selectDraggable(draggable: HTMLEDraggableElement): void;\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void;\r\n    clearSelection(): void;\r\n    connectedCallback(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dragzone\": HTMLEDragzoneElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dragzone\"\r\n})\r\nclass HTMLEDragzoneElementBase extends HTMLElement implements HTMLEDragzoneElement {\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    #draggables: HTMLEDraggableElement[];\r\n    #selectedDraggables: HTMLEDraggableElement[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                        }\r\n        \r\n                        :host([disabled]) {\r\n                            pointer-events: none;\r\n                        }\r\n        \r\n                        [part=\"container\"] {\r\n                            position: relative;\r\n                            display: flex;\r\n                            flex-direction: column;\r\n                            padding-left: 2px;\r\n                            padding-right: 2px;\r\n                        }\r\n        \r\n                        ::slotted(*) {\r\n                            margin-top: 2px;\r\n                            margin-bottom: 2px;\r\n                        }\r\n                    `\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"container\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            })\r\n        );\r\n        this.#draggables = [];\r\n        this.#selectedDraggables = [];\r\n    }\r\n\r\n    get draggables(): HTMLEDraggableElement[] {\r\n        return this.#draggables;\r\n    }\r\n\r\n    get selectedDraggables(): HTMLEDraggableElement[] {\r\n        return this.#selectedDraggables;\r\n    }\r\n\r\n    selectDraggable(draggable: HTMLEDraggableElement): void {\r\n        if (!this.selectedDraggables.includes(draggable)) {\r\n            this.selectedDraggables.push(draggable);\r\n        }\r\n        if (!draggable.selected) {\r\n            draggable.selected = true;\r\n        }\r\n    }\r\n\r\n    unselectDraggable(draggable: HTMLEDraggableElement): void {\r\n        const index = this.selectedDraggables.indexOf(draggable);\r\n        if (index > -1) {\r\n            if (draggable.selected) {\r\n                draggable.selected = false;\r\n            }\r\n            this.selectedDraggables.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this.selectedDraggables.forEach((draggable) => {\r\n            draggable.selected = false;\r\n        });\r\n        this.#selectedDraggables = [];\r\n    }\r\n    \r\n    connectedCallback(): void {\r\n        this.tabIndex = this.tabIndex;\r\n\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                const draggables = slot.assignedElements().filter(\r\n                    elem => elem instanceof HTMLEDraggableElement\r\n                ) as HTMLEDraggableElement[];\r\n                this.#draggables = draggables;\r\n                this.draggables.forEach((draggable) => {\r\n                    draggable.draggable = true;\r\n                });\r\n            });\r\n        }\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Escape\":\r\n                    this.clearSelection();\r\n                    this.focus();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragstart\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                this.selectedDraggables.forEach((thisSelectedDraggable) => {\r\n                    thisSelectedDraggable.dragged = true;\r\n                });\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    dataTransfer.dropEffect = \"move\";\r\n                    dataTransfer.setData(\"text/plain\", this.id);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event) => {\r\n            const dataTransfer = event.dataTransfer;\r\n            if (dataTransfer) {\r\n                dataTransfer.dropEffect = \"none\";\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"dragend\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                const thisDraggedDraggables = this.draggables.filter(draggable => draggable.dragged);\r\n                thisDraggedDraggables.forEach((thisDraggedDraggable) => {\r\n                    thisDraggedDraggable.dragged = false;\r\n                });\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"focusout\", (event: FocusEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            if (!this.contains(relatedTarget)) {\r\n                this.clearSelection();\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        if (!target.selected) {\r\n                            this.clearSelection();\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                    else if (event.ctrlKey) {\r\n                        (!target.selected) ?\r\n                            this.selectDraggable(target) :\r\n                            this.unselectDraggable(target);\r\n                    }\r\n                    else if (event.shiftKey) {\r\n                        if (this.selectedDraggables.length > 0) {\r\n                            const targetIndex = this.draggables.indexOf(target);\r\n                            const firstIndex = this.draggables.indexOf(this.selectedDraggables[0]);\r\n                            const direction = Math.sign(targetIndex - firstIndex);\r\n                            const fromIndex = (direction > 0) ? 0 : this.draggables.length - 1;\r\n                            const toIndex = (direction > 0) ? this.draggables.length - 1 : 0;\r\n                            const startRangeIndex = (direction > 0) ? firstIndex : targetIndex;\r\n                            const endRangeIndex = (direction > 0) ? targetIndex : firstIndex;\r\n                            for (let index = fromIndex; index !== (toIndex + direction); index += direction) {\r\n                                (index >= startRangeIndex && index <= endRangeIndex) ? \r\n                                    this.selectDraggable(this.draggables[index]) :\r\n                                    this.unselectDraggable(this.draggables[index]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.selectDraggable(target);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.clearSelection();\r\n                }\r\n            }\r\n        });\r\n        \r\n        this.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n            const target = event.target as any;\r\n            if (event.button == 0) {\r\n                if (this.draggables.includes(target)) {\r\n                    if (!event.shiftKey && !event.ctrlKey) {\r\n                        this.draggables.forEach((thisDraggable) => {\r\n                            if (thisDraggable !== target) {\r\n                                this.unselectDraggable(thisDraggable);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nvar HTMLEDragzoneElement: HTMLEDragzoneElementConstructor = HTMLEDragzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEDraggableElement } from \"./Draggable\";\r\nimport { HTMLEDragzoneElement } from \"./Dragzone\";\r\n\r\nexport { HTMLEDropzoneElement };\r\nexport { EDataChangeEvent };\r\n\r\ninterface HTMLEDropzoneElementConstructor {\r\n    prototype: HTMLEDropzoneElement;\r\n    new(): HTMLEDropzoneElement;\r\n}\r\n\r\ninterface HTMLEDropzoneElement extends HTMLEDragzoneElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    dragovered: DropzoneDragoveredType | null;\r\n    name: string;\r\n    multiple: boolean;\r\n    placeholder: string;\r\n\r\n    droptest: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => void) | null;\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): void;\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean): void;\r\n\r\n    connectedCallback(): void;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ntype DropzoneDragoveredType = \"self\" | \"draggable\" | \"appendarea\";\r\n\r\ntype EDataChangeEvent = CustomEvent<{\r\n    action: \"insert\" | \"remove\";\r\n    draggables: HTMLEDraggableElement[];\r\n    position: number;\r\n}>;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dropzone\": HTMLEDropzoneElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"e_datachange\": EDataChangeEvent,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dropzone\"\r\n})\r\nclass HTMLEDropzoneElementBase extends HTMLEDragzoneElement implements HTMLEDropzoneElement {\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    dragovered!: DropzoneDragoveredType | null;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    placeholder!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    multiple!: boolean;\r\n\r\n    droptest!: ((dropzone: HTMLEDropzoneElement, draggables: HTMLEDraggableElement[]) => boolean) | null;\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadowRoot!.querySelector(\"style\")!.append(/*css*/`\r\n            :host {\r\n                border: 1px dashed gray;\r\n            }\r\n\r\n            :host(:not([multiple]):not(:empty)) [part=\"appendarea\"],\r\n            :host(:not(:empty):not([dragovered])) [part=\"appendarea\"] {\r\n                display: none !important;\r\n            }\r\n\r\n            [part=\"appendarea\"] {\r\n                display: block;\r\n                margin: 2px;\r\n                border-radius: 4px;\r\n                border: 1px dotted black;\r\n            }\r\n\r\n            :host(:not([dragovered=\"appendarea\"])) [part=\"appendarea\"] {\r\n                border-color: transparent;\r\n            }\r\n            \r\n            [part=\"placeholder\"] {\r\n                display: inline-block;\r\n                color: grey;\r\n                pointer-events: none;\r\n                user-select: none;\r\n            }\r\n        `);\r\n\r\n        this.shadowRoot.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"appendarea\"\r\n                },\r\n                children: [\r\n                    element(\"span\", {\r\n                        attributes: {\r\n                            part: \"placeholder\"\r\n                        },\r\n                        children: [\r\n                            \"&nbsp;\"\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n\r\n        this.droptest = null;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        const appendAreaPart = this.shadowRoot!.querySelector<HTMLDivElement>(\"[part='appendarea']\");\r\n\r\n        this.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n            switch (event.key) {\r\n                case \"Delete\":\r\n                    if (this == event.target) {\r\n                        this.removeDraggables();\r\n                    }\r\n                    else {\r\n                        this.removeDraggables(draggable => draggable.selected);\r\n                    }\r\n                    event.stopPropagation();\r\n                    break;\r\n            }\r\n        });\r\n\r\n        this.addEventListener(\"dragover\", (event: DragEvent) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragover\", (event) => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragenter\", (event: DragEvent) => {\r\n            const target = event.target as any;\r\n            if (this.draggables.includes(target)) {\r\n                target.dragovered = true;\r\n                this.dragovered = \"draggable\";\r\n            }\r\n            else {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragenter\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"appendarea\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.addEventListener(\"dragleave\", (event: DragEvent) => {\r\n            const relatedTarget = event.relatedTarget as any;\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                if (target == this) {\r\n                    if (appendAreaPart) {\r\n                        this.dragovered = \"self\";\r\n                    }\r\n                    if (!this.draggables.includes(relatedTarget)) {\r\n                        this.dragovered = null;\r\n                    }\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        });\r\n\r\n        this.shadowRoot!.addEventListener(\"dragleave\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == appendAreaPart) {\r\n                this.dragovered = \"self\";\r\n            }\r\n            event.preventDefault();\r\n        });\r\n        \r\n        this.addEventListener(\"drop\", (event) => {\r\n            const target = event.target as any;\r\n            if (target == this || this.draggables.includes(target)) {\r\n                let dropIndex = this.draggables.length;\r\n                if (target == this) {\r\n                    this.dragovered = null;\r\n                }\r\n                else {\r\n                    target.dragovered = false;\r\n                    dropIndex = this.draggables.indexOf(target);\r\n                }\r\n\r\n                const dataTransfer = event.dataTransfer;\r\n                if (dataTransfer) {\r\n                    const dragzoneId = dataTransfer.getData(\"text/plain\");\r\n                    const dragzone = document.getElementById(dragzoneId);\r\n                    if (dragzone instanceof HTMLEDragzoneElement) {\r\n                        const selectedDraggables = dragzone.selectedDraggables;\r\n                        if (selectedDraggables) {\r\n                            selectedDraggables.forEach((selectedDraggable) => {\r\n                                selectedDraggable.dragged = false;\r\n                            });\r\n                            if (dragzone instanceof HTMLEDropzoneElement) {\r\n                                dragzone.removeDraggables((draggable) => selectedDraggables.includes(draggable));\r\n                            }\r\n                            dragzone.clearSelection();\r\n                            this.addDraggables(selectedDraggables, dropIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.dragovered = null;\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"placeholder\": {\r\n                const placeholderPart = this.shadowRoot.querySelector(\"[part='placeholder']\");\r\n                if (placeholderPart) {\r\n                    placeholderPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDraggables(draggables: HTMLEDraggableElement[], position: number): HTMLEDraggableElement[] | null {\r\n        if (draggables.length > 0) {\r\n            let dataTransferSuccess = true;\r\n            if (this.droptest) {\r\n                dataTransferSuccess = this.droptest(this, draggables);\r\n            }\r\n            \r\n            let newDraggables: HTMLEDraggableElement[] = [];\r\n            let insertionPosition = -1;\r\n            if (dataTransferSuccess) {\r\n                if (this.multiple) {\r\n                    draggables.forEach((draggable) => {\r\n                        let newDraggable = draggable.getReference();\r\n                        if (position > -1 && position < this.draggables.length) {\r\n                            this.draggables[position].insertAdjacentElement(\"beforebegin\", newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? position : insertionPosition;\r\n                        }\r\n                        else {\r\n                            this.appendChild(newDraggable);\r\n                            insertionPosition = (insertionPosition < 0) ? this.draggables.length - 1 : insertionPosition;\r\n                        }\r\n                        newDraggables.push(newDraggable);\r\n                    });\r\n                }\r\n                else {\r\n                    let newDraggable = draggables[0].getReference();\r\n                    if (this.draggables.length > 0) {\r\n                        this.replaceChild(newDraggable, this.draggables[0]);\r\n                    }\r\n                    else {\r\n                        this.appendChild(newDraggable);\r\n                    }\r\n                    newDraggables.push(newDraggable);\r\n                    insertionPosition = 0;\r\n                }\r\n            }\r\n            \r\n            const slot = this.shadowRoot?.querySelector(\"slot\");\r\n            if (slot) {\r\n                slot.addEventListener(\"slotchange\", () => {\r\n                    this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                        bubbles: true,\r\n                        detail: {\r\n                            action: \"insert\",\r\n                            draggables: newDraggables,\r\n                            position: insertionPosition\r\n                        }\r\n                    }));\r\n                }, {once: true});\r\n            }\r\n            return newDraggables;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    removeDraggables(predicate: (draggable: HTMLEDraggableElement, index: number) => boolean = () => true) {\r\n        let toRemove = this.draggables.filter(\r\n            (value: HTMLEDraggableElement, index: number) => {\r\n                return predicate(value, index);\r\n            }\r\n        );\r\n        let atPosition = this.draggables.indexOf(toRemove[0]);\r\n        toRemove.forEach((draggable) => {\r\n            draggable.remove(); \r\n        });\r\n        const slot = this.shadowRoot?.querySelector(\"slot\");\r\n        if (slot) {\r\n            slot.addEventListener(\"slotchange\", () => {\r\n                this.dispatchEvent(new CustomEvent(\"e_datachange\", {\r\n                    bubbles: true,\r\n                    detail: {\r\n                        action: \"remove\",\r\n                        draggables: toRemove,\r\n                        position: atPosition\r\n                    }\r\n                }));\r\n            }, {once: true});\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEDropzoneElement: HTMLEDropzoneElementConstructor = HTMLEDropzoneElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEDialogElement };\r\n\r\ninterface HTMLEDialogElementConstructor {\r\n    prototype: HTMLEDialogElement;\r\n    new(): HTMLEDialogElement;\r\n}\r\n\r\ntype DialogElementType = \"confirm\" | \"alert\";\r\n\r\ninterface HTMLEDialogElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    type: DialogElementType;\r\n    open(): void;\r\n    close(): void;\r\n    cancel(): void;\r\n    confirm(): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-dialog\": HTMLEDialogElement,\r\n    }\r\n    \r\n    interface HTMLElementEventMap {\r\n        \"open\": Event,\r\n        \"close\": Event,\r\n        \"cancel\": Event,\r\n        \"confirm\": Event,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-dialog\"\r\n})\r\nclass HTMLEDialogElementBase extends HTMLElement implements HTMLEDialogElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    type!: DialogElementType;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.attachShadow({mode: \"open\"}).append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: inline-block;\r\n                            \r\n                            padding: 6px;\r\n                            background-color: white;\r\n        \r\n                            -webkit-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            -moz-box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                            box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 6px;\r\n                        }\r\n        \r\n                        button {\r\n                            cursor: pointer;\r\n                        }\r\n        \r\n                        [part=\"actions\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"header\"] {\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: flex-end;\r\n                        }\r\n        \r\n                        [part=\"button\"]:not(:first-child) {\r\n                            margin-left: 4px;\r\n                        }\r\n        \r\n                        :host([type=\"confirm\"]) [part=\"ok-button\"] {\r\n                            display: none !important;\r\n                        }\r\n        \r\n                        :host([type=\"alert\"]) [part=\"cancel-button\"],\r\n                        :host([type=\"alert\"]) [part=\"confirm-button\"] {\r\n                            display: none !important;\r\n                        }\r\n                    `\r\n                    ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"header\"\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button close-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"x\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"body\"\r\n                },\r\n                children: [\r\n                    element(\"slot\")\r\n                ]\r\n            }),\r\n            element(\"hr\", {\r\n                attributes: {\r\n                    part: \"separator\"\r\n                }\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"actions\",\r\n                },\r\n                children: [\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button cancel-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Cancel\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button confirm-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"Confirm\"\r\n                        ]\r\n                    }),\r\n                    element(\"button\", {\r\n                        attributes: {\r\n                            part: \"button ok-button\",\r\n                            type: \"button\",\r\n                            tabindex: 0\r\n                        },\r\n                        children: [\r\n                            \"OK\"\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n        );\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.shadowRoot.addEventListener(\"click\", this);\r\n    }\r\n\r\n    handleEvent(event: Event) {\r\n        const {type, target} = event;\r\n        switch (type) {\r\n            case \"click\":\r\n                const {part} = <Element>target;\r\n                if (part.contains(\"close-button\") || part.contains(\"cancel-button\")) {\r\n                    this.cancel();\r\n                }\r\n                else if (part.contains(\"confirm-button\") || part.contains(\"ok-button\")) {\r\n                    this.confirm();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    open(): void {\r\n        this.dispatchEvent(new CustomEvent(\"open\", {bubbles: true}));\r\n    }\r\n\r\n    close(): void {\r\n        this.dispatchEvent(new CustomEvent(\"close\", {bubbles: true}));\r\n    }\r\n\r\n    cancel(): void {\r\n        this.dispatchEvent(new CustomEvent(\"cancel\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n\r\n    confirm(): void {\r\n        this.dispatchEvent(new CustomEvent(\"confirm\", {bubbles: true}));\r\n        this.close();\r\n    }\r\n}\r\n\r\nvar HTMLEDialogElement: HTMLEDialogElementConstructor = HTMLEDialogElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionElement };\r\n\r\ninterface HTMLEOptionElementConstructor {\r\n    prototype: HTMLEOptionElement;\r\n    new(): HTMLEOptionElement;\r\n}\r\n\r\ninterface HTMLEOptionElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    name: string;\r\n    value: string;\r\n    label: string;\r\n    disabled: boolean;\r\n    selected: boolean;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-option\": HTMLEOptionElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-option\"\r\n})\r\nclass HTMLEOptionElementBase extends HTMLElement implements HTMLEOptionElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String})\r\n    value!: string;\r\n    \r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    disabled!: boolean;\r\n\r\n    @AttributeProperty({type: Boolean, observed: true})\r\n    selected!: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"span\", {\r\n                attributes: {\r\n                    part: \"label\"\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n            case \"selected\": {\r\n                this.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEOptionElement: HTMLEOptionElementConstructor = HTMLEOptionElementBase;","import { CustomElement, element } from \"../../Element\";\r\n\r\nexport { HTMLEOptionGroupElement };\r\n\r\ninterface HTMLEOptionGroupElementConstructor {\r\n    prototype: HTMLEOptionGroupElement;\r\n    new(): HTMLEOptionGroupElement;\r\n}\r\n\r\ninterface HTMLEOptionGroupElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-optiongroup\": HTMLEOptionGroupElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-optiongroup\"\r\n})\r\nclass HTMLEOptionGroupElementBase extends HTMLElement implements HTMLEOptionGroupElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"slot\")\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n    }\r\n}\r\n\r\nvar HTMLEOptionGroupElement: HTMLEOptionGroupElementConstructor = HTMLEOptionGroupElementBase;","import { CustomElement, AttributeProperty, element } from \"../../Element\";\r\nimport { HTMLEOptionElement } from \"./Option\";\r\nimport { HTMLEOptionGroupElement } from \"./OptionGroup\";\r\n\r\nexport { HTMLESelectElement };\r\n\r\ninterface HTMLESelectElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    get options(): HTMLEOptionElement[];\r\n    get activeOption(): HTMLEOptionElement | null;\r\n    get selectedOption(): HTMLEOptionElement | null;\r\n    name: string;\r\n    label: string;\r\n    value: string;\r\n    expanded: boolean;\r\n    expand(): void;\r\n    collapse(): void;\r\n    toggle(force?: boolean): void;\r\n}\r\n\r\ninterface HTMLESelectElementConstructor {\r\n    prototype: HTMLESelectElement;\r\n    new(): HTMLESelectElement;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-select\": HTMLESelectElement,\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-select\"\r\n})\r\nclass HTMLESelectElementBase extends HTMLElement implements HTMLESelectElement {\r\n    \r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get options(): HTMLEOptionElement[] {\r\n        return Array.from(this.querySelectorAll<HTMLEOptionElement>(\r\n            \"e-option\"\r\n        ));\r\n    }\r\n\r\n    get activeOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option:focus-within\") ?? null;\r\n    }\r\n\r\n    get selectedOption(): HTMLEOptionElement | null {\r\n        return this.querySelector(\"e-option[selected]\") ?? null;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    name!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    label!: string;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    value!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"select\", observed: true})\r\n    type!: string;\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    expanded!: boolean;\r\n\r\n    #walker: TreeWalker;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"content\"\r\n                },\r\n                children: [\r\n                    element(\"label\", {\r\n                        attributes: {\r\n                            part: \"label\"\r\n                        }\r\n                    }),\r\n                    element(\"output\", {\r\n                        attributes: {\r\n                            part: \"value\"\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"box\"\r\n                },\r\n                children: element(\"slot\")\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        this.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        this.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        this.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"label\": {\r\n                const {shadowRoot} = this;\r\n                const labelPart = shadowRoot.querySelector<HTMLElement>(\"[part=label]\");\r\n                if (labelPart) {\r\n                    labelPart.textContent = newValue;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    expand(): void {\r\n        const {expanded} = this;\r\n        if (!expanded) {\r\n            this.expanded = true;\r\n            this.#positionBox();\r\n            const {selectedOption} = this;\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(): void {\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            this.expanded = false;\r\n            this.focus();\r\n        }\r\n    }\r\n\r\n    toggle(force?: boolean): void {\r\n        const {expanded} = this;\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand() : this.collapse();\r\n    }\r\n\r\n    #value(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=value]\")!;\r\n    }\r\n\r\n    #box(): HTMLElement {\r\n        return this.shadowRoot.querySelector<HTMLElement>(\"[part=box]\")!;\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLEOptionElement && !node.disabled && !node.hidden) {\r\n            return NodeFilter.FILTER_ACCEPT;\r\n        }\r\n        else if (node instanceof HTMLEOptionGroupElement) {\r\n            return NodeFilter.FILTER_SKIP;\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this;\r\n        return <HTMLEOptionElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLEOptionElement): HTMLEOptionElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLEOptionElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(option: HTMLEOptionElement) {\r\n        const {selectedOption} = this;\r\n        if (option !== selectedOption) {\r\n            option.selected = true;\r\n            this.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(option: HTMLEOptionElement) {\r\n        this.#value().textContent = option.label;\r\n    }\r\n\r\n    #positionBox(): void {\r\n        const box = this.#box()\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = this.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        this.toggle();\r\n        const {expanded} = this;\r\n        if (expanded) {\r\n            const {selectedOption} = this;\r\n            (selectedOption ?? this.options[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLEOptionElement>(\"e-option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {relatedTarget} = event;\r\n        const lostFocusWithin = !this.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key} = event;\r\n        const {expanded, activeOption, selectedOption} = this;\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption();\r\n                    if (previousOption) {\r\n                        this.#selectOption(previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption();\r\n                    if (nextOption) {\r\n                        this.#selectOption(nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption();\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption();\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                    if (activeOption) {\r\n                        this.#selectOption(activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand();\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const {options} = this;\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => option_i.label.toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetOption = (<Element>target).closest<HTMLEOptionElement>(\"e-option\");\r\n        if (targetOption) {\r\n            targetOption.focus({preventScroll: true});\r\n        }\r\n    }\r\n    \r\n    #handleSelectEvent(event: Event) {\r\n        const {target} = event;\r\n        const targetOption = <HTMLEOptionElement>target;\r\n        if (targetOption.selected) {\r\n            const {options} = this;\r\n            options.forEach((option_i) => {\r\n                if (option_i !== targetOption && option_i.selected) {\r\n                    option_i.selected = false;\r\n                }\r\n            });\r\n            this.#setSelectedOption(targetOption);\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLESelectElement: HTMLESelectElementConstructor = HTMLESelectElementBase;","import { CustomElement } from \"../Element\";\r\n\r\nexport { HTMLESeparatorElement };\r\n\r\ninterface HTMLESeparatorElementConstructor {\r\n    prototype: HTMLESeparatorElement;\r\n    new(): HTMLESeparatorElement;\r\n}\r\n\r\ninterface HTMLESeparatorElement extends HTMLElement {}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-separator\": HTMLESeparatorElement,\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-separator\"\r\n})\r\nclass HTMLESeparatorElementBase extends HTMLElement implements HTMLESeparatorElement {\r\n    #internals: ElementInternals;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#internals = this.attachInternals();\r\n        this.#internals.role = \"separator\";\r\n    }\r\n}\r\n\r\nvar HTMLESeparatorElement: HTMLESeparatorElementConstructor = HTMLESeparatorElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHandleElement };\r\n\r\ninterface HTMLEHandleElementConstructor {\r\n    prototype: HTMLEHandleElement;\r\n    new(): HTMLEHandleElement;\r\n}\r\n\r\ninterface HTMLEHandleElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    controls: string;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-handle\": HTMLEHandleElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"move\": Event;\r\n    }\r\n}\r\n\r\nvar shadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-handle\"\r\n})\r\nclass HTMLEHandleElementBase extends HTMLElement implements HTMLEHandleElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n\r\n    static {\r\n        shadowTemplate = element(\"template\");\r\n        shadowTemplate.content.append(\r\n            element(\"style\", {\r\n                children: [\r\n                    /*css*/`\r\n                        :host {\r\n                            display: block;\r\n                            \r\n                            width: 24px;\r\n                            height: 12px;\r\n                            \r\n                            background-color: rgb(0, 128, 255);\r\n\r\n                            -webkit-mask-image: url(\"assets/dots.png\");\r\n                            mask-image: url(\"assets/dots.png\");\r\n\r\n                            -webkit-mask-repeat: repeat;\r\n                            mask-repeat: repeat;\r\n                            cursor: move;\r\n                        }\r\n                    `\r\n                ]\r\n            })\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        const shadowRoot = this.attachShadow({mode: \"open\"});\r\n        shadowRoot.append(\r\n            shadowTemplate.content.cloneNode(true)\r\n        );\r\n        this.#target = null;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"controls\": {\r\n                const {controls} = this;\r\n                this.#target = document.getElementById(controls);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        this.#target = document.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            const target = this.#target;\r\n            if (target !== null) {\r\n                const targetComputedStyle = window.getComputedStyle(target);\r\n                const {movementX, movementY} = event;\r\n                const {width: rectWidth, height: rectHeight} = target.getBoundingClientRect();\r\n                const outerElement = target.parentElement ?? document.body;\r\n                const {\r\n                    left: outerRectLeft, right: outerRectRight,\r\n                    top: outerRectTop, bottom: outerRectBottom\r\n                } = outerElement.getBoundingClientRect();\r\n                const left = parseFloat(targetComputedStyle.getPropertyValue(\"left\"));\r\n                const newLeft = Math.max(outerRectLeft, Math.min(Math.trunc(left + movementX), outerRectRight - rectWidth));\r\n                const top = parseFloat(targetComputedStyle.getPropertyValue(\"top\"));\r\n                const newTop = Math.max(outerRectTop, Math.min(Math.trunc(top + movementY), outerRectBottom - rectHeight));\r\n                target.style.setProperty(\"left\", `${newLeft}px`);\r\n                target.style.setProperty(\"top\", `${newTop}px`);\r\n                this.dispatchEvent(new CustomEvent(\"move\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLEHandleElement: HTMLEHandleElementConstructor = HTMLEHandleElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEHeightSashElement };\r\n\r\ninterface HTMLEHeightSashElementConstructor {\r\n    prototype: HTMLEHeightSashElement;\r\n    new(): HTMLEHeightSashElement;\r\n}\r\n\r\ninterface HTMLEHeightSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"top\" | \"bottom\";\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-hsash\": HTMLEHeightSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-hsash\"\r\n})\r\nclass HTMLEHeightSashElementBase extends HTMLElement implements HTMLEHeightSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"top\"})\r\n    growdir!: \"top\" | \"bottom\";\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#pointerMovement = event.movementY;\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            else {\r\n                this.#pointerMovement += event.movementY;\r\n            }\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementY = this.#pointerMovement;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = Math.trunc(height + (growdir == \"top\" ? -1 : 1) * movementY);\r\n            target.style.setProperty(\"height\", `${newHeight}px`);\r\n            const computedNewHeight = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            target.style.setProperty(\"height\", `${computedNewHeight}px`);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEHeightSashElement: HTMLEHeightSashElementConstructor = HTMLEHeightSashElementBase;","import { CustomElement, AttributeProperty } from \"../Element\";\r\n\r\nexport { HTMLEImportElement };\r\n\r\ninterface HTMLEImportElementConstructor {\r\n    prototype: HTMLEImportElement;\r\n    new(): HTMLEImportElement;\r\n}\r\n\r\ninterface HTMLEImportElement extends HTMLElement {\r\n    src: string;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-import\": HTMLEImportElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"load\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-import\"\r\n})\r\nclass HTMLEImportElementBase extends HTMLElement implements HTMLEImportElement {\r\n\r\n    @AttributeProperty({type: String})\r\n    src!: string;\r\n    \r\n    connectedCallback(): void {\r\n        const {src} = this;\r\n        if (src) {\r\n            this.#importRequest(src);\r\n        }\r\n    }\r\n\r\n    async #importRequest(src: string): Promise<void> {\r\n        this.outerHTML = await fetch(src).then((response: Response) => {\r\n            if (response.ok) {\r\n                return response.text();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n        this.dispatchEvent(new Event(\"load\", {bubbles: true}));\r\n    }\r\n}\r\n\r\nvar HTMLEImportElement: HTMLEImportElementConstructor = HTMLEImportElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLELoaderElement };\r\n\r\ninterface HTMLELoaderElementConstructor {\r\n    prototype: HTMLELoaderElement;\r\n    new(): HTMLELoaderElement;\r\n}\r\n\r\ninterface HTMLELoaderElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    type: \"bar\" | \"circle\";\r\n    promise: Promise<any> | null;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-loader\": HTMLELoaderElement,\r\n    }\r\n}\r\n\r\nvar barShadowTemplate: HTMLTemplateElement;\r\nvar circleShadowTemplate: HTMLTemplateElement;\r\n\r\n@CustomElement({\r\n    name: \"e-loader\"\r\n})\r\nclass HTMLELoaderElementBase extends HTMLElement implements HTMLELoaderElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n    \r\n    @AttributeProperty({type: String, defaultValue: \"bar\", observed: true})\r\n    type!: \"bar\" | \"circle\";\r\n    \r\n    #promise: Promise<any> | null;\r\n\r\n    static {\r\n        const commonStyle = element(\"style\", {\r\n            children: [\r\n                /*css*/`\r\n                    :host {\r\n                        display: inline-block;\r\n                        --default-loader-color: rgb(0, 128, 255);\r\n                        --default-animation-duration: 2s;\r\n                    }\r\n                `\r\n            ]\r\n        });\r\n        const barStyle = commonStyle.cloneNode(true);\r\n        const circleStyle = commonStyle.cloneNode(true);\r\n        barStyle.textContent += /*css*/`\r\n            :host {\r\n                display: block;\r\n            }\r\n\r\n            [part=\"bar\"] {\r\n                position: relative;\r\n                display: block;\r\n                overflow: hidden;\r\n                height: 6px;\r\n                width: 100%;\r\n            }\r\n\r\n            [part=\"slider\"] {\r\n                display: flex;\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                animation-name: slider;\r\n            }\r\n\r\n            [part=\"slider\"],\r\n            [part=\"cursor\"] {\r\n                border-radius: 4px;\r\n                will-change: transform;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            [part=\"cursor\"] {\r\n                display: block;\r\n                width: 128px;\r\n                background-color: var(--loader-color, var(--default-loader-color));\r\n                animation-name: cursor;\r\n            }\r\n\r\n            [part=\"bar\"]:after {\r\n                animation-name: shine;\r\n                animation-duration: var(--animation-duration, var(--default-animation-duration));\r\n                animation-iteration-count: infinite;\r\n                animation-fill-mode: forwards;  \r\n                content: \"\";\r\n                position: absolute;\r\n                left: -100%;\r\n                width: 100%;\r\n                height: 100%;\r\n                top: 0;\r\n                opacity: 0;\r\n                \r\n                background: rgba(255, 255, 255, 0.13);\r\n                background: linear-gradient(\r\n                    to right, \r\n                    rgba(255, 255, 255, 0) 0%,\r\n                    rgba(255, 255, 255, 0.1) 10%,\r\n                    rgba(255, 255, 255, 0.9) 80%,\r\n                    rgba(255, 255, 255, 0) 100%\r\n                );\r\n            }\r\n\r\n            @keyframes shine {\r\n                25% {\r\n                    opacity: 1;\r\n                    left: -100%;\r\n                }\r\n                100% {\r\n                    opacity: 0;\r\n                    left: 100%;\r\n                }\r\n            }\r\n\r\n            @keyframes slider {\r\n                0% {\r\n                    transform: translateX(0%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n\r\n            @keyframes cursor {\r\n                0% {\r\n                    transform: translateX(-100%);\r\n                }\r\n                100% {\r\n                    transform: translateX(100%);\r\n                }\r\n            }\r\n        `;\r\n        circleStyle.textContent += /*css*/`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            [part=\"circle\"] {\r\n                width: 12px;\r\n                height: 12px;\r\n                border-top: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-right: 4px solid var(--loader-color, var(--default-loader-color));\r\n                border-left: 4px solid transparent;\r\n                border-bottom: 4px solid transparent;\r\n                border-radius: 50%;\r\n                animation-duration: 1s;\r\n                animation-name: circle;\r\n                animation-timing-function: linear;\r\n                animation-iteration-count: infinite;\r\n            }\r\n\r\n            @keyframes circle {\r\n                0% {\r\n                    transform: rotate(0);\r\n                }\r\n                100% {\r\n                    transform: rotate(360deg);\r\n                }\r\n            }\r\n        `;\r\n        barShadowTemplate = element(\"template\");\r\n        barShadowTemplate.content.append(\r\n            barStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"bar\"\r\n                },\r\n                children: [\r\n                    element(\"div\", {\r\n                        attributes: {\r\n                            part: \"slider\"\r\n                        },\r\n                        children: [\r\n                            element(\"div\", {\r\n                                attributes: {\r\n                                    part: \"cursor\"\r\n                                }\r\n                            })\r\n                        ]\r\n                    })\r\n                ]\r\n            })\r\n        );\r\n        circleShadowTemplate = element(\"template\");\r\n        circleShadowTemplate.content.append(\r\n            circleStyle,\r\n            element(\"div\", {\r\n                attributes: {\r\n                    part: \"circle\"\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({mode: \"open\"});\r\n        this.#updateTemplate();\r\n        this.#promise = null;\r\n    }\r\n\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void {\r\n        switch (name) {\r\n            case \"type\": {\r\n                this.#updateTemplate();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    set promise(promise: Promise<any> | null) {\r\n        if (promise) {\r\n            promise.finally(() => {\r\n                this.remove();\r\n            });\r\n        }\r\n        this.#promise = promise;\r\n    }\r\n\r\n    get promise(): Promise<any> | null {\r\n        return this.#promise;\r\n    }\r\n\r\n    #updateTemplate(): void {\r\n        const {type, shadowRoot} = this;\r\n        switch (type) {\r\n            case \"circle\": {\r\n                shadowRoot.replaceChildren(\r\n                    circleShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n            case \"bar\": {\r\n                shadowRoot.replaceChildren(\r\n                    barShadowTemplate.content.cloneNode(true)\r\n                );\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar HTMLELoaderElement: HTMLELoaderElementConstructor = HTMLELoaderElementBase;","import { CustomElement, AttributeProperty, element } from \"../Element\";\r\n\r\nexport { HTMLEWidthSashElement };\r\n\r\ninterface HTMLEWidthSashElementConstructor {\r\n    prototype: HTMLEWidthSashElement;\r\n    new(): HTMLEWidthSashElement;\r\n}\r\n\r\ninterface HTMLEWidthSashElement extends HTMLElement {\r\n    readonly shadowRoot: ShadowRoot;\r\n    readonly target: HTMLElement | null;\r\n    controls: string;\r\n    growdir: \"right\" | \"left\";\r\n    max: boolean;\r\n    setWidth(width: number): void;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"e-wsash\": HTMLEWidthSashElement;\r\n    }\r\n    interface HTMLElementEventMap {\r\n        \"resize\": Event;\r\n    }\r\n}\r\n\r\n@CustomElement({\r\n    name: \"e-wsash\"\r\n})\r\nclass HTMLEWidthSashElementBase extends HTMLElement implements HTMLEWidthSashElement {\r\n\r\n    readonly shadowRoot!: ShadowRoot;\r\n\r\n    get target(): HTMLElement | null {\r\n        return this.#target;\r\n    }\r\n\r\n    @AttributeProperty({type: String, observed: true})\r\n    controls!: string;\r\n\r\n    @AttributeProperty({type: String, defaultValue: \"right\"})\r\n    growdir!: \"right\" | \"left\";\r\n\r\n    @AttributeProperty({type: Boolean})\r\n    max!: boolean;\r\n\r\n    #target: HTMLElement | null;\r\n    #onCapture: boolean;\r\n    #queuedPointerCallback: FrameRequestCallback | null;\r\n    #pointerMovement: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#target = null;\r\n        this.#queuedPointerCallback = null;\r\n        this.#pointerMovement = 0;\r\n        this.#onCapture = false;\r\n        this.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        this.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        this.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n    }\r\n\r\n    setWidth(width: number): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const {max} = this;\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n            if (max) {\r\n                target.style.setProperty(\"max-width\", `${width}px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        this.releasePointerCapture(pointerId);\r\n        this.#onCapture = false;\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId} = event;\r\n        const {controls} = this;\r\n        const rootNode = <ShadowRoot | Document>this.getRootNode();\r\n        this.#target = rootNode.getElementById(controls);\r\n        this.setPointerCapture(pointerId);\r\n        this.#onCapture = true;\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        if (this.#onCapture) {\r\n            if (this.#queuedPointerCallback == null) {\r\n                this.#queuedPointerCallback = this.#pointerMoveCallback.bind(this);\r\n                requestAnimationFrame(this.#queuedPointerCallback);\r\n            }\r\n            this.#pointerMovement += event.movementX;\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(): void {\r\n        const target = this.#target;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const {growdir} = this;\r\n            const movementX = this.#pointerMovement;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(newWidth);\r\n            this.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        this.#pointerMovement = 0;\r\n        this.#queuedPointerCallback = null;\r\n    }\r\n}\r\n\r\nvar HTMLEWidthSashElement: HTMLEWidthSashElementConstructor = HTMLEWidthSashElementBase;","import { areAttributesMatching, AttributeMutationMixin } from \"../elements/Element\";\r\n\r\nexport { AttributeMixinsObserver };\r\n\r\ninterface AttributeMixinsObserverConstructor {\r\n    prototype: AttributeMixinsObserver;\r\n    new(mixins: AttributeMutationMixin[]): AttributeMixinsObserver;\r\n}\r\n\r\ninterface AttributeMixinsObserver {\r\n    observe(target: Node): void;\r\n    trigger(): void;\r\n    disconnect(): void;\r\n}\r\n\r\nclass AttributeMixinsObserverBase implements AttributeMixinsObserver {\r\n    #observer: MutationObserver;\r\n    #mixins: AttributeMutationMixin[];\r\n\r\n    constructor(mixins: AttributeMutationMixin[]) {\r\n        this.#observer = new MutationObserver(\r\n            this.#callback.bind(this)\r\n        );\r\n        this.#mixins = mixins.slice();\r\n    }\r\n\r\n    trigger(): void {\r\n        this.#callback(this.#observer.takeRecords());\r\n    }\r\n\r\n    observe(target: Node): void  {\r\n        this.#observer.observe(target, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributeFilter: this.#mixins.map((mixin => mixin.attributeName))\r\n        });\r\n    }\r\n\r\n    disconnect(): void {\r\n        this.#observer.disconnect();\r\n    }\r\n\r\n    #callback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            mutation.addedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#attachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            mutation.removedNodes.forEach((node: Node) => {\r\n                if (node instanceof Element) {\r\n                    this.#detachMatchingAttributeMixinsInSubtree(node);\r\n                }\r\n            });\r\n            if (mutation.target instanceof Element) {\r\n                const targetElement = mutation.target;\r\n                const attributeName = mutation.attributeName;\r\n                if (attributeName) {\r\n                    const relatedMixins = this.#mixins.filter(mixin => mixin.attributeName == attributeName);\r\n                    relatedMixins.forEach((mixin) => {\r\n                        if (areAttributesMatching(\r\n                                mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                                attributeName!, targetElement.getAttribute(attributeName!)\r\n                            )) {\r\n                                mixin.attach(targetElement);\r\n                        }\r\n                        else {\r\n                            mixin.detach(targetElement);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #attachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.attach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#attachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n\r\n    #detachMatchingAttributeMixinsInSubtree(element: Element) {\r\n        Array.from(element.attributes).forEach((attr) => {\r\n            let matchingMixins = this.#mixins.filter(\r\n                mixin => areAttributesMatching(\r\n                    mixin.attributeType, mixin.attributeName, mixin.attributeValue,\r\n                    attr.name, attr.value\r\n                )\r\n            );\r\n            matchingMixins.forEach((mixin) => {\r\n                mixin.detach(element);\r\n            });\r\n        });\r\n        let childIndex = 0;\r\n        const {children} = element;\r\n        while (childIndex < children.length) {\r\n            const child = children.item(childIndex);\r\n            if (child !== null) {\r\n                this.#detachMatchingAttributeMixinsInSubtree(child);\r\n            }\r\n            childIndex++;\r\n        }\r\n    }\r\n}\r\n\r\nvar AttributeMixinsObserver: AttributeMixinsObserverConstructor = AttributeMixinsObserverBase;","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { separatorWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"separator\": SeparatorWidgetFactory\r\n    }\r\n}\r\n\r\ninterface SeparatorWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar separatorWidget = new (\r\nWidget({\r\n    name: \"separator\"\r\n})(class SeparatorWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"separator\",\r\n                role: \"separator\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemWidget };\r\n\r\ntype MenuItemType = \"button\" | \"radio\" | \"checkbox\" | \"menu\" | \"submenu\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitem\": MenuItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void;\r\n    getMenu(item: HTMLElement): HTMLElement | null;\r\n    getKeyShortcut(item: HTMLElement): string | null;\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): MenuItemType | null;\r\n    setType(item: HTMLElement, type: MenuItemType): void;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getChecked(item: HTMLElement): boolean;\r\n    setChecked(item: HTMLElement, value: boolean): void;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n    expand(item: HTMLElement): void;\r\n    collapse(item: HTMLElement): void;\r\n}\r\n\r\nvar menuItemWidget = new(\r\nWidget({\r\n    name: \"menuitem\"\r\n})(\r\nclass MenuItemWidgetFactoryBase extends WidgetFactory implements MenuItemWidgetFactory {\r\n    #iconPartTemplate: HTMLElement;\r\n    #arrowPartTemplate : HTMLElement;\r\n    #keyshortcutsPartTemplate: HTMLElement;\r\n    #template: HTMLElement;\r\n    #types: MenuItemType[];\r\n    #typesFeatures: {\r\n        [key in MenuItemType]: {\r\n            role: string,\r\n            hasIcon: boolean,\r\n            hasArrow: boolean\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.#iconPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"icon\"\r\n            }\r\n        });\r\n        this.#arrowPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"arrow\"\r\n            }\r\n        });\r\n        this.#keyshortcutsPartTemplate = element(\"span\", {\r\n            attributes: {\r\n                class: \"keyshortcuts\"\r\n            }\r\n        });\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"menuitem\",\r\n                role: \"menuitem\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                this.#iconPartTemplate.cloneNode(true),\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n        this.#types = [\"checkbox\", \"radio\", \"menu\", \"submenu\", \"button\"];\r\n        this.#typesFeatures = {\r\n            button: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            checkbox: {\r\n                role: \"menuitemcheckbox\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            radio: {\r\n                role: \"menuitemradio\",\r\n                hasIcon: true,\r\n                hasArrow: false\r\n            },\r\n            menu: {\r\n                role: \"menuitem\",\r\n                hasIcon: false,\r\n                hasArrow: false\r\n            },\r\n            submenu: {\r\n                role: \"menuitem\",\r\n                hasIcon: true,\r\n                hasArrow: true\r\n            }\r\n        }\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type: MenuItemType;\r\n        checked?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, keyshortcut, checked, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (checked !== undefined) {\r\n                this.setChecked(item, checked);\r\n            }\r\n            if (type !== undefined) {\r\n                if (type == \"menu\" || type == \"submenu\") {\r\n                    this.setExpanded(item, false);\r\n                }\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getMenu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        let keyshortcutsPart = item.querySelector(\":scope > .keyshortcuts\");\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n            if (!keyshortcutsPart) {\r\n                const labelPart = this.#label(item);\r\n                const keyshortcutsPartTemplate = this.#keyshortcutsPartTemplate;\r\n                keyshortcutsPart = <HTMLElement>keyshortcutsPartTemplate.cloneNode(true);\r\n                labelPart.after(keyshortcutsPart);\r\n            }\r\n            keyshortcutsPart.textContent = value;\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n            if (keyshortcutsPart) {\r\n                keyshortcutsPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n    \r\n    getType(item: HTMLElement): MenuItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`menuitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: MenuItemType): void {\r\n        const typesFeatures = this.#typesFeatures;\r\n        const iconPartTemplate = this.#iconPartTemplate;\r\n        const arrowPartTemplate = this.#arrowPartTemplate;\r\n        const {role, hasIcon, hasArrow} = typesFeatures[type];\r\n        const oldType = this.getType(item);\r\n        const {classList} = item;\r\n        if (oldType) {\r\n            classList.remove(`menuitem-${oldType}`);\r\n        }\r\n        classList.add(`menuitem-${type}`);\r\n        item.setAttribute(\"role\", role);\r\n        const labelPart = this.#label(item);\r\n        const iconPart = item.querySelector(\":scope > .icon\");\r\n        const arrowPart = item.querySelector(\":scope > .arrow\");\r\n        if (hasIcon) {\r\n            if (!iconPart && labelPart) {\r\n                labelPart.before(iconPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (iconPart) {\r\n                iconPart.remove();\r\n            }\r\n        }\r\n        if (hasArrow) {\r\n            if (!arrowPart && labelPart) {\r\n                labelPart.after(arrowPartTemplate.cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            if (arrowPart) {\r\n                arrowPart.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getChecked(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-checked\") ?? String(false));\r\n    }\r\n\r\n    setChecked(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-checked\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setChecked(targetItem, !this.getChecked(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setChecked(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menu\":\r\n                case \"submenu\": {\r\n                    this.toggle(targetItem);\r\n                    if (this.getExpanded(targetItem)) {\r\n                        this.getMenu(targetItem)?.focus({preventScroll: true});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const menu = this.getMenu(item);\r\n        if (menu !== null) {\r\n            const {style: menuStyle} = menu;\r\n            const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n            const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n            const {scrollY, scrollX} = window;\r\n            const {clientWidth, clientHeight} = document.body;\r\n            const type = this.getType(item);\r\n            if (type == \"menu\") {\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n            else {\r\n                const closestMenu = item.closest(\".menu\");\r\n                if (closestMenu !== null) {\r\n                    const {top: closestMenuTop, left: closestMenuLeft} = closestMenu.getBoundingClientRect();\r\n                    const overflowX = itemRight + menuWidth - clientWidth;\r\n                    const overflowY = itemTop + menuHeight - clientHeight;\r\n                    menuStyle.setProperty(\"left\", `${\r\n                        overflowX > 0 ?\r\n                        itemLeft - menuWidth - closestMenuLeft :\r\n                        itemRight - closestMenuLeft\r\n                    }px`);\r\n                    const menuComputedStyle = window.getComputedStyle(menu);\r\n                    const {paddingTop, paddingBottom} = menuComputedStyle;\r\n                    const menuPaddingTop = parseFloat(paddingTop);\r\n                    const menuPaddingBottom = parseFloat(paddingBottom);\r\n                    menuStyle.setProperty(\"top\", `${\r\n                        overflowY > 0 ?\r\n                        itemBottom - menuHeight - closestMenuTop + menuPaddingBottom :\r\n                        itemTop - closestMenuTop - menuPaddingTop\r\n                    }px`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuBarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menubar\": MenuBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuBarWidgetFactory extends WidgetFactory {\r\n    setExpanded(menubar: HTMLElement, value: boolean): void;\r\n    getExpanded(menubar: HTMLElement): boolean;\r\n}\r\n\r\nvar menuBarWidget = new (\r\nWidget({\r\n    name: \"menubar\"\r\n})(class MenubarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menubar\",\r\n                role: \"menubar\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create() {\r\n        const menubar = <HTMLElement>this.#template.cloneNode(true);\r\n        menubar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menubar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        menubar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menubar.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menubar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        return menubar;\r\n    }\r\n\r\n    slot(menubar: HTMLElement) {\r\n        return menubar;\r\n    }\r\n\r\n    setExpanded(menubar: HTMLElement, value: boolean): void {\r\n        menubar.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(menubar: HTMLElement): boolean {\r\n        return menubar.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getActiveItem(menubar: HTMLElement): HTMLElement | null {\r\n        return menubar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    #firstItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menubar: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menubar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #isClosestMenu(menubar: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\":is(.menubar, .menu)\") == menubar;\r\n    }\r\n\r\n    #nearestItem(menubar: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menubar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, targetItem);\r\n            if (isClosestMenu) {\r\n                const isExpanded = !expanded;\r\n                this.setExpanded(menubar, isExpanded);\r\n                if (isExpanded) {\r\n                    if (targetItem !== null && !menuItemWidget.getExpanded(targetItem)) {\r\n                        menuItemWidget.expand(targetItem);\r\n                    }\r\n                    const menu = menuItemWidget.getMenu(targetItem);\r\n                    menu?.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true})\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && this.getExpanded(menubar)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.expand(nearestItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && !target.contains(<Element>relatedTarget)) {\r\n            const nearestItem = this.#nearestItem(menubar, target);\r\n            if (nearestItem) {\r\n                menuItemWidget.collapse(nearestItem);\r\n            }\r\n        }\r\n        const lostFocusWithin = !menubar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.setExpanded(menubar, false);\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const activeItem = this.#getActiveItem(menubar);\r\n            const expanded = this.getExpanded(menubar);\r\n            const isClosestMenu = this.#isClosestMenu(menubar, target);\r\n            if (isClosestMenu && target !== activeItem && expanded) {\r\n                const menu = menuItemWidget.getMenu(target);\r\n                if (menu) {\r\n                    menu.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    target.focus({preventScroll: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {key, currentTarget} = event;\r\n        const menubar = <HTMLElement>currentTarget;\r\n        let activeItem = this.#getActiveItem(menubar);\r\n        const expanded = this.getExpanded(menubar);\r\n        switch (key) {\r\n            case \"ArrowLeft\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(menubar) :\r\n                    this.#firstItem(menubar);\r\n                previousItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(menubar) : \r\n                    this.#lastItem(menubar);\r\n                nextItem?.focus({preventScroll: true});\r\n                activeItem = this.#getActiveItem(menubar);\r\n                if (expanded && activeItem) {\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    this.setExpanded(menubar, !expanded);\r\n                    const firstChildItem = this.#firstChildItem(activeItem);\r\n                    firstChildItem?.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.setExpanded(menubar, false);\r\n                    if (activeItem) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    menubar.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { menuItemWidget } from \"./MenuItemWidget\";\r\n\r\nexport { menuWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menu\": MenuWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement;\r\n    setPosition(menu: HTMLElement, x: number, y: number): void;\r\n    getContextual(menu: HTMLElement): boolean;\r\n    setContextual(menu: HTMLElement, value: boolean): void;\r\n    items(menu: HTMLElement): HTMLElement[];\r\n}\r\n\r\nvar mouseOverExpandDelay = 0_200;\r\nvar mouseOutCollapseDelay = 0_400;\r\n\r\nvar menuWidget = new (\r\nWidget({\r\n    name: \"menu\"\r\n})(class MenuWidgetFactoryBase extends WidgetFactory implements MenuWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #toggleTimeouts: WeakMap<HTMLElement, {clear(): void;}>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menu\",\r\n                role: \"menu\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#toggleTimeouts = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        contextual?: boolean;\r\n        position?: {x: number, y: number};\r\n    }): HTMLElement {\r\n        const menu = <HTMLElement>this.#template.cloneNode(true);\r\n        menu.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        menu.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        menu.addEventListener(\"mouseout\", this.#handleMouseOutEvent.bind(this));\r\n        menu.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        menu.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, contextual, position} = properties;\r\n            if (id !== undefined) {\r\n                menu.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                menu.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                menu.tabIndex = tabIndex;\r\n            }\r\n            if (contextual !== undefined) {\r\n                this.setContextual(menu, contextual);\r\n            }\r\n            if (position !== undefined) {\r\n                const {x, y} = position;\r\n                this.setPosition(menu, x, y);\r\n            }\r\n        }\r\n        return menu;\r\n    }\r\n\r\n    slot(menu: HTMLElement): HTMLElement | null {\r\n        return menu;\r\n    }\r\n\r\n    setPosition(menu: HTMLElement, x: number, y: number): void {\r\n        const {style} = menu;\r\n        const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        const left = x + scrollX;\r\n        const top = y + scrollY;\r\n        const {clientWidth, clientHeight} = document.body;\r\n        const overflowX = left + menuWidth - clientWidth;\r\n        const overflowY = top + menuHeight - clientHeight;\r\n        style.setProperty(\"left\", `${overflowX > 0 ? left - menuWidth : left}px`);\r\n        style.setProperty(\"top\", `${overflowY > 0 ? top - menuHeight : top}px`);\r\n    }\r\n\r\n    getContextual(menu: HTMLElement): boolean {\r\n        const {classList} = menu;\r\n        return classList.contains(\"menu-contextual\");\r\n    }\r\n\r\n    setContextual(menu: HTMLElement, value: boolean): void {\r\n        const {classList} = menu;\r\n        if (value) {\r\n            classList.add(\"menu-contextual\");\r\n        }\r\n        else {\r\n            classList.remove(\"menu-contextual\");\r\n        }\r\n    }\r\n\r\n    items(menu: HTMLElement): HTMLElement[] {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        ));\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"menuitem\") && !menuItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"menuitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #collapseSubmenus(menu: HTMLElement): void {\r\n        menu.querySelectorAll<HTMLElement>(\":is(:scope, :scope > .menuitemgroup) > .menuitem[aria-expanded]\")\r\n            .forEach(menuitem_i => menuItemWidget.collapse(menuitem_i));\r\n    }\r\n\r\n    #isClosestMenu(menu: HTMLElement, target: HTMLElement): boolean {\r\n        return target.closest(\".menu\") == menu;\r\n    }\r\n\r\n    #nearestItem(menu: HTMLElement, target: HTMLElement): HTMLElement | null {\r\n        return Array.from(menu.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem\"\r\n        )).find(item_i => item_i.contains(target)) ?? null;\r\n    }\r\n\r\n    #firstItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(menu: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = menu;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n\r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.previousSibling();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = menuItemWidget.getMenu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #getActiveItem(menu: HTMLElement): HTMLElement | null {\r\n        return menu.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .menuitemgroup) > .menuitem:focus-within\"\r\n        );\r\n    }\r\n\r\n    async #setItemTimeout(item: HTMLElement, delay?: number): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                resolve(undefined);\r\n            }, delay ?? 0);\r\n            this.#toggleTimeouts.set(item, {\r\n                clear: () => {\r\n                    clearTimeout(timeout);\r\n                    reject();\r\n                }\r\n            });\r\n        }).then(() => {\r\n            this.#toggleTimeouts.delete(item);\r\n        });\r\n    }\r\n\r\n    #clearItemTimeout(item: HTMLElement): void {\r\n        const timeout = this.#toggleTimeouts.get(item);\r\n        if (typeof timeout !== \"undefined\") {\r\n            this.#toggleTimeouts.delete(item);\r\n            timeout.clear();\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".menuitem\");\r\n        if (targetItem) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                }\r\n                catch (error) {};\r\n            }\r\n            else {\r\n                const isClosestMenu = this.#isClosestMenu(targetMenu, targetItem);\r\n                if (isClosestMenu) {\r\n                    const type = menuItemWidget.getType(targetItem);\r\n                    const name = menuItemWidget.getName(targetItem);\r\n                    const value = menuItemWidget.getValue(targetItem);\r\n                    if (type == \"radio\") {\r\n                        targetMenu.querySelectorAll<HTMLElement>(\r\n                            `:is(:scope, :scope > .menuitemgroup) > .menuitem-radio[name=${name}]`\r\n                        )\r\n                        .forEach((radio_i) => {\r\n                            menuItemWidget.setChecked(radio_i, menuItemWidget.getValue(radio_i) == value);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetMenu.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            const contextual = this.getContextual(targetMenu);\r\n            if (contextual) {\r\n                try {\r\n                    targetMenu.remove();\r\n                } catch (error) {\r\n                    undefined;\r\n                }\r\n            }\r\n            else {\r\n                const nearestItem = this.#nearestItem(targetMenu, <HTMLElement>target);\r\n                if (nearestItem) {\r\n                    menuItemWidget.collapse(nearestItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetMenu);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                const previousItem = activeItem ?\r\n                    this.#previousItem(activeItem) ?? this.#lastItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                previousItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                const nextItem = activeItem ?\r\n                    this.#nextItem(activeItem) ?? this.#firstItem(targetMenu) :\r\n                    this.#firstItem(targetMenu);\r\n                nextItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetMenu);\r\n                firstItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetMenu);\r\n                lastItem?.focus({preventScroll: true});\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            menuItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const isTargetClosestMenu = event.composedPath().find(\r\n                        target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                    ) == targetMenu;\r\n                    if (!isTargetClosestMenu) {\r\n                        menuItemWidget.collapse(activeItem);\r\n                        activeItem.focus({preventScroll: true});\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const type = menuItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"submenu\": {\r\n                            const expanded = menuItemWidget.getExpanded(activeItem);\r\n                            if (!expanded) {\r\n                                menuItemWidget.expand(activeItem);\r\n                                const firstChildItem = this.#firstChildItem(activeItem);\r\n                                firstChildItem?.focus({preventScroll: true});\r\n                                event.stopPropagation();\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOutEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, relatedTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target);\r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    !menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null &&\r\n                        menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                        menuItemWidget.getExpanded(activeItem)) {\r\n                        this.#clearItemTimeout(activeItem);\r\n                        this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                            .then(() => {\r\n                                menuItemWidget.collapse(activeItem);\r\n                            })\r\n                            .catch(() => undefined);\r\n                    }\r\n                    const {clientX, clientY} = event;\r\n                    const {left, right, top, bottom} = targetMenu.getBoundingClientRect();\r\n                    const intersectsWithMouse = !(\r\n                        left > clientX || right < clientX || top > clientY || bottom < clientY\r\n                    );\r\n                    const containsRelatedTarget = targetMenu.contains(<Node>relatedTarget);\r\n                    if (intersectsWithMouse && containsRelatedTarget) {\r\n                        if (relatedTarget instanceof HTMLElement && relatedTarget.classList.contains(\"menu\") && relatedTarget !== targetMenu) {\r\n                            relatedTarget.focus({preventScroll: true});\r\n                        }\r\n                        else {\r\n                            targetMenu.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    if (!intersectsWithMouse) {\r\n                        targetMenu.focus({preventScroll: true});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetMenu = <HTMLElement>currentTarget;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"menuitem\")) {\r\n            const nearestItem = this.#nearestItem(targetMenu, target); \r\n            if (nearestItem !== null) {\r\n                if (menuItemWidget.getType(nearestItem) == \"submenu\" &&\r\n                    menuItemWidget.getExpanded(nearestItem)) {\r\n                    this.#clearItemTimeout(nearestItem);\r\n                }\r\n                const isTargetClosestMenu = event.composedPath().find(\r\n                    target_i => target_i instanceof HTMLElement && target_i.classList.contains(\"menu\")\r\n                ) == targetMenu;\r\n                if (isTargetClosestMenu) {\r\n                    const activeItem = this.#getActiveItem(targetMenu);\r\n                    if (activeItem !== null) {\r\n                        if (menuItemWidget.getType(activeItem) == \"submenu\" &&\r\n                            menuItemWidget.getExpanded(activeItem) && \r\n                            !activeItem.contains(<HTMLElement>target)) {\r\n                            this.#clearItemTimeout(activeItem);\r\n                            this.#setItemTimeout(activeItem, mouseOutCollapseDelay)\r\n                                .then(() => {\r\n                                    menuItemWidget.collapse(activeItem);\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                    }\r\n                    nearestItem.focus({preventScroll: true});\r\n                    if (menuItemWidget.getType(nearestItem) == \"submenu\") {\r\n                        if (!menuItemWidget.getExpanded(nearestItem)) {\r\n                            this.#clearItemTimeout(nearestItem);\r\n                            this.#setItemTimeout(nearestItem, mouseOverExpandDelay)\r\n                                .then(() => {\r\n                                    const activeItem = this.#getActiveItem(targetMenu);\r\n                                    this.#collapseSubmenus(targetMenu);\r\n                                    if (activeItem) {\r\n                                        this.#clearItemTimeout(activeItem);\r\n                                        menuItemWidget.expand(activeItem);\r\n                                        menuItemWidget.getMenu(activeItem)?.focus({preventScroll: true});\r\n                                    }\r\n                                })\r\n                                .catch(() => undefined);\r\n                        }\r\n                        else {\r\n                            menuItemWidget.getMenu(nearestItem)?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { menuItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"menuitemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar menuItemGroupWidget = new (\r\nWidget({\r\n    name: \"menuitemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"menuitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement): HTMLElement | null {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { treeItemWidget };\r\n\r\ntype TreeItemType = \"parent\" | \"leaf\";\r\n\r\ninterface TreeItemWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        type?: TreeItemType;\r\n        label?: string;\r\n        title?: string;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement;\r\n    group(item: HTMLElement): HTMLElement | null;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setExpanded(item: HTMLElement, value: boolean): void;\r\n    getExpanded(item: HTMLElement): boolean;\r\n    setDraggable(row: HTMLElement, value: boolean): void;\r\n    getDraggable(item: HTMLElement): boolean;\r\n    getType(item: HTMLElement): TreeItemType | null;\r\n    setType(item: HTMLElement, value: TreeItemType): void;\r\n    toggle(item: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitem\": TreeItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeItemWidget = new (\r\nWidget({\r\n    name: \"treeitem\"\r\n})(class TreeItemWidgetFactoryBase extends WidgetFactory implements TreeItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: TreeItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"parent\", \"leaf\"];\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"treeitem\",\r\n                role: \"treeitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"arrow\"\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .treeitemgroup\");\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        label?: string;\r\n        title?: string;\r\n        type?: TreeItemType;\r\n        disabled?: boolean;\r\n        draggable?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, label, title, type = \"leaf\", disabled, draggable} = properties;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                item.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                item.tabIndex = tabIndex;\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (title !== undefined) {\r\n                this.setTitle(item, title);\r\n            }\r\n            this.setType(item, type);\r\n            if (type === \"parent\") {\r\n                this.setExpanded(item, false);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            if (draggable !== undefined) {\r\n                this.setDraggable(item, draggable);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    get observedSlots() {\r\n        return [\"content\", \"group\"];\r\n    }\r\n\r\n    slot(item: HTMLElement, name: string | null) {\r\n        switch (name) {\r\n            case \"content\":\r\n                return this.#content(item);\r\n            case \"group\":\r\n                return item;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #content(item: HTMLElement): HTMLElement {\r\n        const content = item.querySelector<HTMLElement>(\":scope > .content\")!;\r\n        if (!content) throw new Error(\"Missing .content slot.\");\r\n        return content;\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return item.getAttribute(\"aria-label\") ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"aria-label\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.title;\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.title = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? Number(posInSet) : -1;\r\n    }\r\n\r\n    getType(item: HTMLElement): TreeItemType {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`treeitem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        throw new Error(\"Missing type.\");\r\n    }\r\n\r\n    setType(item: HTMLElement, type: TreeItemType): void {\r\n        const {classList} = item;\r\n        try {\r\n            const oldType = this.getType(item);\r\n            classList.remove(`treeitem-${oldType}`);\r\n        }\r\n        catch (e) {};\r\n        classList.add(`treeitem-${type}`);\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            if (!classList.contains(\"active\")) {\r\n                classList.add(\"active\");\r\n            }\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDraggable(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"draggable\", String(value));\r\n    }\r\n\r\n    getDraggable(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"draggable\") ?? String(false));\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setLevel(item: HTMLElement, value: number): void {\r\n        item.style.setProperty(\"--level\", String(value));\r\n    }\r\n\r\n    getLevel(item: HTMLElement): number {\r\n        return parseInt(item.style.getPropertyValue(\"--level\"));\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        this.setExpanded(item, force ?? !this.getExpanded(item));\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget, shiftKey, ctrlKey} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            if (type == \"parent\" && !(shiftKey || ctrlKey)) {\r\n                this.toggle(targetItem);\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeWidget };\r\n\r\ninterface TreeWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(tree: HTMLElement): HTMLElement[];\r\n    selectedItems(tree: HTMLElement): HTMLElement[];\r\n    beginSelection(tree: HTMLElement): void;\r\n    endSelection(tree: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"tree\": TreeWidgetFactory,\r\n    }\r\n}\r\n\r\nvar treeWidget = new (\r\nWidget({\r\n    name: \"tree\"\r\n})(class TreeWidgetFactoryBase extends WidgetFactory implements TreeWidgetFactory {\r\n\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"tree\",\r\n                role: \"tree\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const tree = <HTMLElement>this.#template.cloneNode(true);\r\n        tree.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        tree.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        tree.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        tree.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        tree.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        tree.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        tree.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        tree.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        tree.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        tree.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        tree.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        this.#onSelection.set(tree, false);\r\n        this.#hasSelectionChanged.set(tree, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                tree.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                tree.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                tree.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(tree, multisectable);\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n\r\n    slot(tree: HTMLElement) {\r\n        return tree;\r\n    }\r\n\r\n    slottedCallback(tree: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    items(tree: HTMLElement): HTMLElement[] {\r\n        return Array.from(tree.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .treeitemgroup) > .treeitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(tree: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        let item = this.#firstItem(tree);\r\n        while (item !== null) {\r\n            const selected = treeItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, true);\r\n    }\r\n\r\n    endSelection(tree: HTMLElement): void {\r\n        this.#onSelection.set(tree, false);\r\n        if (this.#hasSelectionChanged.get(tree)) {\r\n            tree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(tree, false);\r\n        }\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".treeitem.droptarget\");\r\n    }\r\n\r\n    #setDropTargetItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = tree;\r\n        const dropTargetItem = this.#getDropTargetItem(tree);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            treeItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setDropTarget(item, true);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"treeitem\") && !treeItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"treeitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = treeItemWidget.getSelected(item_i);\r\n            if (tree.contains(item_i) && !selected) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #addToSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (!treeItemWidget.getSelected(item_i)) {\r\n                treeItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #removeFromSelection(tree: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                treeItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #clearSelection(tree: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(tree);\r\n        this.beginSelection(tree);\r\n        selectedItems.forEach((item_i) => {\r\n            treeItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(tree);\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            treeItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            treeItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(tree: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = tree;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousSibling = <HTMLElement | null>walker.previousSibling();\r\n        return previousSibling ?\r\n            this.#deepestItem(previousSibling) :\r\n            <HTMLElement | null>walker.parentNode();\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const type = treeItemWidget.getType(item);\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        return <HTMLElement | null>(\r\n            type === \"leaf\" ?\r\n                walker.nextNode() :\r\n                expanded ?\r\n                    walker.nextNode() :\r\n                    walker.nextSibling() ??\r\n                    (walker.parentNode(), walker.nextSibling())\r\n        );\r\n    }\r\n\r\n    #deepestItem(item: HTMLElement): HTMLElement {\r\n        const expanded = treeItemWidget.getExpanded(item);\r\n        if (expanded) {\r\n            const walker = this.#walker;\r\n            const lastItem = <HTMLElement>walker.lastChild();\r\n            if (lastItem) {\r\n                return this.#deepestItem(lastItem);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        if (targetItem) {\r\n            const selected = treeItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetTree, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetTree, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetTree);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetTree, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeItemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeItemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (!targetTree.contains(<Node>relatedTarget)) {\r\n            this.#setDropTargetItem(targetTree, null);\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const focusWithin = targetTree.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {   \r\n            const activeItem = this.#getActiveItem(targetTree);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetTree.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetTree.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetTree, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(\r\n                                firstItem,\r\n                                this.#deepestItem(lastItem)\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetTree, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                    else {\r\n                        const walker = this.#walker;\r\n                        const parentItem = <HTMLElement>walker.parentNode();\r\n                        if (parentItem) {\r\n                            parentItem.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const expanded = treeItemWidget.getExpanded(activeItem);\r\n                    if (!expanded) {\r\n                        treeItemWidget.toggle(activeItem);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, previousItem) :\r\n                                this.#addToSelection(targetTree, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetTree);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = treeItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetTree, nextItem) :\r\n                                this.#addToSelection(targetTree, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetTree);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetTree);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetTree);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetTree, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetTree);\r\n                this.#setActiveItem(targetTree, null);\r\n                targetTree.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {target} = event;\r\n        const targetTree = <HTMLElement>target;\r\n        if (target instanceof HTMLElement && target.classList.contains(\"treeitem\")) {\r\n            if (this.#onSelection.get(targetTree)) {\r\n                this.#hasSelectionChanged.set(target, true);\r\n            }\r\n            else {\r\n                targetTree.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { treeItemWidget } from \"./TreeItemWidget\";\r\n\r\nexport { treeItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"treeitemgroup\": TreeItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface TreeItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar treeItemGroupWidget = new (\r\nWidget({\r\n    name: \"treeitemgroup\"\r\n})(class TreeItemGroupWidgetFactoryBase extends WidgetFactory implements TreeItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"treeitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"treeitem\")) {\r\n                treeItemWidget.setPosInSet(child_i, i);\r\n                treeItemWidget.setLevel(child_i, (() => {\r\n                    let level = -1;\r\n                    let closestItem: HTMLElement | null = child_i;\r\n                    while (closestItem !== null && closestItem.matches(\".tree :scope\")) {\r\n                        closestItem = closestItem.parentElement?.closest(\".treeitem\") ?? null;\r\n                        level++;\r\n                    }\r\n                    return level;\r\n                })());\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { listItemWidget };\r\n\r\ninterface ListItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitem\": ListItemWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listItemWidget = new (\r\nWidget({\r\n    name: \"listitem\"\r\n})(class ListItemWidgetFactoryBase extends WidgetFactory implements ListItemWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"li\", {\r\n            attributes: {\r\n                class: \"listitem\",\r\n                role: \"listitem\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        label?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {label, disabled} = init;\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n            this.setSelected(item, false);\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(root: HTMLElement): HTMLElement | null {\r\n        return root;\r\n    }\r\n\r\n    group(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .listitemgroup\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): Node {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport  { listWidget };\r\n\r\ninterface ListWidgetFactory extends WidgetFactory {\r\n    create(properties: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement;\r\n    items(list: HTMLElement): HTMLElement[];\r\n    beginSelection(list: HTMLElement): void;\r\n    endSelection(list: HTMLElement): void;\r\n    selectedItems(list: HTMLElement): HTMLElement[];\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"list\": ListWidgetFactory,\r\n    }\r\n}\r\n\r\nvar listWidget = new (\r\nWidget({\r\n    name: \"list\"\r\n})(class ListWidgetFactoryBase extends WidgetFactory implements ListWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"list\",\r\n                role: \"list\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#nodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n    }): HTMLElement {\r\n        const list = <HTMLElement>this.#template.cloneNode(true);\r\n        list.addEventListener(\"dragend\", this.#handleDragEndEvent.bind(this));\r\n        list.addEventListener(\"dragenter\", this.#handleDragEnterEvent.bind(this));\r\n        list.addEventListener(\"dragleave\", this.#handleDragLeaveEvent.bind(this));\r\n        list.addEventListener(\"dragover\", this.#handleDragOverEvent.bind(this));\r\n        list.addEventListener(\"dragstart\", this.#handleDragStartEvent.bind(this));\r\n        list.addEventListener(\"drop\", this.#handleDropEvent.bind(this));\r\n        list.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        list.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        list.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        list.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        list.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        list.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                list.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                list.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                list.tabIndex = tabIndex;\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(list, multisectable);\r\n            }\r\n        }\r\n        this.#onSelection.set(list, false);\r\n        this.#hasSelectionChanged.set(list, false);\r\n        return list;\r\n    }\r\n\r\n    slot(list: HTMLElement) {\r\n        return list;\r\n    }\r\n\r\n    slottedCallback(list: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    setMultiSelectable(tree: HTMLElement, value: boolean): void {\r\n        tree.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(tree: HTMLElement): boolean {\r\n        return JSON.parse(tree.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    #getActiveItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.active\");\r\n    }\r\n\r\n    #getDropTargetItem(tree: HTMLElement): HTMLElement | null {\r\n        return tree.querySelector<HTMLElement>(\".listitem.droptarget\");\r\n    }\r\n\r\n    items(list: HTMLElement): HTMLElement[] {\r\n        return Array.from(list.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .listitemgroup) > .listitem\"\r\n        ));\r\n    }\r\n\r\n    selectedItems(list: HTMLElement): HTMLElement[] {\r\n        const selectedItems = [];\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        let item = this.#firstItem(list);\r\n        while (item !== null) {\r\n            const selected = listItemWidget.getSelected(item);\r\n            if (selected) {\r\n                selectedItems.push(item);\r\n            }\r\n            item = this.#nextItem(item);\r\n        }\r\n        return selectedItems;\r\n    }\r\n\r\n    beginSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, true);\r\n    }\r\n\r\n    endSelection(list: HTMLElement): void {\r\n        this.#onSelection.set(list, false);\r\n        if (this.#hasSelectionChanged.get(list)) {\r\n            list.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(list, false);\r\n        }\r\n    }\r\n\r\n    #nodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"listitem\") && !listItemWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"listitemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getItemsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextItem = this.#nextItem(from);\r\n            while (nextItem && nextItem !== to) {\r\n                range.push(nextItem);\r\n                nextItem = this.#nextItem(nextItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousItem = this.#previousItem(from);\r\n            while (previousItem && previousItem !== to) {\r\n                range.push(previousItem);\r\n                previousItem = this.#previousItem(previousItem);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            if (!items.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        items.forEach((item_i) => {\r\n            const selected = listItemWidget.getSelected(item_i);\r\n            if (list.contains(item_i) && !selected) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #addToSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (!listItemWidget.getSelected(item_i)) {\r\n                listItemWidget.setSelected(item_i, true);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #removeFromSelection(list: HTMLElement, ...items: HTMLElement[]): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        items.forEach((item_i) => {\r\n            if (selectedItems.includes(item_i)) {\r\n                listItemWidget.setSelected(item_i, false);\r\n            }\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #clearSelection(list: HTMLElement): void {\r\n        const selectedItems = this.selectedItems(list);\r\n        this.beginSelection(list);\r\n        selectedItems.forEach((item_i) => {\r\n            listItemWidget.setSelected(item_i, false);\r\n        });\r\n        this.endSelection(list);\r\n    }\r\n\r\n    #setActiveItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(list);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            listItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n    \r\n    #setDropTargetItem(list: HTMLElement, item: HTMLElement | null): void {\r\n        const {classList} = list;\r\n        const dropTargetItem = this.#getDropTargetItem(list);\r\n        if (dropTargetItem !== null && dropTargetItem !== item) {\r\n            listItemWidget.setDropTarget(dropTargetItem, false);\r\n        }\r\n        if (item !== null) {\r\n            listItemWidget.setDropTarget(item, false);\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    #firstItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(list: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = list;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousNode();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const nextItem = <HTMLElement | null>walker.nextNode();\r\n        return nextItem;\r\n    }\r\n\r\n    #handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetList, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            this.#setDropTargetItem(targetList, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetList.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetList, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDragStartEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selectedItems = this.selectedItems(targetTree);\r\n            if (!selectedItems.includes(targetItem)) {\r\n                this.#setSelection(targetTree, targetItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetTree);\r\n        if (activeItem && relatedTarget !== activeItem) {\r\n            activeItem.focus();\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetTree, targetItem);\r\n            targetTree.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetList);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey) {\r\n                    if (activeItem) {\r\n                        const walker = this.#walker;\r\n                        walker.currentNode = activeItem;\r\n                        const firstItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.firstChild()\r\n                        );\r\n                        const lastItem = <HTMLElement>(\r\n                            walker.currentNode = walker.parentNode() ?? targetList, walker.lastChild()\r\n                        );\r\n                        if (firstItem && lastItem) {\r\n                            const range = this.#getItemsRange(firstItem, lastItem);\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(previousItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, previousItem) :\r\n                                this.#addToSelection(targetList, previousItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetList);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                        const {shiftKey} = event;\r\n                        if (shiftKey) {\r\n                            const selected = listItemWidget.getSelected(nextItem);\r\n                            selected ?\r\n                                this.#removeFromSelection(targetList, nextItem) :\r\n                                this.#addToSelection(targetList, nextItem);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetList);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetList);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetList);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (activeItem) {\r\n                    this.#setSelection(targetList, activeItem);\r\n                    activeItem.click();\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                this.#clearSelection(targetList);\r\n                this.#setActiveItem(targetList, null);\r\n                targetList.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey, button} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".listitem\");\r\n        if (targetItem) {\r\n            const selected = listItemWidget.getSelected(targetItem);\r\n            switch (button) {\r\n                case 0: {\r\n                    if (!shiftKey && !ctrlKey) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    else if (ctrlKey) {\r\n                        if (selected) {\r\n                            targetItem.blur();\r\n                            this.#removeFromSelection(targetList, targetItem);\r\n                        }\r\n                        else {\r\n                            this.#addToSelection(targetList, targetItem);\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    else if (shiftKey) {\r\n                        const activeItem = this.#getActiveItem(targetList);\r\n                        if (activeItem) {\r\n                            const range = this.#getItemsRange(\r\n                                activeItem,\r\n                                targetItem\r\n                            );\r\n                            if (range) {\r\n                                this.#setSelection(targetList, ...range);\r\n                            }\r\n                        }\r\n                        event.stopPropagation();\r\n                    }\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    if (!selected) {\r\n                        this.#setSelection(targetList, targetItem);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetList.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetList.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { listItemWidget } from \"./ListItemWidget\";\r\n\r\nexport { listItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"listitemgroup\": ListItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ListItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar listItemGroupWidget = new (\r\nWidget({\r\n    name: \"listitemgroup\"\r\n})(class ListItemGroupWidgetFactoryBase extends WidgetFactory implements ListItemGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"listitemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n\r\n    slottedCallback(group: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"listitem\")) {\r\n                listItemWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemWidget };\r\n\r\ntype ToolBarItemType = \"button\" | \"checkbox\" | \"radio\" | \"menubutton\";\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritem\": ToolBarItemWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarItemWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        id?: string;\r\n        type: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    menu(item: HTMLElement): HTMLElement | null;\r\n    getName(item: HTMLElement): string;\r\n    setName(item: HTMLElement, value: string): void;\r\n    getLabel(item: HTMLElement): string;\r\n    setLabel(item: HTMLElement, value: string): void;\r\n    setPressed(item: HTMLElement, value: boolean): void;\r\n    getPressed(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    getValue(item: HTMLElement): string;\r\n    setValue(item: HTMLElement, value: string): void;\r\n    getType(item: HTMLElement): ToolBarItemType | null;\r\n    setType(item: HTMLElement, value: ToolBarItemType): void;\r\n}\r\n\r\nvar toolbarItemWidget = new(\r\nWidget({\r\n    name: \"toolbaritem\"\r\n})(\r\nclass ToolBarItemWidgetFactoryBase extends WidgetFactory implements ToolBarItemWidgetFactory {\r\n    #template: HTMLElement;\r\n    #types: ToolBarItemType[];\r\n\r\n    constructor() {\r\n        super();\r\n        this.#types = [\"button\", \"checkbox\", \"radio\", \"menubutton\"];\r\n        this.#template = element(\"button\", {\r\n            attributes: {\r\n                class: \"toolbaritem\",\r\n                role: \"button\",\r\n                type: \"button\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        type?: ToolBarItemType;\r\n        pressed?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        keyshortcut?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }) {\r\n        const item = <HTMLElement>this.#template.cloneNode(true);\r\n        item.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        item.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (init !== void 0) {\r\n            const {id, keyshortcut, pressed, type, label, name, value, disabled} = init;\r\n            if (id !== undefined) {\r\n                item.id = id;\r\n            }\r\n            if (keyshortcut !== undefined) {\r\n                this.setKeyShortcut(item, keyshortcut);\r\n            }\r\n            if (pressed !== undefined) {\r\n                this.setPressed(item, pressed);\r\n            }\r\n            if (type !== undefined) {\r\n                this.setType(item, type);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(item, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(item, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(item, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(item, disabled);\r\n            }\r\n        }\r\n        return item;\r\n    }\r\n\r\n    slot(item: HTMLElement): HTMLElement | null {\r\n        return item;\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement): void {\r\n        const hasChildMenu = Array.from(slot.childNodes).some(\r\n            childNode_i => childNode_i instanceof HTMLElement && childNode_i.classList.contains(\"menu\")\r\n        );\r\n        item.setAttribute(\"aria-haspopup\", String(hasChildMenu));\r\n    }\r\n\r\n    menu(item: HTMLElement): HTMLElement | null {\r\n        return item.querySelector<HTMLElement>(\":scope > .menu\");\r\n    }\r\n\r\n    setExpanded(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-expanded\", value);\r\n    }\r\n\r\n    getExpanded(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-expanded\");\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    getKeyShortcut(item: HTMLElement): string | null {\r\n        return item.getAttribute(\"aria-keyshortcuts\");\r\n    }\r\n\r\n    setKeyShortcut(item: HTMLElement, value: string | null): void {\r\n        if (value !== null) {\r\n            item.setAttribute(\"aria-keyshortcuts\", value);\r\n        }\r\n        else {\r\n            item.removeAttribute(\"aria-keyshortcuts\");\r\n        }\r\n    }\r\n\r\n    toggle(item: HTMLElement, force?: boolean): void {\r\n        const expand = force ?? !this.getExpanded(item);\r\n        this.setExpanded(item, expand);\r\n        if (expand) {\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    expand(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (!expanded) {\r\n            this.setExpanded(item, true);\r\n            this.#positionMenu(item);\r\n        }\r\n    }\r\n\r\n    collapse(item: HTMLElement): void {\r\n        const expanded = this.getExpanded(item);\r\n        if (expanded) {\r\n            this.setExpanded(item, false);\r\n        }\r\n    }\r\n\r\n    getType(item: HTMLElement): ToolBarItemType | null {\r\n        const types = this.#types;\r\n        const {classList} = item;\r\n        for (let type_i of types) {\r\n            if (classList.contains(`toolbaritem-${type_i}`)) {\r\n                return type_i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setType(item: HTMLElement, type: ToolBarItemType): void {\r\n        const oldType = this.getType(item);\r\n        if (type !== oldType) {\r\n            const {classList} = item;\r\n            if (oldType) {\r\n                classList.remove(`toolbaritem-${oldType}`);\r\n            }\r\n            classList.add(`toolbaritem-${type}`);\r\n        }\r\n    }\r\n\r\n    getValue(item: HTMLElement): string {\r\n        return item.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"value\", value);\r\n    }\r\n\r\n    getTitle(item: HTMLElement): string {\r\n        return item.getAttribute(\"title\") ?? \"\";\r\n    }\r\n\r\n    setTitle(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"title\", value);\r\n    }\r\n\r\n    getName(item: HTMLElement): string {\r\n        return item.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getPressed(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-pressed\") ?? String(false));\r\n    }\r\n\r\n    setPressed(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-pressed\", String(value));\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetItem = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetItem.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetItem);\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {target, currentTarget} = event;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem == currentTarget) {\r\n            const type = this.getType(targetItem);\r\n            switch (type) {\r\n                case \"checkbox\": {\r\n                    this.setPressed(targetItem, !this.getPressed(targetItem));\r\n                    break;\r\n                }\r\n                case \"radio\": {\r\n                    this.setPressed(targetItem, true);\r\n                    break;\r\n                }\r\n                case \"menubutton\": {\r\n                    const menu = this.menu(targetItem);\r\n                    if (menu && !menu.contains(<Node>target)) {\r\n                        this.toggle(targetItem);\r\n                        const expanded = this.getExpanded(targetItem);\r\n                        if (expanded) {\r\n                            menu?.focus({preventScroll: true});\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #positionMenu(item: HTMLElement): void {\r\n        const type = this.getType(item);\r\n        if (type == \"menubutton\") {\r\n            const menu = this.menu(item);\r\n            if (menu !== null) {\r\n                const {style: menuStyle} = menu;\r\n                const {top: itemTop, bottom: itemBottom, left: itemLeft, right: itemRight} = item.getBoundingClientRect();\r\n                const {width: menuWidth, height: menuHeight} = menu.getBoundingClientRect();\r\n                const {scrollY, scrollX} = window;\r\n                const {clientWidth, clientHeight} = document.body;\r\n                const overflowX = itemRight + menuWidth - clientWidth;\r\n                const overflowY = itemTop + menuHeight - clientHeight;\r\n                menuStyle.setProperty(\"left\", `${\r\n                    overflowX > 0 ?\r\n                    scrollX + itemLeft - menuWidth :\r\n                    scrollX + itemLeft\r\n                }px`);\r\n                menuStyle.setProperty(\"top\", `${\r\n                    overflowY > 0 ?\r\n                    scrollY + itemTop - menuHeight :\r\n                    scrollY + itemBottom\r\n                }px`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n}));\r\n","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { toolbarItemWidget } from \"./ToolBarItemWidget\";\r\n\r\nexport { toolbarWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbar\": ToolBarWidgetFactory\r\n    }\r\n}\r\n\r\ninterface ToolBarWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void;\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation;\r\n}\r\n\r\ntype ToolBarOrientation = \"horizontal\" | \"vertical\";\r\n\r\nvar toolbarWidget = new (\r\nWidget({\r\n    name: \"toolbar\"\r\n})(class ToolBarWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbar\",\r\n                role: \"toolbar\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        )\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }) {\r\n        const toolbar = <HTMLElement>this.#template.cloneNode(true);\r\n        toolbar.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        toolbar.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        toolbar.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        toolbar.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        toolbar.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex} = properties;\r\n            if (id !== undefined) {\r\n                toolbar.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                toolbar.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                toolbar.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return toolbar;\r\n    }\r\n\r\n    slot(toolbar: HTMLElement) {\r\n        return toolbar;\r\n    }\r\n\r\n    #getActiveItem(toolbar: HTMLElement): HTMLElement | null {\r\n        return toolbar.querySelector<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem.active\"\r\n        );\r\n    }\r\n\r\n    items(toolbar: HTMLElement): HTMLElement[] {\r\n        return Array.from(toolbar.querySelectorAll<HTMLElement>(\r\n            \":is(:scope, :scope > .toolbaritemgroup) > .toolbaritem\"\r\n        ));\r\n    }\r\n\r\n    setOrientation(toolbar: HTMLElement, value: ToolBarOrientation): void {\r\n        toolbar.setAttribute(\"aria-orientation\", value);\r\n    }\r\n\r\n    getOrientation(toolbar: HTMLElement): ToolBarOrientation {\r\n        return <ToolBarOrientation>toolbar.getAttribute(\"aria-orientation\") ?? \"horizontal\";\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node) {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"toolbaritem\") && !toolbarItemWidget.getDisabled(node)) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"toolbaritemgroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastItem(toolbar: Element): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = toolbar;\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        const previousItem = <HTMLElement | null>walker.previousSibling();\r\n        return previousItem;\r\n    }\r\n\r\n    #nextItem(item: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = item;\r\n        return <HTMLElement | null>walker.nextSibling();\r\n    }\r\n\r\n    #firstChildItem(item: HTMLElement): HTMLElement | null {\r\n        const menu = toolbarItemWidget.menu(item);\r\n        if (menu) {\r\n            const walker = this.#walker;\r\n            walker.currentNode = menu;\r\n            return <HTMLElement | null>walker.firstChild();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #setActiveItem(tree: HTMLElement, item: HTMLElement | null): void {\r\n        const activeItem = this.#getActiveItem(tree);\r\n        if (activeItem !== null && activeItem !== item) {\r\n            toolbarItemWidget.setActive(activeItem, false);\r\n            activeItem.tabIndex = -1;\r\n        }\r\n        if (item !== null) {\r\n            toolbarItemWidget.setActive(item, true);\r\n            item.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleClickEvent(event: Event): void {\r\n        const {currentTarget, target} = event;\r\n        const toolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            const type = toolbarItemWidget.getType(targetItem);\r\n            const name = toolbarItemWidget.getName(targetItem);\r\n            const value = toolbarItemWidget.getType(targetItem);\r\n            if (type == \"radio\") {\r\n                toolbar.querySelectorAll<HTMLElement>(\r\n                    `:is(:scope, :scope > .toolbaritemgroup) > .toolbaritem[type=radio][name=${name}]`\r\n                ).forEach((radio_i) => {\r\n                    toolbarItemWidget.setPressed(radio_i, toolbarItemWidget.getValue(radio_i) == value);\r\n                });\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const focusWithin = targetToolbar.contains(<Node>relatedTarget);\r\n        if (!focusWithin) {\r\n            const activeItem = this.#getActiveItem(targetToolbar);\r\n            if (activeItem) {\r\n                activeItem.focus();\r\n            }\r\n            else {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                firstItem?.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".toolbaritem\");\r\n        if (targetItem) {\r\n            this.#setActiveItem(targetToolbar, targetItem);\r\n            targetToolbar.tabIndex = -1;\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetToolbar.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.#setActiveItem(targetToolbar, null);\r\n            targetToolbar.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetToolbar = <HTMLElement>currentTarget;\r\n        const activeItem = this.#getActiveItem(targetToolbar);\r\n        switch (key) {\r\n            case \"Enter\":\r\n            case \" \": {\r\n                if (activeItem) {\r\n                    const type = toolbarItemWidget.getType(activeItem);\r\n                    switch (type) {\r\n                        case \"menubutton\": {\r\n                            toolbarItemWidget.expand(activeItem);\r\n                            const firstChildItem = this.#firstChildItem(activeItem);\r\n                            firstChildItem?.focus({preventScroll: true});\r\n                            event.preventDefault();\r\n                            break;\r\n                        }\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (activeItem) {\r\n                    const previousItem = this.#previousItem(activeItem);\r\n                    if (previousItem) {\r\n                        previousItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const firstItem = this.#firstItem(targetToolbar);\r\n                    if (firstItem) {\r\n                        firstItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (activeItem) {\r\n                    const nextItem = this.#nextItem(activeItem);\r\n                    if (nextItem) {\r\n                        nextItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const lastItem = this.#lastItem(targetToolbar);\r\n                    if (lastItem) {\r\n                        lastItem.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstItem = this.#firstItem(targetToolbar);\r\n                if (firstItem) {\r\n                    firstItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastItem = this.#lastItem(targetToolbar);\r\n                if (lastItem) {\r\n                    lastItem.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (activeItem) {\r\n                    activeItem.focus({preventScroll: true});\r\n                }\r\n                else {\r\n                    targetToolbar.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { toolbarItemGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"toolbaritemgroup\": MenuItemGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface MenuItemGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar toolbarItemGroupWidget = new (\r\nWidget({\r\n    name: \"toolbaritemgroup\"\r\n})(class MenuItemGroupWidgetFactoryBase extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"toolbaritemgroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { widthSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"widthsash\": WidthSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface WidthSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar widthSashWidget = new (\r\nWidget({\r\n    name: \"widthsash\"\r\n})(class WidthSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"widthsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"left\" | \"right\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"right\" | \"left\" {\r\n        return <\"right\" | \"left\">sash.getAttribute(\"data-growdir\") ?? \"right\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"right\" | \"left\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setWidth(sash: HTMLElement, width: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"width\", `${width}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const pointerMoveCallback = this.#pointerMoveCallback;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const width = parseFloat(targetComputedStyle.getPropertyValue(\"width\"));\r\n            const newWidth = width + (growdir == \"right\" ? 1 : -1) * movementX;\r\n            this.setWidth(sash, newWidth);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"./Widget\";\r\n\r\nexport { heightSashWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"heightsash\": HeightSashWidgetFactory\r\n    }\r\n}\r\n\r\ninterface HeightSashWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }): HTMLElement;\r\n}\r\n\r\nvar heightSashWidget = new (\r\nWidget({\r\n    name: \"heightsash\"\r\n})(class HeightSashWidgetFactory extends WidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    #targets: WeakMap<HTMLElement, HTMLElement | null>;\r\n    #onCaptureFlags: WeakMap<HTMLElement, boolean>;\r\n    #queuedPointerCallbacks: WeakMap<HTMLElement, FrameRequestCallback | null>;\r\n    #pointerMovements: WeakMap<HTMLElement, number>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"heightsash\"\r\n            }\r\n        });\r\n        this.#targets = new WeakMap();\r\n        this.#onCaptureFlags = new WeakMap();\r\n        this.#queuedPointerCallbacks = new WeakMap();\r\n        this.#pointerMovements = new WeakMap();\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        controls?: string;\r\n        growDir?: \"top\" | \"bottom\";\r\n    }) {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const sash = <HTMLElement>this.#template.cloneNode(true);\r\n        sash.addEventListener(\"pointerdown\", this.#handlePointerDownEvent.bind(this));\r\n        sash.addEventListener(\"pointermove\", this.#handlePointerMoveEvent.bind(this));\r\n        sash.addEventListener(\"pointerup\", this.#handlePointerUpEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, controls, growDir} = properties;\r\n            if (id !== undefined) {\r\n                sash.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                sash.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                sash.tabIndex = tabIndex;\r\n            }\r\n            if (controls !== undefined) {\r\n                this.setControls(sash, controls);\r\n            }\r\n            if (growDir !== undefined) {\r\n                this.setGrowDir(sash, growDir);\r\n            }\r\n        }\r\n        targets.set(sash, null);\r\n        queuedPointerCallbacks.set(sash, null);\r\n        pointerMovements.set(sash, 0);\r\n        onCaptureFlags.set(sash, false);\r\n        return sash;\r\n    }\r\n\r\n    getGrowDir(sash: HTMLElement): \"top\" | \"bottom\" {\r\n        return <\"top\" | \"bottom\">sash.getAttribute(\"data-growdir\") ?? \"top\";\r\n    }\r\n\r\n    setGrowDir(sash: HTMLElement, value: \"top\" | \"bottom\"): void {\r\n        sash.setAttribute(\"data-growdir\", value);\r\n    }\r\n\r\n    getControls(sash: HTMLElement): string | null {\r\n        return sash.getAttribute(\"data-controls\");\r\n    }\r\n\r\n    setControls(sash: HTMLElement, value: string): void {\r\n        sash.setAttribute(\"data-controls\", value);\r\n    }\r\n\r\n    setHeight(sash: HTMLElement, height: number): void {\r\n        const targets = this.#targets;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            target.style.setProperty(\"height\", `${height}px`);\r\n        }\r\n    }\r\n\r\n    #handlePointerUpEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        sashTarget.releasePointerCapture(pointerId);\r\n        onCaptureFlags.set(sashTarget, false);\r\n    }\r\n\r\n    #handlePointerDownEvent(event: PointerEvent): void {\r\n        const {pointerId, currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const controls = this.getControls(sashTarget);\r\n        if (controls) {\r\n            const targets = this.#targets;\r\n            const onCaptureFlags = this.#onCaptureFlags;\r\n            const rootNode = <ShadowRoot | Document>sashTarget.getRootNode();\r\n            targets.set(sashTarget, rootNode.getElementById(controls));\r\n            onCaptureFlags.set(sashTarget, true);\r\n            sashTarget.setPointerCapture(pointerId);\r\n        }\r\n    }\r\n\r\n    #handlePointerMoveEvent(event: PointerEvent): void {\r\n        const {currentTarget} = event;\r\n        const sashTarget = <HTMLElement>currentTarget;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const onCaptureFlags = this.#onCaptureFlags;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const onCaptureFlag = onCaptureFlags.get(sashTarget);\r\n        if (onCaptureFlag) {\r\n            let callback = queuedPointerCallbacks.get(sashTarget);\r\n            if (callback == null) {\r\n                callback = this.#pointerMoveCallback.bind(this, sashTarget);\r\n                queuedPointerCallbacks.set(sashTarget, callback);\r\n                requestAnimationFrame(callback);\r\n            }\r\n            const pointerMovement = pointerMovements.get(sashTarget)! + event.movementX;\r\n            pointerMovements.set(sashTarget, pointerMovement);\r\n        }\r\n    }\r\n\r\n    #pointerMoveCallback(sash: HTMLElement): void {\r\n        const targets = this.#targets;\r\n        const pointerMovements = this.#pointerMovements;\r\n        const queuedPointerCallbacks = this.#queuedPointerCallbacks;\r\n        const target = targets.get(sash)!;\r\n        if (target !== null) {\r\n            const targetComputedStyle = window.getComputedStyle(target);\r\n            const growdir = this.getGrowDir(sash);\r\n            const movementX = pointerMovements.get(sash)!;\r\n            const height = parseFloat(targetComputedStyle.getPropertyValue(\"height\"));\r\n            const newHeight = height + (growdir == \"top\" ? -1 : 1) * movementX;\r\n            this.setHeight(sash, newHeight);\r\n            sash.dispatchEvent(new Event(\"resize\"));\r\n        }\r\n        pointerMovements.set(sash, 0);\r\n        queuedPointerCallbacks.set(sash, null);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridCellWidget };\r\n\r\ninterface GridCellWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement;\r\n    getHeaders(item: HTMLElement): string;\r\n    setHeaders(item: HTMLElement, value: string): void;\r\n    setPosInSet(item: HTMLElement, value: number): void;\r\n    getPosInSet(item: HTMLElement): number;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n    setDropTarget(item: HTMLElement, value: boolean): void;\r\n    getDropTarget(item: HTMLElement): boolean;\r\n    setDisabled(item: HTMLElement, value: boolean): void;\r\n    getDisabled(item: HTMLElement): boolean;\r\n    setSelected(item: HTMLElement, value: boolean): void;\r\n    getSelected(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridcell\": GridCellWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridCellWidget = new (\r\nWidget({\r\n    name: \"gridcell\"\r\n})(class GridCellWidgetFactoryBase extends WidgetFactory implements GridCellWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"td\", {\r\n            attributes: {\r\n                class: \"gridcell\",\r\n                role: \"gridcell\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        disabled?: boolean;\r\n        headers?: string;\r\n    }): HTMLElement {\r\n        const cell = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex, disabled, headers} = init;\r\n            if (id !== undefined) {\r\n                cell.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                cell.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                cell.tabIndex = tabIndex;\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(cell, disabled);\r\n            }\r\n            if (headers !== undefined) {\r\n                this.setHeaders(cell, headers);\r\n            }\r\n            this.setSelected(cell, false);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    slot(cell: HTMLElement): HTMLElement | null {\r\n        return cell;\r\n    }\r\n\r\n    getHeaders(item: HTMLElement): string {\r\n        return item.getAttribute(\"headers\") ?? \"\";\r\n    }\r\n\r\n    setHeaders(item: HTMLElement, value: string): void {\r\n        item.setAttribute(\"headers\", value);\r\n    }\r\n\r\n    getLabel(item: HTMLElement): string {\r\n        return this.#label(item).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(item: HTMLElement, value: string): void {\r\n        this.#label(item).textContent = value;\r\n    }\r\n\r\n    setPosInSet(item: HTMLElement, value: number): void {\r\n        item.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(item: HTMLElement): number {\r\n        const posInSet = item.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(item: HTMLElement, value: boolean): void {\r\n        item.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(item: HTMLElement): boolean {\r\n        return item.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(item: HTMLElement, value: boolean): void {\r\n        item.setAttribute(\"aria-selected\", String(value));\r\n        item.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(item: HTMLElement): boolean {\r\n        return JSON.parse(item.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    #label(item: HTMLElement): HTMLElement {\r\n        return item.querySelector<HTMLElement>(\":scope > .content > .label\")!;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\n\r\nexport { gridRowWidget };\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(init?: {\r\n        disabled?: boolean\r\n    }): HTMLElement;\r\n    cells(row: HTMLElement): HTMLElement[];\r\n    setPosInSet(row: HTMLElement, value: number): void;\r\n    getPosInSet(row: HTMLElement): number;\r\n    setActive(row: HTMLElement, value: boolean): void;\r\n    getActive(row: HTMLElement): boolean;\r\n    setDropTarget(row: HTMLElement, value: boolean): void;\r\n    getDropTarget(row: HTMLElement): boolean;\r\n    setSelected(row: HTMLElement, value: boolean): void;\r\n    getSelected(row: HTMLElement): boolean;\r\n    setDisabled(row: HTMLElement, value: boolean): void;\r\n    getDisabled(row: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridrow\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridRowWidget = new (\r\nWidget({\r\n    name: \"gridrow\"\r\n})(class GridRowWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tr\", {\r\n            attributes: {\r\n                class: \"gridrow\",\r\n                role: \"row\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const row = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {disabled} = init;\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(row, disabled);\r\n            }\r\n            this.setSelected(row, false);\r\n        }\r\n        return row;\r\n    }\r\n\r\n    slot(row: HTMLElement): HTMLElement | null {\r\n        return row;\r\n    }\r\n\r\n    cells(row: HTMLElement): HTMLElement[] {\r\n        return Array.from(row.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridcell\"\r\n        ));\r\n    }\r\n    \r\n    setPosInSet(row: HTMLElement, value: number): void {\r\n        row.setAttribute(\"aria-posinset\", String(value));\r\n    }\r\n\r\n    getPosInSet(row: HTMLElement): number {\r\n        const posInSet = row.getAttribute(\"aria-posinset\");\r\n        return posInSet ? parseInt(posInSet) : -1;\r\n    }\r\n\r\n    setActive(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"active\");\r\n    }\r\n\r\n    setDropTarget(row: HTMLElement, value: boolean): void {\r\n        const {classList} = row;\r\n        if (value) {\r\n            classList.add(\"droptarget\");\r\n        }\r\n        else {\r\n            classList.remove(\"droptarget\");\r\n        }\r\n    }\r\n\r\n    getDropTarget(row: HTMLElement): boolean {\r\n        const {classList} = row;\r\n        return classList.contains(\"droptarget\");\r\n    }\r\n\r\n    setDisabled(row: HTMLElement, value: boolean): void {\r\n        row.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    getDisabled(row: HTMLElement): boolean {\r\n        return row.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setSelected(row: HTMLElement, value: boolean): void {\r\n        row.setAttribute(\"aria-selected\", String(value));\r\n        row.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n    }\r\n\r\n    getSelected(row: HTMLElement): boolean {\r\n        return JSON.parse(row.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    slottedCallback(item: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((item_i, i) => {\r\n            if (item_i instanceof HTMLElement) {\r\n                gridCellWidget.setPosInSet(item_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridCellWidget } from \"./GridCellWidget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridWidget };\r\n\r\ntype GridSelectBy = \"cell\" | \"row\";\r\n\r\ninterface GridRowWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy\r\n    }): HTMLElement;\r\n    setSelectBy(item: HTMLElement, value: GridSelectBy): void;\r\n    getSelectBy(item: HTMLElement): GridSelectBy;\r\n    headers(grid: HTMLElement): HTMLElement[];\r\n    cells(grid: HTMLElement): HTMLElement[];\r\n    rows(grid: HTMLElement): HTMLElement[];\r\n    beginSelection(grid: HTMLElement): void;\r\n    endSelection(grid: HTMLElement): void;\r\n    selectedCells(grid: HTMLElement): HTMLElement[];\r\n    selectedRows(grid: HTMLElement): HTMLElement[];\r\n    clearSelection(grid: HTMLElement): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"grid\": GridRowWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridWidget = new (\r\nWidget({\r\n    name: \"grid\"\r\n})(class GridWidgetFactoryBase extends WidgetFactory implements GridRowWidgetFactory {\r\n\r\n    #getActiveRow(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridrow.active\");\r\n    }\r\n\r\n    #getActiveCell(grid: HTMLElement): HTMLElement | null {\r\n        return grid.querySelector<HTMLElement>(\".gridcell.active\");\r\n    }\r\n\r\n    headers(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridhead > .gridheader\"\r\n        ));\r\n    }\r\n\r\n    rows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow\"\r\n        ));\r\n    }\r\n\r\n    cells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll<HTMLElement>(\r\n            \":scope > .gridbody > .gridrow > .gridcell\"\r\n        ));\r\n    }\r\n\r\n    #template: HTMLElement;\r\n    #rowsWalker: TreeWalker;\r\n    #cellsWalker: TreeWalker;\r\n    #onSelection: WeakMap<HTMLElement, boolean>;\r\n    #hasSelectionChanged: WeakMap<HTMLElement, boolean>;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"table\", {\r\n            attributes: {\r\n                class: \"grid\",\r\n                role: \"grid\",\r\n                tabindex: 0\r\n            }\r\n        });\r\n        this.#onSelection = new WeakMap();\r\n        this.#hasSelectionChanged = new WeakMap();\r\n        this.#cellsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#cellsWalkerNodeFilter.bind(this)\r\n        );\r\n        this.#rowsWalker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#rowsWalkerNodeFilter.bind(this)\r\n        );\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        multisectable?: boolean;\r\n        selectby?: GridSelectBy;\r\n    }) {\r\n        const grid = <HTMLElement>this.#template.cloneNode(true);\r\n        //grid.addEventListener(\"contextmenu\", this.#handleContextMenuEvent.bind(this));\r\n        grid.addEventListener(\"mousedown\", this.#handleMouseDownEvent.bind(this));\r\n        grid.addEventListener(\"focus\", this.#handleFocusEvent.bind(this));\r\n        grid.addEventListener(\"focusin\", this.#handleFocusInEvent.bind(this));\r\n        grid.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        grid.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        grid.addEventListener(\"select\", this.#handleSelectEvent.bind(this));\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, selectby, multisectable} = properties;\r\n            if (id !== undefined) {\r\n                grid.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                grid.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                grid.tabIndex = tabIndex;\r\n            }\r\n            if (selectby !== undefined) {\r\n                this.setSelectBy(grid, selectby);\r\n            }\r\n            if (multisectable !== undefined) {\r\n                this.setMultiSelectable(grid, multisectable);\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    slot(grid: HTMLElement): HTMLElement | null {\r\n        return grid;\r\n    }\r\n\r\n    setMultiSelectable(grid: HTMLElement, value: boolean): void {\r\n        grid.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(grid: HTMLElement): boolean {\r\n        return JSON.parse(grid.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    setSelectBy(grid: HTMLElement, value: GridSelectBy): void {\r\n        grid.setAttribute(\"data-selectby\", value);\r\n    }\r\n\r\n    getSelectBy(grid: HTMLElement): GridSelectBy {\r\n        return <GridSelectBy>grid.getAttribute(\"data-selectby\") ?? \"cell\";\r\n    }\r\n\r\n    beginSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, true);\r\n    }\r\n\r\n    endSelection(grid: HTMLElement): void {\r\n        this.#onSelection.set(grid, false);\r\n        if (this.#hasSelectionChanged.get(grid)) {\r\n            grid.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            this.#hasSelectionChanged.set(grid, false);\r\n        }\r\n    }\r\n\r\n    clearSelection(grid: HTMLElement): void {\r\n        this.#clearCellsSelection(grid);\r\n        this.#clearRowsSelection(grid);\r\n    }\r\n\r\n    selectedCells(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow > .gridcell[aria-selected=true]\"));\r\n    }\r\n\r\n    selectedRows(grid: HTMLElement): HTMLElement[] {\r\n        return Array.from(grid.querySelectorAll(\":scope > .gridbody > .gridrow[aria-selected=true]\"));\r\n    }\r\n\r\n    #cellsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridcell\") && !gridCellWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridrow\") || classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #rowsWalkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"gridrow\") && !gridRowWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"gridbody\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #getCellsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextCell = this.#nextCell(from);\r\n            while (nextCell && nextCell !== to) {\r\n                range.push(nextCell);\r\n                nextCell = this.#nextCell(nextCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousCell = this.#previousCell(from);\r\n            while (previousCell && previousCell !== to) {\r\n                range.push(previousCell);\r\n                previousCell = this.#previousRow(previousCell);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #getRowsRange(from: HTMLElement, to: HTMLElement): HTMLElement[] {\r\n        if (from == to) {\r\n            return [from];\r\n        }\r\n        const position = from.compareDocumentPosition(to);\r\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\r\n            const range = [from];\r\n            let nextRow = this.#nextRow(from);\r\n            while (nextRow && nextRow !== to) {\r\n                range.push(nextRow);\r\n                nextRow = this.#nextRow(nextRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\r\n            const range = [from];\r\n            let previousRow = this.#previousRow(from);\r\n            while (previousRow && previousRow !== to) {\r\n                range.push(previousRow);\r\n                previousRow = this.#previousRow(previousRow);\r\n            }\r\n            range.push(to);\r\n            return range;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    #setCellsSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((selectedCell_i) => {\r\n            if (!cells.includes(selectedCell_i)) {\r\n                gridCellWidget.setSelected(selectedCell_i, false);\r\n            }\r\n        });\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setRowsSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((selectedRow_i) => {\r\n            if (!rows.includes(selectedRow_i)) {\r\n                gridRowWidget.setSelected(selectedRow_i, false);\r\n            }\r\n        });\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addCellsToSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        cells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (!selected) {\r\n                gridCellWidget.setSelected(cell_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #addRowsToSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        rows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (!selected) {\r\n                gridRowWidget.setSelected(row_i, true);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeCellsFromSelection(grid: HTMLElement, ...cells: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        cells.forEach((cell_i) => {\r\n            if (selectedCells.includes(cell_i)) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #removeRowsFromSelection(grid: HTMLElement, ...rows: HTMLElement[]): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        rows.forEach((row_i) => {\r\n            if (selectedRows.includes(row_i)) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearCellsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedCells = this.selectedCells(grid);\r\n        selectedCells.forEach((cell_i) => {\r\n            const selected = gridCellWidget.getSelected(cell_i);\r\n            if (selected) {\r\n                gridCellWidget.setSelected(cell_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #clearRowsSelection(grid: HTMLElement): void {\r\n        this.beginSelection(grid);\r\n        const selectedRows = this.selectedRows(grid);\r\n        selectedRows.forEach((row_i) => {\r\n            const selected = gridRowWidget.getSelected(row_i);\r\n            if (selected) {\r\n                gridRowWidget.setSelected(row_i, false);\r\n            }\r\n        });\r\n        this.endSelection(grid);\r\n    }\r\n\r\n    #setActiveCell(grid: HTMLElement, cell: HTMLElement | null): void {\r\n        const activeCell = this.#getActiveCell(grid);\r\n        if (activeCell !== null && activeCell !== cell) {\r\n            gridCellWidget.setActive(activeCell, false);\r\n            activeCell.tabIndex = -1;\r\n        }\r\n        if (cell !== null) {\r\n            gridCellWidget.setActive(cell, true);\r\n            cell.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #setActiveRow(grid: HTMLElement, row: HTMLElement | null): void {\r\n        const activeRow = this.#getActiveRow(grid);\r\n        if (activeRow !== null && activeRow !== row) {\r\n            gridRowWidget.setActive(activeRow, false);\r\n            activeRow.tabIndex = -1;\r\n        }\r\n        if (row !== null) {\r\n            gridCellWidget.setActive(row, true);\r\n            row.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #firstCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.firstChild();\r\n    }\r\n\r\n    #lastCell(row: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = row;\r\n        return <HTMLElement | null>cellsWalker.lastChild();\r\n    }\r\n\r\n    #previousCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.previousNode();\r\n    }\r\n\r\n    #nextCell(cell: HTMLElement): HTMLElement | null {\r\n        const cellsWalker = this.#cellsWalker;\r\n        cellsWalker.currentNode = cell;\r\n        return <HTMLElement | null>cellsWalker.nextNode();\r\n    }\r\n\r\n    #closestRow(cell: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = cell;\r\n        return <HTMLElement | null>rowsWalker.parentNode();\r\n    }\r\n\r\n    #firstRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.firstChild();\r\n    }\r\n\r\n    #lastRow(grid: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = grid;\r\n        return <HTMLElement | null>rowsWalker.lastChild();\r\n    }\r\n\r\n    #previousRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.previousNode();\r\n    }\r\n\r\n    #nextRow(row: HTMLElement): HTMLElement | null {\r\n        const rowsWalker = this.#rowsWalker;\r\n        rowsWalker.currentNode = row;\r\n        return <HTMLElement | null>rowsWalker.nextNode();\r\n    }\r\n\r\n    #topCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const previousRow = this.#previousRow(closestRow);\r\n            if (previousRow) {\r\n                const previousRowCells = gridRowWidget.cells(previousRow);\r\n                return previousRowCells[Math.min(cellIndex, previousRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    #bottomCell(cell: HTMLElement): HTMLElement | null {\r\n        const closestRow = this.#closestRow(cell);\r\n        if (closestRow) {\r\n            const closestRowCells = gridRowWidget.cells(closestRow);\r\n            const cellIndex = Array.from(closestRowCells.values()).indexOf(cell);\r\n            const nextRow = this.#nextRow(closestRow);\r\n            if (nextRow) {\r\n                const nextRowCells = gridRowWidget.cells(nextRow);\r\n                return nextRowCells[Math.min(cellIndex, nextRowCells.length)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*#handleContextMenuEvent(event: MouseEvent) {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    const selectedCells = this.selectedCells(targetGrid);\r\n                    if (!selectedCells.includes(targetCell)) {\r\n                        this.#setCellsSelection(targetCell);\r\n                    }\r\n                    targetCell.focus({preventScroll: true});\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    const selectedRows = this.selectedRows(targetGrid);\r\n                    if (!selectedRows.includes(targetRow)) {\r\n                        this.#setRowsSelection(targetRow);\r\n                    }\r\n                    targetRow.focus({preventScroll: true});\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }*/\r\n\r\n    /*#handleDragEndEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }\r\n\r\n    #handleDragEnterEvent(event: DragEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetItem = <HTMLElement | null>(<HTMLElement>target).closest(\".treeitem\");\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (targetItem) {\r\n            const type = treeitemWidget.getType(targetItem);\r\n            if (type == \"parent\") {\r\n                treeitemWidget.toggle(targetItem, true);\r\n            }\r\n            this.#setDropTargetItem(targetTree, targetItem);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragOverEvent(event: DragEvent): void {\r\n        event.preventDefault();\r\n    }\r\n\r\n    #handleDragLeaveEvent(event: DragEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        if (relatedTarget) {\r\n            const relatedTargetRoot = (<Node>relatedTarget).getRootNode();\r\n            const relatedTargetHost =\r\n                relatedTargetRoot instanceof ShadowRoot ?\r\n                relatedTargetRoot.host :\r\n                relatedTarget;\r\n            if (!targetTree.contains(<Node>relatedTargetHost)) {\r\n                this.#setDropTargetItem(targetTree, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleDropEvent(event: DragEvent): void {\r\n        const {currentTarget} = event;\r\n        const targetTree = <HTMLElement>currentTarget;\r\n        this.#setDropTargetItem(targetTree, null);\r\n    }*/\r\n\r\n    #handleFocusEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const activeCell = this.#getActiveCell(targetGrid);\r\n                if (activeCell && relatedTarget !== activeCell) {\r\n                    activeCell.focus();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const activeRow = this.#getActiveRow(targetGrid);\r\n                if (activeRow && relatedTarget !== activeRow) {\r\n                    activeRow.focus();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusInEvent(event: FocusEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    this.#setActiveCell(targetGrid, targetCell);\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    this.#setActiveRow(targetGrid, targetRow);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetGrid.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            targetGrid.tabIndex = 0;\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent) {\r\n        const {currentTarget, key} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const activeCell = this.#getActiveCell(targetGrid);\r\n        const activeRow = this.#getActiveRow(targetGrid);\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (key) {\r\n            case \"a\": {\r\n                const {ctrlKey} = event;\r\n                if (ctrlKey && multiselectable) {\r\n                    switch (selectby) {\r\n                        case \"cell\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const firstCell = firstRow ? this.#firstCell(firstRow) : null;\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            const lastCell = lastRow ? this.#lastCell(lastRow) : null;\r\n                            if (firstCell && lastCell) {\r\n                                const range = this.#getCellsRange(firstCell, lastCell);\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"row\": {\r\n                            const firstRow = this.#firstRow(targetGrid);\r\n                            const lastRow = this.#lastRow(targetGrid);\r\n                            if (firstRow && lastRow) {\r\n                                const range = this.#getRowsRange(firstRow, lastRow);\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            }\r\n            case \"ArrowLeft\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const previousCell = this.#previousCell(activeCell);\r\n                        if (previousCell) {\r\n                            previousCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(previousCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, previousCell) :\r\n                                    this.#addCellsToSelection(targetGrid, previousCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowRight\": {\r\n                if (selectby == \"cell\") {\r\n                    if (activeCell) {\r\n                        const nextCell = this.#nextCell(activeCell);\r\n                        if (nextCell) {\r\n                            nextCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(nextCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, nextCell) :\r\n                                    this.#addCellsToSelection(targetGrid, nextCell);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowUp\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const firstRow = activeRow ?? this.#firstRow(targetGrid);\r\n                        const topCell = activeCell ?\r\n                            this.#topCell(activeCell) :\r\n                            firstRow ?\r\n                            this.#firstCell(firstRow) :\r\n                            null;\r\n                        if (topCell) {\r\n                            topCell.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridCellWidget.getSelected(topCell);\r\n                                selected ?\r\n                                    this.#removeCellsFromSelection(targetGrid, topCell) :\r\n                                    this.#addCellsToSelection(targetGrid, topCell);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const previousRow = activeRow ?\r\n                            this.#previousRow(activeRow) :\r\n                            this.#firstRow(targetGrid);\r\n                        if (previousRow) {\r\n                            previousRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(previousRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, previousRow) :\r\n                                    this.#addRowsToSelection(targetGrid, previousRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        const lastRow = activeRow ?? this.#lastRow(targetGrid);\r\n                        const bottomCell = activeCell ?\r\n                            this.#bottomCell(activeCell) :\r\n                            lastRow ?\r\n                            this.#lastCell(lastRow) :\r\n                            null;\r\n                            if (bottomCell) {\r\n                                bottomCell.focus({preventScroll: true});\r\n                                const {shiftKey} = event;\r\n                                if (shiftKey && multiselectable) {\r\n                                    const selected = gridCellWidget.getSelected(bottomCell);\r\n                                    selected ?\r\n                                        this.#removeCellsFromSelection(targetGrid, bottomCell) :\r\n                                        this.#addCellsToSelection(targetGrid, bottomCell);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"row\": {\r\n                        const nextRow = activeRow ?\r\n                            this.#nextRow(activeRow) :\r\n                            this.#lastRow(targetGrid);\r\n                        if (nextRow) {\r\n                            nextRow.focus({preventScroll: true});\r\n                            const {shiftKey} = event;\r\n                            if (shiftKey && multiselectable) {\r\n                                const selected = gridRowWidget.getSelected(nextRow);\r\n                                selected ?\r\n                                    this.#removeRowsFromSelection(targetGrid, nextRow) :\r\n                                    this.#addRowsToSelection(targetGrid, nextRow);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const firstCell = this.#firstCell(activeRow);\r\n                            if (firstCell) {\r\n                                firstCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const firstRow = this.#firstRow(targetGrid);\r\n                        if (firstRow) {\r\n                            firstRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeRow) {\r\n                            const lastCell = this.#lastCell(activeRow);\r\n                            if (lastCell) {\r\n                                lastCell.focus({preventScroll: true});\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        const lastRow = this.#lastRow(targetGrid);\r\n                        if (lastRow) {\r\n                            lastRow.focus({preventScroll: true});\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        if (activeCell) {\r\n                            this.#setCellsSelection(targetGrid, activeCell);\r\n                            activeCell.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        if (activeRow) {\r\n                            this.#setRowsSelection(targetGrid, activeRow);\r\n                            activeRow.click();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                switch (selectby) {\r\n                    case \"cell\": {\r\n                        this.#clearCellsSelection(targetGrid);\r\n                        this.#setActiveCell(targetGrid, null);\r\n                        break;\r\n                    }\r\n                    case \"row\": {\r\n                        this.#clearRowsSelection(targetGrid);\r\n                        this.#setActiveRow(targetGrid, null);\r\n                        break;\r\n                    }\r\n                }\r\n                targetGrid.focus();\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseDownEvent(event: MouseEvent): void {\r\n        const {currentTarget, target, ctrlKey, shiftKey} = event;\r\n        const targetGrid = <HTMLElement>currentTarget;\r\n        const selectby = this.getSelectBy(targetGrid);\r\n        const multiselectable = this.getMultiSelectable(targetGrid);\r\n        switch (selectby) {\r\n            case \"cell\": {\r\n                const targetCell = (<HTMLElement>target).closest<HTMLElement>(\".gridcell\");\r\n                if (targetCell) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setCellsSelection(targetGrid, targetCell);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridCellWidget.getSelected(targetCell);\r\n                            !selected ?\r\n                                this.#addCellsToSelection(targetGrid, targetCell) :\r\n                                this.#removeCellsFromSelection(targetGrid, targetCell);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeCell = this.#getActiveCell(targetGrid);\r\n                            if (activeCell) {\r\n                                const range = this.#getCellsRange(\r\n                                    activeCell,\r\n                                    targetCell\r\n                                );\r\n                                if (range) {\r\n                                    this.#setCellsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setCellsSelection(targetGrid, targetCell);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n            case \"row\": {\r\n                const targetRow = (<HTMLElement>target).closest<HTMLElement>(\".gridrow\");\r\n                if (targetRow) {\r\n                    if (multiselectable) {\r\n                        if (!shiftKey && !ctrlKey) {\r\n                            this.#setRowsSelection(targetGrid, targetRow);\r\n                        }\r\n                        else if (ctrlKey) {\r\n                            const selected = gridRowWidget.getSelected(targetRow);\r\n                            !selected ?\r\n                                this.#addRowsToSelection(targetGrid, targetRow) :\r\n                                this.#removeRowsFromSelection(targetGrid, targetRow);\r\n                            event.stopPropagation();\r\n                        }\r\n                        else if (shiftKey) {\r\n                            const activeRow = this.#getActiveRow(targetGrid);\r\n                            if (activeRow) {\r\n                                const range = this.#getRowsRange(\r\n                                    activeRow,\r\n                                    targetRow\r\n                                );\r\n                                if (range) {\r\n                                    this.#setRowsSelection(targetGrid, ...range);\r\n                                }\r\n                            }\r\n                            event.stopPropagation();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.#setRowsSelection(targetGrid, targetRow);\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleSelectEvent(event: Event): void {\r\n        const {currentTarget} = event;\r\n        const targetList = <HTMLElement>currentTarget;\r\n        if (targetList) {\r\n            if (this.#onSelection.get(targetList)) {\r\n                this.#hasSelectionChanged.set(targetList, true);\r\n            }\r\n            else {\r\n                targetList.dispatchEvent(new Event(\"selectionchange\", {bubbles: true}));\r\n            }\r\n        }\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { gridRowWidget } from \"./GridRowWidget\";\r\n\r\nexport { gridBodyWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridbody\": GridBodyWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridBodyWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridBodyWidget = new (\r\nWidget({\r\n    name: \"gridbody\"\r\n})(class GridBodyWidgetFactoryBase extends WidgetFactory implements GridBodyWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"tbody\", {\r\n            attributes: {\r\n                class: \"gridbody\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(body: HTMLElement) {\r\n        return body;\r\n    }\r\n\r\n    slottedCallback(body: HTMLElement, slot: HTMLElement) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement && child_i.classList.contains(\"gridrow\")) {\r\n                gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeadWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridhead\": GridHeadWidgetFactory\r\n    }\r\n}\r\n\r\ninterface GridHeadWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar gridHeadWidget = new (\r\nWidget({\r\n    name: \"gridhead\"\r\n})(class GridHeadWidgetFactoryBase extends WidgetFactory implements GridHeadWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"thead\", {\r\n            attributes: {\r\n                class: \"gridhead\",\r\n                role: \"rowgroup\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(head: HTMLElement) {\r\n        return head;\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { gridHeaderWidget };\r\n\r\ninterface GridHeaderWidgetFactory extends WidgetFactory {\r\n    create(init: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement;\r\n    setActive(item: HTMLElement, value: boolean): void;\r\n    getActive(item: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"gridheader\": GridHeaderWidgetFactory,\r\n    }\r\n}\r\n\r\nvar gridHeaderWidget = new (\r\nWidget({\r\n    name: \"gridheader\"\r\n})(class GridHeaderWidgetFactoryBase extends WidgetFactory implements GridHeaderWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"th\", {\r\n            attributes: {\r\n                class: \"gridheader\",\r\n                scope: \"column\",\r\n                role: \"columnheader\",\r\n                tabindex: -1\r\n            }\r\n        });\r\n    }\r\n\r\n    create(init?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n    }): HTMLElement {\r\n        const header = <HTMLElement>this.#template.cloneNode(true);\r\n        if (init !== undefined) {\r\n            const {id, classList, tabIndex} = init;\r\n            if (id !== undefined) {\r\n                header.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                header.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                header.tabIndex = tabIndex;\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    slot(header: HTMLElement): HTMLElement | null {\r\n        return header;\r\n    }\r\n\r\n    setActive(item: HTMLElement, value: boolean): void {\r\n        const {classList} = item;\r\n        if (value) {\r\n            classList.add(\"active\");\r\n        }\r\n        else {\r\n            classList.remove(\"active\");\r\n        }\r\n    }\r\n\r\n    getActive(item: HTMLElement): boolean {\r\n        const {classList} = item;\r\n        return classList.contains(\"active\");\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionWidget };\r\n\r\ninterface OptionWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        selected?: boolean;\r\n        disabled?: boolean;\r\n    }): HTMLElement;\r\n    getLabel(option: HTMLElement): string;\r\n    setLabel(option: HTMLElement, value: string): void;\r\n    getValue(option: HTMLElement): string;\r\n    setValue(option: HTMLElement, value: string): void;\r\n    getName(option: HTMLElement): string;\r\n    setName(option: HTMLElement, value: string): void;\r\n    getSelected(option: HTMLElement): boolean;\r\n    setSelected(option: HTMLElement, value: boolean): void;\r\n    setDisabled(option: HTMLElement, value: boolean): void;\r\n    getDisabled(option: HTMLElement): boolean;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"option\": OptionWidgetFactory\r\n    }\r\n}\r\n\r\nvar optionWidget = new(\r\nWidget({\r\n    name: \"option\"\r\n})(\r\nclass OptionWidgetFactoryBase extends WidgetFactory implements OptionWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"span\", {\r\n            attributes: {\r\n                class: \"option\",\r\n                role: \"option\",\r\n                tabindex: -1\r\n            },\r\n            children: [\r\n                element(\"span\", {\r\n                    attributes: {\r\n                        class: \"label\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        selected?: boolean;\r\n        label?: string;\r\n        name?: string;\r\n        value?: string;\r\n        disabled?: boolean;\r\n    }): HTMLElement {\r\n        const option = <HTMLElement>this.#template.cloneNode(true);\r\n        if (properties !== undefined) {\r\n            const {label, name, value, disabled} = properties;\r\n            let {selected} = properties;\r\n            selected = selected ?? false;\r\n            if (selected !== undefined) {\r\n                this.setSelected(option, selected);\r\n            }\r\n            if (label !== undefined) {\r\n                this.setLabel(option, label);\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(option, name);\r\n            }\r\n            if (value !== undefined) {\r\n                this.setValue(option, value);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(option, disabled);\r\n            }\r\n        }\r\n        return option;\r\n    }\r\n\r\n    get observedAttributes() {\r\n        return [\"aria-selected\"];\r\n    }\r\n\r\n    attributeChangedCallback(option: HTMLElement, name: string, oldValue: string, newValue: string) {\r\n        switch (name) {\r\n            case \"aria-selected\": {\r\n                if (JSON.parse(newValue) === true) {\r\n                    option.dispatchEvent(new Event(\"select\", {bubbles: true}));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #label(option: HTMLElement): HTMLElement {\r\n        return option.querySelector<HTMLElement>(\":scope > .label\")!;\r\n    }\r\n\r\n    getLabel(option: HTMLElement): string {\r\n        return this.#label(option).textContent ?? \"\";\r\n    }\r\n\r\n    setLabel(option: HTMLElement, value: string): void {\r\n        this.#label(option).textContent = value;\r\n    }\r\n\r\n    getValue(option: HTMLElement): string {\r\n        return option.getAttribute(\"value\") ?? \"\";\r\n    }\r\n\r\n    setValue(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"value\", value);\r\n    }\r\n    \r\n    getName(option: HTMLElement): string {\r\n        return option.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(option: HTMLElement, value: string): void {\r\n        option.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getSelected(option: HTMLElement): boolean {\r\n        return JSON.parse(option.getAttribute(\"aria-selected\") ?? String(false));\r\n    }\r\n\r\n    setSelected(option: HTMLElement, value: boolean): void {\r\n        option.setAttribute(\"aria-selected\", String(value));\r\n    }\r\n\r\n    getDisabled(option: HTMLElement): boolean {\r\n        return option.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(option: HTMLElement, value: boolean): void {\r\n        option.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n}));","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\nimport { optionWidget } from \"./OptionWidget\";\r\n\r\nexport { comboBoxWidget };\r\n\r\ninterface ComboBoxWidgetFactory extends WidgetFactory {\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement;\r\n    options(combobox: HTMLElement): HTMLElement[];\r\n    getName(combobox: HTMLElement): string;\r\n    setName(combobox: HTMLElement, value: string): void;\r\n    getExpanded(combobox: HTMLElement): boolean;\r\n    setExpanded(combobox: HTMLElement, value: boolean): void;\r\n    setDisabled(combobox: HTMLElement, value: boolean): void;\r\n    getDisabled(combobox: HTMLElement): boolean;\r\n    expand(combobox: HTMLElement): void;\r\n    collapse(combobox: HTMLElement): void;\r\n    toggle(combobox: HTMLElement, force?: boolean): void;\r\n}\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"combobox\": ComboBoxWidgetFactory\r\n    }\r\n}\r\n\r\nvar comboBoxWidget = new(\r\nWidget({\r\n    name: \"combobox\"\r\n})(\r\nclass ComboBoxWidgetFactoryBase extends WidgetFactory implements ComboBoxWidgetFactory {\r\n    #template: HTMLElement;\r\n    #walker: TreeWalker;\r\n    #optionsObserver: MutationObserver;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#walker = document.createTreeWalker(\r\n            document, NodeFilter.SHOW_ELEMENT, this.#walkerNodeFilter.bind(this)\r\n        );\r\n        this.#optionsObserver = new MutationObserver(\r\n            this.#optionsMutationCallback.bind(this)\r\n        );\r\n        this.#template = element(\"div\", {\r\n            attributes: {\r\n                class: \"combobox\",\r\n                role: \"combobox\",\r\n                tabindex: 0,\r\n            },\r\n            children: [\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"content\"\r\n                    },\r\n                    children: [\r\n                        element(\"span\", {\r\n                            attributes: {\r\n                                class: \"value\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                element(\"div\", {\r\n                    attributes: {\r\n                        class: \"box\"\r\n                    }\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    create(properties?: {\r\n        id?: string;\r\n        classList?: string[];\r\n        tabIndex?: number;\r\n        name?: string;\r\n        disabled?: boolean;\r\n        multiselectable?: boolean;\r\n    }): HTMLElement {\r\n        const combobox = <HTMLElement>this.#template.cloneNode(true);\r\n        this.#optionsObserver.observe(combobox, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        combobox.addEventListener(\"focusout\", this.#handleFocusOutEvent.bind(this));\r\n        combobox.addEventListener(\"keydown\", this.#handleKeyDownEvent.bind(this));\r\n        combobox.addEventListener(\"click\", this.#handleClickEvent.bind(this));\r\n        combobox.addEventListener(\"mouseover\", this.#handleMouseOverEvent.bind(this));\r\n        this.setExpanded(combobox, false);\r\n        if (properties !== undefined) {\r\n            const {id, classList, tabIndex, name, disabled, multiselectable} = properties;\r\n            if (id !== undefined) {\r\n                combobox.id = id;\r\n            }\r\n            if (classList !== undefined) {\r\n                combobox.classList.add(...classList);\r\n            }\r\n            if (tabIndex !== undefined) {\r\n                combobox.tabIndex = tabIndex;\r\n            }\r\n            if (name !== undefined) {\r\n                this.setName(combobox, name);\r\n            }\r\n            if (disabled !== undefined) {\r\n                this.setDisabled(combobox, disabled);\r\n            }\r\n            if (multiselectable !== undefined) {\r\n                this.setMultiSelectable(combobox, multiselectable);\r\n            }\r\n        }\r\n        return combobox;\r\n    }\r\n\r\n    slot(combobox: HTMLElement) {\r\n        return this.#box(combobox);\r\n    }\r\n\r\n    slottedCallback(combobox: HTMLElement, slot: HTMLElement, name: string | null) {\r\n        const {childNodes} = slot;\r\n        Array.from(childNodes).forEach((child_i, i) => {\r\n            if (child_i instanceof HTMLElement) {\r\n                //gridRowWidget.setPosInSet(child_i, i);\r\n            }\r\n        });\r\n    }\r\n\r\n    #box(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n    }\r\n    \r\n    options(combobox: HTMLElement): HTMLElement[] {\r\n        return Array.from(combobox.querySelectorAll<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option\"\r\n        ));\r\n    }\r\n\r\n    selectedOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option[aria-selected=true]\"\r\n        );\r\n    }\r\n\r\n    #getActiveOption(combobox: HTMLElement): HTMLElement | null {\r\n        return combobox.querySelector<HTMLElement>(\r\n            \":scope > :is(.box, .box > .optiongroup) > .option:focus-within\"\r\n        );\r\n    }\r\n\r\n    #value(combobox: HTMLElement): HTMLElement {\r\n        return combobox.querySelector<HTMLElement>(\":scope > .content > .value\")!;\r\n    }\r\n    \r\n    getName(combobox: HTMLElement): string {\r\n        return combobox.getAttribute(\"name\") ?? \"\";\r\n    }\r\n\r\n    setName(combobox: HTMLElement, value: string): void {\r\n        combobox.setAttribute(\"name\", value);\r\n    }\r\n\r\n    getDisabled(combobox: HTMLElement): boolean {\r\n        return combobox.hasAttribute(\"aria-disabled\");\r\n    }\r\n\r\n    setDisabled(combobox: HTMLElement, value: boolean): void {\r\n        combobox.toggleAttribute(\"aria-disabled\", value);\r\n    }\r\n\r\n    setExpanded(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-expanded\", String(value));\r\n    }\r\n\r\n    getExpanded(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-expanded\") ?? String(false));\r\n    }\r\n\r\n    setMultiSelectable(combobox: HTMLElement, value: boolean): void {\r\n        combobox.setAttribute(\"aria-multiselectable\", String(value));\r\n    }\r\n\r\n    getMultiSelectable(combobox: HTMLElement): boolean {\r\n        return JSON.parse(combobox.getAttribute(\"aria-multiselectable\") ?? String(false));\r\n    }\r\n\r\n    expand(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (!expanded) {\r\n            this.setExpanded(combobox, true);\r\n            this.#positionBox(combobox);\r\n            const selectedOption = this.selectedOption(combobox);\r\n            if (selectedOption) {\r\n                selectedOption.focus({preventScroll: true});\r\n            }\r\n        }\r\n    }\r\n\r\n    collapse(combobox: HTMLElement): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        if (expanded) {\r\n            this.setExpanded(combobox, false);\r\n            combobox.focus();\r\n        }\r\n    }\r\n\r\n    toggle(combobox: HTMLElement, force?: boolean): void {\r\n        const expanded = this.getExpanded(combobox);\r\n        const expand = force ?? !expanded;\r\n        expand ? this.expand(combobox) : this.collapse(combobox);\r\n    }\r\n\r\n    #optionsMutationCallback(mutationsList: MutationRecord[]) {\r\n        mutationsList.forEach((mutation: MutationRecord) => {\r\n            const {target, type} = mutation;\r\n            const targetCombobox = (<HTMLElement>target).closest<HTMLElement>(\".combobox\")!;\r\n            if (targetCombobox instanceof HTMLElement) {\r\n                switch (type) {\r\n                    case \"childList\": {\r\n                        const {addedNodes} = mutation;\r\n                        const selector = \".option[aria-selected=true]\";\r\n                        for (let node of addedNodes) {\r\n                            if (node instanceof HTMLElement) {\r\n                                const selectedOption = node.matches(selector) ? node :\r\n                                    node.querySelector<HTMLElement>(selector);\r\n                                if (selectedOption) {\r\n                                    this.#setSelectedOption(targetCombobox, selectedOption);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    #walkerNodeFilter(node: Node): number {\r\n        if (node instanceof HTMLElement) {\r\n            const {classList} = node;\r\n            if (classList.contains(\"option\") && !optionWidget.getDisabled(node) && !node.hidden) {\r\n                return NodeFilter.FILTER_ACCEPT;\r\n            }\r\n            else if (classList.contains(\"optiongroup\")) {\r\n                return NodeFilter.FILTER_SKIP;\r\n            }\r\n        }\r\n        return NodeFilter.FILTER_REJECT;\r\n    }\r\n\r\n    #firstOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.firstChild();\r\n    }\r\n\r\n    #lastOption(combobox: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = this.#box(combobox);\r\n        return <HTMLElement | null>walker.lastChild();\r\n    }\r\n    \r\n    #previousOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.previousNode();\r\n    }\r\n\r\n    #nextOption(option: HTMLElement): HTMLElement | null {\r\n        const walker = this.#walker;\r\n        walker.currentNode = option;\r\n        return <HTMLElement | null>walker.nextNode();\r\n    }\r\n\r\n    #selectOption(combobox: HTMLElement, option: HTMLElement) {\r\n        const selectedOption = this.selectedOption(combobox);\r\n        if (selectedOption) {\r\n            optionWidget.setSelected(selectedOption, false);\r\n        }\r\n        if (option !== selectedOption) {\r\n            optionWidget.setSelected(option, true);\r\n            this.#setSelectedOption(combobox, option);\r\n            combobox.dispatchEvent(new Event(\"change\", {bubbles: true}));\r\n        }\r\n    }\r\n    \r\n    #setSelectedOption(combobox: HTMLElement, option: HTMLElement) {\r\n        this.#value(combobox).textContent = optionWidget.getLabel(option);\r\n    }\r\n\r\n    #positionBox(combobox: HTMLElement): void {\r\n        const box = combobox.querySelector<HTMLElement>(\":scope > .box\")!;\r\n        const {style: optionsStyle} = box;  \r\n        const {bottom, left} = combobox.getBoundingClientRect();\r\n        const {scrollX, scrollY} = window;\r\n        optionsStyle.setProperty(\"top\", `${bottom + scrollY}px`);\r\n        optionsStyle.setProperty(\"left\", `${left + scrollX}px`);\r\n    }\r\n\r\n    #handleClickEvent(event: MouseEvent): void {\r\n        const {currentTarget, target} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        this.toggle(targetCombobox);\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        if (expanded) {\r\n            const selectedOption = this.selectedOption(targetCombobox);\r\n            (selectedOption ?? this.options(targetCombobox)[0])?.focus({preventScroll: true});\r\n        }\r\n        else {\r\n            const targetOption = (<HTMLElement>target).closest<HTMLElement>(\".option\");\r\n            if (targetOption) {\r\n                this.#selectOption(targetCombobox, targetOption);\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleFocusOutEvent(event: FocusEvent): void {\r\n        const {currentTarget, relatedTarget} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const lostFocusWithin = !targetCombobox.contains(<Node>relatedTarget);\r\n        if (lostFocusWithin) {\r\n            this.collapse(targetCombobox);\r\n        }\r\n    }\r\n\r\n    #handleKeyDownEvent(event: KeyboardEvent): void {\r\n        const {currentTarget, key} = event;\r\n        const targetCombobox = <HTMLElement>currentTarget;\r\n        const expanded = this.getExpanded(targetCombobox);\r\n        const activeOption = this.#getActiveOption(targetCombobox);\r\n        const selectedOption = this.selectedOption(targetCombobox);\r\n        switch (key) {\r\n            case \"ArrowUp\": {\r\n                if (expanded) {\r\n                    const previousOption = activeOption ?\r\n                        this.#previousOption(activeOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        previousOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const previousOption = selectedOption ?\r\n                        this.#previousOption(selectedOption) :\r\n                        this.#firstOption(targetCombobox);\r\n                    if (previousOption) {\r\n                        this.#selectOption(targetCombobox, previousOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"ArrowDown\": {\r\n                if (expanded) {\r\n                    const nextOption = activeOption ?\r\n                        this.#nextOption(activeOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        nextOption.focus({preventScroll: true});\r\n                    }\r\n                }\r\n                else {\r\n                    const nextOption = selectedOption ?\r\n                        this.#nextOption(selectedOption) :\r\n                        this.#lastOption(targetCombobox);\r\n                    if (nextOption) {\r\n                        this.#selectOption(targetCombobox, nextOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Home\": {\r\n                const firstOption = this.#firstOption(targetCombobox);\r\n                if (firstOption) {\r\n                    if (expanded) {\r\n                        firstOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, firstOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"End\": {\r\n                const lastOption = this.#lastOption(targetCombobox);\r\n                if (lastOption) {\r\n                    if (expanded) {\r\n                        lastOption.focus({preventScroll: true});\r\n                    }\r\n                    else {\r\n                        this.#selectOption(targetCombobox, lastOption);\r\n                    }\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                    if (activeOption) {\r\n                        this.#selectOption(targetCombobox, activeOption);\r\n                    }\r\n                }\r\n                else {\r\n                    this.expand(targetCombobox);\r\n                    selectedOption?.focus({preventScroll: true});\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            case \"Escape\": {\r\n                if (expanded) {\r\n                    this.collapse(targetCombobox);\r\n                }\r\n                event.stopPropagation();\r\n                break;\r\n            }\r\n            default: {\r\n                const {length: keyLength} = key;\r\n                if (keyLength == 1) {\r\n                    const keyCode = key.charCodeAt(0);\r\n                    const options = this.options(targetCombobox);\r\n                    const activeIndex = activeOption ? options.indexOf(activeOption) : -1;\r\n                    const matchingOption = options.find(\r\n                        (option_i, i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode && i > activeIndex\r\n                    ) ?? options.find(\r\n                        (option_i) => optionWidget.getLabel(option_i).toLowerCase().charCodeAt(0) == keyCode\r\n                    );\r\n                    if (matchingOption) {\r\n                        matchingOption.focus({preventScroll: true});\r\n                    }\r\n                    event.stopPropagation();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    #handleMouseOverEvent(event: MouseEvent): void {\r\n        const {target} = event;\r\n        const targetItem = (<Element>target).closest<HTMLElement>(\".option\");\r\n        if (targetItem) {\r\n            targetItem.focus({preventScroll: true});\r\n        }\r\n    }\r\n}));","//import { MenuItemGroupWidget, MenuItemWidget, MenuWidget, MenuBarWidget } from \"./src/views/MenuBarWidget\";\r\nimport { TreeItemModel, TreeModel, TreeItemList } from \"./src/views/TreeView\";\r\n\r\nimport { ListItemModel, ListModel, ListView } from \"./src/views/ListView\";\r\nimport { GridColumnModel, GridModel, GridRowModel, GridView } from \"./src/views/GridView\";\r\nimport { element, fragment, reactiveElement } from \"./src/elements/Element\";\r\nimport { treeItemWidget } from \"./src/views/widgets/tree/TreeItemWidget\";\r\nimport { widget } from \"./src/views/widgets/Widget\";\r\nimport { Editor } from \"./src/Editor\";\r\nimport { toolbarWidget } from \"./src/views/widgets/toolbar/ToolBarWidget\";\r\nimport { toolbarItemWidget } from \"./src/views/widgets/toolbar/ToolBarItemWidget\";\r\nimport { comboBoxWidget } from \"./src/views/widgets/combobox/ComboBoxWidget\";\r\nimport { optionWidget } from \"./src/views/widgets/combobox/OptionWidget\";\r\nimport { TreeMain } from \"./TreeMain\";\r\n\r\nimport \"./index\";\r\n\r\ndeclare global {\r\n    interface ElementInternals {\r\n        role: string;\r\n    }\r\n}\r\n// const menubar = new MenuBarWidget([\r\n//     new MenuItemWidget({\r\n//         label: \"File\",\r\n//         name: \"file\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"File\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Import file...\",\r\n//                             name: \"import\"\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Export file...\",\r\n//                             name: \"export\",\r\n//                             hotkey: new HotKey(Key.B, KeyModifier.Control, KeyModifier.Alt)\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     }),\r\n//     new MenuItemWidget({\r\n//         label: \"Preferences\",\r\n//         name: \"preferences\",\r\n//         type: \"menu\",\r\n//         menu: new MenuWidget({\r\n//             name: \"Preferences\",\r\n//             groups: [\r\n//                 new MenuItemGroupWidget({\r\n//                     name: \"fileActions\",\r\n//                     items: [\r\n//                         new MenuItemWidget({\r\n//                             label: \"Advanced User\",\r\n//                             name: \"advanced\",\r\n//                             type: \"checkbox\",\r\n//                             hotkey: new HotKey(Key.A, KeyModifier.Control, KeyModifier.Alt)\r\n//                         }),\r\n//                         new MenuItemWidget({\r\n//                             label: \"Layout\",\r\n//                             name: \"layout\",\r\n//                             type: \"submenu\",\r\n//                             menu: new MenuWidget({\r\n//                                 name: \"Layout\",\r\n//                                 groups: [\r\n//                                     new MenuItemGroupWidget({\r\n//                                         name: \"Layout\",\r\n//                                         items: [\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Standard\",\r\n//                                                 name: \"standard\",\r\n//                                                 type: \"radio\"\r\n//                                             }),\r\n//                                             new MenuItemWidget({\r\n//                                                 label: \"Advanced\",\r\n//                                                 name: \"advanced\",\r\n//                                                 type: \"radio\"\r\n//                                             })\r\n//                                         ]\r\n//                                     })\r\n//                                 ]\r\n//                             })\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     })\r\n// ]);\r\n\r\n// const treeModel = new TreeModel({\r\n//     itemContextMenuDelegate: (activeItem: TreeItemModel, selectedItems: TreeItemList) => \r\n//         fragment(\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Display\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 selectedItems.display();\r\n//                             }\r\n//                         }\r\n//                     }),\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             label: \"Delete\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 const {count} = selectedItems;\r\n//                                 const doRemove = confirm(`Remove ${count} items?`);\r\n//                                 if (doRemove) {\r\n//                                     selectedItems.remove();\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"menuitemgroup\", {\r\n//                 slotted: [\r\n//                     widget(\"menuitem\", {\r\n//                         properties: {\r\n//                             type: \"checkbox\",\r\n//                             label: activeItem.visibility ? \"Hide\" : \"Show\"\r\n//                         },\r\n//                         listeners: {\r\n//                             click: () => {\r\n//                                 activeItem.visibility ?\r\n//                                     selectedItems.hide() :\r\n//                                     selectedItems.show();\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             })\r\n//         ),\r\n//     itemContentDelegate: (item: TreeItemModel) => \r\n//         fragment(\r\n//             ...([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     element(\"span\", {\r\n//                         attributes: {\r\n//                             class: \"label\"\r\n//                         }\r\n//                     }),\r\n//                     [\"label\"],\r\n//                     (label, property, oldValue, newValue) => {\r\n//                         label.textContent = newValue;\r\n//                     }\r\n//                 )\r\n//             ]).concat(\r\n//                 (item.type == \"parent\") ? [\r\n//                     reactiveElement(\r\n//                         item,\r\n//                         element(\"span\", {\r\n//                             attributes: {\r\n//                                 class: \"badge\"\r\n//                             }\r\n//                         }),\r\n//                         [\"childCount\"],\r\n//                         (badge, property, oldValue, newValue) => {\r\n//                             badge.textContent = `(${newValue})`;\r\n//                         }\r\n//                     )\r\n//                 ] : []\r\n//             ).concat([\r\n//                 reactiveElement(\r\n//                     item,\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\", {\r\n//                                 properties: {\r\n//                                     name: \"visibility\",\r\n//                                     type: \"checkbox\",\r\n//                                     label: \"Visibility\"\r\n//                                 },\r\n//                                 listeners: {\r\n//                                     click: () => {\r\n//                                         item.visibility ?\r\n//                                             item.hide() :\r\n//                                             item.show();\r\n//                                     }\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     }),\r\n//                     [\"visibility\"],\r\n//                     (toolbar, property, oldValue, newValue) => {\r\n//                         switch (property) {\r\n//                             case \"visibility\": {\r\n//                                 const visibilityItem = toolbarWidget.slot(toolbar)\r\n//                                     ?.querySelector<HTMLElement>(\".toolbaritem[name=visibility]\");\r\n//                                 if (visibilityItem) {\r\n//                                     const label = newValue ? \"Hide\" : \"Show\";\r\n//                                     toolbarItemWidget.setLabel(visibilityItem, label);\r\n//                                     toolbarItemWidget.setTitle(visibilityItem, label);\r\n//                                     toolbarItemWidget.setPressed(visibilityItem, newValue);\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 )\r\n//             ])\r\n//         ),\r\n//     items: [\r\n//         new TreeItemModel({\r\n//             label: \"TI 0\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             label: \"TI 1\",\r\n//             type: \"parent\",\r\n//             items: [\r\n//                 new TreeItemModel({\r\n//                     label: \"TI 1A\",\r\n//                     type: \"parent\",\r\n//                     items: [\r\n//                         new TreeItemModel({\r\n//                             type: \"leaf\",\r\n//                             label: \"TI 1AX\"\r\n//                         }),\r\n//                     ]\r\n//                 }),\r\n//                 new TreeItemModel({\r\n//                     type: \"parent\",\r\n//                     label: \"TI 1B\"\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 2\"\r\n//         }),\r\n//         new TreeItemModel({\r\n//             type: \"leaf\",\r\n//             label: \"TI 3\"\r\n//         })\r\n//     ],\r\n//     sortFunction: (item_a: TreeItemModel, item_b: TreeItemModel) => {\r\n//         const {label: aLabel} = item_a;\r\n//         const {label: bLabel} = item_b;\r\n//         return bLabel.localeCompare(aLabel);\r\n//     }\r\n// });\r\n// const treeElement = treeView.create(treeModel);\r\n// document.body.append(treeElement);\r\n\r\n// treeModel.childItems.append(\r\n//     new TreeItemModel({\r\n//         label: \"yo\",\r\n//         type: \"parent\",\r\n//         items: [\r\n//             new TreeItemModel({\r\n//                 type: \"leaf\",\r\n//                 label: \"plop\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// const listView = new ListView();\r\n// listView.setModel(\r\n//     new ListModel({\r\n//         items: [\r\n//             new ListItemModel({\r\n//                 label: \"Hey\"\r\n//             }),\r\n//             new ListItemModel({\r\n//                 label: \"Yo\"\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// //document.body.append(listView);\r\n\r\n// // Menu actions\r\n// // Toolbar actions\r\n// const gridView = new GridView();\r\n// gridView.resizable = true;\r\n// gridView.sortable = true;\r\n// gridView.setColumnDelegate((column) => {\r\n//     return fragment(\r\n//         element(\"label\", {\r\n//             children: column.label\r\n//         }),\r\n//         element(\"e-toolbar\", {\r\n//             children: [\r\n//                 element(\"e-toolbaritem\", {\r\n//                     attributes: {\r\n//                         type: \"button\"\r\n//                     }\r\n//                 })\r\n//             ]\r\n//         })\r\n//     );\r\n// });\r\n// const year = new Date().getFullYear();\r\n// gridView.setModel(\r\n//     new GridModel({\r\n//         columns: [\r\n//             new GridColumnModel({\r\n//                 name: \"name\",\r\n//                 type: String,\r\n//                 label: \"Name\",\r\n//                 extract: (row) => row.name\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"age\",\r\n//                 type: Number,\r\n//                 label: \"Age\",\r\n//                 extract: (row) => row.age,\r\n//                 filters: [{\r\n//                     name: \"Minors\",\r\n//                     filter: (row) => row.age < 18\r\n//                 },{\r\n//                     name: \"Majors\",\r\n//                     filter: (row) => row.age >= 18\r\n//                 }]\r\n//             }),\r\n//             new GridColumnModel({\r\n//                 name: \"birthyear\",\r\n//                 type: String,\r\n//                 label: \"Brith Year\",\r\n//                 extract: (row) => year - row.age\r\n//             }),\r\n//         ],\r\n//         rows: [\r\n//             new GridRowModel({\r\n//                 id: 1,\r\n//                 name: \"Denis\",\r\n//                 age: 13\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 2,\r\n//                 name: \"Jean-Charles\",\r\n//                 age: 32\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 3,\r\n//                 name: \"Charles\",\r\n//                 age: 25\r\n//             }),\r\n//             new GridRowModel({\r\n//                 id: 4,\r\n//                 name: \"Mamagubida\",\r\n//                 age: 128\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n// document.body.append(gridView);\r\n\r\n// const menuView = widget(\"menubar\", {\r\n//     slotted: [\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\",\r\n//                 disabled: true\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 0\",\r\n//                 name: \"MenuItem 0\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"MenuItem 1\",\r\n//                                 name: \"MenuItem 1\",\r\n//                                 type: \"checkbox\"\r\n//                             }\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }),\r\n//         widget(\"menuitem\", {\r\n//             properties: {\r\n//                 label: \"MenuItem 1\",\r\n//                 name: \"MenuItem 1\",\r\n//                 type: \"menu\"\r\n//             },\r\n//             slotted: [\r\n//                 widget(\"menu\", {\r\n//                     slotted: [\r\n//                         widget(\"menuitemgroup\", {\r\n//                             slotted: [\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         label: \"MenuItem 1\",\r\n//                                         type: \"checkbox\",\r\n//                                         keyshortcut: \"Ctrl+B\",\r\n//                                         disabled: true,\r\n//                                         checked: true\r\n//                                     }\r\n//                                 }),\r\n//                                 widget(\"menuitem\", {\r\n//                                     properties: {\r\n//                                         type: \"button\",\r\n//                                         label: \"MenuItem 2\",\r\n//                                         keyshortcut: \"Ctrl+A\"\r\n//                                     }\r\n//                                 })\r\n//                             ]\r\n//                         }),\r\n//                         widget(\"separator\"),\r\n//                         widget(\"menuitem\", {\r\n//                             properties: {\r\n//                                 label: \"Submenu\",\r\n//                                 type: \"submenu\"\r\n//                             },\r\n//                             slotted: [\r\n//                                 widget(\"menu\", {\r\n//                                     slotted: [\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 label: \"MenuItem 1\",\r\n//                                                 type: \"radio\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"1\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 2\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"2\"\r\n//                                             }\r\n//                                         }),\r\n//                                         widget(\"menuitem\", {\r\n//                                             properties: {\r\n//                                                 type: \"radio\",\r\n//                                                 label: \"MenuItem 3\",\r\n//                                                 name: \"radio\",\r\n//                                                 value: \"3\"\r\n//                                             }\r\n//                                         })\r\n//                                     ]\r\n//                                 })\r\n//                             ]\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(menuView);\r\n\r\n// const tree = widget(\"tree\", {\r\n//     slotted: [\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true\r\n//                 //disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             },\r\n//             listeners: {\r\n//                 contextmenu: <EventListener>((event: MouseEvent) => {\r\n//                     const {target, clientX, clientY} = event;\r\n//                     const targetItem = <HTMLElement>(<HTMLElement>target).closest(\".treeitem\");\r\n//                     const menu = widget(\"menu\", {\r\n//                         properties: {\r\n//                             contextual: true\r\n//                         },\r\n//                         slotted: [\r\n//                             widget(\"menuitemgroup\", {\r\n//                                 slotted: [\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Display\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 console.log(treeItemWidget.getLabel(targetItem));\r\n//                                             }\r\n//                                         }\r\n//                                     }),\r\n//                                     widget(\"menuitem\", {\r\n//                                         properties: {\r\n//                                             label: \"Delete\"\r\n//                                         },\r\n//                                         listeners: {\r\n//                                             click: () => {\r\n//                                                 targetItem.remove();\r\n//                                             }\r\n//                                         }\r\n//                                     })\r\n//                                 ]\r\n//                             }),\r\n//                         ]\r\n//                     });\r\n//                     targetItem.append(menu);\r\n//                     menuWidget.positionContextual(menu, clientX, clientY);\r\n//                     menu.focus({preventScroll: true});\r\n//                     event.preventDefault();\r\n//                 })\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 0\",\r\n//                 type: \"parent\",\r\n//                 draggable: true,\r\n//                 disabled: true\r\n//             },\r\n//             slotted: {\r\n//                 group: [\r\n//                     widget(\"treeitemgroup\", {\r\n//                         slotted: [\r\n//                             widget(\"treeitem\", {\r\n//                                 properties: {\r\n//                                     label: \"treeitem 1\",\r\n//                                     type: \"leaf\",\r\n//                                     draggable: true\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         }),\r\n//         widget(\"treeitem\", {\r\n//             properties: {\r\n//                 label: \"treeitem 1\",\r\n//                 type: \"leaf\",\r\n//                 draggable: true\r\n//             },\r\n//             slotted: {\r\n//                 content: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }\r\n//         })\r\n//     ]\r\n// })\r\n// document.body.append(tree);\r\n\r\n// document.body.append(\r\n//     widget(\"toolbar\", {\r\n//         slotted: [\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"First item\",\r\n//                     type: \"menubutton\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"menu\", {\r\n//                         slotted: [\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 1\",\r\n//                                     name: \"MenuItem 1\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"menuitem\", {\r\n//                                 properties: {\r\n//                                     label: \"MenuItem 2\",\r\n//                                     name: \"MenuItem 2\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     type: \"checkbox\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"toolbaritem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\",\r\n//                     type: \"checkbox\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"list\", {\r\n//         slotted: [\r\n//             widget(\"listitemgroup\",  {\r\n//                 slotted: [   \r\n//                     widget(\"listitem\",  {\r\n//                         properties: {\r\n//                             label: \"First item\"\r\n//                         }\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Second item\"\r\n//                 },\r\n//                 slotted: [\r\n//                     widget(\"toolbar\", {\r\n//                         slotted: [\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"First item\",\r\n//                                     type: \"button\"\r\n//                                 }\r\n//                             }),\r\n//                             widget(\"toolbaritem\",  {\r\n//                                 properties: {\r\n//                                     label: \"Second item\",\r\n//                                     type: \"checkbox\"\r\n//                                 }\r\n//                             })\r\n//                         ]\r\n//                     })\r\n//                 ]\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Third item\",\r\n//                     disabled: true,\r\n//                 }\r\n//             }),\r\n//             widget(\"listitem\",  {\r\n//                 properties: {\r\n//                     label: \"Fourth item\"\r\n//                 }\r\n//             })\r\n//         ]\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"grid\", {\r\n//         properties: {\r\n//             selectby: \"row\",\r\n//             multisectable: true\r\n//         },\r\n//         slotted: {\r\n//             headers: [\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"First header\"\r\n//                 }),\r\n//                 widget(\"gridheader\",  {\r\n//                     slotted: \"Second header\"\r\n//                 })\r\n//             ],\r\n//             rows: [\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"First cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Second cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Third cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fourth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Fifth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Sixth cell\"\r\n//                         })\r\n//                     ]\r\n//                 }),\r\n//                 widget(\"gridrow\",  {\r\n//                     slotted: [   \r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Heighth cell\"\r\n//                         }),\r\n//                         widget(\"gridcell\",  {\r\n//                             slotted: \"Nineth cell\"\r\n//                         })\r\n//                     ]\r\n//                 })\r\n//             ]\r\n//         }\r\n//     })\r\n// );\r\n\r\n// document.body.append(\r\n//     widget(\"combobox\", {\r\n//         slotted: [\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"First option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Second option\"\r\n//                 }\r\n//             }),\r\n//             widget(\"option\",  {\r\n//                 properties: {\r\n//                     label: \"Third option\",\r\n//                     selected: true\r\n//                 }\r\n//             })\r\n//         ],\r\n//         listeners: {\r\n//             change: (event) => {\r\n//                 const {currentTarget} = event;\r\n//                 const comboBoxTarget = <HTMLElement>currentTarget;\r\n//                 console.log(optionWidget.getLabel(comboBoxWidget.selectedOption(comboBoxTarget)!));\r\n//             }\r\n//         }\r\n//     })\r\n// );\r\n\r\n// const editor = new Editor();\r\n// editor.setup();\r\n\r\n// editor.registerCheckboxAction(\"toggleAdvancedUser\", (_, newValue) => {\r\n//     console.log(`Advanced user is now ${newValue}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_DOWN, KeyModifier.Alt)});\r\n\r\n// editor.registerRadioAction(\"setLayout\", (_, newValue) => {\r\n//     editor.setPair(\"layout\", newValue);\r\n// });\r\n\r\n// editor.registerButtonAction(\"execLayout\", () => {\r\n//     const layout = editor.getPair(\"layout\");\r\n//     console.log(`Layout is ${layout}`);\r\n// }, {hotkey: new HotKey(Key.ARROW_UP, KeyModifier.Alt)});\r\n\r\n\r\n// editor.registerRadioAction(\"selectTest\", (oldValue, newValue) => {\r\n//     console.log(`Test is ${newValue}`);\r\n// }, {value: \"2\", key: \"test\"});\r\n\r\n// document.addEventListener(\"slotchange\", (event) => {\r\n//     console.log(event);\r\n// });\r\n\r\n// setTimeout(() => {\r\n//     const execLayoutToolBarItem = document.querySelector<HTMLEActionElement>(\"e-toolbaritem[name=execLayout]\");\r\n//     if (execLayoutToolBarItem) {\r\n//         editor.addPairListener(\"layout\", (oldValue, newValue) => {\r\n//             if (newValue !== oldValue) {\r\n//                 execLayoutToolBarItem.value = newValue;\r\n//             }\r\n//         });\r\n//     }\r\n// }, 100);\r\n\r\n// const button = element(\"button\", {\r\n//     properties: {\r\n//         textContent: \"Focus\"\r\n//     },\r\n//     listeners: {\r\n//         click: () => {\r\n//             const menuitem = document.querySelector<HTMLEMenuItemElement>(\"e-menuitem#hey\");\r\n//             if (menuitem) {\r\n//                 menuitem.focus();\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n// document.body.append(button);\r\n// document.body.append(menubar.element);\r\n\r\n// editor.executeCheckboxAction(\"toggleAdvancedUser\", true);\r\n// editor.setCheckboxActionValue(\"toggleAdvancedUser\", false);\r\n\r\n//editor.setRadioActionValue(\"selectTest\", \"2\");\r\n\r\n//editor.executeRadioAction(\"setLayout\", \"other\");\r\nexport async function main() {\r\n    TreeMain();\r\n}","import { element } from \"../../../elements/Element\";\r\nimport { Widget, WidgetFactory } from \"../Widget\";\r\n\r\nexport { optionGroupWidget };\r\n\r\ndeclare global {\r\n    interface WidgetNameMap {\r\n        \"optiongroup\": OptionGroupWidgetFactory\r\n    }\r\n}\r\n\r\ninterface OptionGroupWidgetFactory extends WidgetFactory {\r\n    create(): HTMLElement;\r\n}\r\n\r\nvar optionGroupWidget = new (\r\nWidget({\r\n    name: \"optiongroup\"\r\n})(class OptionGroupWidgetFactoryBase extends WidgetFactory implements OptionGroupWidgetFactory {\r\n    #template: HTMLElement;\r\n\r\n    constructor() {\r\n        super();\r\n        this.#template = element(\"ul\", {\r\n            attributes: {\r\n                class: \"optiongroup\",\r\n                role: \"group\"\r\n            }\r\n        });\r\n    }\r\n\r\n    create() {\r\n        return <HTMLElement>this.#template.cloneNode(true);\r\n    }\r\n\r\n    slot(group: HTMLElement) {\r\n        return group;\r\n    }\r\n}));"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ModelChangeRecordBase","constructor","init","this","target","changeType","propertyName","oldValue","undefined","newValue","removedIndex","removedItems","ModelNodesList","insertedIndex","insertedItems","sortedIndices","PROPERTY_CHANGE","LIST_REMOVE","LIST_INSERT","LIST_SORT","ModelChangeRecord","items","slice","length","item","index","values","ModelEventBase","type","ModelEventTargetAccessor","setCurrentTarget","event","currentTarget","setTarget","ModelEvent","ModelNodeBase","Map","receiveEvent","callbacks","forEach","callback_i","addEventListener","callback","push","set","removeEventListener","callbackIndex","findIndex","splice","delete","dispatchEvent","super","setParent","parentNode","isCyclicReference","ancestorNode","TypeError","beginChanges","endChanges","getRecords","property","records","record","ModelNodeRecordsAccessor","triggerChange","node","handleRecord","ModelNode","ModelProperty","ModelObjectPropertiesAccessor","getProperty","setProperty","ModelObjectBase","ModelObject","ModelList","item_i","indexOf","sort","compareFunction","indexedItems","map","i","indexedItem_a","indexedItem_b","indexedItem_i","prepend","_items","append","insert","Math","abs","remove","clear","removedItem_i","reference","options","properties","propertiesFilter","childList","subtree","filter","record_i","includes","ModelChangeObserver","WeakMap","observe","references","listener","bind","unobserve","disconnect","camelToTrain","str","replace","toLowerCase","AttributeProperty","String","attributeName","defaultValue","observed","observedAttributes","Reflect","Array","isArray","writable","Boolean","hasAttribute","setAttribute","removeAttribute","val","getAttribute","JSON","parse","stringify","Number","parseFloat","CustomElement","elementCtor","name","customElements","define","QueryProperty","propertyKey","selector","getter","withinShadowRoot","shadowRoot","querySelector","fragment","nodes","document","createDocumentFragment","tagName","attributes","dataset","children","listeners","element","createElement","entries","attributeValue","toggleAttribute","elementDataset","keys","datasetEntry_i","from","name_i","listener_i","reactiveElementsMap","reactiveElementsFinalizationRegistry","FinalizationRegistry","heldValue","model","reactiveElement","reactiveElementsMapEntry","reactiveElementsArray","reactiveElementsPropertyObserver","reactiveElement_i","elementRef","react","deref","WeakRef","register","observerOptions","concat","property_i","Set","reactiveChildElementsMap","reactiveChildElementsFinalizationRegistry","list","reactiveChildElement","reactiveChildrenElementsMapEntry","reactiveChildElementsArray","reactiveChildElementsObserver","range","listLength","reactiveChildElements_i","parentRef","mapping","placeholder","parent","firstChild","childrenCount","removeChild","insertedItemsArray","before","removedCount","createRange","removeEndIndex","setStartBefore","setEndAfter","deleteContents","childrenArray","index_i","reactiveChildElements","reactiveChildElementsMapEntry","areAttributesMatching","referenceAttributeType","referenceAttributeName","referenceAttributeValue","RegExp","test","shadowTemplate","HTMLEMenuItemElementBase","HTMLElement","attachShadow","mode","internals","attachInternals","role","content","cloneNode","attributeChangedCallback","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","connectedCallback","tabIndex","toggle","force","expanded","expand","Event","bubbles","collapse","menu","style","menuStyle","top","itemTop","bottom","itemBottom","left","itemLeft","right","itemRight","getBoundingClientRect","width","menuWidth","height","menuHeight","scrollY","scrollX","window","clientWidth","clientHeight","body","overflowX","overflowY","closestMenu","closest","closestMenuTop","closestMenuLeft","menuComputedStyle","getComputedStyle","paddingTop","paddingBottom","menuPaddingTop","menuPaddingBottom","checked","part","HTMLEMenuItemElement","EMenuItem","assign","label","trigger","slot","tabindex","title","button","checkbox","radio","submenu","ViewBase","setModel","renderLight","renderShadow","refresh","shadow","replaceChildren","light","View","GridModel","rows","initRows","columns","initColumns","getColumnByName","find","column_i","sortByColumn","column","sortOrder","sortorder","sortTest","row_1","row_2","cell_1","extract","cell_2","localeCompare","sign","GridColumnModel","filters","GridRowModel","id","age","GridViewBase","row","setColumnDelegate","delegate","setCellDelegate","getRowElement","getColumnHeaderElement","getColumnCellsElements","querySelectorAll","rel","href","input","selectby","multisectable","contextmenu","click","setSearchFilter","gridElement","row_i","rowElement","hidden","clearSelection","addDisplayFilter","displayFilters","console","log","removeDisplayFilter","filterIndex","searchFilter","some","filter_i","class","resizable","controls","cell","toString","headers","clientX","clientY","targetHead","targetHeader","contextMenu","contextual","columnHeaderElement","maxWidth","cell_i","reduce","max","removeProperty","targetItem","positionContextual","focus","preventScroll","preventDefault","HTMLInputElement","matches","targetColumn","GridView","TreeModel","sortFunction","childItems","flattenItems","item_a","item_b","flatMap","treeItem_i","of","getItemByUri","uri","itemsCount","uriLength","itemUri","itemUriLength","startsWith","charAt","flattenedInsertedItems","insertedItem_i","flattenedRemovedItems","TreeItemList","removedItemsGroups","TreeItemModel","group","list_i","children_i","child_i","level","TreeViewBase","itemContentDelegate","textContent","itemContextMenuDelegate","activeItem","selectedItems","itemsList","count","confirm","treeElement","treeItemElement","dragstart","drop","keydown","focusin","focusout","tree","draggable","posinset","treeitem","dragImageElement","span","targetTree","dataTransfer","selectedElements","selectedCount","selectedUris","element_i","uri_i","_","uris","uri_j","selectedUrisString","join","lastUri","lastItem","dropEffect","setData","dragImage","setDragImage","targetUri","targetItemModel","transferedUris","getData","split","transferedItems","targetType","parentItem","targetParentItem","targetList","sameLabelIndex","item_j","copyWithin","newElements","beginSelection","selected","endSelection","close","relatedTarget","contains","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","toolbar","TreeView","slotsMap","slotsObserver","MutationObserver","mutationsList","mutation","slotReferences","slotRef_i","widget","slottedCallback","widgetsMap","attributesObserver","WidgetFactory","create","Proxy","apply","thisArg","argumentsList","observedSlots","slotName_i","slotName","slotElement","slot_i","slotReference","attributeFilter","attributeOldValue","Error","widgets","slotted","NodeList","Widget","MyTreeItemList","show","hide","display","result","MyTreeItemModel","childCount","visibility","Key","KeyModifier","MouseButton","HTMLEActionElementBase","disabled","enable","disable","HTMLEGridCellElementBase","HTMLEGridCellElement","HTMLEGridRowGroupElementBase","assignedElements","HTMLEGridRowGroupElement","HTMLEMenuItemGroupElementBase","toggleTimeouts","HTMLEMenuItemGroupElement","radios","HTMLEMenuElementBase","createTreeWalker","NodeFilter","SHOW_ELEMENT","activeIndex","x","y","firstItem","walker","currentNode","root","FILTER_ACCEPT","FILTER_SKIP","FILTER_REJECT","lastChild","previousNode","nextNode","async","delay","Promise","resolve","reject","timeout","setTimeout","clearTimeout","then","error","radio_i","nearestItem","stopPropagation","composedPath","target_i","HTMLEMenuElement","catch","intersectsWithMouse","containsRelatedTarget","HTMLEGridRowElementBase","cells","HTMLEGridCellCollection","HTMLEGridRowElement","HTMLEGridBodyElement","namedItem","HTMLEGridRowCollection","HTMLEGridBodyElementBase","HTMLEGridElementBase","selectedCells","selectedRows","to","fromIndex","toIndex","min","position","DOCUMENT_POSITION_FOLLOWING","nextVisibleRow","previousVisibleRow","selectedCell_i","selectedRow_i","activeCell","active","activeRow","cellsWalker","rowsWalker","closestRow","closestRowCells","cellIndex","previousRow","previousRowCells","nextRow","nextRowCells","ctrlKey","shiftKey","targetCell","lastSelectedCell","targetRow","lastSelectedRow","firstRow","firstCell","lastRow","lastCell","previousCell","nextCell","topCell","bottomCell","HTMLEGridHeadElementBase","HTMLEMenuBarElementBase","previousSibling","nextSibling","Element","isExpanded","HTMLEMenuButtonElementBase","HTMLEMenuButtonElement","HTMLEToolBarItemElementBase","labelPart","select","selectValue","pressed","menubutton","HTMLEToolBarItemElement","EToolBarItem","HTMLEToolBarItemGroupElementBase","HTMLEToolBarItemGroupElement","HTMLEToolBarElementBase","previousItem","nextItem","HTMLEToolBarElement","HTMLETabPanelElementBase","HTMLETabPanelElement","HTMLETabElementBase","panel","getElementById","CustomEvent","detail","tab","HTMLETabElement","HTMLETabListElementBase","tabs","focusTabAt","activeTab","activateTab","targetIndex","thisTab","thisTabIndex","HTMLETreeItemGroupElementBase","HTMLETreeItemGroupElement","HTMLETreeItemElementBase","HTMLETreeItemElement","HTMLETreeElementBase","getElementsByTagName","nextVisibleItem","previousVisibleItem","selectedItem_i","dropTargetItem","droptarget","blur","relatedTargetRoot","getRootNode","relatedTargetHost","ShadowRoot","host","HTMLEListItemElementBase","HTMLSpanElement","HTMLEListItemElement","HTMLEListItemGroupElementBase","HTMLEListItemGroupElement","HTMLEListElementBase","lastSelectedItem","HTMLEDraggableElementBase","disconnectedCallback","referee","thisRefIndex","getReference","HTMLEDraggableElement","HTMLEDragzoneElementBase","selectDraggable","selectedDraggables","unselectDraggable","draggables","elem","thisSelectedDraggable","dragged","thisDraggedDraggable","firstIndex","direction","startRangeIndex","endRangeIndex","thisDraggable","HTMLEDragzoneElement","HTMLEDropzoneElementBase","droptest","appendAreaPart","removeDraggables","dragovered","dropIndex","dragzoneId","dragzone","selectedDraggable","HTMLEDropzoneElement","addDraggables","placeholderPart","dataTransferSuccess","newDraggables","insertionPosition","multiple","newDraggable","insertAdjacentElement","appendChild","replaceChild","action","once","predicate","toRemove","atPosition","HTMLEDialogElementBase","handleEvent","cancel","open","HTMLEOptionElementBase","HTMLEOptionElement","HTMLEOptionGroupElementBase","HTMLEOptionGroupElement","HTMLESelectElementBase","selectedOption","option","box","optionsStyle","targetOption","activeOption","previousOption","nextOption","firstOption","lastOption","keyLength","keyCode","charCodeAt","matchingOption","option_i","HTMLESeparatorElementBase","HTMLEHandleElementBase","pointerId","releasePointerCapture","setPointerCapture","targetComputedStyle","movementX","movementY","rectWidth","rectHeight","outerElement","parentElement","outerRectLeft","outerRectRight","outerRectTop","outerRectBottom","getPropertyValue","newLeft","trunc","newTop","HTMLEHeightSashElementBase","rootNode","requestAnimationFrame","growdir","newHeight","computedNewHeight","HTMLEImportElementBase","src","outerHTML","fetch","response","ok","text","statusText","barShadowTemplate","circleShadowTemplate","HTMLELoaderElementBase","promise","finally","commonStyle","barStyle","circleStyle","HTMLEWidthSashElementBase","setWidth","newWidth","menuItemWidget","hasIcon","hasArrow","classList","keyshortcut","add","setKeyShortcut","setChecked","setExpanded","setType","setLabel","setName","setValue","setDisabled","hasChildMenu","childNodes","childNode_i","getMenu","getKeyShortcut","keyshortcutsPart","after","getLabel","getType","types","type_i","typesFeatures","iconPartTemplate","arrowPartTemplate","oldType","iconPart","arrowPart","getValue","getName","getChecked","getDisabled","getExpanded","menubar","setContextual","setPosition","getContextual","menuitem_i","targetMenu","treeItemWidget","setTitle","setDraggable","setSelected","getTitle","setPosInSet","getPosInSet","posInSet","e","setActive","getActive","setDropTarget","getDropTarget","getDraggable","getSelected","setLevel","getLevel","parseInt","setMultiSelectable","getMultiSelectable","closestItem","listItemWidget","toolbarItemWidget","setPressed","getPressed","setOrientation","getOrientation","targetToolbar","targets","pointerMovements","onCaptureFlags","queuedPointerCallbacks","sash","growDir","setControls","setGrowDir","getGrowDir","getControls","sashTarget","pointerMoveCallback","pointerMovement","setHeight","gridCellWidget","setHeaders","getHeaders","gridRowWidget","grid","setSelectBy","getSelectBy","targetGrid","multiselectable","head","scope","header","optionWidget","combobox","targetCombobox","addedNodes","main","gridView","Date","getFullYear","treeModel","treeView","badge","visibilityItem","menuView","TreeMain"],"sourceRoot":""}